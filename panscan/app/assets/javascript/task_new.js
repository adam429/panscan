Opal.queue(function(Opal) {/* Generated by Opal 1.5.0 */
  var self = Opal.top, $nesting = [], $$ = Opal.$r($nesting), nil = Opal.nil, $eqeq = Opal.eqeq, $gvars = Opal.gvars, $rb_plus = Opal.rb_plus, $lambda = Opal.lambda, $send = Opal.send, $def = Opal.def, $hash2 = Opal.hash2, $not = Opal.not, $truthy = Opal.truthy, $rb_minus = Opal.rb_minus, $to_ary = Opal.to_ary, $rb_gt = Opal.rb_gt, $neqeq = Opal.neqeq;
  if ($gvars.document == null) $gvars.document = nil;

  Opal.add_stubs('==,[],href=,location,inner_html=,at_css,+,call,do_update_page,inner_html,Native,get_params,get_page,get_server_task,update_page,!,puts,html=,find,get,ok?,json,update_task_run,show,removeClass,add_class,hide,take_action,[]=,post,each,value,flatten,scan,map,filter,uniq,include?,-,size,join,split,gsub,!=,>,ready,on,do_save,do_run,do_fork,update_params,parse,update_refs,body,meta?,shift?,char,prevent,key,do_fullscreen');
  
  
  $def(self, '$take_action', function $$take_action(json) {
    var self = this, url = nil;
    if ($gvars.$ == null) $gvars.$ = nil;
    if ($gvars.document == null) $gvars.document = nil;

    
    if ($eqeq(json['$[]']("action"), "redirect")) {
      $gvars.$.$location()['$href='](json['$[]']("to"))
    };
    if ($eqeq(json['$[]']("action"), "open")) {
      
      url = json['$[]']("to");
      window.open(url);
    };
    if ($eqeq(json['$[]']("action"), "message")) {
      
      $gvars.document.$at_css("#message")['$inner_html=']($rb_plus(" | Message: ", json['$[]']("message")));
      $gvars.$['$[]']("setTimeout").$call($lambda(function $$1(){var $a;
        if ($gvars.document == null) $gvars.document = nil;

        return ($a = [""], $send($gvars.document.$at_css("#message"), 'inner_html=', $a), $a[$a.length - 1])}, 0), 5000);
      return self.$do_update_page();
    } else {
      return nil
    };
  }, 1);
  
  $def(self, '$get_page', function $$get_page() {
    var self = this, id = nil, tid = nil, status = nil, code = nil, json = nil;
    if ($gvars.document == null) $gvars.document = nil;

    
    id = $gvars.document.$at_css("#id").$inner_html();
    tid = $gvars.document.$at_css("#tid").$inner_html();
    status = $gvars.document.$at_css("#status").$inner_html();
    code = self.$Native(editor.getValue());
    return (json = $hash2(["status", "id", "tid", "code", "params"], {"status": status, "id": id, "tid": tid, "code": code, "params": self.$get_params()}));
  }, 0);
  
  $def(self, '$do_update_page', function $$do_update_page() {
    var self = this, json = nil;

    
    json = self.$get_page();
    return $send(self, 'get_server_task', [json['$[]']("id")], function $$2(task){var self = $$2.$$s == null ? this : $$2.$$s;

      
      
      if (task == null) task = nil;;
      return self.$update_page(task);}, {$$arity: 1, $$s: self});
  }, 0);
  
  $def(self, '$update_page', function $$update_page(json) {
    var $a, self = this, $ret_or_1 = nil;
    if ($gvars.document == null) $gvars.document = nil;
    if ($gvars.display_return == null) $gvars.display_return = nil;

    
    if ($not(($truthy(($ret_or_1 = json['$[]']("status")['$==']("run"))) ? ($ret_or_1) : (json['$[]']("status")['$==']("open"))))) {
      
      self.$puts(json['$[]']("status"));
      self.$puts(json['$[]']("output"));
    };
    $gvars.document.$at_css("#id")['$inner_html='](json['$[]']("id"));
    $gvars.document.$at_css("#tid")['$inner_html='](json['$[]']("tid"));
    $gvars.document.$at_css("#name")['$inner_html='](json['$[]']("name"));
    $gvars.document.$at_css("#run_timestamp")['$inner_html='](json['$[]']("run_timestamp"));
    $gvars.document.$at_css("#schedule_at")['$inner_html='](json['$[]']("schedule_at"));
    $gvars.document.$at_css("#save_timestamp")['$inner_html='](json['$[]']("save_timestamp"));
    $gvars.document.$at_css("#updated_at")['$inner_html='](json['$[]']("updated_at"));
    $gvars.document.$at_css("#status")['$inner_html='](json['$[]']("status"));
    $gvars.document.$at_css("#runner")['$inner_html='](json['$[]']("runner"));
    $gvars.document.$at_css("#output")['$inner_html='](json['$[]']("output"));
    if ($truthy($gvars.display_return)) {
      return ($a = [json['$[]']("return")], $send($$('Element').$find("#return"), 'html=', $a), $a[$a.length - 1])
    } else {
      return nil
    };
  }, 1);
  
  $def(self, '$get_server_task', function $$get_server_task(id) {
    var $yield = $$get_server_task.$$p || nil;

    delete $$get_server_task.$$p;
    return $send($$('HTTP'), 'get', ["/task/json/" + (id)], function $$3(res){
      
      
      if (res == null) res = nil;;
      if ($truthy(res['$ok?']())) {
        return Opal.yield1($yield, res.$json());
      } else {
        return nil
      };}, 1)
  }, 1);
  
  $def(self, '$update_task_run', function $$update_task_run() {
    var self = this, json = nil;

    
    json = self.$get_page();
    if (($eqeq(json['$[]']("status"), "run") || ($eqeq(json['$[]']("status"), "open")))) {
      return $send(self, 'get_server_task', [json['$[]']("id")], function $$4(task){var self = $$4.$$s == null ? this : $$4.$$s;
        if ($gvars.$ == null) $gvars.$ = nil;

        
        
        if (task == null) task = nil;;
        self.$update_page(task);
        return $gvars.$['$[]']("setTimeout").$call($lambda(function $$5(){var self = $$5.$$s == null ? this : $$5.$$s;

          return self.$update_task_run()}, {$$arity: 0, $$s: self}), 1000);}, {$$arity: 1, $$s: self})
    } else {
      return nil
    };
  }, 0);
  
  $def(self, '$do_fullscreen', function $$do_fullscreen() {
        if ($gvars.fullscreen == null) $gvars.fullscreen = nil;

    if ($truthy($gvars.fullscreen)) {
      
      $$('Element')['$[]']("#task_info").$show();
      $$('Element')['$[]']("#run_info").$show();
      $$('Element')['$[]']("#editor").$removeClass("editor-fullscreen");
      $$('Element')['$[]']("#editor").$add_class("editor");
      $gvars.fullscreen = false;
      return ($gvars.display_return = true);
    } else {
      
      $$('Element')['$[]']("#task_info").$hide();
      $$('Element')['$[]']("#run_info").$hide();
      $$('Element')['$[]']("#editor").$removeClass("editor");
      $$('Element')['$[]']("#editor").$add_class("editor-fullscreen");
      $gvars.fullscreen = true;
      return ($gvars.display_return = false);
    }
  }, 0);
  
  $def(self, '$do_run', function $$do_run() {
    var self = this, json = nil;

    
    json = self.$get_page();
    if (($eqeq(json['$[]']("status"), "run") || ($eqeq(json['$[]']("status"), "open")))) {
      return self.$take_action($hash2(["action", "message"], {"action": "message", "message": "task is waiting for run"}))
    } else {
      
      json['$[]=']("return", "");
      json['$[]=']("runner", "");
      json['$[]=']("output", "");
      json['$[]=']("status", "open");
      
            var id = window.setTimeout(function() {}, 0);
            while (id--) { window.clearTimeout(id); }
        ;
      self.$update_page(json);
      return $send($$('HTTP'), 'post', ["/task/run", $hash2(["payload"], {"payload": json})], function $$6(res){var self = $$6.$$s == null ? this : $$6.$$s;
        if ($gvars.$ == null) $gvars.$ = nil;

        
        
        if (res == null) res = nil;;
        if ($truthy(res['$ok?']())) {
          
          self.$take_action(res.$json());
          return $gvars.$['$[]']("setTimeout").$call($lambda(function $$7(){var self = $$7.$$s == null ? this : $$7.$$s;

            return self.$update_task_run()}, {$$arity: 0, $$s: self}), 1000);
        } else {
          return nil
        };}, {$$arity: 1, $$s: self});
    };
  }, 0);
  
  $def(self, '$myalert', function $$myalert(value) {
    
    
    console.log(value);
    return value;
  }, 1);
  
  $def(self, '$do_save', function $$do_save() {
    var self = this;

    return $send($$('HTTP'), 'post', ["/task/save", $hash2(["payload"], {"payload": self.$get_page()})], function $$8(res){var self = $$8.$$s == null ? this : $$8.$$s;

      
      
      if (res == null) res = nil;;
      if ($truthy(res['$ok?']())) {
        
        
            var id = window.setTimeout(function() {}, 0);
            while (id--) { window.clearTimeout(id); }
        ;
        return self.$take_action(res.$json());
      } else {
        return nil
      };}, {$$arity: 1, $$s: self})
  }, 0);
  
  $def(self, '$do_fork', function $$do_fork() {
    var self = this;

    return $send($$('HTTP'), 'post', ["/task/fork", $hash2(["payload"], {"payload": self.$get_page()})], function $$9(res){var self = $$9.$$s == null ? this : $$9.$$s;

      
      
      if (res == null) res = nil;;
      if ($truthy(res['$ok?']())) {
        return self.$take_action(res.$json())
      } else {
        return nil
      };}, {$$arity: 1, $$s: self})
  }, 0);
  
  $def(self, '$get_params', function $$get_params() {
    var ret = nil;
    if ($gvars.params == null) $gvars.params = nil;

    
    ret = $hash2([], {});
    $send($gvars.params, 'each', [], function $$10(param){var $a;
      if ($gvars.document == null) $gvars.document = nil;

      
      
      if (param == null) param = nil;;
      return ($a = [param, $gvars.document.$at_css($rb_plus("#", param)).$value()], $send(ret, '[]=', $a), $a[$a.length - 1]);}, 1);
    return ret;
  }, 0);
  
  $def(self, '$update_refs', function $$update_refs() {
    var $a, self = this, json = nil, code = nil, refs1 = nil, refs2 = nil, refs = nil, refs_html = nil;
    if ($gvars.document == null) $gvars.document = nil;

    
    json = self.$get_page();
    code = json['$[]']("code");
    refs1 = code.$scan(/Task.load\(([\"\'a-zA-Z0-9\-_\/]+)\)/).$flatten();
    refs2 = code.$scan(/Task.run_remote\(([\"\'a-zA-Z0-9\-_\/]+)/).$flatten();
    refs = $send($send($rb_plus(refs1, refs2).$uniq(), 'filter', [], function $$11(x){var $ret_or_1 = nil;

      
      
      if (x == null) x = nil;;
      if ($truthy(($ret_or_1 = ["\"", "'"]['$include?'](x['$[]'](0))))) {
        return ["\"", "'"]['$include?'](x['$[]'](-1))
      } else {
        return $ret_or_1
      };}, 1), 'map', [], function $$12(x){
      
      
      if (x == null) x = nil;;
      return x['$[]'](1, $rb_minus(x.$size(), 2));}, 1);
    refs_html = $send(refs, 'map', [], function $$13(ref){var $a, $b, url = nil, _ = nil;

      
      
      if (ref == null) ref = nil;;
      $b = ref.$split("::"), $a = $to_ary($b), (url = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $b;
      url = url.$gsub(/\//, "%2F");
      return "<li><a href='/task/" + (url) + "'>" + (ref) + "</a></li>";}, 1).$join("\n");
    return ($a = [refs_html], $send($gvars.document.$at_css("#refs"), 'inner_html=', $a), $a[$a.length - 1]);
  }, 0);
  
  $def(self, '$update_params', function $$update_params(init_params) {
    var self = this, json = nil, param_json = nil, code = nil, params = nil, params_html = nil;
    if ($gvars.params == null) $gvars.params = nil;
    if ($gvars.document == null) $gvars.document = nil;

    
    
    if (init_params == null) init_params = nil;;
    json = self.$get_page();
    param_json = json['$[]']("params");
    if ($truthy(init_params)) {
      param_json = init_params
    };
    code = json['$[]']("code");
    params = code.$scan(/(__[a-zA-Z0-9_]+__)/).$flatten();
    params = $send($send(params, 'filter', [], function $$14(x){
      
      
      if (x == null) x = nil;;
      return x['$!=']("__TASK_NAME__");}, 1), 'map', [], function $$15(x){
      
      
      if (x == null) x = nil;;
      return x.$gsub(/^__/, "").$gsub(/__$/, "");}, 1);
    if ($truthy($rb_gt(params.$size(), 0))) {
      $$('Element')['$[]']("#params_box").$show()
    } else {
      $$('Element')['$[]']("#params_box").$hide()
    };
    if ($neqeq(params, $gvars.params)) {
      
      params_html = $send(params, 'map', [], function $$16(param){
        
        
        if (param == null) param = nil;;
        return "<tr><td>" + (param) + "</td><td> = </td><td><input id='" + (param) + "' type='text' name='" + (param) + "' value='" + (param_json['$[]'](param)) + "' ></td></tr>";}, 1).$join("\n");
      params_html = "<table>" + (params_html) + "</table>";
      $gvars.document.$at_css("#params")['$inner_html='](params_html);
      return ($gvars.params = params);
    } else {
      return nil
    };
  }, -1);
  return $send($gvars.document, 'ready', [], function $$17(){var self = $$17.$$s == null ? this : $$17.$$s, init_params = nil, json = nil;
    if ($gvars.document == null) $gvars.document = nil;
    if ($gvars.$ == null) $gvars.$ = nil;

    
    $gvars.params = $hash2([], {});
    $gvars.meta_down = false;
    $gvars.shift_down = false;
    $gvars.fullscreen = false;
    $gvars.display_return = true;
    $send($gvars.document.$at_css("#save"), 'on', ["click"], function $$18(){var self = $$18.$$s == null ? this : $$18.$$s;

      return self.$do_save()}, {$$arity: 0, $$s: self});
    $send($gvars.document.$at_css("#run"), 'on', ["click"], function $$19(){var self = $$19.$$s == null ? this : $$19.$$s;

      return self.$do_run()}, {$$arity: 0, $$s: self});
    $send($gvars.document.$at_css("#fork"), 'on', ["click"], function $$20(){var self = $$20.$$s == null ? this : $$20.$$s;

      return self.$do_fork()}, {$$arity: 0, $$s: self});
    init_params = $gvars.document.$at_css("#init_params").$inner_html();
    json = self.$get_page();
    self.$update_params($$('JSON').$parse(($eqeq(init_params, "") ? ("{}") : (init_params))));
    self.$update_task_run();
    $gvars.$['$[]']("setInterval").$call($lambda(function $$21(){var self = $$21.$$s == null ? this : $$21.$$s;

      
      self.$update_params();
      return self.$update_refs();}, {$$arity: 0, $$s: self}), 1000);
    $send($gvars.document.$body(), 'on', ["keydown"], function $$22(e){var self = $$22.$$s == null ? this : $$22.$$s;

      
      
      if (e == null) e = nil;;
      if ($truthy(e['$meta?']())) {
        $gvars.meta_down = true
      };
      if ($truthy(e['$shift?']())) {
        $gvars.shift_down = true
      };
      if (($truthy(e['$meta?']()) && ($eqeq(e.$char(), "S")))) {
        
        self.$puts("save task");
        self.$do_save();
        e.$prevent();
      };
      if (($truthy(e['$shift?']()) && ($eqeq(e.$key(), "Enter")))) {
        
        self.$puts("run task");
        self.$do_run();
        e.$prevent();
      };
      if ((($truthy(e['$meta?']()) && ($truthy(e['$shift?']()))) && ($eqeq(e.$char(), "F")))) {
        
        self.$do_fullscreen();
        return e.$prevent();
      } else {
        return nil
      };}, {$$arity: 1, $$s: self});
    return $send($gvars.document.$body(), 'on', ["keyup"], function $$23(e){
      
      
      if (e == null) e = nil;;
      if ($truthy(e['$meta?']())) {
        $gvars.meta_down = false
      };
      if ($truthy(e['$shift?']())) {
        return ($gvars.shift_down = false)
      } else {
        return nil
      };}, 1);}, {$$arity: 0, $$s: self});
});

//# sourceMappingURL=task_new.js.map