{"version":3,"sections":[{"offset":{"line":0,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/runtime.js"],"sourcesContent":["(function(global_object) {\n  \"use strict\";\n\n  // @note\n  //   A few conventions for the documentation of this file:\n  //   1. Always use \"//\" (in contrast with \"/**/\")\n  //   2. The syntax used is Yardoc (yardoc.org), which is intended for Ruby (se below)\n  //   3. `@param` and `@return` types should be preceded by `JS.` when referring to\n  //      JavaScript constructors (e.g. `JS.Function`) otherwise Ruby is assumed.\n  //   4. `nil` and `null` being unambiguous refer to the respective\n  //      objects/values in Ruby and JavaScript\n  //   5. This is still WIP :) so please give feedback and suggestions on how\n  //      to improve or for alternative solutions\n  //\n  //   The way the code is digested before going through Yardoc is a secret kept\n  //   in the docs repo (https://github.com/opal/docs/tree/master).\n\n  var console;\n\n  // Detect the global object\n  if (typeof(globalThis) !== 'undefined') { global_object = globalThis; }\n  else if (typeof(global) !== 'undefined') { global_object = global; }\n  else if (typeof(window) !== 'undefined') { global_object = window; }\n\n  // Setup a dummy console object if missing\n  if (typeof(global_object.console) === 'object') {\n    console = global_object.console;\n  } else if (global_object.console == null) {\n    console = global_object.console = {};\n  } else {\n    console = {};\n  }\n\n  if (!('log' in console)) { console.log = function () {}; }\n  if (!('warn' in console)) { console.warn = console.log; }\n\n  if (typeof(global_object.Opal) !== 'undefined') {\n    console.warn('Opal already loaded. Loading twice can cause troubles, please fix your setup.');\n    return global_object.Opal;\n  }\n\n  var nil;\n\n  // The actual class for BasicObject\n  var BasicObject;\n\n  // The actual Object class.\n  // The leading underscore is to avoid confusion with window.Object()\n  var _Object;\n\n  // The actual Module class\n  var Module;\n\n  // The actual Class class\n  var Class;\n\n  // The Opal.Opal class (helpers etc.)\n  var _Opal;\n\n  // The Kernel module\n  var Kernel;\n\n  // The Opal object that is exposed globally\n  var Opal = global_object.Opal = {};\n\n  // This is a useful reference to global object inside ruby files\n  Opal.global = global_object;\n  global_object.Opal = Opal;\n\n  // Configure runtime behavior with regards to require and unsupported features\n  Opal.config = {\n    missing_require_severity: 'error',        // error, warning, ignore\n    unsupported_features_severity: 'warning', // error, warning, ignore\n    experimental_features_severity: 'warning',// warning, ignore\n    enable_stack_trace: true                  // true, false\n  };\n\n  // Minify common function calls\n  var $has_own   = Object.hasOwnProperty;\n  var $bind      = Function.prototype.bind;\n  var $set_proto = Object.setPrototypeOf;\n  var $slice     = Array.prototype.slice;\n  var $splice    = Array.prototype.splice;\n\n  // Nil object id is always 4\n  var nil_id = 4;\n\n  // Generates even sequential numbers greater than 4\n  // (nil_id) to serve as unique ids for ruby objects\n  var unique_id = nil_id;\n\n  // Return next unique id\n  Opal.uid = function() {\n    unique_id += 2;\n    return unique_id;\n  };\n\n  // Retrieve or assign the id of an object\n  Opal.id = function(obj) {\n    if (obj.$$is_number) return (obj * 2)+1;\n    if (obj.$$id != null) {\n      return obj.$$id;\n    }\n    $prop(obj, '$$id', Opal.uid());\n    return obj.$$id;\n  };\n\n  // Globals table\n  Opal.gvars = {};\n\n  // Exit function, this should be replaced by platform specific implementation\n  // (See nodejs and chrome for examples)\n  Opal.exit = function(status) { if (Opal.gvars.DEBUG) console.log('Exited with status '+status); };\n\n  // keeps track of exceptions for $!\n  Opal.exceptions = [];\n\n  // @private\n  // Pops an exception from the stack and updates `$!`.\n  Opal.pop_exception = function() {\n    var exception = Opal.exceptions.pop();\n    if (exception) {\n      Opal.gvars[\"!\"] = exception;\n      Opal.gvars[\"@\"] = exception.$backtrace();\n    }\n    else {\n      Opal.gvars[\"!\"] = Opal.gvars[\"@\"] = nil;\n    }\n  };\n\n  function $prop(object, name, initialValue) {\n    if (typeof(object) === \"string\") {\n      // Special case for:\n      //   s = \"string\"\n      //   def s.m; end\n      // String class is the only class that:\n      // + compiles to JS primitive\n      // + allows method definition directly on instances\n      // numbers, true, false and null do not support it.\n      object[name] = initialValue;\n    } else {\n      Object.defineProperty(object, name, {\n        value: initialValue,\n        enumerable: false,\n        configurable: true,\n        writable: true\n      });\n    }\n  }\n\n  Opal.prop = $prop;\n\n  // @deprecated\n  Opal.defineProperty = Opal.prop;\n\n  Opal.slice = $slice;\n\n\n  // Helpers\n  // -----\n\n  var $truthy = Opal.truthy = function(val) {\n    return false !== val && nil !== val && undefined !== val && null !== val && (!(val instanceof Boolean) || true === val.valueOf());\n  };\n\n  Opal.falsy = function(val) {\n    return !$truthy(val);\n  };\n\n  Opal.type_error = function(object, type, method, coerced) {\n    object = object.$$class;\n\n    if (coerced && method) {\n      coerced = coerced.$$class;\n      return Opal.TypeError.$new(\n        \"can't convert \" + object + \" into \" + type +\n        \" (\" + object + \"#\" + method + \" gives \" + coerced + \")\"\n      )\n    } else {\n      return Opal.TypeError.$new(\n        \"no implicit conversion of \" + object + \" into \" + type\n      )\n    }\n  };\n\n  Opal.coerce_to = function(object, type, method, args) {\n    if (type['$==='](object)) return object;\n\n    if (!object['$respond_to?'](method)) {\n      throw Opal.type_error(object, type);\n    }\n\n    if (args == null) args = [];\n    return Opal.send(object, method, args);\n  }\n\n  Opal.respond_to = function(obj, jsid, include_all) {\n    if (obj == null || !obj.$$class) return false;\n    include_all = !!include_all;\n    var body = obj[jsid];\n\n    if (obj['$respond_to?'].$$pristine) {\n      if (typeof(body) === \"function\" && !body.$$stub) {\n        return true;\n      }\n      if (!obj['$respond_to_missing?'].$$pristine) {\n        return Opal.send(obj, obj['$respond_to_missing?'], [jsid.substr(1), include_all]);\n      }\n    } else {\n      return Opal.send(obj, obj['$respond_to?'], [jsid.substr(1), include_all]);\n    }\n  }\n\n  // TracePoint support\n  // ------------------\n  //\n  // Support for `TracePoint.trace(:class) do ... end`\n  Opal.trace_class = false;\n  Opal.tracers_for_class = [];\n\n  function invoke_tracers_for_class(klass_or_module) {\n    var i, ii, tracer;\n\n    for(i = 0, ii = Opal.tracers_for_class.length; i < ii; i++) {\n      tracer = Opal.tracers_for_class[i];\n      tracer.trace_object = klass_or_module;\n      tracer.block.$call(tracer);\n    }\n  }\n\n  function handle_autoload(cref, name) {\n    if (!cref.$$autoload[name].loaded) {\n      cref.$$autoload[name].loaded = true;\n      try {\n        Opal.Kernel.$require(cref.$$autoload[name].path);\n      } catch (e) {\n        cref.$$autoload[name].exception = e;\n        throw e;\n      }\n      cref.$$autoload[name].required = true;\n      if (cref.$$const[name] != null) {\n        cref.$$autoload[name].success = true;\n        return cref.$$const[name];\n      }\n    } else if (cref.$$autoload[name].loaded && !cref.$$autoload[name].required) {\n      if (cref.$$autoload[name].exception) { throw cref.$$autoload[name].exception; }\n    }\n  }\n\n  // Constants\n  // ---------\n  //\n  // For future reference:\n  // - The Rails autoloading guide (http://guides.rubyonrails.org/v5.0/autoloading_and_reloading_constants.html)\n  // - @ConradIrwin's 2012 post on “Everything you ever wanted to know about constant lookup in Ruby” (http://cirw.in/blog/constant-lookup.html)\n  //\n  // Legend of MRI concepts/names:\n  // - constant reference (cref): the module/class that acts as a namespace\n  // - nesting: the namespaces wrapping the current scope, e.g. nesting inside\n  //            `module A; module B::C; end; end` is `[B::C, A]`\n\n  // Get the constant in the scope of the current cref\n  function const_get_name(cref, name) {\n    if (cref) {\n      if (cref.$$const[name] != null) { return cref.$$const[name]; }\n      if (cref.$$autoload && cref.$$autoload[name]) {\n        return handle_autoload(cref, name);\n      }\n    }\n  }\n\n  // Walk up the nesting array looking for the constant\n  function const_lookup_nesting(nesting, name) {\n    var i, ii, constant;\n\n    if (nesting.length === 0) return;\n\n    // If the nesting is not empty the constant is looked up in its elements\n    // and in order. The ancestors of those elements are ignored.\n    for (i = 0, ii = nesting.length; i < ii; i++) {\n      constant = nesting[i].$$const[name];\n      if (constant != null) {\n        return constant;\n      } else if (nesting[i].$$autoload && nesting[i].$$autoload[name]) {\n        return handle_autoload(nesting[i], name);\n      }\n    }\n  }\n\n  // Walk up the ancestors chain looking for the constant\n  function const_lookup_ancestors(cref, name) {\n    var i, ii, ancestors;\n\n    if (cref == null) return;\n\n    ancestors = Opal.ancestors(cref);\n\n    for (i = 0, ii = ancestors.length; i < ii; i++) {\n      if (ancestors[i].$$const && $has_own.call(ancestors[i].$$const, name)) {\n        return ancestors[i].$$const[name];\n      } else if (ancestors[i].$$autoload && ancestors[i].$$autoload[name]) {\n        return handle_autoload(ancestors[i], name);\n      }\n    }\n  }\n\n  // Walk up Object's ancestors chain looking for the constant,\n  // but only if cref is missing or a module.\n  function const_lookup_Object(cref, name) {\n    if (cref == null || cref.$$is_module) {\n      return const_lookup_ancestors(_Object, name);\n    }\n  }\n\n  // Call const_missing if nothing else worked\n  function const_missing(cref, name, skip_missing) {\n    if (!skip_missing) {\n      return (cref || _Object).$const_missing(name);\n    }\n  }\n\n  // Look for the constant just in the current cref or call `#const_missing`\n  Opal.const_get_local = function(cref, name, skip_missing) {\n    var result;\n\n    if (cref == null) return;\n\n    if (cref === '::') cref = _Object;\n\n    if (!cref.$$is_module && !cref.$$is_class) {\n      throw new Opal.TypeError(cref.toString() + \" is not a class/module\");\n    }\n\n    result = const_get_name(cref, name);              if (result != null) return result;\n    result = const_missing(cref, name, skip_missing); if (result != null) return result;\n  };\n\n  // Look for the constant relative to a cref or call `#const_missing` (when the\n  // constant is prefixed by `::`).\n  Opal.const_get_qualified = function(cref, name, skip_missing) {\n    var result, cache, cached, current_version = Opal.const_cache_version;\n\n    if (name == null) {\n      // A shortpath for calls like ::String => $$$(\"String\")\n      result = const_get_name(_Object, cref);\n\n      if (result != null) return result;\n      return Opal.const_get_qualified(_Object, cref, skip_missing);\n    }\n\n    if (cref == null) return;\n\n    if (cref === '::') cref = _Object;\n\n    if (!cref.$$is_module && !cref.$$is_class) {\n      throw new Opal.TypeError(cref.toString() + \" is not a class/module\");\n    }\n\n    if ((cache = cref.$$const_cache) == null) {\n      $prop(cref, '$$const_cache', Object.create(null));\n      cache = cref.$$const_cache;\n    }\n    cached = cache[name];\n\n    if (cached == null || cached[0] !== current_version) {\n      ((result = const_get_name(cref, name))              != null) ||\n      ((result = const_lookup_ancestors(cref, name))      != null);\n      cache[name] = [current_version, result];\n    } else {\n      result = cached[1];\n    }\n\n    return result != null ? result : const_missing(cref, name, skip_missing);\n  };\n\n  // Initialize the top level constant cache generation counter\n  Opal.const_cache_version = 1;\n\n  // Look for the constant in the open using the current nesting and the nearest\n  // cref ancestors or call `#const_missing` (when the constant has no :: prefix).\n  Opal.const_get_relative = function(nesting, name, skip_missing) {\n    var cref = nesting[0], result, current_version = Opal.const_cache_version, cache, cached;\n\n    if ((cache = nesting.$$const_cache) == null) {\n      $prop(nesting, '$$const_cache', Object.create(null));\n      cache = nesting.$$const_cache;\n    }\n    cached = cache[name];\n\n    if (cached == null || cached[0] !== current_version) {\n      ((result = const_get_name(cref, name))              != null) ||\n      ((result = const_lookup_nesting(nesting, name))     != null) ||\n      ((result = const_lookup_ancestors(cref, name))      != null) ||\n      ((result = const_lookup_Object(cref, name))         != null);\n\n      cache[name] = [current_version, result];\n    } else {\n      result = cached[1];\n    }\n\n    return result != null ? result : const_missing(cref, name, skip_missing);\n  };\n\n  // Register the constant on a cref and opportunistically set the name of\n  // unnamed classes/modules.\n  function $const_set(cref, name, value) {\n    if (cref == null || cref === '::') cref = _Object;\n\n    if (value.$$is_a_module) {\n      if (value.$$name == null || value.$$name === nil) value.$$name = name;\n      if (value.$$base_module == null) value.$$base_module = cref;\n    }\n\n    cref.$$const = (cref.$$const || Object.create(null));\n    cref.$$const[name] = value;\n\n    // Add a short helper to navigate constants manually.\n    // @example\n    //   Opal.$$.Regexp.$$.IGNORECASE\n    cref.$$ = cref.$$const;\n\n    Opal.const_cache_version++;\n\n    // Expose top level constants onto the Opal object\n    if (cref === _Object) Opal[name] = value;\n\n    // Name new class directly onto current scope (Opal.Foo.Baz = klass)\n    $prop(cref, name, value);\n\n    return value;\n  };\n\n  Opal.const_set = $const_set;\n\n  // Get all the constants reachable from a given cref, by default will include\n  // inherited constants.\n  Opal.constants = function(cref, inherit) {\n    if (inherit == null) inherit = true;\n\n    var module, modules = [cref], i, ii, constants = {}, constant;\n\n    if (inherit) modules = modules.concat(Opal.ancestors(cref));\n    if (inherit && cref.$$is_module) modules = modules.concat([Opal.Object]).concat(Opal.ancestors(Opal.Object));\n\n    for (i = 0, ii = modules.length; i < ii; i++) {\n      module = modules[i];\n\n      // Do not show Objects constants unless we're querying Object itself\n      if (cref !== _Object && module == _Object) break;\n\n      for (constant in module.$$const) {\n        constants[constant] = true;\n      }\n      if (module.$$autoload) {\n        for (constant in module.$$autoload) {\n          constants[constant] = true;\n        }\n      }\n    }\n\n    return Object.keys(constants);\n  };\n\n  // Remove a constant from a cref.\n  Opal.const_remove = function(cref, name) {\n    Opal.const_cache_version++;\n\n    if (cref.$$const[name] != null) {\n      var old = cref.$$const[name];\n      delete cref.$$const[name];\n      return old;\n    }\n\n    if (cref.$$autoload && cref.$$autoload[name]) {\n      delete cref.$$autoload[name];\n      return nil;\n    }\n\n    throw Opal.NameError.$new(\"constant \"+cref+\"::\"+cref.$name()+\" not defined\");\n  };\n\n  // Generates a function that is a curried const_get_relative.\n  Opal.const_get_relative_factory = function(nesting) {\n    return function(name, skip_missing) {\n      return Opal.$$(nesting, name, skip_missing);\n    }\n  }\n\n  // Setup some shortcuts to reduce compiled size\n  Opal.$$ = Opal.const_get_relative;\n  Opal.$$$ = Opal.const_get_qualified;\n  Opal.$r = Opal.const_get_relative_factory;\n\n  // Modules & Classes\n  // -----------------\n\n  // A `class Foo; end` expression in ruby is compiled to call this runtime\n  // method which either returns an existing class of the given name, or creates\n  // a new class in the given `base` scope.\n  //\n  // If a constant with the given name exists, then we check to make sure that\n  // it is a class and also that the superclasses match. If either of these\n  // fail, then we raise a `TypeError`. Note, `superclass` may be null if one\n  // was not specified in the ruby code.\n  //\n  // We pass a constructor to this method of the form `function ClassName() {}`\n  // simply so that classes show up with nicely formatted names inside debuggers\n  // in the web browser (or node/sprockets).\n  //\n  // The `scope` is the current `self` value where the class is being created\n  // from. We use this to get the scope for where the class should be created.\n  // If `scope` is an object (not a class/module), we simple get its class and\n  // use that as the scope instead.\n  //\n  // @param scope        [Object] where the class is being created\n  // @param superclass   [Class,null] superclass of the new class (may be null)\n  // @param singleton    [Boolean,null] a true value denotes we want to allocate\n  //                                    a singleton\n  //\n  // @return new [Class]  or existing ruby class\n  //\n  Opal.allocate_class = function(name, superclass, singleton) {\n    var klass, constructor;\n\n    if (superclass != null && superclass.$$bridge) {\n      // Inheritance from bridged classes requires\n      // calling original JS constructors\n      constructor = function() {\n        var args = $slice.call(arguments),\n            self = new ($bind.apply(superclass.$$constructor, [null].concat(args)))();\n\n        // and replacing a __proto__ manually\n        $set_proto(self, klass.$$prototype);\n        return self;\n      }\n    } else {\n      constructor = function(){};\n    }\n\n    if (name && name !== nil) {\n      $prop(constructor, 'displayName', '::'+name);\n    }\n\n    klass = constructor;\n\n    $prop(klass, '$$name', name);\n    $prop(klass, '$$constructor', constructor);\n    $prop(klass, '$$prototype', constructor.prototype);\n    $prop(klass, '$$const', {});\n    $prop(klass, '$$is_class', true);\n    $prop(klass, '$$is_a_module', true);\n    $prop(klass, '$$super', superclass);\n    $prop(klass, '$$cvars', {});\n    $prop(klass, '$$own_included_modules', []);\n    $prop(klass, '$$own_prepended_modules', []);\n    $prop(klass, '$$ancestors', []);\n    $prop(klass, '$$ancestors_cache_version', null);\n    $prop(klass, '$$subclasses', []);\n\n    $prop(klass.$$prototype, '$$class', klass);\n\n    // By default if there are no singleton class methods\n    // __proto__ is Class.prototype\n    // Later singleton methods generate a singleton_class\n    // and inject it into ancestors chain\n    if (Opal.Class) {\n      $set_proto(klass, Opal.Class.prototype);\n    }\n\n    if (superclass != null) {\n      $set_proto(klass.$$prototype, superclass.$$prototype);\n\n      if (singleton !== true) {\n        // Let's not forbid GC from cleaning up our\n        // subclasses.\n        if (typeof WeakRef !== 'undefined') {\n          // First, let's clean up our array from empty objects.\n          var i, subclass, rebuilt_subclasses = [];\n          for (i = 0; i < superclass.$$subclasses.length; i++) {\n            subclass = superclass.$$subclasses[i];\n            if (subclass.deref() !== undefined) {\n              rebuilt_subclasses.push(subclass);\n            }\n          }\n          // Now, let's add our class.\n          rebuilt_subclasses.push(new WeakRef(klass));\n          superclass.$$subclasses = rebuilt_subclasses;\n        }\n        else {\n          superclass.$$subclasses.push(klass);\n        }\n      }\n\n      if (superclass.$$meta) {\n        // If superclass has metaclass then we have explicitely inherit it.\n        Opal.build_class_singleton_class(klass);\n      }\n    }\n\n    return klass;\n  };\n\n\n  function find_existing_class(scope, name) {\n    // Try to find the class in the current scope\n    var klass = const_get_name(scope, name);\n\n    // If the class exists in the scope, then we must use that\n    if (klass) {\n      // Make sure the existing constant is a class, or raise error\n      if (!klass.$$is_class) {\n        throw Opal.TypeError.$new(name + \" is not a class\");\n      }\n\n      return klass;\n    }\n  }\n\n  function ensureSuperclassMatch(klass, superclass) {\n    if (klass.$$super !== superclass) {\n      throw Opal.TypeError.$new(\"superclass mismatch for class \" + klass.$$name);\n    }\n  }\n\n  Opal.klass = function(scope, superclass, name) {\n    var bridged;\n\n    if (scope == null || scope == '::') {\n      // Global scope\n      scope = _Object;\n    } else if (!scope.$$is_class && !scope.$$is_module) {\n      // Scope is an object, use its class\n      scope = scope.$$class;\n    }\n\n    // If the superclass is not an Opal-generated class then we're bridging a native JS class\n    if (\n      superclass != null && (!superclass.hasOwnProperty || (\n        superclass.hasOwnProperty && !superclass.hasOwnProperty('$$is_class')\n      ))\n    ) {\n      if (superclass.constructor && superclass.constructor.name == \"Function\") {\n        bridged = superclass;\n        superclass = _Object;\n      } else {\n        throw Opal.TypeError.$new(\"superclass must be a Class (\" + (\n          (superclass.constructor && (superclass.constructor.name || superclass.constructor.$$name)) ||\n          typeof(superclass)\n        ) + \" given)\");\n      }\n    }\n\n    var klass = find_existing_class(scope, name);\n\n    if (klass) {\n      if (superclass) {\n        // Make sure existing class has same superclass\n        ensureSuperclassMatch(klass, superclass);\n      }\n\n      if (Opal.trace_class) { invoke_tracers_for_class(klass); }\n\n      return klass;\n    }\n\n    // Class doesn't exist, create a new one with given superclass...\n\n    // Not specifying a superclass means we can assume it to be Object\n    if (superclass == null) {\n      superclass = _Object;\n    }\n\n    // Create the class object (instance of Class)\n    klass = Opal.allocate_class(name, superclass);\n    $const_set(scope, name, klass);\n\n    // Call .inherited() hook with new class on the superclass\n    if (superclass.$inherited) {\n      superclass.$inherited(klass);\n    }\n\n    if (bridged) {\n      Opal.bridge(bridged, klass);\n    }\n\n    if (Opal.trace_class) { invoke_tracers_for_class(klass); }\n\n    return klass;\n  };\n\n  // Define new module (or return existing module). The given `scope` is basically\n  // the current `self` value the `module` statement was defined in. If this is\n  // a ruby module or class, then it is used, otherwise if the scope is a ruby\n  // object then that objects real ruby class is used (e.g. if the scope is the\n  // main object, then the top level `Object` class is used as the scope).\n  //\n  // If a module of the given name is already defined in the scope, then that\n  // instance is just returned.\n  //\n  // If there is a class of the given name in the scope, then an error is\n  // generated instead (cannot have a class and module of same name in same scope).\n  //\n  // Otherwise, a new module is created in the scope with the given name, and that\n  // new instance is returned back (to be referenced at runtime).\n  //\n  // @param  scope [Module, Class] class or module this definition is inside\n  // @param  id   [String] the name of the new (or existing) module\n  //\n  // @return [Module]\n  Opal.allocate_module = function(name) {\n    var constructor = function(){};\n    if (name) {\n      $prop(constructor, 'displayName', name+'.$$constructor');\n    }\n\n    var module = constructor;\n\n    if (name)\n      $prop(constructor, 'displayName', name+'.constructor');\n\n    $prop(module, '$$name', name);\n    $prop(module, '$$prototype', constructor.prototype);\n    $prop(module, '$$const', {});\n    $prop(module, '$$is_module', true);\n    $prop(module, '$$is_a_module', true);\n    $prop(module, '$$cvars', {});\n    $prop(module, '$$iclasses', []);\n    $prop(module, '$$own_included_modules', []);\n    $prop(module, '$$own_prepended_modules', []);\n    $prop(module, '$$ancestors', [module]);\n    $prop(module, '$$ancestors_cache_version', null);\n\n    $set_proto(module, Opal.Module.prototype);\n\n    return module;\n  };\n\n  function find_existing_module(scope, name) {\n    var module = const_get_name(scope, name);\n    if (module == null && scope === _Object) module = const_lookup_ancestors(_Object, name);\n\n    if (module) {\n      if (!module.$$is_module && module !== _Object) {\n        throw Opal.TypeError.$new(name + \" is not a module\");\n      }\n    }\n\n    return module;\n  }\n\n  Opal.module = function(scope, name) {\n    var module;\n\n    if (scope == null || scope == '::') {\n      // Global scope\n      scope = _Object;\n    } else if (!scope.$$is_class && !scope.$$is_module) {\n      // Scope is an object, use its class\n      scope = scope.$$class;\n    }\n\n    module = find_existing_module(scope, name);\n\n    if (module) {\n\n      if (Opal.trace_class) { invoke_tracers_for_class(module); }\n\n      return module;\n    }\n\n    // Module doesnt exist, create a new one...\n    module = Opal.allocate_module(name);\n    $const_set(scope, name, module);\n\n    if (Opal.trace_class) { invoke_tracers_for_class(module); }\n\n    return module;\n  };\n\n  // Return the singleton class for the passed object.\n  //\n  // If the given object alredy has a singleton class, then it will be stored on\n  // the object as the `$$meta` property. If this exists, then it is simply\n  // returned back.\n  //\n  // Otherwise, a new singleton object for the class or object is created, set on\n  // the object at `$$meta` for future use, and then returned.\n  //\n  // @param object [Object] the ruby object\n  // @return [Class] the singleton class for object\n  Opal.get_singleton_class = function(object) {\n    if (object.$$meta) {\n      return object.$$meta;\n    }\n\n    if (object.hasOwnProperty('$$is_class')) {\n      return Opal.build_class_singleton_class(object);\n    } else if (object.hasOwnProperty('$$is_module')) {\n      return Opal.build_module_singleton_class(object);\n    } else {\n      return Opal.build_object_singleton_class(object);\n    }\n  };\n\n  // Build the singleton class for an existing class. Class object are built\n  // with their singleton class already in the prototype chain and inheriting\n  // from their superclass object (up to `Class` itself).\n  //\n  // NOTE: Actually in MRI a class' singleton class inherits from its\n  // superclass' singleton class which in turn inherits from Class.\n  //\n  // @param klass [Class]\n  // @return [Class]\n  Opal.build_class_singleton_class = function(klass) {\n    var superclass, meta;\n\n    if (klass.$$meta) {\n      return klass.$$meta;\n    }\n\n    // The singleton_class superclass is the singleton_class of its superclass;\n    // but BasicObject has no superclass (its `$$super` is null), thus we\n    // fallback on `Class`.\n    superclass = klass === BasicObject ? Class : Opal.get_singleton_class(klass.$$super);\n\n    meta = Opal.allocate_class(null, superclass, true);\n\n    $prop(meta, '$$is_singleton', true);\n    $prop(meta, '$$singleton_of', klass);\n    $prop(klass, '$$meta', meta);\n    $set_proto(klass, meta.$$prototype);\n    // Restoring ClassName.class\n    $prop(klass, '$$class', Opal.Class);\n\n    return meta;\n  };\n\n  Opal.build_module_singleton_class = function(mod) {\n    if (mod.$$meta) {\n      return mod.$$meta;\n    }\n\n    var meta = Opal.allocate_class(null, Opal.Module, true);\n\n    $prop(meta, '$$is_singleton', true);\n    $prop(meta, '$$singleton_of', mod);\n    $prop(mod, '$$meta', meta);\n    $set_proto(mod, meta.$$prototype);\n    // Restoring ModuleName.class\n    $prop(mod, '$$class', Opal.Module);\n\n    return meta;\n  };\n\n  // Build the singleton class for a Ruby (non class) Object.\n  //\n  // @param object [Object]\n  // @return [Class]\n  Opal.build_object_singleton_class = function(object) {\n    var superclass = object.$$class,\n        klass = Opal.allocate_class(nil, superclass, true);\n\n    $prop(klass, '$$is_singleton', true);\n    $prop(klass, '$$singleton_of', object);\n\n    delete klass.$$prototype.$$class;\n\n    $prop(object, '$$meta', klass);\n\n    $set_proto(object, object.$$meta.$$prototype);\n\n    return klass;\n  };\n\n  Opal.is_method = function(prop) {\n    return (prop[0] === '$' && prop[1] !== '$');\n  };\n\n  Opal.instance_methods = function(mod) {\n    var exclude = [], results = [], ancestors = Opal.ancestors(mod);\n\n    for (var i = 0, l = ancestors.length; i < l; i++) {\n      var ancestor = ancestors[i],\n          proto = ancestor.$$prototype;\n\n      if (proto.hasOwnProperty('$$dummy')) {\n        proto = proto.$$define_methods_on;\n      }\n\n      var props = Object.getOwnPropertyNames(proto);\n\n      for (var j = 0, ll = props.length; j < ll; j++) {\n        var prop = props[j];\n\n        if (Opal.is_method(prop)) {\n          var method_name = prop.slice(1),\n              method = proto[prop];\n\n          if (method.$$stub && exclude.indexOf(method_name) === -1) {\n            exclude.push(method_name);\n          }\n\n          if (!method.$$stub && results.indexOf(method_name) === -1 && exclude.indexOf(method_name) === -1) {\n            results.push(method_name);\n          }\n        }\n      }\n    }\n\n    return results;\n  };\n\n  Opal.own_instance_methods = function(mod) {\n    var results = [],\n        proto = mod.$$prototype;\n\n    if (proto.hasOwnProperty('$$dummy')) {\n      proto = proto.$$define_methods_on;\n    }\n\n    var props = Object.getOwnPropertyNames(proto);\n\n    for (var i = 0, length = props.length; i < length; i++) {\n      var prop = props[i];\n\n      if (Opal.is_method(prop)) {\n        var method = proto[prop];\n\n        if (!method.$$stub) {\n          var method_name = prop.slice(1);\n          results.push(method_name);\n        }\n      }\n    }\n\n    return results;\n  };\n\n  Opal.methods = function(obj) {\n    return Opal.instance_methods(obj.$$meta || obj.$$class);\n  };\n\n  Opal.own_methods = function(obj) {\n    if (obj.$$meta) {\n      return Opal.own_instance_methods(obj.$$meta);\n    }\n    else {\n      return [];\n    }\n  };\n\n  Opal.receiver_methods = function(obj) {\n    var mod = Opal.get_singleton_class(obj);\n    var singleton_methods = Opal.own_instance_methods(mod);\n    var instance_methods = Opal.own_instance_methods(mod.$$super);\n    return singleton_methods.concat(instance_methods);\n  };\n\n  // Returns an object containing all pairs of names/values\n  // for all class variables defined in provided +module+\n  // and its ancestors.\n  //\n  // @param module [Module]\n  // @return [Object]\n  Opal.class_variables = function(module) {\n    var ancestors = Opal.ancestors(module),\n        i, length = ancestors.length,\n        result = {};\n\n    for (i = length - 1; i >= 0; i--) {\n      var ancestor = ancestors[i];\n\n      for (var cvar in ancestor.$$cvars) {\n        result[cvar] = ancestor.$$cvars[cvar];\n      }\n    }\n\n    return result;\n  };\n\n  // Sets class variable with specified +name+ to +value+\n  // in provided +module+\n  //\n  // @param module [Module]\n  // @param name [String]\n  // @param value [Object]\n  Opal.class_variable_set = function(module, name, value) {\n    var ancestors = Opal.ancestors(module),\n        i, length = ancestors.length;\n\n    for (i = length - 2; i >= 0; i--) {\n      var ancestor = ancestors[i];\n\n      if ($has_own.call(ancestor.$$cvars, name)) {\n        ancestor.$$cvars[name] = value;\n        return value;\n      }\n    }\n\n    module.$$cvars[name] = value;\n\n    return value;\n  };\n\n  // Gets class variable with specified +name+ from provided +module+\n  //\n  // @param module [Module]\n  // @param name [String]\n  Opal.class_variable_get = function(module, name, tolerant) {\n    if ($has_own.call(module.$$cvars, name))\n      return module.$$cvars[name];\n\n    var ancestors = Opal.ancestors(module),\n      i, length = ancestors.length;\n\n    for (i = 0; i < length; i++) {\n      var ancestor = ancestors[i];\n\n      if ($has_own.call(ancestor.$$cvars, name)) {\n        return ancestor.$$cvars[name];\n      }\n    }\n\n    if (!tolerant)\n      throw Opal.NameError.$new('uninitialized class variable '+name+' in '+module.$name());\n\n    return nil;\n  }\n\n  function isRoot(proto) {\n    return proto.hasOwnProperty('$$iclass') && proto.hasOwnProperty('$$root');\n  }\n\n  function own_included_modules(module) {\n    var result = [], mod, proto = Object.getPrototypeOf(module.$$prototype);\n\n    while (proto) {\n      if (proto.hasOwnProperty('$$class')) {\n        // superclass\n        break;\n      }\n      mod = protoToModule(proto);\n      if (mod) {\n        result.push(mod);\n      }\n      proto = Object.getPrototypeOf(proto);\n    }\n\n    return result;\n  }\n\n  function own_prepended_modules(module) {\n    var result = [], mod, proto = Object.getPrototypeOf(module.$$prototype);\n\n    if (module.$$prototype.hasOwnProperty('$$dummy')) {\n      while (proto) {\n        if (proto === module.$$prototype.$$define_methods_on) {\n          break;\n        }\n\n        mod = protoToModule(proto);\n        if (mod) {\n          result.push(mod);\n        }\n\n        proto = Object.getPrototypeOf(proto);\n      }\n    }\n\n    return result;\n  }\n\n\n  // The actual inclusion of a module into a class.\n  //\n  // ## Class `$$parent` and `iclass`\n  //\n  // To handle `super` calls, every class has a `$$parent`. This parent is\n  // used to resolve the next class for a super call. A normal class would\n  // have this point to its superclass. However, if a class includes a module\n  // then this would need to take into account the module. The module would\n  // also have to then point its `$$parent` to the actual superclass. We\n  // cannot modify modules like this, because it might be included in more\n  // then one class. To fix this, we actually insert an `iclass` as the class'\n  // `$$parent` which can then point to the superclass. The `iclass` acts as\n  // a proxy to the actual module, so the `super` chain can then search it for\n  // the required method.\n  //\n  // @param module [Module] the module to include\n  // @param includer [Module] the target class to include module into\n  // @return [null]\n  Opal.append_features = function(module, includer) {\n    var module_ancestors = Opal.ancestors(module);\n    var iclasses = [];\n\n    if (module_ancestors.indexOf(includer) !== -1) {\n      throw Opal.ArgumentError.$new('cyclic include detected');\n    }\n\n    for (var i = 0, length = module_ancestors.length; i < length; i++) {\n      var ancestor = module_ancestors[i], iclass = create_iclass(ancestor);\n      $prop(iclass, '$$included', true);\n      iclasses.push(iclass);\n    }\n    var includer_ancestors = Opal.ancestors(includer),\n        chain = chain_iclasses(iclasses),\n        start_chain_after,\n        end_chain_on;\n\n    if (includer_ancestors.indexOf(module) === -1) {\n      // first time include\n\n      // includer -> chain.first -> ...chain... -> chain.last -> includer.parent\n      start_chain_after = includer.$$prototype;\n      end_chain_on = Object.getPrototypeOf(includer.$$prototype);\n    } else {\n      // The module has been already included,\n      // we don't need to put it into the ancestors chain again,\n      // but this module may have new included modules.\n      // If it's true we need to copy them.\n      //\n      // The simplest way is to replace ancestors chain from\n      //          parent\n      //            |\n      //   `module` iclass (has a $$root flag)\n      //            |\n      //   ...previos chain of module.included_modules ...\n      //            |\n      //  \"next ancestor\" (has a $$root flag or is a real class)\n      //\n      // to\n      //          parent\n      //            |\n      //    `module` iclass (has a $$root flag)\n      //            |\n      //   ...regenerated chain of module.included_modules\n      //            |\n      //   \"next ancestor\" (has a $$root flag or is a real class)\n      //\n      // because there are no intermediate classes between `parent` and `next ancestor`.\n      // It doesn't break any prototypes of other objects as we don't change class references.\n\n      var parent = includer.$$prototype, module_iclass = Object.getPrototypeOf(parent);\n\n      while (module_iclass != null) {\n        if (module_iclass.$$module === module && isRoot(module_iclass)) {\n          break;\n        }\n\n        parent = module_iclass;\n        module_iclass = Object.getPrototypeOf(module_iclass);\n      }\n\n      if (module_iclass) {\n        // module has been directly included\n        var next_ancestor = Object.getPrototypeOf(module_iclass);\n\n        // skip non-root iclasses (that were recursively included)\n        while (next_ancestor.hasOwnProperty('$$iclass') && !isRoot(next_ancestor)) {\n          next_ancestor = Object.getPrototypeOf(next_ancestor);\n        }\n\n        start_chain_after = parent;\n        end_chain_on = next_ancestor;\n      } else {\n        // module has not been directly included but was in ancestor chain because it was included by another module\n        // include it directly\n        start_chain_after = includer.$$prototype;\n        end_chain_on = Object.getPrototypeOf(includer.$$prototype);\n      }\n    }\n\n    $set_proto(start_chain_after, chain.first);\n    $set_proto(chain.last, end_chain_on);\n\n    // recalculate own_included_modules cache\n    includer.$$own_included_modules = own_included_modules(includer);\n\n    Opal.const_cache_version++;\n  };\n\n  Opal.prepend_features = function(module, prepender) {\n    // Here we change the ancestors chain from\n    //\n    //   prepender\n    //      |\n    //    parent\n    //\n    // to:\n    //\n    // dummy(prepender)\n    //      |\n    //  iclass(module)\n    //      |\n    // iclass(prepender)\n    //      |\n    //    parent\n    var module_ancestors = Opal.ancestors(module);\n    var iclasses = [];\n\n    if (module_ancestors.indexOf(prepender) !== -1) {\n      throw Opal.ArgumentError.$new('cyclic prepend detected');\n    }\n\n    for (var i = 0, length = module_ancestors.length; i < length; i++) {\n      var ancestor = module_ancestors[i], iclass = create_iclass(ancestor);\n      $prop(iclass, '$$prepended', true);\n      iclasses.push(iclass);\n    }\n\n    var chain = chain_iclasses(iclasses),\n        dummy_prepender = prepender.$$prototype,\n        previous_parent = Object.getPrototypeOf(dummy_prepender),\n        prepender_iclass,\n        start_chain_after,\n        end_chain_on;\n\n    if (dummy_prepender.hasOwnProperty('$$dummy')) {\n      // The module already has some prepended modules\n      // which means that we don't need to make it \"dummy\"\n      prepender_iclass = dummy_prepender.$$define_methods_on;\n    } else {\n      // Making the module \"dummy\"\n      prepender_iclass = create_dummy_iclass(prepender);\n      flush_methods_in(prepender);\n      $prop(dummy_prepender, '$$dummy', true);\n      $prop(dummy_prepender, '$$define_methods_on', prepender_iclass);\n\n      // Converting\n      //   dummy(prepender) -> previous_parent\n      // to\n      //   dummy(prepender) -> iclass(prepender) -> previous_parent\n      $set_proto(dummy_prepender, prepender_iclass);\n      $set_proto(prepender_iclass, previous_parent);\n    }\n\n    var prepender_ancestors = Opal.ancestors(prepender);\n\n    if (prepender_ancestors.indexOf(module) === -1) {\n      // first time prepend\n\n      start_chain_after = dummy_prepender;\n\n      // next $$root or prepender_iclass or non-$$iclass\n      end_chain_on = Object.getPrototypeOf(dummy_prepender);\n      while (end_chain_on != null) {\n        if (\n          end_chain_on.hasOwnProperty('$$root') ||\n          end_chain_on === prepender_iclass ||\n          !end_chain_on.hasOwnProperty('$$iclass')\n        ) {\n          break;\n        }\n\n        end_chain_on = Object.getPrototypeOf(end_chain_on);\n      }\n    } else {\n      throw Opal.RuntimeError.$new(\"Prepending a module multiple times is not supported\");\n    }\n\n    $set_proto(start_chain_after, chain.first);\n    $set_proto(chain.last, end_chain_on);\n\n    // recalculate own_prepended_modules cache\n    prepender.$$own_prepended_modules = own_prepended_modules(prepender);\n\n    Opal.const_cache_version++;\n  };\n\n  function flush_methods_in(module) {\n    var proto = module.$$prototype,\n        props = Object.getOwnPropertyNames(proto);\n\n    for (var i = 0; i < props.length; i++) {\n      var prop = props[i];\n      if (Opal.is_method(prop)) {\n        delete proto[prop];\n      }\n    }\n  }\n\n  function create_iclass(module) {\n    var iclass = create_dummy_iclass(module);\n\n    if (module.$$is_module) {\n      module.$$iclasses.push(iclass);\n    }\n\n    return iclass;\n  }\n\n  // Dummy iclass doesn't receive updates when the module gets a new method.\n  function create_dummy_iclass(module) {\n    var iclass = {},\n        proto = module.$$prototype;\n\n    if (proto.hasOwnProperty('$$dummy')) {\n      proto = proto.$$define_methods_on;\n    }\n\n    var props = Object.getOwnPropertyNames(proto),\n        length = props.length, i;\n\n    for (i = 0; i < length; i++) {\n      var prop = props[i];\n      $prop(iclass, prop, proto[prop]);\n    }\n\n    $prop(iclass, '$$iclass', true);\n    $prop(iclass, '$$module', module);\n\n    return iclass;\n  }\n\n  function chain_iclasses(iclasses) {\n    var length = iclasses.length, first = iclasses[0];\n\n    $prop(first, '$$root', true);\n\n    if (length === 1) {\n      return { first: first, last: first };\n    }\n\n    var previous = first;\n\n    for (var i = 1; i < length; i++) {\n      var current = iclasses[i];\n      $set_proto(previous, current);\n      previous = current;\n    }\n\n\n    return { first: iclasses[0], last: iclasses[length - 1] };\n  }\n\n  // For performance, some core Ruby classes are toll-free bridged to their\n  // native JavaScript counterparts (e.g. a Ruby Array is a JavaScript Array).\n  //\n  // This method is used to setup a native constructor (e.g. Array), to have\n  // its prototype act like a normal Ruby class. Firstly, a new Ruby class is\n  // created using the native constructor so that its prototype is set as the\n  // target for the new class. Note: all bridged classes are set to inherit\n  // from Object.\n  //\n  // Example:\n  //\n  //    Opal.bridge(self, Function);\n  //\n  // @param klass       [Class] the Ruby class to bridge\n  // @param constructor [JS.Function] native JavaScript constructor to use\n  // @return [Class] returns the passed Ruby class\n  //\n  Opal.bridge = function(native_klass, klass) {\n    if (native_klass.hasOwnProperty('$$bridge')) {\n      throw Opal.ArgumentError.$new(\"already bridged\");\n    }\n\n    // constructor is a JS function with a prototype chain like:\n    // - constructor\n    //   - super\n    //\n    // What we need to do is to inject our class (with its prototype chain)\n    // between constructor and super. For example, after injecting ::Object\n    // into JS String we get:\n    //\n    // - constructor (window.String)\n    //   - Opal.Object\n    //     - Opal.Kernel\n    //       - Opal.BasicObject\n    //         - super (window.Object)\n    //           - null\n    //\n    $prop(native_klass, '$$bridge', klass);\n    $set_proto(native_klass.prototype, (klass.$$super || Opal.Object).$$prototype);\n    $prop(klass, '$$prototype', native_klass.prototype);\n\n    $prop(klass.$$prototype, '$$class', klass);\n    $prop(klass, '$$constructor', native_klass);\n    $prop(klass, '$$bridge', true);\n  };\n\n  function protoToModule(proto) {\n    if (proto.hasOwnProperty('$$dummy')) {\n      return;\n    } else if (proto.hasOwnProperty('$$iclass')) {\n      return proto.$$module;\n    } else if (proto.hasOwnProperty('$$class')) {\n      return proto.$$class;\n    }\n  }\n\n  function own_ancestors(module) {\n    return module.$$own_prepended_modules.concat([module]).concat(module.$$own_included_modules);\n  }\n\n  // The Array of ancestors for a given module/class\n  Opal.ancestors = function(module) {\n    if (!module) { return []; }\n\n    if (module.$$ancestors_cache_version === Opal.const_cache_version) {\n      return module.$$ancestors;\n    }\n\n    var result = [], i, mods, length;\n\n    for (i = 0, mods = own_ancestors(module), length = mods.length; i < length; i++) {\n      result.push(mods[i]);\n    }\n\n    if (module.$$super) {\n      for (i = 0, mods = Opal.ancestors(module.$$super), length = mods.length; i < length; i++) {\n        result.push(mods[i]);\n      }\n    }\n\n    module.$$ancestors_cache_version = Opal.const_cache_version;\n    module.$$ancestors = result;\n\n    return result;\n  };\n\n  Opal.included_modules = function(module) {\n    var result = [], mod = null, proto = Object.getPrototypeOf(module.$$prototype);\n\n    for (; proto && Object.getPrototypeOf(proto); proto = Object.getPrototypeOf(proto)) {\n      mod = protoToModule(proto);\n      if (mod && mod.$$is_module && proto.$$iclass && proto.$$included) {\n        result.push(mod);\n      }\n    }\n\n    return result;\n  };\n\n\n  // Method Missing\n  // --------------\n\n  // Methods stubs are used to facilitate method_missing in opal. A stub is a\n  // placeholder function which just calls `method_missing` on the receiver.\n  // If no method with the given name is actually defined on an object, then it\n  // is obvious to say that the stub will be called instead, and then in turn\n  // method_missing will be called.\n  //\n  // When a file in ruby gets compiled to javascript, it includes a call to\n  // this function which adds stubs for every method name in the compiled file.\n  // It should then be safe to assume that method_missing will work for any\n  // method call detected.\n  //\n  // Method stubs are added to the BasicObject prototype, which every other\n  // ruby object inherits, so all objects should handle method missing. A stub\n  // is only added if the given property name (method name) is not already\n  // defined.\n  //\n  // Note: all ruby methods have a `$` prefix in javascript, so all stubs will\n  // have this prefix as well (to make this method more performant).\n  //\n  //    Opal.add_stubs(\"foo,bar,baz=\");\n  //\n  // All stub functions will have a private `$$stub` property set to true so\n  // that other internal methods can detect if a method is just a stub or not.\n  // `Kernel#respond_to?` uses this property to detect a methods presence.\n  //\n  // @param stubs [Array] an array of method stubs to add\n  // @return [undefined]\n  Opal.add_stubs = function(stubs) {\n    var proto = Opal.BasicObject.$$prototype;\n    var stub, existing_method;\n    stubs = stubs.split(',');\n\n    for (var i = 0, length = stubs.length; i < length; i++) {\n      stub = '$'+stubs[i], existing_method = proto[stub];\n\n      if (existing_method == null || existing_method.$$stub) {\n        Opal.add_stub_for(proto, stub);\n      }\n    }\n  };\n\n  // Add a method_missing stub function to the given prototype for the\n  // given name.\n  //\n  // @param prototype [Prototype] the target prototype\n  // @param stub [String] stub name to add (e.g. \"$foo\")\n  // @return [undefined]\n  Opal.add_stub_for = function(prototype, stub) {\n    // Opal.stub_for(stub) is the method_missing_stub\n    $prop(prototype, stub, Opal.stub_for(stub));\n  };\n\n  // Generate the method_missing stub for a given method name.\n  //\n  // @param method_name [String] The js-name of the method to stub (e.g. \"$foo\")\n  // @return [undefined]\n  Opal.stub_for = function(method_name) {\n\n    function method_missing_stub() {\n      // Copy any given block onto the method_missing dispatcher\n      this.$method_missing.$$p = method_missing_stub.$$p;\n\n      // Set block property to null ready for the next call (stop false-positives)\n      delete method_missing_stub.$$p;\n\n      // call method missing with correct args (remove '$' prefix on method name)\n      var args_ary = new Array(arguments.length);\n      for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = arguments[i]; }\n\n      return this.$method_missing.apply(this, [method_name.slice(1)].concat(args_ary));\n    }\n\n    method_missing_stub.$$stub = true;\n\n    return method_missing_stub;\n  };\n\n\n  // Methods\n  // -------\n\n  // Arity count error dispatcher for methods\n  //\n  // @param actual [Fixnum] number of arguments given to method\n  // @param expected [Fixnum] expected number of arguments\n  // @param object [Object] owner of the method +meth+\n  // @param meth [String] method name that got wrong number of arguments\n  // @raise [ArgumentError]\n  Opal.ac = function(actual, expected, object, meth) {\n    var inspect = '';\n    if (object.$$is_a_module) {\n      inspect += object.$$name + '.';\n    }\n    else {\n      inspect += object.$$class.$$name + '#';\n    }\n    inspect += meth;\n\n    throw Opal.ArgumentError.$new('[' + inspect + '] wrong number of arguments (given ' + actual + ', expected ' + expected + ')');\n  };\n\n  // Arity count error dispatcher for blocks\n  //\n  // @param actual [Fixnum] number of arguments given to block\n  // @param expected [Fixnum] expected number of arguments\n  // @param context [Object] context of the block definition\n  // @raise [ArgumentError]\n  Opal.block_ac = function(actual, expected, context) {\n    var inspect = \"`block in \" + context + \"'\";\n\n    throw Opal.ArgumentError.$new(inspect + ': wrong number of arguments (given ' + actual + ', expected ' + expected + ')');\n  };\n\n  // Super dispatcher\n  Opal.find_super = function(obj, mid, current_func, defcheck, allow_stubs) {\n    var jsid = '$' + mid, ancestors, super_method;\n\n    if (obj.hasOwnProperty('$$meta')) {\n      ancestors = Opal.ancestors(obj.$$meta);\n    } else {\n      ancestors = Opal.ancestors(obj.$$class);\n    }\n\n    var current_index = ancestors.indexOf(current_func.$$owner);\n\n    for (var i = current_index + 1; i < ancestors.length; i++) {\n      var ancestor = ancestors[i],\n          proto = ancestor.$$prototype;\n\n      if (proto.hasOwnProperty('$$dummy')) {\n        proto = proto.$$define_methods_on;\n      }\n\n      if (proto.hasOwnProperty(jsid)) {\n        super_method = proto[jsid];\n        break;\n      }\n    }\n\n    if (!defcheck && super_method && super_method.$$stub && obj.$method_missing.$$pristine) {\n      // method_missing hasn't been explicitly defined\n      throw Opal.NoMethodError.$new('super: no superclass method `'+mid+\"' for \"+obj, mid);\n    }\n\n    return (super_method.$$stub && !allow_stubs) ? null : super_method;\n  };\n\n  // Iter dispatcher for super in a block\n  Opal.find_block_super = function(obj, jsid, current_func, defcheck, implicit) {\n    var call_jsid = jsid;\n\n    if (!current_func) {\n      throw Opal.RuntimeError.$new(\"super called outside of method\");\n    }\n\n    if (implicit && current_func.$$define_meth) {\n      throw Opal.RuntimeError.$new(\"implicit argument passing of super from method defined by define_method() is not supported. Specify all arguments explicitly\");\n    }\n\n    if (current_func.$$def) {\n      call_jsid = current_func.$$jsid;\n    }\n\n    return Opal.find_super(obj, call_jsid, current_func, defcheck);\n  };\n\n  // @deprecated\n  Opal.find_super_dispatcher = Opal.find_super;\n\n  // @deprecated\n  Opal.find_iter_super_dispatcher = Opal.find_block_super;\n\n  // Used to return as an expression. Sometimes, we can't simply return from\n  // a javascript function as if we were a method, as the return is used as\n  // an expression, or even inside a block which must \"return\" to the outer\n  // method. This helper simply throws an error which is then caught by the\n  // method. This approach is expensive, so it is only used when absolutely\n  // needed.\n  //\n  Opal.ret = function(val) {\n    Opal.returner.$v = val;\n    throw Opal.returner;\n  };\n\n  // Used to break out of a block.\n  Opal.brk = function(val, breaker) {\n    breaker.$v = val;\n    throw breaker;\n  };\n\n  // Builds a new unique breaker, this is to avoid multiple nested breaks to get\n  // in the way of each other.\n  Opal.new_brk = function() {\n    return new Error('unexpected break');\n  };\n\n  // handles yield calls for 1 yielded arg\n  Opal.yield1 = function(block, arg) {\n    if (typeof(block) !== \"function\") {\n      throw Opal.LocalJumpError.$new(\"no block given\");\n    }\n\n    var has_mlhs = block.$$has_top_level_mlhs_arg,\n        has_trailing_comma = block.$$has_trailing_comma_in_args;\n\n    if (block.length > 1 || ((has_mlhs || has_trailing_comma) && block.length === 1)) {\n      arg = Opal.to_ary(arg);\n    }\n\n    if ((block.length > 1 || (has_trailing_comma && block.length === 1)) && arg.$$is_array) {\n      return block.apply(null, arg);\n    }\n    else {\n      return block(arg);\n    }\n  };\n\n  // handles yield for > 1 yielded arg\n  Opal.yieldX = function(block, args) {\n    if (typeof(block) !== \"function\") {\n      throw Opal.LocalJumpError.$new(\"no block given\");\n    }\n\n    if (block.length > 1 && args.length === 1) {\n      if (args[0].$$is_array) {\n        return block.apply(null, args[0]);\n      }\n    }\n\n    if (!args.$$is_array) {\n      var args_ary = new Array(args.length);\n      for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = args[i]; }\n\n      return block.apply(null, args_ary);\n    }\n\n    return block.apply(null, args);\n  };\n\n  // Finds the corresponding exception match in candidates.  Each candidate can\n  // be a value, or an array of values.  Returns null if not found.\n  Opal.rescue = function(exception, candidates) {\n    for (var i = 0; i < candidates.length; i++) {\n      var candidate = candidates[i];\n\n      if (candidate.$$is_array) {\n        var result = Opal.rescue(exception, candidate);\n\n        if (result) {\n          return result;\n        }\n      }\n      else if (candidate === Opal.JS.Error) {\n        return candidate;\n      }\n      else if (candidate['$==='](exception)) {\n        return candidate;\n      }\n    }\n\n    return null;\n  };\n\n  Opal.is_a = function(object, klass) {\n    if (klass != null && object.$$meta === klass || object.$$class === klass) {\n      return true;\n    }\n\n    if (object.$$is_number && klass.$$is_number_class) {\n      return (klass.$$is_integer_class) ? (object % 1) === 0 : true;\n    }\n\n    var i, length, ancestors = Opal.ancestors(object.$$is_class ? Opal.get_singleton_class(object) : (object.$$meta || object.$$class));\n\n    for (i = 0, length = ancestors.length; i < length; i++) {\n      if (ancestors[i] === klass) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  // Helpers for extracting kwsplats\n  // Used for: { **h }\n  Opal.to_hash = function(value) {\n    if (value.$$is_hash) {\n      return value;\n    }\n    else if (value['$respond_to?']('to_hash', true)) {\n      var hash = value.$to_hash();\n      if (hash.$$is_hash) {\n        return hash;\n      }\n      else {\n        throw Opal.TypeError.$new(\"Can't convert \" + value.$$class +\n          \" to Hash (\" + value.$$class + \"#to_hash gives \" + hash.$$class + \")\");\n      }\n    }\n    else {\n      throw Opal.TypeError.$new(\"no implicit conversion of \" + value.$$class + \" into Hash\");\n    }\n  };\n\n  // Helpers for implementing multiple assignment\n  // Our code for extracting the values and assigning them only works if the\n  // return value is a JS array.\n  // So if we get an Array subclass, extract the wrapped JS array from it\n\n  // Used for: a, b = something (no splat)\n  Opal.to_ary = function(value) {\n    if (value.$$is_array) {\n      return value;\n    }\n    else if (value['$respond_to?']('to_ary', true)) {\n      var ary = value.$to_ary();\n      if (ary === nil) {\n        return [value];\n      }\n      else if (ary.$$is_array) {\n        return ary;\n      }\n      else {\n        throw Opal.TypeError.$new(\"Can't convert \" + value.$$class +\n          \" to Array (\" + value.$$class + \"#to_ary gives \" + ary.$$class + \")\");\n      }\n    }\n    else {\n      return [value];\n    }\n  };\n\n  // Used for: a, b = *something (with splat)\n  Opal.to_a = function(value) {\n    if (value.$$is_array) {\n      // A splatted array must be copied\n      return value.slice();\n    }\n    else if (value['$respond_to?']('to_a', true)) {\n      var ary = value.$to_a();\n      if (ary === nil) {\n        return [value];\n      }\n      else if (ary.$$is_array) {\n        return ary;\n      }\n      else {\n        throw Opal.TypeError.$new(\"Can't convert \" + value.$$class +\n          \" to Array (\" + value.$$class + \"#to_a gives \" + ary.$$class + \")\");\n      }\n    }\n    else {\n      return [value];\n    }\n  };\n\n  // Used for extracting keyword arguments from arguments passed to\n  // JS function. If provided +arguments+ list doesn't have a Hash\n  // as a last item, returns a blank Hash.\n  //\n  // @param parameters [Array]\n  // @return [Hash]\n  //\n  Opal.extract_kwargs = function(parameters) {\n    var kwargs = parameters[parameters.length - 1];\n    if (kwargs != null && Opal.respond_to(kwargs, '$to_hash', true)) {\n      $splice.call(parameters, parameters.length - 1);\n      return kwargs.$to_hash();\n    }\n    else {\n      return Opal.hash2([], {});\n    }\n  };\n\n  // Used to get a list of rest keyword arguments. Method takes the given\n  // keyword args, i.e. the hash literal passed to the method containing all\n  // keyword arguemnts passed to method, as well as the used args which are\n  // the names of required and optional arguments defined. This method then\n  // just returns all key/value pairs which have not been used, in a new\n  // hash literal.\n  //\n  // @param given_args [Hash] all kwargs given to method\n  // @param used_args [Object<String: true>] all keys used as named kwargs\n  // @return [Hash]\n  //\n  Opal.kwrestargs = function(given_args, used_args) {\n    var keys      = [],\n        map       = {},\n        key           ,\n        given_map = given_args.$$smap;\n\n    for (key in given_map) {\n      if (!used_args[key]) {\n        keys.push(key);\n        map[key] = given_map[key];\n      }\n    }\n\n    return Opal.hash2(keys, map);\n  };\n\n  function apply_blockopts(block, blockopts) {\n    if (typeof(blockopts) === 'number') {\n      block.$$arity = blockopts;\n    }\n    else if (typeof(blockopts) === 'object') {\n      Object.assign(block, blockopts);\n    }\n  }\n\n  // Calls passed method on a ruby object with arguments and block:\n  //\n  // Can take a method or a method name.\n  //\n  // 1. When method name gets passed it invokes it by its name\n  //    and calls 'method_missing' when object doesn't have this method.\n  //    Used internally by Opal to invoke method that takes a block or a splat.\n  // 2. When method (i.e. method body) gets passed, it doesn't trigger 'method_missing'\n  //    because it doesn't know the name of the actual method.\n  //    Used internally by Opal to invoke 'super'.\n  //\n  // @example\n  //   var my_array = [1, 2, 3, 4]\n  //   Opal.send(my_array, 'length')                    # => 4\n  //   Opal.send(my_array, my_array.$length)            # => 4\n  //\n  //   Opal.send(my_array, 'reverse!')                  # => [4, 3, 2, 1]\n  //   Opal.send(my_array, my_array['$reverse!']')      # => [4, 3, 2, 1]\n  //\n  // @param recv [Object] ruby object\n  // @param method [Function, String] method body or name of the method\n  // @param args [Array] arguments that will be passed to the method call\n  // @param block [Function] ruby block\n  // @param blockopts [Object, Number] optional properties to set on the block\n  // @return [Object] returning value of the method call\n  Opal.send = function(recv, method, args, block, blockopts) {\n    var body;\n\n    apply_blockopts(block, blockopts);\n\n    if (typeof(method) === 'function') {\n      body = method;\n      method = null;\n    } else if (typeof(method) === 'string') {\n      body = recv['$'+method];\n    } else {\n      throw Opal.NameError.$new(\"Passed method should be a string or a function\");\n    }\n\n    return Opal.send2(recv, body, method, args, block);\n  };\n\n  Opal.send2 = function(recv, body, method, args, block, blockopts) {\n    if (body == null && method != null && recv.$method_missing) {\n      body = recv.$method_missing;\n      args = [method].concat(args);\n    }\n\n    apply_blockopts(block, blockopts);\n\n    if (typeof block === 'function') body.$$p = block;\n    return body.apply(recv, args);\n  };\n\n  Opal.refined_send = function(refinement_groups, recv, method, args, block, blockopts) {\n    var i, j, k, ancestors, ancestor, refinements, refinement, refine_modules, refine_module, body;\n\n    if (recv.hasOwnProperty('$$meta')) {\n      ancestors = Opal.ancestors(recv.$$meta);\n    } else {\n      ancestors = Opal.ancestors(recv.$$class);\n    }\n\n    apply_blockopts(block, blockopts);\n\n    // For all ancestors that there are, starting from the closest to the furthest...\n    for (i = 0; i < ancestors.length; i++) {\n      ancestor = Opal.id(ancestors[i]);\n      // For all refinement groups there are, starting from the closest scope to the furthest...\n      for (j = 0; j < refinement_groups.length; j++) {\n        refinements = refinement_groups[j];\n        // For all refinements there are, starting from the last `using` call to the furthest...\n        for (k = refinements.length - 1; k >= 0; k--) {\n          refinement = refinements[k];\n          if (typeof refinement.$$refine_modules === 'undefined') continue;\n          // A single module being given as an argument of the `using` call contains multiple\n          // refinement modules\n          refine_modules = refinement.$$refine_modules;\n          // Does this module refine a given call for a given ancestor module?\n          if (typeof refine_modules[ancestor] !== 'undefined') {\n            refine_module = refine_modules[ancestor];\n            // Does this module define a method we want to call?\n            if (typeof refine_module.$$prototype['$'+method] !== 'undefined') {\n              body = refine_module.$$prototype['$'+method];\n              return Opal.send2(recv, body, method, args, block);\n            }\n          }\n        }\n      }\n    }\n\n    return Opal.send(recv, method, args, block);\n  };\n\n  Opal.lambda = function(block, blockopts) {\n    block.$$is_lambda = true;\n\n    apply_blockopts(block, blockopts);\n\n    return block;\n  };\n\n  // Used to define methods on an object. This is a helper method, used by the\n  // compiled source to define methods on special case objects when the compiler\n  // can not determine the destination object, or the object is a Module\n  // instance. This can get called by `Module#define_method` as well.\n  //\n  // ## Modules\n  //\n  // Any method defined on a module will come through this runtime helper.\n  // The method is added to the module body, and the owner of the method is\n  // set to be the module itself. This is used later when choosing which\n  // method should show on a class if more than 1 included modules define\n  // the same method. Finally, if the module is in `module_function` mode,\n  // then the method is also defined onto the module itself.\n  //\n  // ## Classes\n  //\n  // This helper will only be called for classes when a method is being\n  // defined indirectly; either through `Module#define_method`, or by a\n  // literal `def` method inside an `instance_eval` or `class_eval` body. In\n  // either case, the method is simply added to the class' prototype. A special\n  // exception exists for `BasicObject` and `Object`. These two classes are\n  // special because they are used in toll-free bridged classes. In each of\n  // these two cases, extra work is required to define the methods on toll-free\n  // bridged class' prototypes as well.\n  //\n  // ## Objects\n  //\n  // If a simple ruby object is the object, then the method is simply just\n  // defined on the object as a singleton method. This would be the case when\n  // a method is defined inside an `instance_eval` block.\n  //\n  // @param obj  [Object, Class] the actual obj to define method for\n  // @param jsid [String] the JavaScript friendly method name (e.g. '$foo')\n  // @param body [JS.Function] the literal JavaScript function used as method\n  // @param blockopts [Object, Number] optional properties to set on the body\n  // @return [null]\n  //\n  Opal.def = function(obj, jsid, body, blockopts) {\n    apply_blockopts(body, blockopts);\n\n    // Special case for a method definition in the\n    // top-level namespace\n    if (obj === Opal.top) {\n      return Opal.defn(Opal.Object, jsid, body);\n    }\n    // if instance_eval is invoked on a module/class, it sets inst_eval_mod\n    else if (!obj.$$eval && obj.$$is_a_module) {\n      return Opal.defn(obj, jsid, body);\n    }\n    else {\n      return Opal.defs(obj, jsid, body);\n    }\n  };\n\n  // Define method on a module or class (see Opal.def).\n  Opal.defn = function(module, jsid, body) {\n    body.displayName = jsid;\n    body.$$owner = module;\n\n    var name = jsid.substr(1);\n\n    var proto = module.$$prototype;\n    if (proto.hasOwnProperty('$$dummy')) {\n      proto = proto.$$define_methods_on;\n    }\n    $prop(proto, jsid, body);\n\n    if (module.$$is_module) {\n      if (module.$$module_function) {\n        Opal.defs(module, jsid, body)\n      }\n\n      for (var i = 0, iclasses = module.$$iclasses, length = iclasses.length; i < length; i++) {\n        var iclass = iclasses[i];\n        $prop(iclass, jsid, body);\n      }\n    }\n\n    var singleton_of = module.$$singleton_of;\n    if (module.$method_added && !module.$method_added.$$stub && !singleton_of) {\n      module.$method_added(name);\n    }\n    else if (singleton_of && singleton_of.$singleton_method_added && !singleton_of.$singleton_method_added.$$stub) {\n      singleton_of.$singleton_method_added(name);\n    }\n\n    return name;\n  };\n\n  // Define a singleton method on the given object (see Opal.def).\n  Opal.defs = function(obj, jsid, body, blockopts) {\n    apply_blockopts(body, blockopts);\n\n    if (obj.$$is_string || obj.$$is_number) {\n      throw Opal.TypeError.$new(\"can't define singleton\");\n    }\n    return Opal.defn(Opal.get_singleton_class(obj), jsid, body);\n  };\n\n  // Called from #remove_method.\n  Opal.rdef = function(obj, jsid) {\n    if (!$has_own.call(obj.$$prototype, jsid)) {\n      throw Opal.NameError.$new(\"method '\" + jsid.substr(1) + \"' not defined in \" + obj.$name());\n    }\n\n    delete obj.$$prototype[jsid];\n\n    if (obj.$$is_singleton) {\n      if (obj.$$prototype.$singleton_method_removed && !obj.$$prototype.$singleton_method_removed.$$stub) {\n        obj.$$prototype.$singleton_method_removed(jsid.substr(1));\n      }\n    }\n    else {\n      if (obj.$method_removed && !obj.$method_removed.$$stub) {\n        obj.$method_removed(jsid.substr(1));\n      }\n    }\n  };\n\n  // Called from #undef_method.\n  Opal.udef = function(obj, jsid) {\n    if (!obj.$$prototype[jsid] || obj.$$prototype[jsid].$$stub) {\n      throw Opal.NameError.$new(\"method '\" + jsid.substr(1) + \"' not defined in \" + obj.$name());\n    }\n\n    Opal.add_stub_for(obj.$$prototype, jsid);\n\n    if (obj.$$is_singleton) {\n      if (obj.$$prototype.$singleton_method_undefined && !obj.$$prototype.$singleton_method_undefined.$$stub) {\n        obj.$$prototype.$singleton_method_undefined(jsid.substr(1));\n      }\n    }\n    else {\n      if (obj.$method_undefined && !obj.$method_undefined.$$stub) {\n        obj.$method_undefined(jsid.substr(1));\n      }\n    }\n  };\n\n  function is_method_body(body) {\n    return (typeof(body) === \"function\" && !body.$$stub);\n  }\n\n  Opal.alias = function(obj, name, old) {\n    var id     = '$' + name,\n        old_id = '$' + old,\n        body,\n        alias;\n\n    // Aliasing on main means aliasing on Object...\n    if (typeof obj.$$prototype === 'undefined') {\n      obj = Opal.Object;\n    }\n\n    body = obj.$$prototype['$' + old];\n\n    // When running inside #instance_eval the alias refers to class methods.\n    if (obj.$$eval) {\n      return Opal.alias(Opal.get_singleton_class(obj), name, old);\n    }\n\n    if (!is_method_body(body)) {\n      var ancestor = obj.$$super;\n\n      while (typeof(body) !== \"function\" && ancestor) {\n        body     = ancestor[old_id];\n        ancestor = ancestor.$$super;\n      }\n\n      if (!is_method_body(body) && obj.$$is_module) {\n        // try to look into Object\n        body = Opal.Object.$$prototype[old_id]\n      }\n\n      if (!is_method_body(body)) {\n        throw Opal.NameError.$new(\"undefined method `\" + old + \"' for class `\" + obj.$name() + \"'\")\n      }\n    }\n\n    // If the body is itself an alias use the original body\n    // to keep the max depth at 1.\n    if (body.$$alias_of) body = body.$$alias_of;\n\n    // We need a wrapper because otherwise properties\n    // would be overwritten on the original body.\n    alias = function() {\n      var block = alias.$$p, args, i, ii;\n\n      args = new Array(arguments.length);\n      for(i = 0, ii = arguments.length; i < ii; i++) {\n        args[i] = arguments[i];\n      }\n\n      delete alias.$$p;\n\n      return Opal.send(this, body, args, block);\n    };\n\n    // Assign the 'length' value with defineProperty because\n    // in strict mode the property is not writable.\n    // It doesn't work in older browsers (like Chrome 38), where\n    // an exception is thrown breaking Opal altogether.\n    try {\n      Object.defineProperty(alias, 'length', { value: body.length });\n    } catch (e) {}\n\n    // Try to make the browser pick the right name\n    alias.displayName       = name;\n\n    alias.$$arity           = body.$$arity;\n    alias.$$parameters      = body.$$parameters;\n    alias.$$source_location = body.$$source_location;\n    alias.$$alias_of        = body;\n    alias.$$alias_name      = name;\n\n    Opal.defn(obj, id, alias);\n\n    return obj;\n  };\n\n  Opal.alias_gvar = function(new_name, old_name) {\n    Object.defineProperty(Opal.gvars, new_name, {\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        return Opal.gvars[old_name];\n      },\n      set: function(new_value) {\n        Opal.gvars[old_name] = new_value;\n      }\n    });\n    return nil;\n  }\n\n  Opal.alias_native = function(obj, name, native_name) {\n    var id   = '$' + name,\n        body = obj.$$prototype[native_name];\n\n    if (typeof(body) !== \"function\" || body.$$stub) {\n      throw Opal.NameError.$new(\"undefined native method `\" + native_name + \"' for class `\" + obj.$name() + \"'\")\n    }\n\n    Opal.defn(obj, id, body);\n\n    return obj;\n  };\n\n\n  // Hashes\n  // ------\n\n  Opal.hash_init = function(hash) {\n    hash.$$smap = Object.create(null);\n    hash.$$map  = Object.create(null);\n    hash.$$keys = [];\n  };\n\n  Opal.hash_clone = function(from_hash, to_hash) {\n    to_hash.$$none = from_hash.$$none;\n    to_hash.$$proc = from_hash.$$proc;\n\n    for (var i = 0, keys = from_hash.$$keys, smap = from_hash.$$smap, len = keys.length, key, value; i < len; i++) {\n      key = keys[i];\n\n      if (key.$$is_string) {\n        value = smap[key];\n      } else {\n        value = key.value;\n        key = key.key;\n      }\n\n      Opal.hash_put(to_hash, key, value);\n    }\n  };\n\n  Opal.hash_put = function(hash, key, value) {\n    if (key.$$is_string) {\n      if (!$has_own.call(hash.$$smap, key)) {\n        hash.$$keys.push(key);\n      }\n      hash.$$smap[key] = value;\n      return;\n    }\n\n    var key_hash, bucket, last_bucket;\n    key_hash = hash.$$by_identity ? Opal.id(key) : key.$hash();\n\n    if (!$has_own.call(hash.$$map, key_hash)) {\n      bucket = {key: key, key_hash: key_hash, value: value};\n      hash.$$keys.push(bucket);\n      hash.$$map[key_hash] = bucket;\n      return;\n    }\n\n    bucket = hash.$$map[key_hash];\n\n    while (bucket) {\n      if (key === bucket.key || key['$eql?'](bucket.key)) {\n        last_bucket = undefined;\n        bucket.value = value;\n        break;\n      }\n      last_bucket = bucket;\n      bucket = bucket.next;\n    }\n\n    if (last_bucket) {\n      bucket = {key: key, key_hash: key_hash, value: value};\n      hash.$$keys.push(bucket);\n      last_bucket.next = bucket;\n    }\n  };\n\n  Opal.hash_get = function(hash, key) {\n    if (key.$$is_string) {\n      if ($has_own.call(hash.$$smap, key)) {\n        return hash.$$smap[key];\n      }\n      return;\n    }\n\n    var key_hash, bucket;\n    key_hash = hash.$$by_identity ? Opal.id(key) : key.$hash();\n\n    if ($has_own.call(hash.$$map, key_hash)) {\n      bucket = hash.$$map[key_hash];\n\n      while (bucket) {\n        if (key === bucket.key || key['$eql?'](bucket.key)) {\n          return bucket.value;\n        }\n        bucket = bucket.next;\n      }\n    }\n  };\n\n  Opal.hash_delete = function(hash, key) {\n    var i, keys = hash.$$keys, length = keys.length, value, key_tmp;\n\n    if (key.$$is_string) {\n      if (typeof key !== \"string\") key = key.valueOf();\n\n      if (!$has_own.call(hash.$$smap, key)) {\n        return;\n      }\n\n      for (i = 0; i < length; i++) {\n        key_tmp = keys[i];\n\n        if (key_tmp.$$is_string && typeof key_tmp !== \"string\") {\n          key_tmp = key_tmp.valueOf();\n        }\n\n        if (key_tmp === key) {\n          keys.splice(i, 1);\n          break;\n        }\n      }\n\n      value = hash.$$smap[key];\n      delete hash.$$smap[key];\n      return value;\n    }\n\n    var key_hash = key.$hash();\n\n    if (!$has_own.call(hash.$$map, key_hash)) {\n      return;\n    }\n\n    var bucket = hash.$$map[key_hash], last_bucket;\n\n    while (bucket) {\n      if (key === bucket.key || key['$eql?'](bucket.key)) {\n        value = bucket.value;\n\n        for (i = 0; i < length; i++) {\n          if (keys[i] === bucket) {\n            keys.splice(i, 1);\n            break;\n          }\n        }\n\n        if (last_bucket && bucket.next) {\n          last_bucket.next = bucket.next;\n        }\n        else if (last_bucket) {\n          delete last_bucket.next;\n        }\n        else if (bucket.next) {\n          hash.$$map[key_hash] = bucket.next;\n        }\n        else {\n          delete hash.$$map[key_hash];\n        }\n\n        return value;\n      }\n      last_bucket = bucket;\n      bucket = bucket.next;\n    }\n  };\n\n  Opal.hash_rehash = function(hash) {\n    for (var i = 0, length = hash.$$keys.length, key_hash, bucket, last_bucket; i < length; i++) {\n\n      if (hash.$$keys[i].$$is_string) {\n        continue;\n      }\n\n      key_hash = hash.$$keys[i].key.$hash();\n\n      if (key_hash === hash.$$keys[i].key_hash) {\n        continue;\n      }\n\n      bucket = hash.$$map[hash.$$keys[i].key_hash];\n      last_bucket = undefined;\n\n      while (bucket) {\n        if (bucket === hash.$$keys[i]) {\n          if (last_bucket && bucket.next) {\n            last_bucket.next = bucket.next;\n          }\n          else if (last_bucket) {\n            delete last_bucket.next;\n          }\n          else if (bucket.next) {\n            hash.$$map[hash.$$keys[i].key_hash] = bucket.next;\n          }\n          else {\n            delete hash.$$map[hash.$$keys[i].key_hash];\n          }\n          break;\n        }\n        last_bucket = bucket;\n        bucket = bucket.next;\n      }\n\n      hash.$$keys[i].key_hash = key_hash;\n\n      if (!$has_own.call(hash.$$map, key_hash)) {\n        hash.$$map[key_hash] = hash.$$keys[i];\n        continue;\n      }\n\n      bucket = hash.$$map[key_hash];\n      last_bucket = undefined;\n\n      while (bucket) {\n        if (bucket === hash.$$keys[i]) {\n          last_bucket = undefined;\n          break;\n        }\n        last_bucket = bucket;\n        bucket = bucket.next;\n      }\n\n      if (last_bucket) {\n        last_bucket.next = hash.$$keys[i];\n      }\n    }\n  };\n\n  Opal.hash = function() {\n    var arguments_length = arguments.length, args, hash, i, length, key, value;\n\n    if (arguments_length === 1 && arguments[0].$$is_hash) {\n      return arguments[0];\n    }\n\n    hash = new Opal.Hash();\n    Opal.hash_init(hash);\n\n    if (arguments_length === 1 && arguments[0].$$is_array) {\n      args = arguments[0];\n      length = args.length;\n\n      for (i = 0; i < length; i++) {\n        if (args[i].length !== 2) {\n          throw Opal.ArgumentError.$new(\"value not of length 2: \" + args[i].$inspect());\n        }\n\n        key = args[i][0];\n        value = args[i][1];\n\n        Opal.hash_put(hash, key, value);\n      }\n\n      return hash;\n    }\n\n    if (arguments_length === 1) {\n      args = arguments[0];\n      for (key in args) {\n        if ($has_own.call(args, key)) {\n          value = args[key];\n\n          Opal.hash_put(hash, key, value);\n        }\n      }\n\n      return hash;\n    }\n\n    if (arguments_length % 2 !== 0) {\n      throw Opal.ArgumentError.$new(\"odd number of arguments for Hash\");\n    }\n\n    for (i = 0; i < arguments_length; i += 2) {\n      key = arguments[i];\n      value = arguments[i + 1];\n\n      Opal.hash_put(hash, key, value);\n    }\n\n    return hash;\n  };\n\n  // A faster Hash creator for hashes that just use symbols and\n  // strings as keys. The map and keys array can be constructed at\n  // compile time, so they are just added here by the constructor\n  // function.\n  //\n  Opal.hash2 = function(keys, smap) {\n    var hash = new Opal.Hash();\n\n    hash.$$smap = smap;\n    hash.$$map  = Object.create(null);\n    hash.$$keys = keys;\n\n    return hash;\n  };\n\n  // Create a new range instance with first and last values, and whether the\n  // range excludes the last value.\n  //\n  Opal.range = function(first, last, exc) {\n    var range         = new Opal.Range();\n        range.begin   = first;\n        range.end     = last;\n        range.excl    = exc;\n\n    return range;\n  };\n\n  // Get the ivar name for a given name.\n  // Mostly adds a trailing $ to reserved names.\n  //\n  Opal.ivar = function(name) {\n    if (\n        // properties\n        name === \"constructor\" ||\n        name === \"displayName\" ||\n        name === \"__count__\" ||\n        name === \"__noSuchMethod__\" ||\n        name === \"__parent__\" ||\n        name === \"__proto__\" ||\n\n        // methods\n        name === \"hasOwnProperty\" ||\n        name === \"valueOf\"\n       )\n    {\n      return name + \"$\";\n    }\n\n    return name;\n  };\n\n\n  // Regexps\n  // -------\n\n  // Escape Regexp special chars letting the resulting string be used to build\n  // a new Regexp.\n  //\n  Opal.escape_regexp = function(str) {\n    return str.replace(/([-[\\]\\/{}()*+?.^$\\\\| ])/g, '\\\\$1')\n              .replace(/[\\n]/g, '\\\\n')\n              .replace(/[\\r]/g, '\\\\r')\n              .replace(/[\\f]/g, '\\\\f')\n              .replace(/[\\t]/g, '\\\\t');\n  };\n\n  // Create a global Regexp from a RegExp object and cache the result\n  // on the object itself ($$g attribute).\n  //\n  Opal.global_regexp = function(pattern) {\n    if (pattern.global) {\n      return pattern; // RegExp already has the global flag\n    }\n    if (pattern.$$g == null) {\n      pattern.$$g = new RegExp(pattern.source, (pattern.multiline ? 'gm' : 'g') + (pattern.ignoreCase ? 'i' : ''));\n    } else {\n      pattern.$$g.lastIndex = null; // reset lastIndex property\n    }\n    return pattern.$$g;\n  };\n\n  // Create a global multiline Regexp from a RegExp object and cache the result\n  // on the object itself ($$gm or $$g attribute).\n  //\n  Opal.global_multiline_regexp = function(pattern) {\n    var result;\n    if (pattern.multiline) {\n      if (pattern.global) {\n        return pattern; // RegExp already has the global and multiline flag\n      }\n      // we are using the $$g attribute because the Regexp is already multiline\n      if (pattern.$$g != null) {\n        result = pattern.$$g;\n      } else {\n        result = pattern.$$g = new RegExp(pattern.source, 'gm' + (pattern.ignoreCase ? 'i' : ''));\n      }\n    } else if (pattern.$$gm != null) {\n      result = pattern.$$gm;\n    } else {\n      result = pattern.$$gm = new RegExp(pattern.source, 'gm' + (pattern.ignoreCase ? 'i' : ''));\n    }\n    result.lastIndex = null; // reset lastIndex property\n    return result;\n  };\n\n  // Combine multiple regexp parts together\n  Opal.regexp = function(parts, flags) {\n    var part;\n    var ignoreCase = typeof flags !== 'undefined' && flags && flags.indexOf('i') >= 0;\n\n    for (var i = 0, ii = parts.length; i < ii; i++) {\n      part = parts[i];\n      if (part instanceof RegExp) {\n        if (part.ignoreCase !== ignoreCase)\n          Opal.Kernel.$warn(\n            \"ignore case doesn't match for \" + part.source.$inspect(),\n            Opal.hash({uplevel: 1})\n          )\n\n        part = part.source;\n      }\n      if (part === '') part = '(?:' + part + ')';\n      parts[i] = part;\n    }\n\n    if (flags) {\n      return new RegExp(parts.join(''), flags);\n    } else {\n      return new RegExp(parts.join(''));\n    }\n  };\n\n  // Require system\n  // --------------\n\n  Opal.modules         = {};\n  Opal.loaded_features = ['corelib/runtime'];\n  Opal.current_dir     = '.';\n  Opal.require_table   = {'corelib/runtime': true};\n\n  Opal.normalize = function(path) {\n    var parts, part, new_parts = [], SEPARATOR = '/';\n\n    if (Opal.current_dir !== '.') {\n      path = Opal.current_dir.replace(/\\/*$/, '/') + path;\n    }\n\n    path = path.replace(/^\\.\\//, '');\n    path = path.replace(/\\.(rb|opal|js)$/, '');\n    parts = path.split(SEPARATOR);\n\n    for (var i = 0, ii = parts.length; i < ii; i++) {\n      part = parts[i];\n      if (part === '') continue;\n      (part === '..') ? new_parts.pop() : new_parts.push(part)\n    }\n\n    return new_parts.join(SEPARATOR);\n  };\n\n  Opal.loaded = function(paths) {\n    var i, l, path;\n\n    for (i = 0, l = paths.length; i < l; i++) {\n      path = Opal.normalize(paths[i]);\n\n      if (Opal.require_table[path]) {\n        continue;\n      }\n\n      Opal.loaded_features.push(path);\n      Opal.require_table[path] = true;\n    }\n  };\n\n  Opal.load = function(path) {\n    path = Opal.normalize(path);\n\n    Opal.loaded([path]);\n\n    var module = Opal.modules[path];\n\n    if (module) {\n      var retval = module(Opal);\n      if (typeof Promise !== 'undefined' && retval instanceof Promise) {\n        // A special case of require having an async top:\n        // We will need to await it.\n        return retval.then(function() { return true; });\n      }\n    }\n    else {\n      var severity = Opal.config.missing_require_severity;\n      var message  = 'cannot load such file -- ' + path;\n\n      if (severity === \"error\") {\n        if (Opal.LoadError) {\n          throw Opal.LoadError.$new(message)\n        } else {\n          throw message\n        }\n      }\n      else if (severity === \"warning\") {\n        console.warn('WARNING: LoadError: ' + message);\n      }\n    }\n\n    return true;\n  };\n\n  Opal.require = function(path) {\n    path = Opal.normalize(path);\n\n    if (Opal.require_table[path]) {\n      return false;\n    }\n\n    return Opal.load(path);\n  };\n\n\n  // Strings\n  // -------\n\n  Opal.encodings = Object.create(null);\n\n  // Sets the encoding on a string, will treat string literals as frozen strings\n  // raising a FrozenError.\n  //\n  // @param str [String] the string on which the encoding should be set\n  // @param name [String] the canonical name of the encoding\n  // @param type [String] possible values are either `\"encoding\"`, `\"internal_encoding\"`, or `undefined\n  Opal.set_encoding = function(str, name, type) {\n    if (typeof type === \"undefined\") type = \"encoding\";\n    if (typeof str === 'string' || str.$$frozen === true)\n      throw Opal.FrozenError.$new(\"can't modify frozen String\");\n\n    var encoding = Opal.find_encoding(name);\n\n    if (encoding === str[type]) { return str; }\n\n    str[type] = encoding;\n\n    return str;\n  };\n\n  // Fetches the encoding for the given name or raises ArgumentError.\n  Opal.find_encoding = function(name) {\n    var register = Opal.encodings;\n    var encoding = register[name] || register[name.toUpperCase()];\n    if (!encoding) throw Opal.ArgumentError.$new(\"unknown encoding name - \" + name);\n    return encoding;\n  }\n\n  // @returns a String object with the encoding set from a string literal\n  Opal.enc = function(str, name) {\n    var dup = new String(str);\n    dup = Opal.set_encoding(dup, name);\n    dup.internal_encoding = dup.encoding;\n    return dup\n  }\n\n  // @returns a String object with the internal encoding set to Binary\n  Opal.binary = function(str) {\n    var dup = new String(str);\n    return Opal.set_encoding(dup, \"binary\", \"internal_encoding\");\n  }\n\n  Opal.last_promise = null;\n  Opal.promise_unhandled_exception = false;\n\n  // Run a block of code, but if it returns a Promise, don't run the next\n  // one, but queue it.\n  Opal.queue = function(proc) {\n    if (Opal.last_promise) {\n      // The async path is taken only if anything before returned a\n      // Promise(V2).\n      Opal.last_promise = Opal.last_promise.then(function() {\n        if (!Opal.promise_unhandled_exception) return proc(Opal);\n      })['catch'](function(error) {\n        if (Opal.respond_to(error, '$full_message')) {\n          error = error.$full_message();\n        }\n        console.error(error);\n        // Abort further execution\n        Opal.promise_unhandled_exception = true;\n        Opal.exit(1);\n      });\n      return Opal.last_promise;\n    }\n    else {\n      var ret = proc(Opal);\n      if (typeof Promise === 'function' && typeof ret === 'object' && ret instanceof Promise) {\n        Opal.last_promise = ret;\n      }\n      return ret;\n    }\n  }\n\n  // Operator helpers\n  // ----------------\n  Opal.rb_plus   = function(l,r) { return (typeof(l) === 'number' && typeof(r) === 'number') ? l + r : l['$+'](r); }\n  Opal.rb_minus  = function(l,r) { return (typeof(l) === 'number' && typeof(r) === 'number') ? l - r : l['$-'](r); }\n  Opal.rb_times  = function(l,r) { return (typeof(l) === 'number' && typeof(r) === 'number') ? l * r : l['$*'](r); }\n  Opal.rb_divide = function(l,r) { return (typeof(l) === 'number' && typeof(r) === 'number') ? l / r : l['$/'](r); }\n  Opal.rb_lt     = function(l,r) { return (typeof(l) === 'number' && typeof(r) === 'number') ? l < r : l['$<'](r); }\n  Opal.rb_gt     = function(l,r) { return (typeof(l) === 'number' && typeof(r) === 'number') ? l > r : l['$>'](r); }\n  Opal.rb_le     = function(l,r) { return (typeof(l) === 'number' && typeof(r) === 'number') ? l <= r : l['$<='](r); }\n  Opal.rb_ge     = function(l,r) { return (typeof(l) === 'number' && typeof(r) === 'number') ? l >= r : l['$>='](r); }\n\n  // Optimized helpers for calls like $truthy((a)['$==='](b)) -> $eqeqeq(a, b)\n  Opal.eqeq = function(lhs, rhs) {\n    if ((typeof lhs === 'number' && typeof rhs === 'number') ||\n        (typeof lhs === 'string' && typeof rhs === 'string')) {\n      return lhs === rhs;\n    }\n    return $truthy((lhs)['$=='](rhs));\n  };\n  Opal.eqeqeq = function(lhs, rhs) {\n    if ((typeof lhs === 'number' && typeof rhs === 'number') ||\n        (typeof lhs === 'string' && typeof rhs === 'string')) {\n      return lhs === rhs;\n    }\n    return $truthy((lhs)['$==='](rhs));\n  };\n  Opal.neqeq = function(lhs, rhs) {\n    if ((typeof lhs === 'number' && typeof rhs === 'number') ||\n        (typeof lhs === 'string' && typeof rhs === 'string')) {\n      return lhs !== rhs;\n    }\n    return $truthy((lhs)['$!='](rhs));\n  };\n  Opal.not = function(arg) {\n    if (true === arg) return false;\n    if (undefined === arg || null === arg || false === arg || nil === arg) return true;\n    return $truthy(arg['$!']());\n  }\n\n\n\n  // Initialization\n  // --------------\n  Opal.BasicObject = BasicObject = Opal.allocate_class('BasicObject', null);\n  Opal.Object      = _Object     = Opal.allocate_class('Object', Opal.BasicObject);\n  Opal.Module      = Module      = Opal.allocate_class('Module', Opal.Object);\n  Opal.Class       = Class       = Opal.allocate_class('Class', Opal.Module);\n  Opal.Opal        = _Opal       = Opal.allocate_module('Opal');\n  Opal.Kernel      = Kernel      = Opal.allocate_module('Kernel');\n\n  $set_proto(Opal.BasicObject, Opal.Class.$$prototype);\n  $set_proto(Opal.Object, Opal.Class.$$prototype);\n  $set_proto(Opal.Module, Opal.Class.$$prototype);\n  $set_proto(Opal.Class, Opal.Class.$$prototype);\n\n  // BasicObject can reach itself, avoid const_set to skip the $$base_module logic\n  BasicObject.$$const[\"BasicObject\"] = BasicObject;\n\n  // Assign basic constants\n  $const_set(_Object, \"BasicObject\",  BasicObject);\n  $const_set(_Object, \"Object\",       _Object);\n  $const_set(_Object, \"Module\",       Module);\n  $const_set(_Object, \"Class\",        Class);\n  $const_set(_Object, \"Opal\",         _Opal);\n  $const_set(_Object, \"Kernel\",       Kernel);\n\n  // Fix booted classes to have correct .class value\n  BasicObject.$$class = Class;\n  _Object.$$class     = Class;\n  Module.$$class      = Class;\n  Class.$$class       = Class;\n  _Opal.$$class       = Module;\n  Kernel.$$class      = Module;\n\n  // Forward .toString() to #to_s\n  $prop(_Object.$$prototype, 'toString', function() {\n    var to_s = this.$to_s();\n    if (to_s.$$is_string && typeof(to_s) === 'object') {\n      // a string created using new String('string')\n      return to_s.valueOf();\n    } else {\n      return to_s;\n    }\n  });\n\n  // Make Kernel#require immediately available as it's needed to require all the\n  // other corelib files.\n  $prop(_Object.$$prototype, '$require', Opal.require);\n\n  // Instantiate the main object\n  Opal.top = new _Object();\n  Opal.top.$to_s = Opal.top.$inspect = function() { return 'main' };\n  Opal.top.$define_method = top_define_method;\n\n  // Foward calls to define_method on the top object to Object\n  function top_define_method() {\n    var args = Opal.slice.call(arguments);\n    var block = top_define_method.$$p;\n    delete top_define_method.$$p;\n    return Opal.send(_Object, 'define_method', args, block)\n  };\n\n  // Nil\n  Opal.NilClass = Opal.allocate_class('NilClass', Opal.Object);\n  $const_set(_Object, 'NilClass', Opal.NilClass);\n  nil = Opal.nil = new Opal.NilClass();\n  nil.$$id = nil_id;\n  nil.call = nil.apply = function() { throw Opal.LocalJumpError.$new('no block given'); };\n\n  // Errors\n  Opal.breaker  = new Error('unexpected break (old)');\n  Opal.returner = new Error('unexpected return');\n  TypeError.$$super = Error;\n}).call(this);\nOpal.loaded([\"corelib/runtime.js\"]);"],"names":[],"mappings":"AAAA;AACE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACE;AACF;AACE;AACF;AACE;AACF;;AAEA;AACA;;AAEA;AACE;AACA;AACF;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACE;AACA;AACA;AACA;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACE;AACA;AACF;;AAEA;AACA;AACE;AACA;AACE;AACF;AACA;AACA;AACF;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACE;AACA;AACE;AACA;AACF;AACA;AACE;AACF;AACF;;AAEA;AACE;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF;AACE;AACE;AACA;AACA;AACA;AACF;AACF;AACF;;AAEA;;AAEA;AACA;;AAEA;;;AAGA;AACA;;AAEA;AACE;AACF;;AAEA;AACE;AACF;;AAEA;AACE;;AAEA;AACE;AACA;AACE;AACA;AACF;AACF;AACE;AACE;AACF;AACF;AACF;;AAEA;AACE;;AAEA;AACE;AACF;;AAEA;AACA;AACF;;AAEA;AACE;AACA;AACA;;AAEA;AACE;AACE;AACF;AACA;AACE;AACF;AACF;AACE;AACF;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACE;;AAEA;AACE;AACA;AACA;AACF;AACF;;AAEA;AACE;AACE;AACA;AACE;AACF;AACE;AACA;AACF;AACA;AACA;AACE;AACA;AACF;AACF;AACE;AACF;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACE;AACE;AACA;AACE;AACF;AACF;AACF;;AAEA;AACA;AACE;;AAEA;;AAEA;AACA;AACA;AACE;AACA;AACE;AACF;AACE;AACF;AACF;AACF;;AAEA;AACA;AACE;;AAEA;;AAEA;;AAEA;AACE;AACE;AACF;AACE;AACF;AACF;AACF;;AAEA;AACA;AACA;AACE;AACE;AACF;AACF;;AAEA;AACA;AACE;AACE;AACF;AACF;;AAEA;AACA;AACE;;AAEA;;AAEA;;AAEA;AACE;AACF;;AAEA;AACA;AACF;;AAEA;AACA;AACA;AACE;;AAEA;AACE;AACA;;AAEA;AACA;AACF;;AAEA;;AAEA;;AAEA;AACE;AACF;;AAEA;AACE;AACA;AACF;AACA;;AAEA;AACE;AACA;AACA;AACF;AACE;AACF;;AAEA;AACF;;AAEA;AACA;;AAEA;AACA;AACA;AACE;;AAEA;AACE;AACA;AACF;AACA;;AAEA;AACE;AACA;AACA;AACA;;AAEA;AACF;AACE;AACF;;AAEA;AACF;;AAEA;AACA;AACA;AACE;;AAEA;AACE;AACA;AACF;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACF;;AAEA;;AAEA;AACA;AACA;AACE;;AAEA;;AAEA;AACA;;AAEA;AACE;;AAEA;AACA;;AAEA;AACE;AACF;AACA;AACE;AACE;AACF;AACF;AACF;;AAEA;AACF;;AAEA;AACA;AACE;;AAEA;AACE;AACA;AACA;AACF;;AAEA;AACE;AACA;AACF;;AAEA;AACF;;AAEA;AACA;AACE;AACE;AACF;AACF;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;;AAEA;AACE;AACA;AACA;AACE;AACI;;AAEJ;AACA;AACA;AACF;AACF;AACE;AACF;;AAEA;AACE;AACF;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACE;AACF;;AAEA;AACE;;AAEA;AACE;AACA;AACA;AACE;AACA;AACA;AACE;AACA;AACE;AACF;AACF;AACA;AACA;AACA;AACF;AACA;AACE;AACF;AACF;;AAEA;AACE;AACA;AACF;AACF;;AAEA;AACF;;;AAGA;AACE;AACA;;AAEA;AACA;AACE;AACA;AACE;AACF;;AAEA;AACF;AACF;;AAEA;AACE;AACE;AACF;AACF;;AAEA;AACE;;AAEA;AACE;AACA;AACF;AACE;AACA;AACF;;AAEA;AACA;AACE;AACE;AACF;AACF;AACE;AACE;AACA;AACF;AACE;AACE;AACA;AACF;AACF;AACF;;AAEA;;AAEA;AACE;AACE;AACA;AACF;;AAEA;;AAEA;AACF;;AAEA;;AAEA;AACA;AACE;AACF;;AAEA;AACA;AACA;;AAEA;AACA;AACE;AACF;;AAEA;AACE;AACF;;AAEA;;AAEA;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AACA;AACE;AACF;;AAEA;;AAEA;AACE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACF;;AAEA;AACE;AACA;;AAEA;AACE;AACE;AACF;AACF;;AAEA;AACF;;AAEA;AACE;;AAEA;AACE;AACA;AACF;AACE;AACA;AACF;;AAEA;;AAEA;;AAEE;;AAEA;AACF;;AAEA;AACA;AACA;;AAEA;;AAEA;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AACE;AACF;;AAEA;AACE;AACF;AACE;AACF;AACE;AACF;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;;AAEA;AACE;AACF;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACF;;AAEA;AACE;AACE;AACF;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACF;;AAEA;AACA;AACA;AACA;AACA;AACE;AACI;;AAEJ;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACF;;AAEA;AACE;AACF;;AAEA;AACE;;AAEA;AACE;AACI;;AAEJ;AACE;AACF;;AAEA;;AAEA;AACE;;AAEA;AACE;AACI;;AAEJ;AACE;AACF;;AAEA;AACE;AACF;AACF;AACF;AACF;;AAEA;AACF;;AAEA;AACE;AACI;;AAEJ;AACE;AACF;;AAEA;;AAEA;AACE;;AAEA;AACE;;AAEA;AACE;AACA;AACF;AACF;AACF;;AAEA;AACF;;AAEA;AACE;AACF;;AAEA;AACE;AACE;AACF;AACA;AACE;AACF;AACF;;AAEA;AACE;AACA;AACA;AACA;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AACI;AACA;;AAEJ;AACE;;AAEA;AACE;AACF;AACF;;AAEA;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AACI;;AAEJ;AACE;;AAEA;AACE;AACA;AACF;AACF;;AAEA;;AAEA;AACF;;AAEA;AACA;AACA;AACA;AACA;AACE;AACE;;AAEF;AACE;;AAEF;AACE;;AAEA;AACE;AACF;AACF;;AAEA;AACE;;AAEF;AACF;;AAEA;AACE;AACF;;AAEA;AACE;;AAEA;AACE;AACE;AACA;AACF;AACA;AACA;AACE;AACF;AACA;AACF;;AAEA;AACF;;AAEA;AACE;;AAEA;AACE;AACE;AACE;AACF;;AAEA;AACA;AACE;AACF;;AAEA;AACF;AACF;;AAEA;AACF;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AACA;;AAEA;AACE;AACF;;AAEA;AACE;AACA;AACA;AACF;AACA;AACI;AACA;AACA;;AAEJ;AACE;;AAEA;AACA;AACA;AACF;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACE;AACE;AACF;;AAEA;AACA;AACF;;AAEA;AACE;AACA;;AAEA;AACA;AACE;AACF;;AAEA;AACA;AACF;AACE;AACA;AACA;AACA;AACF;AACF;;AAEA;AACA;;AAEA;AACA;;AAEA;AACF;;AAEA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACE;AACF;;AAEA;AACE;AACA;AACA;AACF;;AAEA;AACI;AACA;AACA;AACA;AACA;;AAEJ;AACE;AACA;AACA;AACF;AACE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACF;;AAEA;;AAEA;AACE;;AAEA;;AAEA;AACA;AACA;AACE;AACE;AACA;AACA;AACF;AACE;AACF;;AAEA;AACF;AACF;AACE;AACF;;AAEA;AACA;;AAEA;AACA;;AAEA;AACF;;AAEA;AACE;AACI;;AAEJ;AACE;AACA;AACE;AACF;AACF;AACF;;AAEA;AACE;;AAEA;AACE;AACF;;AAEA;AACF;;AAEA;AACA;AACE;AACI;;AAEJ;AACE;AACF;;AAEA;AACI;;AAEJ;AACE;AACA;AACF;;AAEA;AACA;;AAEA;AACF;;AAEA;AACE;;AAEA;;AAEA;AACE;AACF;;AAEA;;AAEA;AACE;AACA;AACA;AACF;;;AAGA;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AACE;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACF;;AAEA;AACE;AACE;AACF;AACE;AACF;AACE;AACF;AACF;;AAEA;AACE;AACF;;AAEA;AACA;AACE;;AAEA;AACE;AACF;;AAEA;;AAEA;AACE;AACF;;AAEA;AACE;AACE;AACF;AACF;;AAEA;AACA;;AAEA;AACF;;AAEA;AACE;;AAEA;AACE;AACA;AACE;AACF;AACF;;AAEA;AACF;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AACA;AACA;;AAEA;AACE;;AAEA;AACE;AACF;AACF;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AACA;AACF;;AAEA;AACA;AACA;AACA;AACA;;AAEE;AACE;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACF;;AAEA;;AAEA;AACF;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AACA;AACE;AACF;AACA;AACE;AACF;AACA;;AAEA;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;;AAEA;AACF;;AAEA;AACA;AACE;;AAEA;AACE;AACF;AACE;AACF;;AAEA;;AAEA;AACE;AACI;;AAEJ;AACE;AACF;;AAEA;AACE;AACA;AACF;AACF;;AAEA;AACE;AACA;AACF;;AAEA;AACF;;AAEA;AACA;AACE;;AAEA;AACE;AACF;;AAEA;AACE;AACF;;AAEA;AACE;AACF;;AAEA;AACF;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AACA;AACF;;AAEA;AACA;AACE;AACA;AACF;;AAEA;AACA;AACA;AACE;AACF;;AAEA;AACA;AACE;AACE;AACF;;AAEA;AACI;;AAEJ;AACE;AACF;;AAEA;AACE;AACF;AACA;AACE;AACF;AACF;;AAEA;AACA;AACE;AACE;AACF;;AAEA;AACE;AACE;AACF;AACF;;AAEA;AACE;AACA;;AAEA;AACF;;AAEA;AACF;;AAEA;AACA;AACA;AACE;AACE;;AAEA;AACE;;AAEA;AACE;AACF;AACF;AACA;AACE;AACF;AACA;AACE;AACF;AACF;;AAEA;AACF;;AAEA;AACE;AACE;AACF;;AAEA;AACE;AACF;;AAEA;;AAEA;AACE;AACE;AACF;AACF;;AAEA;AACF;;AAEA;AACA;AACA;AACE;AACE;AACF;AACA;AACE;AACA;AACE;AACF;AACA;AACE;AACE;AACJ;AACF;AACA;AACE;AACF;AACF;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACE;AACE;AACF;AACA;AACE;AACA;AACE;AACF;AACA;AACE;AACF;AACA;AACE;AACE;AACJ;AACF;AACA;AACE;AACF;AACF;;AAEA;AACA;AACE;AACE;AACA;AACF;AACA;AACE;AACA;AACE;AACF;AACA;AACE;AACF;AACA;AACE;AACE;AACJ;AACF;AACA;AACE;AACF;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AACA;AACE;AACA;AACF;AACA;AACE;AACF;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AACI;AACA;AACA;;AAEJ;AACE;AACE;AACA;AACF;AACF;;AAEA;AACF;;AAEA;AACE;AACE;AACF;AACA;AACE;AACF;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;;AAEA;;AAEA;AACE;AACA;AACF;AACE;AACF;AACE;AACF;;AAEA;AACF;;AAEA;AACE;AACE;AACA;AACF;;AAEA;;AAEA;AACA;AACF;;AAEA;AACE;;AAEA;AACE;AACF;AACE;AACF;;AAEA;;AAEA;AACA;AACE;AACA;AACA;AACE;AACA;AACA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AACA;AACA;AACE;AACA;AACF;AACF;AACF;AACF;AACF;;AAEA;AACF;;AAEA;AACE;;AAEA;;AAEA;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;;AAEA;AACA;AACA;AACE;AACF;AACA;AACA;AACE;AACF;AACA;AACE;AACF;AACF;;AAEA;AACA;AACE;AACA;;AAEA;;AAEA;AACA;AACE;AACF;AACA;;AAEA;AACE;AACE;AACF;;AAEA;AACE;AACA;AACF;AACF;;AAEA;AACA;AACE;AACF;AACA;AACE;AACF;;AAEA;AACF;;AAEA;AACA;AACE;;AAEA;AACE;AACF;AACA;AACF;;AAEA;AACA;AACE;AACE;AACF;;AAEA;;AAEA;AACE;AACE;AACF;AACF;AACA;AACE;AACE;AACF;AACF;AACF;;AAEA;AACA;AACE;AACE;AACF;;AAEA;;AAEA;AACE;AACE;AACF;AACF;AACA;AACE;AACE;AACF;AACF;AACF;;AAEA;AACE;AACF;;AAEA;AACE;AACI;AACA;AACA;;AAEJ;AACA;AACE;AACF;;AAEA;;AAEA;AACA;AACE;AACF;;AAEA;AACE;;AAEA;AACE;AACA;AACF;;AAEA;AACE;AACA;AACF;;AAEA;AACE;AACF;AACF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACE;;AAEA;AACA;AACE;AACF;;AAEA;;AAEA;AACF;;AAEA;AACA;AACA;AACA;AACA;AACE;AACF;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACF;;AAEA;AACE;AACE;AACA;AACA;AACE;AACF;AACA;AACE;AACF;AACF;AACA;AACF;;AAEA;AACE;AACI;;AAEJ;AACE;AACF;;AAEA;;AAEA;AACF;;;AAGA;AACA;;AAEA;AACE;AACA;AACA;AACF;;AAEA;AACE;AACA;;AAEA;AACE;;AAEA;AACE;AACF;AACE;AACA;AACF;;AAEA;AACF;AACF;;AAEA;AACE;AACE;AACE;AACF;AACA;AACA;AACF;;AAEA;AACA;;AAEA;AACE;AACA;AACA;AACA;AACF;;AAEA;;AAEA;AACE;AACE;AACA;AACA;AACF;AACA;AACA;AACF;;AAEA;AACE;AACA;AACA;AACF;AACF;;AAEA;AACE;AACE;AACE;AACF;AACA;AACF;;AAEA;AACA;;AAEA;AACE;;AAEA;AACE;AACE;AACF;AACA;AACF;AACF;AACF;;AAEA;AACE;;AAEA;AACE;;AAEA;AACE;AACF;;AAEA;AACE;;AAEA;AACE;AACF;;AAEA;AACE;AACA;AACF;AACF;;AAEA;AACA;AACA;AACF;;AAEA;;AAEA;AACE;AACF;;AAEA;;AAEA;AACE;AACE;;AAEA;AACE;AACE;AACA;AACF;AACF;;AAEA;AACE;AACF;AACA;AACE;AACF;AACA;AACE;AACF;AACA;AACE;AACF;;AAEA;AACF;AACA;AACA;AACF;AACF;;AAEA;AACE;;AAEE;AACE;AACF;;AAEA;;AAEA;AACE;AACF;;AAEA;AACA;;AAEA;AACE;AACE;AACE;AACF;AACA;AACE;AACF;AACA;AACE;AACF;AACA;AACE;AACF;AACA;AACF;AACA;AACA;AACF;;AAEA;;AAEA;AACE;AACA;AACF;;AAEA;AACA;;AAEA;AACE;AACE;AACA;AACF;AACA;AACA;AACF;;AAEA;AACE;AACF;AACF;AACF;;AAEA;AACE;;AAEA;AACE;AACF;;AAEA;AACA;;AAEA;AACE;AACA;;AAEA;AACE;AACE;AACF;;AAEA;AACA;;AAEA;AACF;;AAEA;AACF;;AAEA;AACE;AACA;AACE;AACE;;AAEA;AACF;AACF;;AAEA;AACF;;AAEA;AACE;AACF;;AAEA;AACE;AACA;;AAEA;AACF;;AAEA;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACE;;AAEA;AACA;AACA;;AAEA;AACF;;AAEA;AACA;AACA;AACA;AACE;AACI;AACA;AACA;;AAEJ;AACF;;AAEA;AACA;AACA;AACA;AACE;AACI;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACD;AACH;AACE;AACF;;AAEA;AACF;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACE;AACU;AACA;AACA;AACA;AACZ;;AAEA;AACA;AACA;AACA;AACE;AACE;AACF;AACA;AACE;AACF;AACE;AACF;AACA;AACF;;AAEA;AACA;AACA;AACA;AACE;AACA;AACE;AACE;AACF;AACA;AACA;AACE;AACF;AACE;AACF;AACF;AACE;AACF;AACE;AACF;AACA;AACA;AACF;;AAEA;AACA;AACE;AACA;;AAEA;AACE;AACA;AACE;AACE;AACE;AACA;AACF;;AAEF;AACF;AACA;AACA;AACF;;AAEA;AACE;AACF;AACE;AACF;AACF;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACE;;AAEA;AACE;AACF;;AAEA;AACA;AACA;;AAEA;AACE;AACA;AACA;AACF;;AAEA;AACF;;AAEA;AACE;;AAEA;AACE;;AAEA;AACE;AACF;;AAEA;AACA;AACF;AACF;;AAEA;AACE;;AAEA;;AAEA;;AAEA;AACE;AACA;AACE;AACA;AACA;AACF;AACF;AACA;AACE;AACA;;AAEA;AACE;AACE;AACF;AACE;AACF;AACF;AACA;AACE;AACF;AACF;;AAEA;AACF;;AAEA;AACE;;AAEA;AACE;AACF;;AAEA;AACF;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AACA;AACE;;AAEF;;AAEA;;AAEA;;AAEA;AACF;;AAEA;AACA;AACE;AACA;AACA;AACA;AACF;;AAEA;AACA;AACE;AACA;AACA;AACA;AACF;;AAEA;AACA;AACE;AACA;AACF;;AAEA;AACA;;AAEA;AACA;AACA;AACE;AACE;AACA;AACA;AACE;AACF;AACE;AACE;AACF;AACA;AACA;AACA;AACA;AACF;AACA;AACF;AACA;AACE;AACA;AACE;AACF;AACA;AACF;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACE;AACI;AACF;AACF;AACA;AACF;AACA;AACE;AACI;AACF;AACF;AACA;AACF;AACA;AACE;AACI;AACF;AACF;AACA;AACF;AACA;AACE;AACA;AACA;AACF;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACE;AACA;AACE;AACA;AACF;AACE;AACF;AACF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACE;AACA;AACA;AACA;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACF;AACA"}},{"offset":{"line":2882,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/helpers.rb"],"sourcesContent":["# helpers: type_error, coerce_to\n\nmodule ::Opal\n  def self.bridge(constructor, klass)\n    `Opal.bridge(constructor, klass)`\n  end\n\n  def self.coerce_to!(object, type, method, *args)\n    coerced = `$coerce_to(object, type, method, args)`\n\n    unless type === coerced\n      ::Kernel.raise `$type_error(object, type, method, coerced)`\n    end\n\n    coerced\n  end\n\n  def self.coerce_to?(object, type, method, *args)\n    return unless object.respond_to? method\n\n    coerced = `$coerce_to(object, type, method, args)`\n\n    return if coerced.nil?\n\n    unless type === coerced\n      ::Kernel.raise `$type_error(object, type, method, coerced)`\n    end\n\n    coerced\n  end\n\n  def self.try_convert(object, type, method)\n    return object if type === object\n\n    if object.respond_to? method\n      object.__send__ method\n    end\n  end\n\n  def self.compare(a, b)\n    compare = a <=> b\n\n    if `compare === nil`\n      ::Kernel.raise ::ArgumentError, \"comparison of #{a.class} with #{b.class} failed\"\n    end\n\n    compare\n  end\n\n  def self.destructure(args)\n    %x{\n      if (args.length == 1) {\n        return args[0];\n      }\n      else if (args.$$is_array) {\n        return args;\n      }\n      else {\n        var args_ary = new Array(args.length);\n        for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = args[i]; }\n\n        return args_ary;\n      }\n    }\n  end\n\n  def self.respond_to?(obj, method, include_all = false)\n    %x{\n      if (obj == null || !obj.$$class) {\n        return false;\n      }\n    }\n\n    obj.respond_to?(method, include_all)\n  end\n\n  def self.instance_variable_name!(name)\n    name = ::Opal.coerce_to!(name, ::String, :to_str)\n\n    unless `/^@[a-zA-Z_][a-zA-Z0-9_]*?$/.test(name)`\n      ::Kernel.raise ::NameError.new(\"'#{name}' is not allowed as an instance variable name\", name)\n    end\n\n    name\n  end\n\n  def self.class_variable_name!(name)\n    name = ::Opal.coerce_to!(name, ::String, :to_str)\n\n    if `name.length < 3 || name.slice(0,2) !== '@@'`\n      ::Kernel.raise ::NameError.new(\"`#{name}' is not allowed as a class variable name\", name)\n    end\n\n    name\n  end\n\n  def self.const_name?(const_name)\n    %x{\n      if (typeof const_name !== 'string') {\n        #{const_name = ::Opal.coerce_to!(const_name, ::String, :to_str)}\n      }\n\n      return #{const_name}[0] === #{const_name}[0].toUpperCase()\n    }\n  end\n\n  def self.const_name!(const_name)\n    const_name = ::Opal.coerce_to!(const_name, ::String, :to_str) if defined? ::String\n\n    %x{\n      if (!const_name || const_name[0] != const_name[0].toUpperCase()) {\n        #{raise ::NameError, \"wrong constant name #{const_name}\"}\n      }\n    }\n\n    const_name\n  end\n\n  # @private\n  # Mark some methods as pristine in order to apply optimizations when they\n  # are still in their original form. This could probably be moved to\n  # the `Opal.def()` JS API, but for now it will stay manual.\n  #\n  # @example\n  #\n  #   Opal.pristine Array, :allocate, :copy_instance_variables, :initialize_dup\n  #\n  #   class Array\n  #     def dup\n  #       %x{\n  #         if (\n  #           self.$allocate.$$pristine &&\n  #           self.$copy_instance_variables.$$pristine &&\n  #           self.$initialize_dup.$$pristine\n  #         ) return self.slice(0);\n  #       }\n  #\n  #       super\n  #     end\n  #   end\n  #\n  # @param owner_class [Class] the class owning the methods\n  # @param method_names [Array<Symbol>] the list of methods names to mark\n  # @return [nil]\n  def self.pristine(owner_class, *method_names)\n    %x{\n      var method_name, method;\n      for (var i = method_names.length - 1; i >= 0; i--) {\n        method_name = method_names[i];\n        method = owner_class.$$prototype['$'+method_name];\n\n        if (method && !method.$$stub) {\n          method.$$pristine = true;\n        }\n      }\n    }\n    nil\n  end\n\n  `var inspect_stack = []`\n\n  # Performs a safe call to inspect for any value, whether\n  # native or Opal-wrapped.\n  #\n  # @param value [Object]\n  # @return [String]\n  def self.inspect(value = undefined)\n    `var pushed = false`\n    begin\n      %x{\n        if (value === null) {\n          // JS null value\n          return 'null';\n        }\n        else if (value === undefined) {\n          // JS undefined value\n          return 'undefined';\n        }\n        else if (typeof value.$$class === 'undefined') {\n          // JS object / other value that is not bridged\n          return Object.prototype.toString.apply(value);\n        }\n        else if (typeof value.$inspect !== 'function' || value.$inspect.$$stub) {\n          // BasicObject and friends\n          return #{\"#<#{`value.$$class`}:0x#{value.__id__.to_s(16)}>\"}\n        }\n        else if (inspect_stack.indexOf(#{value.__id__}) !== -1) {\n          // inspect recursing inside inspect to find out about the\n          // same object\n          return #{\"#<#{`value.$$class`}:0x#{value.__id__.to_s(16)}>\"}\n        }\n        else {\n          // anything supporting Opal\n          inspect_stack.push(#{value.__id__});\n          pushed = true;\n          return value.$inspect();\n        }\n      }\n      nil\n    rescue ::Exception => e # rubocop:disable Lint/RescueException\n      \"#<#{`value.$$class`}:0x#{value.__id__.to_s(16)}>\"\n    ensure\n      `if (pushed) inspect_stack.pop()`\n    end\n  end\nend\n"],"names":["<top (required)>","<module:Opal>","bridge","self","constructor","klass","coerce_to!","object","type","method","coerced","Kernel","raise","coerce_to?","respond_to?","nil?","try_convert","__send__","compare","a","b","<=>","ArgumentError","class","destructure","args","obj","include_all","instance_variable_name!","name","Opal","String","NameError","new","class_variable_name!","const_name?","const_name","const_name!","pristine","owner_class","inspect","value","__id__","to_s","16","Exception","e"],"mappings":"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"}},{"offset":{"line":3098,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/module.rb"],"sourcesContent":["# helpers: truthy, coerce_to, const_set, Object\n\nclass ::Module\n  def self.allocate\n    %x{\n      var module = Opal.allocate_module(nil, function(){});\n      // Link the prototype of Module subclasses\n      if (self !== Opal.Module) Object.setPrototypeOf(module, self.$$prototype);\n      return module;\n    }\n  end\n\n  def initialize(&block)\n    module_eval(&block) if block_given?\n  end\n\n  def ===(object)\n    return false if `object == null`\n\n    `Opal.is_a(object, self)`\n  end\n\n  def <(other)\n    unless ::Module === other\n      ::Kernel.raise ::TypeError, 'compared with non class/module'\n    end\n\n    # class cannot be a descendant of itself\n    %x{\n      var working = self,\n          ancestors,\n          i, length;\n\n      if (working === other) {\n        return false;\n      }\n\n      for (i = 0, ancestors = Opal.ancestors(self), length = ancestors.length; i < length; i++) {\n        if (ancestors[i] === other) {\n          return true;\n        }\n      }\n\n      for (i = 0, ancestors = Opal.ancestors(other), length = ancestors.length; i < length; i++) {\n        if (ancestors[i] === self) {\n          return false;\n        }\n      }\n\n      return nil;\n    }\n  end\n\n  def <=(other)\n    equal?(other) || self < other\n  end\n\n  def >(other)\n    unless ::Module === other\n      ::Kernel.raise ::TypeError, 'compared with non class/module'\n    end\n\n    other < self\n  end\n\n  def >=(other)\n    equal?(other) || self > other\n  end\n\n  def <=>(other)\n    %x{\n      if (self === other) {\n        return 0;\n      }\n    }\n\n    unless ::Module === other\n      return nil\n    end\n\n    lt = self < other\n    return nil if lt.nil?\n    lt ? -1 : 1\n  end\n\n  def alias_method(newname, oldname)\n    newname = `$coerce_to(newname, #{::String}, 'to_str')`\n    oldname = `$coerce_to(oldname, #{::String}, 'to_str')`\n    `Opal.alias(self, newname, oldname)`\n\n    self\n  end\n\n  def alias_native(mid, jsid = mid)\n    `Opal.alias_native(self, mid, jsid)`\n\n    self\n  end\n\n  def ancestors\n    `Opal.ancestors(self)`\n  end\n\n  def append_features(includer)\n    `Opal.append_features(self, includer)`\n    self\n  end\n\n  def attr_accessor(*names)\n    attr_reader(*names)\n    attr_writer(*names)\n  end\n\n  def attr(*args)\n    %x{\n      if (args.length == 2 && (args[1] === true || args[1] === false)) {\n        #{warn 'optional boolean argument is obsoleted', uplevel: 1}\n\n        args[1] ? #{attr_accessor(`args[0]`)} : #{attr_reader(`args[0]`)};\n        return nil;\n      }\n    }\n\n    attr_reader(*args)\n  end\n\n  def attr_reader(*names)\n    %x{\n      var proto = self.$$prototype;\n\n      for (var i = names.length - 1; i >= 0; i--) {\n        var name = names[i],\n            id   = '$' + name,\n            ivar = Opal.ivar(name);\n\n        // the closure here is needed because name will change at the next\n        // cycle, I wish we could use let.\n        var body = (function(ivar) {\n          return function() {\n            if (this[ivar] == null) {\n              return nil;\n            }\n            else {\n              return this[ivar];\n            }\n          };\n        })(ivar);\n\n        // initialize the instance variable as nil\n        Opal.prop(proto, ivar, nil);\n\n        body.$$parameters = [];\n        body.$$arity = 0;\n\n        Opal.defn(self, id, body);\n      }\n    }\n\n    nil\n  end\n\n  def attr_writer(*names)\n    %x{\n      var proto = self.$$prototype;\n\n      for (var i = names.length - 1; i >= 0; i--) {\n        var name = names[i],\n            id   = '$' + name + '=',\n            ivar = Opal.ivar(name);\n\n        // the closure here is needed because name will change at the next\n        // cycle, I wish we could use let.\n        var body = (function(ivar){\n          return function(value) {\n            return this[ivar] = value;\n          }\n        })(ivar);\n\n        body.$$parameters = [['req']];\n        body.$$arity = 1;\n\n        // initialize the instance variable as nil\n        Opal.prop(proto, ivar, nil);\n\n        Opal.defn(self, id, body);\n      }\n    }\n\n    nil\n  end\n\n  def autoload(const, path)\n    %x{\n      if (!#{Opal.const_name?(const)}) {\n        #{::Kernel.raise ::NameError, \"autoload must be constant name: #{const}\"}\n      }\n\n      if (path == \"\") {\n        #{::Kernel.raise ::ArgumentError, 'empty file name'}\n      }\n\n      if (!self.$$const.hasOwnProperty(#{const})) {\n        if (!self.$$autoload) {\n          self.$$autoload = {};\n        }\n        Opal.const_cache_version++;\n        self.$$autoload[#{const}] = { path: #{path}, loaded: false, required: false, success: false, exception: false };\n      }\n      return nil;\n    }\n  end\n\n  def autoload?(const)\n    %x{\n      if (self.$$autoload && self.$$autoload[#{const}] && !self.$$autoload[#{const}].required && !self.$$autoload[#{const}].success) {\n        return self.$$autoload[#{const}].path;\n      }\n\n      var ancestors = self.$ancestors();\n\n      for (var i = 0, length = ancestors.length; i < length; i++) {\n        if (ancestors[i].$$autoload && ancestors[i].$$autoload[#{const}] && !ancestors[i].$$autoload[#{const}].required && !ancestors[i].$$autoload[#{const}].success) {\n          return ancestors[i].$$autoload[#{const}].path;\n        }\n      }\n      return nil;\n    }\n  end\n\n  def class_variables\n    `Object.keys(Opal.class_variables(self))`\n  end\n\n  def class_variable_get(name)\n    name = ::Opal.class_variable_name!(name)\n\n    `Opal.class_variable_get(self, name, false)`\n  end\n\n  def class_variable_set(name, value)\n    name = ::Opal.class_variable_name!(name)\n\n    `Opal.class_variable_set(self, name, value)`\n  end\n\n  def class_variable_defined?(name)\n    name = ::Opal.class_variable_name!(name)\n\n    `Opal.class_variables(self).hasOwnProperty(name)`\n  end\n\n  def remove_class_variable(name)\n    name = ::Opal.class_variable_name!(name)\n\n    %x{\n      if (Opal.hasOwnProperty.call(self.$$cvars, name)) {\n        var value = self.$$cvars[name];\n        delete self.$$cvars[name];\n        return value;\n      } else {\n        #{::Kernel.raise ::NameError, \"cannot remove #{name} for #{self}\"}\n      }\n    }\n  end\n\n  def constants(inherit = true)\n    `Opal.constants(self, inherit)`\n  end\n\n  def self.constants(inherit = undefined)\n    %x{\n      if (inherit == null) {\n        var nesting = (self.$$nesting || []).concat($Object),\n            constant, constants = {},\n            i, ii;\n\n        for(i = 0, ii = nesting.length; i < ii; i++) {\n          for (constant in nesting[i].$$const) {\n            constants[constant] = true;\n          }\n        }\n        return Object.keys(constants);\n      } else {\n        return Opal.constants(self, inherit)\n      }\n    }\n  end\n\n  def self.nesting\n    `self.$$nesting || []`\n  end\n\n  # check for constant within current scope\n  # if inherit is true or self is Object, will also check ancestors\n  def const_defined?(name, inherit = true)\n    name = Opal.const_name!(name)\n\n    ::Kernel.raise ::NameError.new(\"wrong constant name #{name}\", name) unless name =~ ::Opal::CONST_NAME_REGEXP\n\n    %x{\n      var module, modules = [self], module_constants, i, ii;\n\n      // Add up ancestors if inherit is true\n      if (inherit) {\n        modules = modules.concat(Opal.ancestors(self));\n\n        // Add Object's ancestors if it's a module – modules have no ancestors otherwise\n        if (self.$$is_module) {\n          modules = modules.concat([$Object]).concat(Opal.ancestors($Object));\n        }\n      }\n\n      for (i = 0, ii = modules.length; i < ii; i++) {\n        module = modules[i];\n        if (module.$$const[#{name}] != null) { return true; }\n        if (\n          module.$$autoload &&\n          module.$$autoload[#{name}] &&\n          !module.$$autoload[#{name}].required &&\n          !module.$$autoload[#{name}].success\n        ) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  end\n\n  def const_get(name, inherit = true)\n    name = Opal.const_name!(name)\n\n    %x{\n      if (name.indexOf('::') === 0 && name !== '::'){\n        name = name.slice(2);\n      }\n    }\n\n    if `name.indexOf('::') != -1 && name != '::'`\n      return name.split('::').inject(self) { |o, c| o.const_get(c) }\n    end\n\n    ::Kernel.raise ::NameError.new(\"wrong constant name #{name}\", name) unless name =~ ::Opal::CONST_NAME_REGEXP\n\n    %x{\n      if (inherit) {\n        return Opal.$$([self], name);\n      } else {\n        return Opal.const_get_local(self, name);\n      }\n    }\n  end\n\n  def const_missing(name)\n    full_const_name = self == ::Object ? name : \"#{self}::#{name}\"\n\n    ::Kernel.raise ::NameError.new(\"uninitialized constant #{full_const_name}\", name)\n  end\n\n  def const_set(name, value)\n    name = ::Opal.const_name!(name)\n\n    if name !~ ::Opal::CONST_NAME_REGEXP || name.start_with?('::')\n      ::Kernel.raise ::NameError.new(\"wrong constant name #{name}\", name)\n    end\n\n    `$const_set(self, name, value)`\n\n    value\n  end\n\n  def public_constant(const_name)\n  end\n\n  def define_method(name, method = undefined, &block)\n    %x{\n      if (method === undefined && block === nil)\n        #{::Kernel.raise ::ArgumentError, 'tried to create a Proc object without a block'}\n    }\n\n    block ||= case method\n              when ::Proc\n                method\n\n              when ::Method\n                `#{method.to_proc}.$$unbound`\n\n              when ::UnboundMethod\n                ->(*args) {\n                  bound = method.bind(self)\n                  bound.call(*args)\n                }\n\n              else\n                ::Kernel.raise ::TypeError, \"wrong argument type #{block.class} (expected Proc/Method)\"\n              end\n\n    %x{\n      var id = '$' + name;\n\n      block.$$jsid        = name;\n      block.$$s           = null;\n      block.$$def         = block;\n      block.$$define_meth = true;\n\n      return Opal.defn(self, id, block);\n    }\n  end\n\n  def remove_method(*names)\n    %x{\n      for (var i = 0, length = names.length; i < length; i++) {\n        Opal.rdef(self, \"$\" + names[i]);\n      }\n    }\n\n    self\n  end\n\n  def singleton_class?\n    `!!self.$$is_singleton`\n  end\n\n  def include(*mods)\n    %x{\n      for (var i = mods.length - 1; i >= 0; i--) {\n        var mod = mods[i];\n\n        if (!mod.$$is_module) {\n          #{::Kernel.raise ::TypeError, \"wrong argument type #{`mod`.class} (expected Module)\"};\n        }\n\n        #{`mod`.append_features self};\n        #{`mod`.included self};\n      }\n    }\n\n    self\n  end\n\n  def included_modules\n    `Opal.included_modules(self)`\n  end\n\n  def include?(mod)\n    %x{\n      if (!mod.$$is_module) {\n        #{::Kernel.raise ::TypeError, \"wrong argument type #{`mod`.class} (expected Module)\"};\n      }\n\n      var i, ii, mod2, ancestors = Opal.ancestors(self);\n\n      for (i = 0, ii = ancestors.length; i < ii; i++) {\n        mod2 = ancestors[i];\n        if (mod2 === mod && mod2 !== self) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  end\n\n  def instance_method(name)\n    %x{\n      var meth = self.$$prototype['$' + name];\n\n      if (!meth || meth.$$stub) {\n        #{::Kernel.raise ::NameError.new(\"undefined method `#{name}' for class `#{self.name}'\", name)};\n      }\n\n      return #{::UnboundMethod.new(self, `meth.$$owner || #{self}`, `meth`, name)};\n    }\n  end\n\n  def instance_methods(include_super = true)\n    %x{\n      if ($truthy(#{include_super})) {\n        return Opal.instance_methods(self);\n      } else {\n        return Opal.own_instance_methods(self);\n      }\n    }\n  end\n\n  def included(mod)\n  end\n\n  def extended(mod)\n  end\n\n  def extend_object(object)\n  end\n\n  def method_added(*)\n  end\n\n  def method_removed(*)\n  end\n\n  def method_undefined(*)\n  end\n\n  def module_eval(*args, &block)\n    if block.nil? && `!!Opal.compile`\n      ::Kernel.raise ::ArgumentError, 'wrong number of arguments (0 for 1..3)' unless (1..3).cover? args.size\n\n      string, file, _lineno = *args\n      default_eval_options = { file: (file || '(eval)'), eval: true }\n      compiling_options = __OPAL_COMPILER_CONFIG__.merge(default_eval_options)\n      compiled = ::Opal.compile string, compiling_options\n      block = ::Kernel.proc do\n        %x{new Function(\"Opal,self\", \"return \" + compiled)(Opal, self)}\n      end\n    elsif args.any?\n      ::Kernel.raise ::ArgumentError, \"wrong number of arguments (#{args.size} for 0)\" \\\n                                      \"\\n\\n  NOTE:If you want to enable passing a String argument please add \\\"require 'opal-parser'\\\" to your script\\n\"\n    end\n\n    %x{\n      var old = block.$$s,\n          result;\n\n      block.$$s = null;\n      result = block.apply(self, [self]);\n      block.$$s = old;\n\n      return result;\n    }\n  end\n\n  def module_exec(*args, &block)\n    %x{\n      if (block === nil) {\n        #{::Kernel.raise ::LocalJumpError, 'no block given'}\n      }\n\n      var block_self = block.$$s, result;\n\n      block.$$s = null;\n      result = block.apply(self, args);\n      block.$$s = block_self;\n\n      return result;\n    }\n  end\n\n  def method_defined?(method)\n    %x{\n      var body = self.$$prototype['$' + method];\n      return (!!body) && !body.$$stub;\n    }\n  end\n\n  def module_function(*methods)\n    %x{\n      if (methods.length === 0) {\n        self.$$module_function = true;\n        return nil;\n      }\n      else {\n        for (var i = 0, length = methods.length; i < length; i++) {\n          var meth = methods[i],\n              id   = '$' + meth,\n              func = self.$$prototype[id];\n\n          Opal.defs(self, id, func);\n        }\n        return methods.length === 1 ? methods[0] : methods;\n      }\n\n      return self;\n    }\n  end\n\n  def name\n    %x{\n      if (self.$$full_name) {\n        return self.$$full_name;\n      }\n\n      var result = [], base = self;\n\n      while (base) {\n        // Give up if any of the ancestors is unnamed\n        if (base.$$name === nil || base.$$name == null) return nil;\n\n        result.unshift(base.$$name);\n\n        base = base.$$base_module;\n\n        if (base === $Object) {\n          break;\n        }\n      }\n\n      if (result.length === 0) {\n        return nil;\n      }\n\n      return self.$$full_name = result.join('::');\n    }\n  end\n\n  def prepend(*mods)\n    %x{\n      if (mods.length === 0) {\n        #{::Kernel.raise ::ArgumentError, 'wrong number of arguments (given 0, expected 1+)'}\n      }\n\n      for (var i = mods.length - 1; i >= 0; i--) {\n        var mod = mods[i];\n\n        if (!mod.$$is_module) {\n          #{::Kernel.raise ::TypeError, \"wrong argument type #{`mod`.class} (expected Module)\"};\n        }\n\n        #{`mod`.prepend_features self};\n        #{`mod`.prepended self};\n      }\n    }\n\n    self\n  end\n\n  def prepend_features(prepender)\n    %x{\n      if (!self.$$is_module) {\n        #{::Kernel.raise ::TypeError, \"wrong argument type #{self.class} (expected Module)\"};\n      }\n\n      Opal.prepend_features(self, prepender)\n    }\n    self\n  end\n\n  def prepended(mod)\n  end\n\n  def remove_const(name)\n    `Opal.const_remove(self, name)`\n  end\n\n  def to_s\n    `Opal.Module.$name.call(self)` || \"#<#{`self.$$is_module ? 'Module' : 'Class'`}:0x#{__id__.to_s(16)}>\"\n  end\n\n  def undef_method(*names)\n    %x{\n      for (var i = 0, length = names.length; i < length; i++) {\n        Opal.udef(self, \"$\" + names[i]);\n      }\n    }\n\n    self\n  end\n\n  def instance_variables\n    consts = constants\n    %x{\n      var result = [];\n\n      for (var name in self) {\n        if (self.hasOwnProperty(name) && name.charAt(0) !== '$' && name !== 'constructor' && !#{consts.include?(`name`)}) {\n          result.push('@' + name);\n        }\n      }\n\n      return result;\n    }\n  end\n\n  def dup\n    copy = super\n    copy.copy_class_variables(self)\n    copy.copy_constants(self)\n    copy\n  end\n\n  def copy_class_variables(other)\n    %x{\n      for (var name in other.$$cvars) {\n        self.$$cvars[name] = other.$$cvars[name];\n      }\n    }\n  end\n\n  def copy_constants(other)\n    %x{\n      var name, other_constants = other.$$const;\n\n      for (name in other_constants) {\n        $const_set(self, name, other_constants[name]);\n      }\n    }\n  end\n\n  def refine(klass, &block)\n    refinement_module, m, klass_id = self, nil, nil\n    %x{\n      klass_id = Opal.id(klass);\n      if (typeof self.$$refine_modules === \"undefined\") {\n        self.$$refine_modules = {};\n      }\n      if (typeof self.$$refine_modules[klass_id] === \"undefined\") {\n        m = self.$$refine_modules[klass_id] = #{::Refinement.new};\n      }\n      else {\n        m = self.$$refine_modules[klass_id];\n      }\n      m.refinement_module = refinement_module\n      m.refined_class = klass\n    }\n    m.class_exec(&block)\n    m\n  end\n\n  # Compiler overrides this method\n  def using(mod)\n    ::Kernel.raise 'Module#using is not permitted in methods'\n  end\n\n  alias class_eval module_eval\n  alias class_exec module_exec\n  alias inspect to_s\nend\n\nclass ::Refinement < ::Module\n  def inspect\n    if @refinement_module\n      \"#<refinement:#{@refined_class.inspect}@#{@refinement_module.inspect}>\"\n    else\n      super\n    end\n  end\nend\n"],"names":["<top (required)>","<class:Module>","allocate","self","initialize","block_given?","module_eval","block","to_proc","===","object","<","other","Module","Kernel","raise","TypeError","<=","$ret_or_1","equal?",">",">=","<=>","lt","nil?","-1","1","alias_method","newname","oldname","String","alias_native","mid","jsid","ancestors","append_features","includer","attr_accessor","attr_reader","names","attr_writer","attr","warn","args","autoload","const$","path","Opal","const_name?","NameError","ArgumentError","autoload?","class_variables","class_variable_get","name","class_variable_name!","class_variable_set","value","class_variable_defined?","remove_class_variable","constants","inherit","nesting","const_defined?","const_name!","=~","Opal::CONST_NAME_REGEXP","new","const_get","inject","split","block in const_get","o","c","block (2 levels) in const_get","const_missing","full_const_name","Object","const_set","!~","start_with?","public_constant","const_name","define_method","method","Proc","$ret_or_2","Method","UnboundMethod","block in define_method","block (2 levels) in define_method","bound","bind","call","class","remove_method","singleton_class?","include","included","included_modules","include?","mod","instance_method","instance_methods","include_super","extended","extend_object","method_added","method_removed","method_undefined","3","cover?","size","string","file","_lineno","default_eval_options","compiling_options","__OPAL_COMPILER_CONFIG__","merge","compiled","compile","proc","block in module_eval","block (2 levels) in module_eval","any?","module_exec","LocalJumpError","method_defined?","module_function","prepend","prepend_features","prepended","prepender","remove_const","to_s","__id__","16","undef_method","instance_variables","consts","dup","copy","copy_class_variables","copy_constants","refine","klass","refinement_module","m","klass_id","Refinement","class_exec","using","<class:Refinement>","inspect","@refinement_module","@refined_class"],"mappings":"AAAAA,iDAAAA;EAAAA;;EAAAA;;EAEAC;EAAAA;;IAAAA;;;IACEC,MAAIC,IAAJD,eAAAA,oBAAAA;AAAAA,MAAAA;;;AAEFA;AACAA;AACAA;AACAA;AACAA;IANEA,CAAAA,GAAAA;;AASAE,IAAAA,0BAAAA,sBAAAA;AAAAA,MAAAA;;MAAAA;;;MACE,IAAuBC,eAAvB;QAAAD,OAAAE,MAAAH,IAAAG,eAAAA,EAAAA,EAAAA,EAAaC,KAADC,SAAAA,CAAAA,CAAZF;MAAA;QAbJF,OAAA;MAaI;IADFA,CAAAA,GAAAA;;AAIAK,IAAAA,mBAAAA,6BAAQC,MAARD;AAAAA,MAAAA;;;MACE,IAAA,QAAiBA,cAAjB,CAAA;QAAA,OAAO;MAAP;MAEAA,OAACA,uBAADA;IAHFA,CAAAA,GAAAA;;AAMAE,IAAAA,iBAAAA,uBAAMC,KAAND;AAAAA,MAAAA;;;MACE,KAAA,QAAOE,OAAP,EAAoBD,KAApB,CAAA;QACEE,OAAQC,OAAAA,CAAOC,gBAAf,EAA4BL,gCAApBI;MADV;;AAMJJ;AACAA;AACAA;;AAEAA;AACAA;AACAA;;AAEAA;AACAA;AACAA;AACAA;AACAA;;AAEAA;AACAA;AACAA;AACAA;AACAA;;AAEAA;AACAA;IA5BEA,CAAAA,GAAAA;;AA+BAM,IAAAA,kBAAAA,0BAAOL,KAAPK;AAAAA,MAAAA;;MACE,IAAA,QAAAC,CAAAA,YAAAf,IAAAgB,WAAAA,CAAOP,KAAPO,CAAAD,CAAA,CAAA;QAAAD,OAAA;MAAA;QAAiBA,OAAKN,OAALR,IAAKQ,EAAEC,KAAFD;MAAtB;IADFM,CAAAA,GAAAA;;AAIAG,IAAAA,iBAAAA,uBAAMR,KAANQ;AAAAA,MAAAA;;;MACE,KAAA,QAAOP,OAAP,EAAoBD,KAApB,CAAA;QACEE,OAAQC,OAAAA,CAAOC,gBAAf,EAA4BI,gCAApBL;MADV;MAIAK,OAAMT,OAANC,KAAMD,EAAER,IAAFQ;IALRS,CAAAA,GAAAA;;AAQAC,IAAAA,kBAAAA,0BAAOT,KAAPS;AAAAA,MAAAA;;MACE,IAAA,QAAAH,CAAAA,YAAAf,IAAAgB,WAAAA,CAAOP,KAAPO,CAAAD,CAAA,CAAA;QAAAG,OAAA;MAAA;QAAiBA,OAAKD,OAALjB,IAAKiB,EAAER,KAAFQ;MAAtB;IADFC,CAAAA,GAAAA;;AAIAC,IAAAA,mBAAAA,6BAAQV,KAARU;AAAAA,MAAAA;;;;AAEFA;AACAA;AACAA;AACAA;MAEI,KAAA,QAAOT,OAAP,EAAoBD,KAApB,CAAA;QACE,OAAO;MADT;MAIAW,KAAUZ,OAALR,IAAKQ,EAAEC,KAAFD;MACV,IAAA,QAAcY,EAAEC,SAAAA,CAAAA,CAAhB,CAAA;QAAA,OAAO;MAAP;MACA,IAAA,QAAAD,EAAA,CAAA;QAAKD,OAAAG;MAAL;QAAUH,OAAAI;MAAV;IAbFJ,CAAAA,GAAAA;;AAgBAK,IAAAA,4BAAAA,wBAAiBC,OAAD,EAAUC,OAA1BF;AAAAA,MAAAA;;;MACEC,UAAWD,oBAAsBG,aAASH;MAC1CE,UAAWF,oBAAsBG,aAASH;MACzCA;MAEDA,OAAAxB;IALFwB,CAAAA,GAAAA;;AAQAI,IAAAA,4BAAAA,wBAAiBC,GAAD,EAAMC,IAAtBF;AAAAA,MAAAA;;;;MAAsB,yBAAOC,GAAP;MACnBD;MAEDA,OAAA5B;IAHF4B,CAAAA,IAAAA;;AAMAG,IAAAA,yBAAAA,qBAAAA;AAAAA,MAAAA;;MACEA,OAACA,oBAADA;IADFA,CAAAA,GAAAA;;AAIAC,IAAAA,+BAAAA,2BAAoBC,QAApBD;AAAAA,MAAAA;;;MACGA;MACDA,OAAAhC;IAFFgC,CAAAA,GAAAA;;AAKAE,IAAAA,6BAAAA,yBA5GF,EA4GEA;AAAAA,MAAAA;;;;MA5GF;;MA4GoB;MAChBC,MAAAnC,IAAAmC,eAAAA,EAAY,MAACC,KAAD,CAAZD;MACAD,OAAAG,MAAArC,IAAAqC,eAAAA,EAAY,MAACD,KAAD,CAAZC;IAFFH,CAAAA,IAAAA;;AAKAI,IAAAA,oBAAAA,gBAjHF,EAiHEA;AAAAA,MAAAA;;;;MAjHF;;MAiHW;;AAEXA;AACAA,QAAUtC,IAAAuC,MAAAA,CAAKD,wCAAL,EAA+C,qBAAA,WAASf,CAAT,EAA/CgB;;AAEVD,kBAAoBtC,IAAAkC,eAAAA,CAAeI,OAAfJ,CAAyBI,GAAKtC,IAAAmC,aAAAA,CAAaG,OAAbH,CAAuBG;AACzEA;AACAA;AACAA;MAEIA,OAAAH,MAAAnC,IAAAmC,eAAAA,EAAY,MAACK,IAAD,CAAZL;IAVFG,CAAAA,IAAAA;;AAaAH,IAAAA,2BAAAA,uBA9HF,EA8HEA;AAAAA,MAAAA;;;;MA9HF;;MA8HkB;;AAElBA;;AAEAA;AACAA;AACAA;AACAA;;AAEAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;;AAEAA;AACAA;;AAEAA;AACAA;;AAEAA;AACAA;AACAA;MAEIA,OAAA;IAhCFA,CAAAA,IAAAA;;AAmCAE,IAAAA,2BAAAA,uBAjKF,EAiKEA;AAAAA,MAAAA;;;;MAjKF;;MAiKkB;;AAElBA;;AAEAA;AACAA;AACAA;AACAA;;AAEAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;;AAEAA;AACAA;;AAEAA;AACAA;;AAEAA;AACAA;AACAA;MAEIA,OAAA;IA3BFA,CAAAA,IAAAA;;AA8BAI,IAAAA,wBAAAA,oBAAaC,MAAD,EAAQC,IAApBF;AAAAA,MAAAA;;;AAEFA,WAAaG,UAAIC,gBAAAA,CAAaH,MAAbG,CAAoBJ;AACrCA,QAAU9B,OAAQC,OAAAA,CAAOkC,gBAAf,EAA6BL,kCAAD,GAAA,CAAmCC,MAAnC,CAApB9B;AAClB6B;;AAEAA;AACAA,QAAU9B,OAAQC,OAAAA,CAAOmC,oBAAf,EAAgCN,iBAAxB7B;AAClB6B;;AAEAA,uCAAyCC,MAAMD;AAC/CA;AACAA;AACAA;AACAA;AACAA,wBAA0BC,MAAMD,YAAcE,IAAKF;AACnDA;AACAA;AACAA;IAlBEA,CAAAA,GAAAA;;AAqBAO,IAAAA,yBAAAA,iCAAcN,MAAdM;AAAAA,MAAAA;;;AAEFA,6CAA+CN,MAAMM,sBAAwBN,MAAMM,+BAAiCN,MAAMM;AAC1HA,+BAAiCN,MAAMM;AACvCA;;AAEAA;;AAEAA;AACAA,+DAAiEN,MAAMM,8BAAgCN,MAAMM,uCAAyCN,MAAMM;AAC5JA,yCAA2CN,MAAMM;AACjDA;AACAA;AACAA;AACAA;IAdEA,CAAAA,GAAAA;;AAiBAC,IAAAA,+BAAAA,2BAAAA;AAAAA,MAAAA;;MACEA,OAACA,uCAADA;IADFA,CAAAA,GAAAA;;AAIAC,IAAAA,kCAAAA,8BAAuBC,IAAvBD;AAAAA,MAAAA;;;MACEC,OAAOP,KAAMQ,yBAAAA,CAAsBD,IAAtBC;MAEbF,OAACA,0CAADA;IAHFA,CAAAA,GAAAA;;AAMAG,IAAAA,kCAAAA,8BAAuBF,IAAD,EAAOG,KAA7BD;AAAAA,MAAAA;;;MACEF,OAAOP,KAAMQ,yBAAAA,CAAsBD,IAAtBC;MAEbC,OAACA,0CAADA;IAHFA,CAAAA,GAAAA;;AAMAE,IAAAA,uCAAAA,+CAA4BJ,IAA5BI;AAAAA,MAAAA;;;MACEJ,OAAOP,KAAMQ,yBAAAA,CAAsBD,IAAtBC;MAEbG,OAACA,+CAADA;IAHFA,CAAAA,GAAAA;;AAMAC,IAAAA,qCAAAA,iCAA0BL,IAA1BK;AAAAA,MAAAA;;;MACEL,OAAOP,KAAMQ,yBAAAA,CAAsBD,IAAtBC;;AAGjBI;AACAA;AACAA;AACAA;AACAA;AACAA,QAAU7C,OAAQC,OAAAA,CAAOkC,gBAAf,EAA6BU,gBAAD,GAAA,CAAiBL,IAAjB,CAAA,GAAsBK,OAAtB,GAAA,CAA6BxD,IAA7B,CAApBY;AAClB4C;AACAA;IAXEA,CAAAA,GAAAA;;AAcAC,IAAAA,yBAAAA,qBAAcC,OAAdD;AAAAA,MAAAA;;;;MAAc,+BAAU,IAAV;MACZA,OAACA,6BAADA;IADFA,CAAAA,IAAAA;IAIAA,MAAIzD,IAAJyD,gBAAAA,qBAAmBC,OAAnBD;AAAAA,MAAAA;;;;;AAEFA;AACAA;AACAA;AACAA;;AAEAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;IAhBEA,CAAAA,IAAAA;IAmBAE,MAAI3D,IAAJ2D,cAAAA,mBAAAA;AAAAA,MAAAA;;MACEA,OAACA,oBAADA;IADFA,CAAAA,GAAAA;;AAMAC,IAAAA,8BAAAA,sCAAmBT,IAAD,EAAOO,OAAzBE;AAAAA,MAAAA;;;;MAAyB,+BAAU,IAAV;MACvBT,OAAOP,UAAIiB,gBAAAA,CAAaV,IAAbU;MAEX,KAAA,QAA2EV,IAAKW,OAAAA,CAAGC,IAAAnB,KAAAmB,sBAAHD,CAAhF,CAAA;QAAAnD,OAAQC,OAAAA,CAAOkC,gBAAWkB,KAAAA,CAAMJ,sBAAD,GAAA,CAAuBT,IAAvB,CAAhB,EAA+CA,IAApCa,CAAlBpD;MAAR;;AAGJgD;;AAEAA;AACAA;AACAA;;AAEAA;AACAA;AACAA;AACAA;AACAA;;AAEAA;AACAA;AACAA,2BAA6BT,IAAKS;AAClCA;AACAA;AACAA,4BAA8BT,IAAKS;AACnCA,6BAA+BT,IAAKS;AACpCA,6BAA+BT,IAAKS;AACpCA;AACAA;AACAA;AACAA;;AAEAA;AACAA;IAhCEA,CAAAA,IAAAA;;AAmCAK,IAAAA,yBAAAA,qBAAcd,IAAD,EAAOO,OAApBO;AAAAA,MAAAA;;;;MAAoB,+BAAU,IAAV;MAClBd,OAAOP,UAAIiB,gBAAAA,CAAaV,IAAbU;;AAGfI;AACAA;AACAA;AACAA;MAEI,IAAA,QAAIA,wCAAJ,CAAA;QACE,OAAuBC,MAAhBf,IAAIgB,OAAAA,CAAOF,IAAPE,CAAYD,UAAAA,EAAAA,CAAQlE,IAARkE,CAAAA,EAAhBE,cAAiCC,CAAD,EAAIC,CAApCF;;;UAAiC;;UAAG;UAAGG,OAAAF,CAACJ,WAAAA,CAAWK,CAAXL,EAAxCG,CAAAA,GAAgBF;MADzB;MAIA,KAAA,QAA2Ef,IAAKW,OAAAA,CAAGC,IAAAnB,KAAAmB,sBAAHD,CAAhF,CAAA;QAAAnD,OAAQC,OAAAA,CAAOkC,gBAAWkB,KAAAA,CAAMC,sBAAD,GAAA,CAAuBd,IAAvB,CAAhB,EAA+CA,IAApCa,CAAlBpD;MAAR;;AAGJqD;AACAA;AACAA;AACAA;AACAA;AACAA;IArBEA,CAAAA,IAAAA;;AAwBAO,IAAAA,6BAAAA,yBAAkBrB,IAAlBqB;AAAAA,MAAAA;;;MACEC,kBAAkB,CAAA,MAAAzE,IAAA,EAAQ0E,OAAR,CAAA,GAAA,CAAmBvB,IAAnB,IAAA,CAA0B,EAAA,GAAA,CAAGnD,IAAH,CAAA,GAAQwE,IAAR,GAAA,CAAYrB,IAAZ,CAA1B,CAAA;MAElBqB,OAAA7D,OAAQC,OAAAA,CAAOkC,gBAAWkB,KAAAA,CAAMQ,yBAAD,GAAA,CAA0BC,eAA1B,CAAhB,EAA6DtB,IAAlDa,CAAlBpD;IAHV4D,CAAAA,GAAAA;;AAMAG,IAAAA,yBAAAA,qBAAcxB,IAAD,EAAOG,KAApBqB;AAAAA,MAAAA;;;MACExB,OAAOP,KAAMiB,gBAAAA,CAAaV,IAAbU;MAEb,IAAG,CAAA,QAAAV,IAAKyB,OAAAA,CAAGb,IAAAnB,KAAAmB,sBAAHa,CAAL,CAAA,IAAA,CAAA,QAAqCzB,IAAI0B,gBAAAA,CAAaF,IAAbE,CAAzC,CAAA,CAAA,CAAH;QACElE,OAAQC,OAAAA,CAAOkC,gBAAWkB,KAAAA,CAAMW,sBAAD,GAAA,CAAuBxB,IAAvB,CAAhB,EAA+CA,IAApCa,CAAlBpD;MADV;MAIC+D;MAEDA,OAAArB;IATFqB,CAAAA,GAAAA;;AAYAG,IAAAA,+BAAAA,2BAAoBC,UAApBD;AAAAA;MAnXFA,OAAA;IAmXEA,CAAAA,GAAAA;;AAGAE,IAAAA,6BAAAA,yBAAkB7B,IAAD,EAAO8B,MAAxBD;AAAAA,MAAAA;;MAAAA;;;;;AAEFA;AACAA,QAAUrE,OAAQC,OAAAA,CAAOmC,oBAAf,EAAgCiC,+CAAxBpE;AAClBoE;MAEI5E,QA5XJ,CAAA,QAAAW,CAAAA,YA4XIX,KA5XJW,CAAA,CAAA,GAAA,CAAA,SAAA,IA6Xc,CAAA,QAAKmE,WAAL,EADAC,CAAAA,YAAKF,MAALE,CACA,CAAA,GAAA,CACEF,MADF,IAGA,CAAA,QAAKG,aAAL,EAhYd,SAgYc,CAAA,GAAA,CACKH,MAAM5E,SAAAA,CAAAA,CAAS2E,UADpB,IAGA,CAAA,QAAKK,oBAAL,EAnYd,SAmYc,CAAA,GAAA,CACE,QAAAC,cApYhB,EAoYgBA,EAAAC;;;;QApYhB;;QAoYmB;QACDC,QAAQP,MAAMQ,MAAAA,CAAMzF,IAANyF;QACdF,OAAKG,MAALF,KAAKE,QAAAA,EAAM,MAAClD,IAAD,CAANkD,EAFPJ,CAAAA,GAAAA,sBAAAA,CAAA,CADF,IAAA,CAOE3E,OAAQC,OAAAA,CAAOC,gBAAf,EAA6BmE,sBAAD,GAAA,CAAuB5E,KAAKuF,OAAAA,CAAAA,CAA5B,CAAA,GAAmCX,yBAAvDpE,CAPV,CAAA,CAHA,CAHA,CA7Xd;;AA8YAoE;;AAEAA;AACAA;AACAA;AACAA;;AAEAA;AACAA;IAhCEA,CAAAA,IAAAA;;AAmCAY,IAAAA,6BAAAA,yBAzZF,EAyZEA;AAAAA,MAAAA;;;;MAzZF;;MAyZoB;;AAEpBA;AACAA;AACAA;AACAA;MAEIA,OAAA5F;IAPF4F,CAAAA,IAAAA;;AAUAC,IAAAA,gCAAAA,yCAAAA;AAAAA,MAAAA;;MACEA,OAACA,qBAADA;IADFA,CAAAA,GAAAA;;AAIAC,IAAAA,uBAAAA,mBAvaF,EAuaEA;AAAAA,MAAAA;;;;MAvaF;;MAuac;;AAEdA;AACAA;;AAEAA;AACAA,UAAYnF,OAAQC,OAAAA,CAAOC,gBAAf,EAA6BiF,sBAAD,GAAA,CAAuBA,CAACA,GAADA,CAAKH,OAAAA,CAAAA,CAA5B,CAAA,GAAmCG,oBAAvDlF,CAA2EkF;AAC/FA;;AAEAA,QAAUA,CAACA,GAADA,CAAK9D,iBAAAA,CAAiBhC,IAAjBgC,CAAsB8D;AACrCA,QAAUA,CAACA,GAADA,CAAKC,UAAAA,CAAU/F,IAAV+F,CAAeD;AAC9BA;AACAA;MAEIA,OAAA9F;IAdF8F,CAAAA,IAAAA;;AAiBAE,IAAAA,gCAAAA,4BAAAA;AAAAA,MAAAA;;MACEA,OAACA,2BAADA;IADFA,CAAAA,GAAAA;;AAIAC,IAAAA,wBAAAA,iCAAaC,GAAbD;AAAAA,MAAAA;;;AAEFA;AACAA,QAAUtF,OAAQC,OAAAA,CAAOC,gBAAf,EAA6BoF,sBAAD,GAAA,CAAuBA,CAACA,GAADA,CAAKN,OAAAA,CAAAA,CAA5B,CAAA,GAAmCM,oBAAvDrF,CAA2EqF;AAC7FA;;AAEAA;;AAEAA;AACAA;AACAA;AACAA;AACAA;AACAA;;AAEAA;AACAA;IAhBEA,CAAAA,GAAAA;;AAmBAE,IAAAA,+BAAAA,2BAAoBhD,IAApBgD;AAAAA,MAAAA;;;AAEFA;;AAEAA;AACAA,QAAUxF,OAAQC,OAAAA,CAAOkC,gBAAWkB,KAAAA,CAAMmC,oBAAD,GAAA,CAAqBhD,IAArB,CAAA,GAA0BgD,eAA1B,GAAA,CAAyCnG,IAAImD,MAAAA,CAAAA,CAA7C,CAAA,GAAmDgD,GAAnE,EAAuEhD,IAA5Da,CAAlBpD,CAAoFuF;AACtGA;;AAEAA,aAAed,oBAAerB,KAAAA,CAAKhE,IAApB,EAA2BmG,gBAAkBnG,IAA7C,EAAsDmG,IAAtD,EAA6DhD,IAA9Ca,CAAoDmC;AAClFA;IATEA,CAAAA,GAAAA;;AAYAC,IAAAA,gCAAAA,4BAAqBC,aAArBD;AAAAA,MAAAA;;;;MAAqB,2CAAgB,IAAhB;;AAEvBA,kBAAoBC,aAAcD;AAClCA;AACAA;AACAA;AACAA;AACAA;IAPEA,CAAAA,IAAAA;;AAUAL,IAAAA,wBAAAA,oBAAaG,GAAbH;AAAAA;MAreFA,OAAA;IAqeEA,CAAAA,GAAAA;;AAGAO,IAAAA,wBAAAA,oBAAaJ,GAAbI;AAAAA;MAxeFA,OAAA;IAweEA,CAAAA,GAAAA;;AAGAC,IAAAA,6BAAAA,yBAAkBhG,MAAlBgG;AAAAA;MA3eFA,OAAA;IA2eEA,CAAAA,GAAAA;;AAGAC,IAAAA,4BAAAA,wBA9eF,EA8eEA;AAAAA,MAAAA;;;;MA9eF;;MA8emB;MA9enBA,OAAA;IA8eEA,CAAAA,IAAAA;;AAGAC,IAAAA,8BAAAA,0BAjfF,EAifEA;AAAAA,MAAAA;;;;MAjfF;;MAifqB;MAjfrBA,OAAA;IAifEA,CAAAA,IAAAA;;AAGAC,IAAAA,gCAAAA,4BApfF,EAofEA;AAAAA,MAAAA;;;;MApfF;;MAofuB;MApfvBA,OAAA;IAofEA,CAAAA,IAAAA;;AAGAvG,IAAAA,2BAAAA,uBAvfF,EAufEA;AAAAA,MAAAA;;MAAAA;;;;MAvfF;;MAufkB;MACd,IAAG,CAAA,QAAAC,KAAKiB,SAAAA,CAAAA,CAAL,CAAA,IAAA,CAAA,QAAelB,cAAf,CAAA,CAAA,CAAH;;QACE,KAAA,QAAiF,OAAAoB,CAAA,EAAGoF,CAAH,QAAKC,WAAAA,CAAQpE,IAAIqE,MAAAA,CAAAA,CAAZD,CAAtF,CAAA;UAAAjG,OAAQC,OAAAA,CAAOmC,oBAAf,EAAgC5C,wCAAxBS;QAAR;QAEA,KAAwB,UAAA,MAAC4B,IAAD,CAAA,CAAxB,EAAAsE,CAAAA,SAAA,6BAAAA,CAAA,EAAQC,CAAAA,OAAR,6BAAQA,CAAR,EAAcC,CAAAA,UAAd,6BAAcA,CAAd;QACAC,uBAAuB,0BAAA,QAAS,CAAA,QAAAlG,CAAAA,YAAAgG,IAAAhG,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAAQZ,QAAR,CAAA,CAAT,EAAA,QAAkC,IAAlC;QACvB+G,oBAAoBC,iCAAwBC,OAAAA,CAAOH,oBAAPG;QAC5CC,WAAWzE,KAAM0E,SAAAA,CAASR,MAAf,EAAuBI,iBAAjBI;QACjBlH,QAAgBmH,MAAR5G,OAAQ4G,QAAAA,EAAAA,EAAAA,EAARC,cAAAA,EAAAC;;UACNA,OAAGA,2DAAHA,CADMD,CAAAA,GAAAA,qBAAAA,CAAQD;MAPlB,OAUA,IAAA,QAAM/E,IAAIkF,SAAAA,CAAAA,CAAV,CAAA;QACE/G,OAAQC,OAAAA,CAAOmC,oBAAf,EAAgC,EAAA,GAAA,CAAC5C,6BAAD,GAAA,CAA8BqC,IAAIqE,MAAAA,CAAAA,CAAlC,CAAA,GAAwC1G,SAAxC,CAAA,GACAA,kHADxBS;MADV;;AAMJT;AACAA;;AAEAA;AACAA;AACAA;;AAEAA;AACAA;IAzBEA,CAAAA,IAAAA;;AA4BAwH,IAAAA,2BAAAA,uBAnhBF,EAmhBEA;AAAAA,MAAAA;;MAAAA;;;;MAnhBF;;MAmhBkB;;AAElBA;AACAA,QAAUhH,OAAQC,OAAAA,CAAOgH,qBAAf,EAAiCD,gBAAzB/G;AAClB+G;;AAEAA;;AAEAA;AACAA;AACAA;;AAEAA;AACAA;IAbEA,CAAAA,IAAAA;;AAgBAE,IAAAA,+BAAAA,wCAAoB5C,MAApB4C;AAAAA,MAAAA;;;AAEFA;AACAA;AACAA;IAJEA,CAAAA,GAAAA;;AAOAC,IAAAA,+BAAAA,2BA1iBF,EA0iBEA;AAAAA,MAAAA;;;;MA1iBF;;MA0iBsB;;AAEtBA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;;AAEAA;AACAA;AACAA;AACAA;;AAEAA;AACAA;IAlBEA,CAAAA,IAAAA;;AAqBA3E,IAAAA,oBAAAA,gBAAAA;AAAAA,MAAAA;;;AAEFA;AACAA;AACAA;;AAEAA;;AAEAA;AACAA;AACAA;;AAEAA;;AAEAA;;AAEAA;AACAA;AACAA;AACAA;;AAEAA;AACAA;AACAA;;AAEAA;AACAA;IA1BEA,CAAAA,GAAAA;;AA6BA4E,IAAAA,uBAAAA,mBA5lBF,EA4lBEA;AAAAA,MAAAA;;;;MA5lBF;;MA4lBc;;AAEdA;AACAA,QAAUpH,OAAQC,OAAAA,CAAOmC,oBAAf,EAAgCgF,kDAAxBnH;AAClBmH;;AAEAA;AACAA;;AAEAA;AACAA,UAAYpH,OAAQC,OAAAA,CAAOC,gBAAf,EAA6BkH,sBAAD,GAAA,CAAuBA,CAACA,GAADA,CAAKpC,OAAAA,CAAAA,CAA5B,CAAA,GAAmCoC,oBAAvDnH,CAA2EmH;AAC/FA;;AAEAA,QAAUA,CAACA,GAADA,CAAKC,kBAAAA,CAAkBhI,IAAlBgI,CAAuBD;AACtCA,QAAUA,CAACA,GAADA,CAAKE,WAAAA,CAAWjI,IAAXiI,CAAgBF;AAC/BA;AACAA;MAEIA,OAAA/H;IAlBF+H,CAAAA,IAAAA;;AAqBAC,IAAAA,gCAAAA,4BAAqBE,SAArBF;AAAAA,MAAAA;;;;AAEFA;AACAA,QAAUrH,OAAQC,OAAAA,CAAOC,gBAAf,EAA6BmH,sBAAD,GAAA,CAAuBhI,IAAI2F,OAAAA,CAAAA,CAA3B,CAAA,GAAkCqC,oBAAtDpH,CAA0EoH;AAC5FA;;AAEAA;AACAA;MACIA,OAAAhI;IARFgI,CAAAA,GAAAA;;AAWAC,IAAAA,yBAAAA,qBAAc/B,GAAd+B;AAAAA;MA5nBFA,OAAA;IA4nBEA,CAAAA,GAAAA;;AAGAE,IAAAA,4BAAAA,wBAAiBhF,IAAjBgF;AAAAA,MAAAA;;MACEA,OAACA,6BAADA;IADFA,CAAAA,GAAAA;;AAIAC,IAAAA,oBAAAA,gBAAAA;AAAAA,MAAAA;;MACE,IAAA,QAAArH,CAAAA,YAACqH,4BAADrH,CAAA,CAAA;QAAAqH,OAAA;MAAA;QAAkCA,OAACA,IAAD,GAAA,CAAMA,qCAAN,CAAA,GAA6CA,KAA7C,GAAA,CAAkDpI,IAAAqI,QAAAA,CAAAA,CAAMD,MAAAA,CAAME,EAANF,CAAxD,CAAA,GAAkEA;MAApG;IADFA,CAAAA,GAAAA;;AAIAG,IAAAA,4BAAAA,wBAvoBF,EAuoBEA;AAAAA,MAAAA;;;;MAvoBF;;MAuoBmB;;AAEnBA;AACAA;AACAA;AACAA;MAEIA,OAAAvI;IAPFuI,CAAAA,IAAAA;;AAUAC,IAAAA,kCAAAA,8BAAAA;AAAAA,MAAAA;;;MACEC,SAAShF,mCAAAzD,IAAAyD,WAAAA,CAAAA,CAAAA;;AAEb+E;;AAEAA;AACAA,8FAAgGC,MAAMxC,aAAAA,CAAWuC,IAAXvC,CAAkBuC;AACxHA;AACAA;AACAA;;AAEAA;AACAA;IAZEA,CAAAA,GAAAA;;AAeAE,IAAAA,mBAAAA,eAAAA;AAAAA,MAAAA;;MAAAA;;MACEC,OAAO,OAAA3I,IAAA,EAAA,4CAAA,OAAA,EAAA,EAAA,EAAA,MAAA;MACP2I,IAAIC,sBAAAA,CAAsB5I,IAAtB4I;MACJD,IAAIE,gBAAAA,CAAgB7I,IAAhB6I;MACJH,OAAAC;IAJFD,CAAAA,GAAAA;;AAOAE,IAAAA,oCAAAA,gCAAyBnI,KAAzBmI;AAAAA,MAAAA;;;AAEFA;AACAA;AACAA;AACAA;IALEA,CAAAA,GAAAA;;AAQAC,IAAAA,8BAAAA,0BAAmBpI,KAAnBoI;AAAAA,MAAAA;;;AAEFA;;AAEAA;AACAA;AACAA;AACAA;IAPEA,CAAAA,GAAAA;;AAUAC,IAAAA,sBAAAA,kBAAWC,KAAXD;AAAAA,MAAAA;;MAAAA;;;MACE,KAAiC,CAAA9I,IAAA,EAAM,GAAN,EAAW,GAAX,CAAjC,EAAAgJ,CAAAA,oBAAA,KAAAA,CAAA,EAAmBC,CAAAA,IAAnB,KAAmBA,CAAnB,EAAsBC,CAAAA,WAAtB,KAAsBA,CAAtB;;AAEJJ;AACAA;AACAA;AACAA;AACAA;AACAA,8CAAgDK,iBAAYnF,KAAAA,CAAAA,CAAK8E;AACjEA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;MACKM,MAADH,CAACG,cAAAA,EAAAA,EAAAA,EAAahJ,KAADC,SAAAA,CAAAA,CAAZ+I;MACDN,OAAAG;IAjBFH,CAAAA,GAAAA;;AAqBAO,IAAAA,qBAAAA,iBAAUnD,GAAVmD;AAAAA;MACEA,OAAA1I,OAAQC,OAAAA,CAAOyI,0CAAPzI;IADVyI,CAAAA,GAAAA;IAIA,aAAM,YAAN,EAAiB,aAAjB;IACA,aAAM,YAAN,EAAiB,aAAjB;IACAvJ,OAAA,aAAM,SAAN,EAAc,MAAd;EAltBFA,GAAM,IAANA,EAAAA,IAAAA;EAqtBAD,OAAAyJ;EAAAA;;IAAAA;;AAAAA;IACEA,OAAAC,uBAAAA,mBAAAA;AAAAA,MAAAA;;MAAAA;MACE,IAAA,QAAGC,sBAAH,CAAA;QACED,OAACA,eAAD,GAAA,CAAgBE,kBAAcF,SAAAA,CAAAA,CAA9B,CAAA,GAAuCA,GAAvC,GAAA,CAA0CC,sBAAkBD,SAAAA,CAAAA,CAA5D,CAAA,GAAqEA;MADvE;QAGEA,OAAA,OAAAvJ,IAAA,EAAA,oDAAA,WAAA,EAAA,EAAA,EAAA,MAAA;MAHF;IADFuJ,CAAAA,GAAAA;EADFD,GAAM,IAANA,EAAqB5I,OAArB4I;AAvtBAzJ;"}},{"offset":{"line":4084,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/class.rb"],"sourcesContent":["require 'corelib/module'\n\nclass ::Class\n  def self.new(superclass = Object, &block)\n    %x{\n      if (!superclass.$$is_class) {\n        throw Opal.TypeError.$new(\"superclass must be a Class\");\n      }\n\n      var klass = Opal.allocate_class(nil, superclass);\n      superclass.$inherited(klass);\n      #{`klass`.class_eval(&block) if block_given?}\n      return klass;\n    }\n  end\n\n  def allocate\n    %x{\n      var obj = new self.$$constructor();\n      obj.$$id = Opal.uid();\n      return obj;\n    }\n  end\n\n  def descendants\n    subclasses + subclasses.map(&:descendants).flatten\n  end\n\n  def inherited(cls)\n  end\n\n  def initialize_dup(original)\n    initialize_copy(original)\n    %x{\n      self.$$name = null;\n      self.$$full_name = null;\n    }\n  end\n\n  def new(*args, &block)\n    %x{\n      var object = #{allocate};\n      Opal.send(object, object.$initialize, args, block);\n      return object;\n    }\n  end\n\n  def subclasses\n    %x{\n      if (typeof WeakRef !== 'undefined') {\n        var i, subclass, out = [];\n        for (i = 0; i < self.$$subclasses.length; i++) {\n          subclass = self.$$subclasses[i].deref();\n          if (subclass !== undefined) {\n            out.push(subclass);\n          }\n        }\n        return out;\n      }\n      else {\n        return self.$$subclasses;\n      }\n    }\n  end\n\n  def superclass\n    `self.$$super || nil`\n  end\n\n  def to_s\n    %x{\n      var singleton_of = self.$$singleton_of;\n\n      if (singleton_of && singleton_of.$$is_a_module) {\n        return #{\"#<Class:#{`singleton_of`.name}>\"};\n      }\n      else if (singleton_of) {\n        // a singleton class created from an object\n        return #{\"#<Class:#<#{`singleton_of.$$class`.name}:0x#{`Opal.id(singleton_of)`.to_s(16)}>>\"};\n      }\n\n      return #{super()};\n    }\n  end\n\n  alias inspect to_s\nend\n"],"names":["<top (required)>","self","require","<class:Class>","new","superclass","Object","block_given?","class_eval","block","to_proc","allocate","descendants","+","subclasses","map","flatten","inherited","cls","initialize_dup","original","initialize_copy","to_s","name","16"],"mappings":"AAAAA,gDAAAA;EAAAA;;EAAAA;;EAAAC,IAAAC,SAAAA,CAAQF,gBAARE;EAEAF,OAAAG;EAAAA;;IAAAA;;;IACEC,MAAIH,IAAJG,UAAAA,sBAAaC,UAAbD;AAAAA,MAAAA;;MAAAA;;;;MAAa,qCAAaE,YAAb;;AAEfF;AACAA;AACAA;;AAEAA;AACAA;AACAA,MAAQ,CAA8BG,eAA9B,GAAA,CAAOC,MAAPJ,CAACA,KAADA,CAAOI,cAAAA,EAAAA,EAAAA,EAAaC,KAADC,SAAAA,CAAAA,CAAZF,CAAP,IAAA,GAAA;AACRJ;AACAA;IAVEA,CAAAA,IAAAA;;AAaAO,IAAAA,wBAAAA,oBAAAA;AAAAA,MAAAA;;;AAEFA;AACAA;AACAA;AACAA;IALEA,CAAAA,GAAAA;;AAQAC,IAAAA,2BAAAA,uBAAAA;AAAAA,MAAAA;;MACEA,OAAWC,SAAXZ,IAAAa,YAAAA,CAAAA,CAAWD,EAAYE,MAAVd,IAAAa,YAAAA,CAAAA,CAAUC,OAAAA,EAAAA,EAAAA,EAAM,aAADL,SAAAA,CAAAA,CAALK,CAAmBC,SAAAA,CAAAA,CAA/BH;IADbD,CAAAA,GAAAA;;AAIAK,IAAAA,yBAAAA,qBAAcC,GAAdD;AAAAA;MA5BFA,OAAA;IA4BEA,CAAAA,GAAAA;;AAGAE,IAAAA,8BAAAA,0BAAmBC,QAAnBD;AAAAA,MAAAA;;;MACElB,IAAAoB,iBAAAA,CAAgBD,QAAhBC;;AAEJF;AACAA;AACAA;IALEA,CAAAA,GAAAA;;AAQAf,IAAAA,mBAAAA,sBAvCF,EAuCEA;AAAAA,MAAAA;;MAAAA;;;;MAvCF;;MAuCU;;AAEVA,mBAAqBH,IAAAU,UAAAA,CAAAA,CAASP;AAC9BA;AACAA;AACAA;IALEA,CAAAA,IAAAA;;AAQAU,IAAAA,0BAAAA,sBAAAA;AAAAA,MAAAA;;;AAEFA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;IAfEA,CAAAA,GAAAA;;AAkBAT,IAAAA,0BAAAA,sBAAAA;AAAAA,MAAAA;;MACEA,OAACA,mBAADA;IADFA,CAAAA,GAAAA;;AAIAiB,IAAAA,oBAAAA,gBAAAA;AAAAA,MAAAA;;MAAAA;;AAEFA;;AAEAA;AACAA,eAAkBA,UAAD,GAAA,CAAWA,CAACA,YAADA,CAAcC,MAAAA,CAAAA,CAAzB,CAAA,GAA+BD,GAAGA;AACnDA;AACAA;AACAA;AACAA,eAAkBA,YAAD,GAAA,CAAaA,CAACA,oBAADA,CAAsBC,MAAAA,CAAAA,CAAnC,CAAA,GAAyCD,KAAzC,GAAA,CAA8CA,CAACA,qBAADA,CAAuBA,MAAAA,CAAME,EAANF,CAArE,CAAA,GAA+EA,IAAIA;AACpGA;;AAEAA,aAAe,OAAArB,IAAA,EAAA,8CAAA,QAAA,EAAA,EAAA,EAAA,IAAA,CAAQqB;AACvBA;IAbEA,CAAAA,GAAAA;IAgBAnB,OAAA,aAAM,SAAN,EAAc,MAAd;EAnFFA,GAAM,IAANA,EAAAA,IAAAA;AAFAH;"}},{"offset":{"line":4213,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/basic_object.rb"],"sourcesContent":["# use_strict: true\n\nclass ::BasicObject\n  def initialize(*)\n  end\n\n  def ==(other)\n    `self === other`\n  end\n\n  def eql?(other)\n    self == other\n  end\n\n  alias equal? ==\n\n  def __id__\n    %x{\n      if (self.$$id != null) {\n        return self.$$id;\n      }\n      Opal.prop(self, '$$id', Opal.uid());\n      return self.$$id;\n    }\n  end\n\n  def __send__(symbol, *args, &block)\n    %x{\n      if (!symbol.$$is_string) {\n        #{raise ::TypeError, \"#{inspect} is not a symbol nor a string\"}\n      }\n\n      var func = self['$' + symbol];\n\n      if (func) {\n        if (block !== nil) {\n          func.$$p = block;\n        }\n\n        return func.apply(self, args);\n      }\n\n      if (block !== nil) {\n        self.$method_missing.$$p = block;\n      }\n\n      return self.$method_missing.apply(self, [symbol].concat(args));\n    }\n  end\n\n  def !\n    false\n  end\n\n  def !=(other)\n    !(self == other)\n  end\n\n  def instance_eval(*args, &block)\n    if block.nil? && `!!Opal.compile`\n      ::Kernel.raise ::ArgumentError, 'wrong number of arguments (0 for 1..3)' unless (1..3).cover? args.size\n\n      string, file, _lineno = *args\n      default_eval_options = { file: (file || '(eval)'), eval: true }\n      compiling_options = __OPAL_COMPILER_CONFIG__.merge(default_eval_options)\n      compiled = ::Opal.compile string, compiling_options\n      block = ::Kernel.proc do\n        %x{new Function(\"Opal,self\", \"return \" + compiled)(Opal, self)}\n      end\n    elsif block.nil? && args.length >= 1 && args.first[0] == '@'\n      # get instance variable\n      return instance_variable_get(args.first)\n    elsif args.any?\n      ::Kernel.raise ::ArgumentError, \"wrong number of arguments (#{args.size} for 0)\"\n    end\n\n    %x{\n      var old = block.$$s,\n          result;\n\n      block.$$s = null;\n\n      // Need to pass $$eval so that method definitions know if this is\n      // being done on a class/module. Cannot be compiler driven since\n      // send(:instance_eval) needs to work.\n      if (self.$$is_a_module) {\n        self.$$eval = true;\n        try {\n          result = block.call(self, self);\n        }\n        finally {\n          self.$$eval = false;\n        }\n      }\n      else {\n        result = block.call(self, self);\n      }\n\n      block.$$s = old;\n\n      return result;\n    }\n  end\n\n  def instance_exec(*args, &block)\n    ::Kernel.raise ::ArgumentError, 'no block given' unless block\n\n    %x{\n      var block_self = block.$$s,\n          result;\n\n      block.$$s = null;\n\n      if (self.$$is_a_module) {\n        self.$$eval = true;\n        try {\n          result = block.apply(self, args);\n        }\n        finally {\n          self.$$eval = false;\n        }\n      }\n      else {\n        result = block.apply(self, args);\n      }\n\n      block.$$s = block_self;\n\n      return result;\n    }\n  end\n\n  def singleton_method_added(*)\n  end\n\n  def singleton_method_removed(*)\n  end\n\n  def singleton_method_undefined(*)\n  end\n\n  def method_missing(symbol, *args, &block)\n    inspect_result = ::Opal.inspect(self)\n    ::Kernel.raise ::NoMethodError.new(\n      \"undefined method `#{symbol}' for #{inspect_result}\", symbol, args\n    ), nil, ::Kernel.caller(1)\n  end\n\n  ::Opal.pristine(self, :method_missing)\n\n  def respond_to_missing?(method_name, include_all = false)\n    false\n  end\nend\n"],"names":["<top (required)>","<class:BasicObject>","initialize","==","other","eql?","self","__id__","__send__","symbol","raise","TypeError","inspect","!","!=","instance_eval","block","nil?","1","3","cover?","args","size","Kernel","ArgumentError","string","file","_lineno","default_eval_options","$ret_or_1","compiling_options","__OPAL_COMPILER_CONFIG__","merge","compiled","Opal","compile","proc","block in instance_eval","block (2 levels) in instance_eval",">=","length","first","[]","0","instance_variable_get","any?","instance_exec","singleton_method_added","singleton_method_removed","singleton_method_undefined","method_missing","inspect_result","NoMethodError","new","caller","pristine","respond_to_missing?","method_name","include_all"],"mappings":"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"}},{"offset":{"line":4454,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/kernel.rb"],"sourcesContent":["# helpers: truthy, coerce_to, respond_to, Opal\n# use_strict: true\n\nmodule ::Kernel\n  def =~(obj)\n    false\n  end\n\n  def !~(obj)\n    !(self =~ obj)\n  end\n\n  def ===(other)\n    object_id == other.object_id || self == other\n  end\n\n  def <=>(other)\n    %x{\n      // set guard for infinite recursion\n      self.$$comparable = true;\n\n      var x = #{self == other};\n\n      if (x && x !== nil) {\n        return 0;\n      }\n\n      return nil;\n    }\n  end\n\n  def method(name)\n    %x{\n      var meth = self['$' + name];\n\n      if (!meth || meth.$$stub) {\n        #{::Kernel.raise ::NameError.new(\"undefined method `#{name}' for class `#{self.class}'\", name)};\n      }\n\n      return #{::Method.new(self, `meth.$$owner || #{self.class}`, `meth`, name)};\n    }\n  end\n\n  def methods(all = true)\n    %x{\n      if ($truthy(#{all})) {\n        return Opal.methods(self);\n      } else {\n        return Opal.own_methods(self);\n      }\n    }\n  end\n\n  def public_methods(all = true)\n    %x{\n      if ($truthy(#{all})) {\n        return Opal.methods(self);\n      } else {\n        return Opal.receiver_methods(self);\n      }\n    }\n  end\n\n  def Array(object)\n    %x{\n      var coerced;\n\n      if (object === nil) {\n        return [];\n      }\n\n      if (object.$$is_array) {\n        return object;\n      }\n\n      coerced = #{::Opal.coerce_to?(object, ::Array, :to_ary)};\n      if (coerced !== nil) { return coerced; }\n\n      coerced = #{::Opal.coerce_to?(object, ::Array, :to_a)};\n      if (coerced !== nil) { return coerced; }\n\n      return [object];\n    }\n  end\n\n  def at_exit(&block)\n    $__at_exit__ ||= []\n    $__at_exit__ << block\n    block\n  end\n\n  def caller(start = 1, length = nil)\n    %x{\n      var stack, result;\n\n      stack = new Error().$backtrace();\n      result = [];\n\n      for (var i = #{start} + 1, ii = stack.length; i < ii; i++) {\n        if (!stack[i].match(/runtime\\.js/)) {\n          result.push(stack[i]);\n        }\n      }\n      if (length != nil) result = result.slice(0, length);\n      return result;\n    }\n  end\n\n  def class\n    `self.$$class`\n  end\n\n  def copy_instance_variables(other)\n    %x{\n      var keys = Object.keys(other), i, ii, name;\n      for (i = 0, ii = keys.length; i < ii; i++) {\n        name = keys[i];\n        if (name.charAt(0) !== '$' && other.hasOwnProperty(name)) {\n          self[name] = other[name];\n        }\n      }\n    }\n  end\n\n  def copy_singleton_methods(other)\n    %x{\n      var i, name, names, length;\n\n      if (other.hasOwnProperty('$$meta')) {\n        var other_singleton_class = Opal.get_singleton_class(other);\n        var self_singleton_class = Opal.get_singleton_class(self);\n        names = Object.getOwnPropertyNames(other_singleton_class.$$prototype);\n\n        for (i = 0, length = names.length; i < length; i++) {\n          name = names[i];\n          if (Opal.is_method(name)) {\n            self_singleton_class.$$prototype[name] = other_singleton_class.$$prototype[name];\n          }\n        }\n\n        self_singleton_class.$$const = Object.assign({}, other_singleton_class.$$const);\n        Object.setPrototypeOf(\n          self_singleton_class.$$prototype,\n          Object.getPrototypeOf(other_singleton_class.$$prototype)\n        );\n      }\n\n      for (i = 0, names = Object.getOwnPropertyNames(other), length = names.length; i < length; i++) {\n        name = names[i];\n        if (name.charAt(0) === '$' && name.charAt(1) !== '$' && other.hasOwnProperty(name)) {\n          self[name] = other[name];\n        }\n      }\n    }\n  end\n\n  def clone(freeze: true)\n    copy = self.class.allocate\n\n    copy.copy_instance_variables(self)\n    copy.copy_singleton_methods(self)\n    copy.initialize_clone(self)\n\n    copy\n  end\n\n  def initialize_clone(other)\n    initialize_copy(other)\n  end\n\n  def define_singleton_method(name, method = undefined, &block)\n    singleton_class.define_method(name, method, &block)\n  end\n\n  def dup\n    copy = self.class.allocate\n\n    copy.copy_instance_variables(self)\n    copy.initialize_dup(self)\n\n    copy\n  end\n\n  def initialize_dup(other)\n    initialize_copy(other)\n  end\n\n  def enum_for(method = :each, *args, &block)\n    ::Enumerator.for(self, method, *args, &block)\n  end\n\n  def equal?(other)\n    `self === other`\n  end\n\n  def exit(status = true)\n    $__at_exit__ ||= []\n\n    until $__at_exit__.empty?\n      block = $__at_exit__.pop\n      block.call\n    end\n\n    %x{\n      if (status.$$is_boolean) {\n        status = status ? 0 : 1;\n      } else {\n        status = $coerce_to(status, #{::Integer}, 'to_int')\n      }\n\n      Opal.exit(status);\n    }\n    nil\n  end\n\n  def extend(*mods)\n    %x{\n      var singleton = #{singleton_class};\n\n      for (var i = mods.length - 1; i >= 0; i--) {\n        var mod = mods[i];\n\n        if (!mod.$$is_module) {\n          #{::Kernel.raise ::TypeError, \"wrong argument type #{`mod`.class} (expected Module)\"};\n        }\n\n        #{`mod`.append_features `singleton`};\n        #{`mod`.extend_object self};\n        #{`mod`.extended self};\n      }\n    }\n\n    self\n  end\n\n  def gets(*args)\n    $stdin.gets(*args)\n  end\n\n  def hash\n    __id__\n  end\n\n  def initialize_copy(other)\n  end\n\n  `var inspect_stack = []`\n\n  def inspect\n    ivs = ''\n    id = __id__\n    if `inspect_stack`.include? id\n      ivs = ' ...'\n    else\n      `inspect_stack` << id\n      pushed = true\n      instance_variables.each do |i|\n        ivar = instance_variable_get(i)\n        inspect = Opal.inspect(ivar)\n        ivs += \" #{i}=#{inspect}\"\n      end\n    end\n    \"#<#{self.class}:0x#{id.to_s(16)}#{ivs}>\"\n  rescue => e\n    \"#<#{self.class}:0x#{id.to_s(16)}>\"\n  ensure\n    `inspect_stack`.pop if pushed\n  end\n\n  def instance_of?(klass)\n    %x{\n      if (!klass.$$is_class && !klass.$$is_module) {\n        #{::Kernel.raise ::TypeError, 'class or module required'};\n      }\n\n      return self.$$class === klass;\n    }\n  end\n\n  def instance_variable_defined?(name)\n    name = ::Opal.instance_variable_name!(name)\n\n    `Opal.hasOwnProperty.call(self, name.substr(1))`\n  end\n\n  def instance_variable_get(name)\n    name = ::Opal.instance_variable_name!(name)\n\n    %x{\n      var ivar = self[Opal.ivar(name.substr(1))];\n\n      return ivar == null ? nil : ivar;\n    }\n  end\n\n  def instance_variable_set(name, value)\n    name = ::Opal.instance_variable_name!(name)\n\n    `self[Opal.ivar(name.substr(1))] = value`\n  end\n\n  def remove_instance_variable(name)\n    name = ::Opal.instance_variable_name!(name)\n\n    %x{\n      var key = Opal.ivar(name.substr(1)),\n          val;\n      if (self.hasOwnProperty(key)) {\n        val = self[key];\n        delete self[key];\n        return val;\n      }\n    }\n\n    ::Kernel.raise ::NameError, \"instance variable #{name} not defined\"\n  end\n\n  def instance_variables\n    %x{\n      var result = [], ivar;\n\n      for (var name in self) {\n        if (self.hasOwnProperty(name) && name.charAt(0) !== '$') {\n          if (name.substr(-1) === '$') {\n            ivar = name.slice(0, name.length - 1);\n          } else {\n            ivar = name;\n          }\n          result.push('@' + ivar);\n        }\n      }\n\n      return result;\n    }\n  end\n\n  def Integer(value, base = undefined)\n    %x{\n      var i, str, base_digits;\n\n      if (!value.$$is_string) {\n        if (base !== undefined) {\n          #{::Kernel.raise ::ArgumentError, 'base specified for non string value'}\n        }\n        if (value === nil) {\n          #{::Kernel.raise ::TypeError, \"can't convert nil into Integer\"}\n        }\n        if (value.$$is_number) {\n          if (value === Infinity || value === -Infinity || isNaN(value)) {\n            #{::Kernel.raise ::FloatDomainError, value}\n          }\n          return Math.floor(value);\n        }\n        if (#{value.respond_to?(:to_int)}) {\n          i = #{value.to_int};\n          if (i !== nil) {\n            return i;\n          }\n        }\n        return #{::Opal.coerce_to!(value, ::Integer, :to_i)};\n      }\n\n      if (value === \"0\") {\n        return 0;\n      }\n\n      if (base === undefined) {\n        base = 0;\n      } else {\n        base = $coerce_to(base, #{::Integer}, 'to_int');\n        if (base === 1 || base < 0 || base > 36) {\n          #{::Kernel.raise ::ArgumentError, \"invalid radix #{base}\"}\n        }\n      }\n\n      str = value.toLowerCase();\n\n      str = str.replace(/(\\d)_(?=\\d)/g, '$1');\n\n      str = str.replace(/^(\\s*[+-]?)(0[bodx]?)/, function (_, head, flag) {\n        switch (flag) {\n        case '0b':\n          if (base === 0 || base === 2) {\n            base = 2;\n            return head;\n          }\n          // no-break\n        case '0':\n        case '0o':\n          if (base === 0 || base === 8) {\n            base = 8;\n            return head;\n          }\n          // no-break\n        case '0d':\n          if (base === 0 || base === 10) {\n            base = 10;\n            return head;\n          }\n          // no-break\n        case '0x':\n          if (base === 0 || base === 16) {\n            base = 16;\n            return head;\n          }\n          // no-break\n        }\n        #{::Kernel.raise ::ArgumentError, \"invalid value for Integer(): \\\"#{value}\\\"\"}\n      });\n\n      base = (base === 0 ? 10 : base);\n\n      base_digits = '0-' + (base <= 10 ? base - 1 : '9a-' + String.fromCharCode(97 + (base - 11)));\n\n      if (!(new RegExp('^\\\\s*[+-]?[' + base_digits + ']+\\\\s*$')).test(str)) {\n        #{::Kernel.raise ::ArgumentError, \"invalid value for Integer(): \\\"#{value}\\\"\"}\n      }\n\n      i = parseInt(str, base);\n\n      if (isNaN(i)) {\n        #{::Kernel.raise ::ArgumentError, \"invalid value for Integer(): \\\"#{value}\\\"\"}\n      }\n\n      return i;\n    }\n  end\n\n  def Float(value)\n    %x{\n      var str;\n\n      if (value === nil) {\n        #{::Kernel.raise ::TypeError, \"can't convert nil into Float\"}\n      }\n\n      if (value.$$is_string) {\n        str = value.toString();\n\n        str = str.replace(/(\\d)_(?=\\d)/g, '$1');\n\n        //Special case for hex strings only:\n        if (/^\\s*[-+]?0[xX][0-9a-fA-F]+\\s*$/.test(str)) {\n          return #{::Kernel.Integer(`str`)};\n        }\n\n        if (!/^\\s*[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?\\s*$/.test(str)) {\n          #{::Kernel.raise ::ArgumentError, \"invalid value for Float(): \\\"#{value}\\\"\"}\n        }\n\n        return parseFloat(str);\n      }\n\n      return #{::Opal.coerce_to!(value, ::Float, :to_f)};\n    }\n  end\n\n  def Hash(arg)\n    return {} if arg.nil? || arg == []\n    return arg if ::Hash === arg\n    ::Opal.coerce_to!(arg, ::Hash, :to_hash)\n  end\n\n  def is_a?(klass)\n    %x{\n      if (!klass.$$is_class && !klass.$$is_module) {\n        #{::Kernel.raise ::TypeError, 'class or module required'};\n      }\n\n      return Opal.is_a(self, klass);\n    }\n  end\n\n  def itself\n    self\n  end\n\n  def lambda(&block)\n    `Opal.lambda(block)`\n  end\n\n  def load(file)\n    file = ::Opal.coerce_to!(file, ::String, :to_str)\n    `Opal.load(#{file})`\n  end\n\n  def loop\n    return enum_for(:loop) { ::Float::INFINITY } unless block_given?\n\n    while true\n      begin\n        yield\n      rescue ::StopIteration => e\n        return e.result\n      end\n    end\n\n    self\n  end\n\n  def nil?\n    false\n  end\n\n  def printf(*args)\n    if args.any?\n      print format(*args)\n    end\n\n    nil\n  end\n\n  def proc(&block)\n    unless block\n      ::Kernel.raise ::ArgumentError, 'tried to create Proc object without a block'\n    end\n\n    `block.$$is_lambda = false`\n    block\n  end\n\n  def puts(*strs)\n    $stdout.puts(*strs)\n  end\n\n  def p(*args)\n    args.each { |obj| $stdout.puts obj.inspect }\n\n    args.length <= 1 ? args[0] : args\n  end\n\n  def print(*strs)\n    $stdout.print(*strs)\n  end\n\n  def readline(*args)\n    $stdin.readline(*args)\n  end\n\n  def warn(*strs, uplevel: nil)\n    if uplevel\n      uplevel = ::Opal.coerce_to!(uplevel, ::Integer, :to_str)\n      ::Kernel.raise ::ArgumentError, \"negative level (#{uplevel})\" if uplevel < 0\n      location = caller(uplevel + 1, 1).first&.split(':in `')&.first\n      location = \"#{location}: \" if location\n      strs = strs.map { |s| \"#{location}warning: #{s}\" }\n    end\n\n    $stderr.puts(*strs) unless $VERBOSE.nil? || strs.empty?\n  end\n\n  def raise(exception = undefined, string = nil, backtrace = nil)\n    %x{\n      if (exception == null && #{$!} !== nil) {\n        throw #{$!};\n      }\n      if (exception == null) {\n        exception = #{::RuntimeError.new ''};\n      }\n      else if ($respond_to(exception, '$to_str')) {\n        exception = #{::RuntimeError.new exception.to_str};\n      }\n      // using respond_to? and not an undefined check to avoid method_missing matching as true\n      else if (exception.$$is_class && $respond_to(exception, '$exception')) {\n        exception = #{exception.exception string};\n      }\n      else if (exception.$$is_exception) {\n        // exception is fine\n      }\n      else {\n        exception = #{::TypeError.new 'exception class/object expected'};\n      }\n\n      if (backtrace !== nil) {\n        exception.$set_backtrace(backtrace);\n      }\n\n      if (#{$!} !== nil) {\n        Opal.exceptions.push(#{$!});\n      }\n\n      #{$!} = exception;\n      #{$@} = #{`exception`.backtrace};\n\n      throw exception;\n    }\n  end\n\n  def rand(max = undefined)\n    %x{\n      if (max === undefined) {\n        return #{::Random::DEFAULT.rand};\n      }\n\n      if (max.$$is_number) {\n        if (max < 0) {\n          max = Math.abs(max);\n        }\n\n        if (max % 1 !== 0) {\n          max = max.$to_i();\n        }\n\n        if (max === 0) {\n          max = undefined;\n        }\n      }\n    }\n    ::Random::DEFAULT.rand(max)\n  end\n\n  def respond_to?(name, include_all = false)\n    %x{\n      var body = self['$' + name];\n\n      if (typeof(body) === \"function\" && !body.$$stub) {\n        return true;\n      }\n\n      if (self['$respond_to_missing?'].$$pristine === true) {\n        return false;\n      } else {\n        return #{respond_to_missing?(name, include_all)};\n      }\n    }\n  end\n\n  def respond_to_missing?(method_name, include_all = false)\n    false\n  end\n\n  ::Opal.pristine(self, :respond_to?, :respond_to_missing?)\n\n  def require(file)\n    %x{\n      // As Object.require refers to Kernel.require once Kernel has been loaded the String\n      // class may not be available yet, the coercion requires both  String and Array to be loaded.\n      if (typeof #{file} !== 'string' && Opal.String && Opal.Array) {\n        #{file = ::Opal.coerce_to!(file, ::String, :to_str) }\n      }\n      return Opal.require(#{file})\n    }\n  end\n\n  def require_relative(file)\n    ::Opal.try_convert!(file, ::String, :to_str)\n    file = ::File.expand_path ::File.join(`Opal.current_file`, '..', file)\n\n    `Opal.require(#{file})`\n  end\n\n  # `path` should be the full path to be found in registered modules (`Opal.modules`)\n  def require_tree(path, autoload: false)\n    %x{\n      var result = [];\n\n      path = #{::File.expand_path(path)}\n      path = Opal.normalize(path);\n      if (path === '.') path = '';\n      for (var name in Opal.modules) {\n        if (#{`name`.start_with?(path)}) {\n          if(!#{autoload}) {\n            result.push([name, Opal.require(name)]);\n          } else {\n            result.push([name, true]); // do nothing, delegated to a autoloading\n          }\n        }\n      }\n\n      return result;\n    }\n  end\n\n  def singleton_class\n    `Opal.get_singleton_class(self)`\n  end\n\n  def sleep(seconds = nil)\n    %x{\n      if (seconds === nil) {\n        #{::Kernel.raise ::TypeError, \"can't convert NilClass into time interval\"}\n      }\n      if (!seconds.$$is_number) {\n        #{::Kernel.raise ::TypeError, \"can't convert #{seconds.class} into time interval\"}\n      }\n      if (seconds < 0) {\n        #{::Kernel.raise ::ArgumentError, 'time interval must be positive'}\n      }\n      var get_time = Opal.global.performance ?\n        function() {return performance.now()} :\n        function() {return new Date()}\n\n      var t = get_time();\n      while (get_time() - t <= seconds * 1000);\n      return Math.round(seconds);\n    }\n  end\n\n  def srand(seed = Random.new_seed)\n    ::Random.srand(seed)\n  end\n\n  def String(str)\n    ::Opal.coerce_to?(str, ::String, :to_str) ||\n      ::Opal.coerce_to!(str, ::String, :to_s)\n  end\n\n  def tap(&block)\n    yield self\n    self\n  end\n\n  def to_proc\n    self\n  end\n\n  def to_s\n    \"#<#{self.class}:0x#{__id__.to_s(16)}>\"\n  end\n\n  def catch(tag = nil)\n    tag ||= ::Object.new\n    yield(tag)\n  rescue ::UncaughtThrowError => e\n    return e.value if e.tag == tag\n    ::Kernel.raise\n  end\n\n  def throw(tag, obj = nil)\n    ::Kernel.raise ::UncaughtThrowError.new(tag, obj)\n  end\n\n  # basic implementation of open, delegate to File.open\n  def open(*args, &block)\n    ::File.open(*args, &block)\n  end\n\n  def yield_self\n    return enum_for(:yield_self) { 1 } unless block_given?\n    yield self\n  end\n\n  alias fail raise\n  alias kind_of? is_a?\n  alias object_id __id__\n  alias public_send __send__\n  alias send __send__\n  alias then yield_self\n  alias to_enum enum_for\nend\n\nclass ::Object\n  # Object.require has been set to runtime.js Opal.require\n  # Now we have Kernel loaded, make sure Object.require refers to Kernel.require\n  # which is what ruby does and allows for overwriting by autoloaders\n  `delete $Object.$$prototype.$require`\n  include ::Kernel\nend\n"],"names":["<top (required)>","<module:Kernel>","=~","obj","!~","self","!","===","other","$ret_or_1","object_id","==","<=>","method","name","Kernel","raise","NameError","new","class","Method","methods","all","public_methods","Array","object","Opal","coerce_to?","at_exit","$__at_exit__","<<","block","caller","start","length","1","copy_instance_variables","copy_singleton_methods","clone","$kwargs","copy","allocate","initialize_clone","initialize_copy","define_singleton_method","define_method","singleton_class","to_proc","dup","initialize_dup","enum_for","for","Enumerator","args","equal?","exit","status","empty?","pop","call","Integer","extend","TypeError","append_features","extend_object","extended","gets","$stdin","hash","__id__","inspect","ivs","id","include?","pushed","each","instance_variables","block in inspect","i","block (2 levels) in inspect","ivar","instance_variable_get","+","to_s","16","StandardError","e","instance_of?","klass","instance_variable_defined?","instance_variable_name!","instance_variable_set","value","remove_instance_variable","base","ArgumentError","FloatDomainError","respond_to?","to_int","coerce_to!","Float","Hash","arg","nil?","is_a?","itself","lambda","load","file","String","loop","block_given?","block in loop","block (2 levels) in loop","Float::INFINITY","StopIteration","result","printf","any?","print","format","proc","puts","$stdout","strs","p","block in p","block (2 levels) in p","<=","[]","0","readline","warn","uplevel","<","location","first","map","block in warn","s","block (2 levels) in warn","$VERBOSE","$stderr","exception","string","backtrace","$!","RuntimeError","to_str","$@","rand","max","Random::DEFAULT","Random","include_all","respond_to_missing?","method_name","pristine","require","require_relative","try_convert!","File","expand_path","join","require_tree","path","start_with?","autoload","sleep","seconds","srand","seed","new_seed","str","tap","catch","tag","Object","UncaughtThrowError","throw","open","yield_self","block in yield_self","block (2 levels) in yield_self","<class:Object>","include"],"mappings":"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"}},{"offset":{"line":5552,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/main.rb"],"sourcesContent":["class << self\n  def to_s\n    'main'\n  end\n\n  def include(mod)\n    ::Object.include mod\n  end\n\n  def autoload(*args)\n    `Opal.Object.$autoload.apply(Opal.Object, args)`\n  end\n\n  # Compiler overrides this method\n  def using(mod)\n    ::Kernel.raise 'main.using is permitted only at toplevel'\n  end\nend\n"],"names":["<top (required)>","to_s","include","mod","Object","autoload","using","Kernel","raise","self"],"mappings":"AAAAA,+CAAAA;EAAAA;;EAAAA;EAAAA,OAAA;;;;AACEC,IAAAA,oBAAAA,gBAAAA;AAAAA;MACEA,OAAAA;IADFA,CAAAA,GAAAA;;AAIAC,IAAAA,uBAAAA,mBAAYC,GAAZD;AAAAA;MACEA,OAAAE,OAAQF,SAAAA,CAASC,GAATD;IADVA,CAAAA,GAAAA;;AAIAG,IAAAA,wBAAAA,oBATF,EASEA;AAAAA,MAAAA;;;;MATF;;MASe;MACXA,OAACA,8CAADA;IADFA,CAAAA,IAAAA;IAKA,OAAAC,qBAAAA,iBAAUH,GAAVG;AAAAA;MACEA,OAAAC,OAAQC,OAAAA,CAAOF,0CAAPE;IADVF,CAAAA,GAAAA;EAdF,4BAASG,IAAT;AAAAT;"}},{"offset":{"line":5587,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/error/errno.rb"],"sourcesContent":["module ::Errno\n  errors = [\n    [:EINVAL, 'Invalid argument', 22],\n    [:EEXIST, 'File exists', 17],\n    [:EISDIR, 'Is a directory', 21],\n    [:EMFILE, 'Too many open files', 24],\n    [:EACCES, 'Permission denied', 13],\n    [:EPERM, 'Operation not permitted', 1],\n    [:ENOENT, 'No such file or directory', 2]\n  ]\n\n  klass = nil\n\n  %x{\n    var i;\n    for (i = 0; i < errors.length; i++) {\n      (function() { // Create a closure\n        var class_name = errors[i][0];\n        var default_message = errors[i][1];\n        var errno = errors[i][2];\n\n        klass = Opal.klass(self, Opal.SystemCallError, class_name);\n        klass.errno = errno;\n\n        #{\n          class << klass\n            def new(name = nil)\n              message = `default_message`\n              message += \" - #{name}\" if name\n              super(message)\n            end\n          end\n        }\n      })();\n    }\n  }\nend\n\nclass ::SystemCallError < ::StandardError\n  def errno\n    self.class.errno\n  end\n\n  class << self\n    attr_reader :errno\n  end\nend\n"],"names":["<top (required)>","<module:Errno>","errors","22","17","21","24","13","1","2","klass","new","name","message","+","self","<class:SystemCallError>","errno","class","attr_reader","StandardError"],"mappings":"AAAAA,sDAAAA;EAAAA;;EAAAA;;EAAAC;EAAAA;;IAAAA;;;IACEC,SAAS,CACP,CAAC,QAAD,EAAUD,kBAAV,EAA8BE,EAA9B,CADO,EAEP,CAAC,QAAD,EAAUF,aAAV,EAAyBG,EAAzB,CAFO,EAGP,CAAC,QAAD,EAAUH,gBAAV,EAA4BI,EAA5B,CAHO,EAIP,CAAC,QAAD,EAAUJ,qBAAV,EAAiCK,EAAjC,CAJO,EAKP,CAAC,QAAD,EAAUL,mBAAV,EAA+BM,EAA/B,CALO,EAMP,CAAC,OAAD,EAASN,yBAAT,EAAoCO,CAApC,CANO,EAOP,CAAC,QAAD,EAAUP,2BAAV,EAAuCQ,CAAvC,CAPO;IAUTC,QAAQ;;AAGVT;AACAA;AACAA;AACAA;AACAA;AACAA;;AAEAA;AACAA;;AAEAA,QACU;;MACE,OAAAU,mBAAAA,gBAAQC,IAARD;AAAAA,QAAAA;;QAAAA;;;QAAQ,yBAAO,GAAP;QACNE,UAAWF;QACX,IAAA,QAA2BC,IAA3B,CAAA;UAAAC,UAAQC,SAARD,OAAQC,EAAIH,KAAD,GAAA,CAAMC,IAAN,CAAHE;QAAR;QACAH,OAAA,OAAAI,IAAA,EAAA,6CAAA,OAAA,EAAA,CAAMF,OAAN,CAAA,EAAA,IAAA;MAHFF,CAAAA,IAAAA;IADF,4BAASD,KAAT;AAQVT;AACAA;AACAA;EAnCAA,GAAO,IAAPA;EAsCAD,OAAAgB;EAAAA;;IAAAA;;;;AACEC,IAAAA,qBAAAA,iBAAAA;AAAAA,MAAAA;;MACEA,OAAAF,IAAIG,OAAAA,CAAAA,CAAMD,OAAAA,CAAAA;IADZA,CAAAA,GAAAA;IAIAD,OAAA;;MACE,OAAAD,IAAAI,aAAAA,CAAY,OAAZA;IADF,4BAASJ,IAAT;EALFC,GAAM,IAANA,EAA0BI,oBAA1BJ;AAtCAhB;"}},{"offset":{"line":5650,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/error.rb"],"sourcesContent":["class ::Exception < `Error`\n  `Opal.prop(self.$$prototype, '$$is_exception', true)`\n  `var stack_trace_limit`\n\n  def self.new(*args)\n    %x{\n      var message   = (args.length > 0) ? args[0] : nil;\n      var error     = new self.$$constructor(message);\n      error.name    = self.$$name;\n      error.message = message;\n      error.cause   = #{$!};\n      Opal.send(error, error.$initialize, args);\n\n      // Error.captureStackTrace() will use .name and .toString to build the\n      // first line of the stack trace so it must be called after the error\n      // has been initialized.\n      // https://nodejs.org/dist/latest-v6.x/docs/api/errors.html\n      if (Opal.config.enable_stack_trace && Error.captureStackTrace) {\n        // Passing Kernel.raise will cut the stack trace from that point above\n        Error.captureStackTrace(error, stack_trace_limit);\n      }\n\n      return error;\n    }\n  end\n  `stack_trace_limit = self.$new`\n\n  def self.exception(*args)\n    new(*args)\n  end\n\n  def initialize(*args)\n    # using self.message aka @message to retain compatibility with native exception's message property\n    `self.message = (args.length > 0) ? args[0] : nil`\n  end\n\n  %x{\n    // Convert backtrace from any format to Ruby format\n    function correct_backtrace(backtrace) {\n      var new_bt = [], m;\n\n      for (var i = 0; i < backtrace.length; i++) {\n        var loc = backtrace[i];\n        if (!loc || !loc.$$is_string) {\n          /* Do nothing */\n        }\n        /* Chromium format */\n        else if ((m = loc.match(/^    at (.*?) \\((.*?)\\)$/))) {\n          new_bt.push(m[2] + \":in `\" + m[1] + \"'\");\n        }\n        else if ((m = loc.match(/^    at (.*?)$/))) {\n          new_bt.push(m[1] + \":in `undefined'\");\n        }\n        /* Node format */\n        else if ((m = loc.match(/^  from (.*?)$/))) {\n          new_bt.push(m[1]);\n        }\n        /* Mozilla/Apple format */\n        else if ((m = loc.match(/^(.*?)@(.*?)$/))) {\n          new_bt.push(m[2] + ':in `' + m[1] + \"'\");\n        }\n      }\n\n      return new_bt;\n    }\n  }\n\n  def backtrace\n    %x{\n      if (self.backtrace) {\n        // nil is a valid backtrace\n        return self.backtrace;\n      }\n\n      var backtrace = self.stack;\n\n      if (typeof(backtrace) !== 'undefined' && backtrace.$$is_string) {\n        return self.backtrace = correct_backtrace(backtrace.split(\"\\n\").slice(0, 15));\n      }\n      else if (backtrace) {\n        return self.backtrace = correct_backtrace(backtrace.slice(0, 15));\n      }\n\n      return [];\n    }\n  end\n\n  def backtrace_locations\n    %x{\n      if (self.backtrace_locations) return self.backtrace_locations;\n      self.backtrace_locations = #{backtrace&.map do |loc|\n        ::Thread::Backtrace::Location.new(loc)\n      end}\n      return self.backtrace_locations;\n    }\n  end\n\n  def cause\n    `self.cause || nil`\n  end\n\n  def exception(str = nil)\n    %x{\n      if (str === nil || self === str) {\n        return self;\n      }\n\n      var cloned = #{clone};\n      cloned.message = str;\n      if (self.backtrace) cloned.backtrace = self.backtrace.$dup();\n      cloned.stack = self.stack;\n      cloned.cause = self.cause;\n      return cloned;\n    }\n  end\n\n  # not using alias message to_s because you need to be able to override to_s and have message use overridden method, won't work with alias\n  def message\n    to_s\n  end\n\n  def full_message(kwargs = nil)\n    unless defined? Hash\n      # We are dealing with an unfully loaded Opal library, so we should\n      # do with as little as we can.\n\n      return \"#{@message}\\n#{`self.stack`}\"\n    end\n\n    kwargs = { highlight: $stderr.tty?, order: :top }.merge(kwargs || {})\n    highlight, order = kwargs[:highlight], kwargs[:order]\n\n    ::Kernel.raise ::ArgumentError, \"expected true or false as highlight: #{highlight}\" unless [true, false].include? highlight\n    ::Kernel.raise ::ArgumentError, \"expected :top or :bottom as order: #{order}\" unless %i[top bottom].include? order\n\n    if highlight\n      bold_underline = \"\\e[1;4m\"\n      bold = \"\\e[1m\"\n      reset = \"\\e[m\"\n    else\n      bold_underline = bold = reset = ''\n    end\n\n    bt = backtrace.dup\n    bt = caller if !bt || bt.empty?\n    first = bt.shift\n\n    msg = \"#{first}: \"\n    msg += \"#{bold}#{to_s} (#{bold_underline}#{self.class}#{reset}#{bold})#{reset}\\n\"\n\n    msg += bt.map { |loc| \"\\tfrom #{loc}\\n\" }.join\n\n    msg += cause.full_message(highlight: highlight) if cause\n\n    if order == :bottom\n      msg = msg.split(\"\\n\").reverse.join(\"\\n\")\n      msg = \"#{bold}Traceback#{reset} (most recent call last):\\n\" + msg\n    end\n\n    msg\n  end\n\n  def inspect\n    as_str = to_s\n    as_str.empty? ? self.class.to_s : \"#<#{self.class.to_s}: #{to_s}>\"\n  end\n\n  def set_backtrace(backtrace)\n    %x{\n      var valid = true, i, ii;\n\n      if (backtrace === nil) {\n        self.backtrace = nil;\n        self.stack = '';\n      } else if (backtrace.$$is_string) {\n        self.backtrace = [backtrace];\n        self.stack = '  from ' + backtrace;\n      } else {\n        if (backtrace.$$is_array) {\n          for (i = 0, ii = backtrace.length; i < ii; i++) {\n            if (!backtrace[i].$$is_string) {\n              valid = false;\n              break;\n            }\n          }\n        } else {\n          valid = false;\n        }\n\n        if (valid === false) {\n          #{::Kernel.raise ::TypeError, 'backtrace must be Array of String'}\n        }\n\n        self.backtrace = backtrace;\n        self.stack = #{`backtrace`.map { |i| '  from ' + i }}.join(\"\\n\");\n      }\n\n      return backtrace;\n    }\n  end\n\n  def to_s\n    # using self.message aka @message to retain compatibility with native exception's message property\n    (@message && @message.to_s) || self.class.to_s\n  end\nend\n\n# keep the indentation, it makes the exception hierarchy clear\nclass ::ScriptError       < ::Exception; end\nclass ::SyntaxError         < ::ScriptError; end\nclass ::LoadError           < ::ScriptError; end\nclass ::NotImplementedError < ::ScriptError; end\n\nclass ::SystemExit        < ::Exception; end\nclass ::NoMemoryError     < ::Exception; end\nclass ::SignalException   < ::Exception; end\nclass ::Interrupt           < ::SignalException; end\nclass ::SecurityError     < ::Exception; end\nclass ::SystemStackError  < ::Exception; end\n\nclass ::StandardError     < ::Exception; end\nclass ::EncodingError       < ::StandardError; end\nclass ::ZeroDivisionError   < ::StandardError; end\nclass ::NameError           < ::StandardError; end\nclass ::NoMethodError         < ::NameError; end\nclass ::RuntimeError        < ::StandardError; end\nclass ::FrozenError           < ::RuntimeError; end\nclass ::LocalJumpError      < ::StandardError; end\nclass ::TypeError           < ::StandardError; end\nclass ::ArgumentError       < ::StandardError; end\nclass ::UncaughtThrowError    < ::ArgumentError; end\nclass ::IndexError          < ::StandardError; end\nclass ::StopIteration         < ::IndexError; end\nclass ::ClosedQueueError        < ::StopIteration; end\nclass ::KeyError              < ::IndexError; end\nclass ::RangeError          < ::StandardError; end\nclass ::FloatDomainError      < ::RangeError; end\nclass ::IOError             < ::StandardError; end\nclass ::EOFError              < ::IOError; end\nclass ::SystemCallError     < ::StandardError; end\nclass ::RegexpError         < ::StandardError; end\nclass ::ThreadError         < ::StandardError; end\nclass ::FiberError          < ::StandardError; end\n\n::Object.autoload :Errno, 'corelib/error/errno'\n\nclass ::UncaughtThrowError < ::ArgumentError\n  attr_reader :tag, :value\n\n  def initialize(tag, value = nil)\n    @tag = tag\n    @value = value\n\n    super(\"uncaught throw #{@tag.inspect}\")\n  end\nend\n\nclass ::NameError\n  attr_reader :name\n\n  def initialize(message, name = nil)\n    super message\n    @name = name\n  end\nend\n\nclass ::NoMethodError\n  attr_reader :args\n\n  def initialize(message, name = nil, args = [])\n    super message, name\n    @args = args\n  end\nend\n\nclass ::StopIteration\n  attr_reader :result\nend\n\nclass ::KeyError\n  def initialize(message, receiver: nil, key: nil)\n    super(message)\n    @receiver = receiver\n    @key = key\n  end\n\n  def receiver\n    @receiver || ::Kernel.raise(::ArgumentError, 'no receiver is available')\n  end\n\n  def key\n    @key || ::Kernel.raise(::ArgumentError, 'no key is available')\n  end\nend\n\nmodule ::JS\n  class Error\n  end\nend\n"],"names":["<top (required)>","<class:Exception>","new","self","$!","exception","args","initialize","backtrace","backtrace_locations","block in backtrace_locations","loc","block (2 levels) in backtrace_locations","Thread::Backtrace::Location","Thread::Backtrace","Thread","cause","str","clone","message","to_s","full_message","kwargs","@message","$stderr","tty?","merge","$ret_or_1","[]","highlight","order","include?","Kernel","raise","ArgumentError","bold_underline","bold","reset","bt","dup","empty?","caller","first","shift","msg","+","class","map","block in full_message","block (2 levels) in full_message","join","split","reverse","inspect","as_str","set_backtrace","TypeError","block in set_backtrace","i","block (2 levels) in set_backtrace","$ret_or_2","<class:ScriptError>","Exception","<class:SyntaxError>","ScriptError","<class:LoadError>","<class:NotImplementedError>","<class:SystemExit>","<class:NoMemoryError>","<class:SignalException>","<class:Interrupt>","SignalException","<class:SecurityError>","<class:SystemStackError>","<class:StandardError>","<class:EncodingError>","StandardError","<class:ZeroDivisionError>","<class:NameError>","<class:NoMethodError>","NameError","<class:RuntimeError>","<class:FrozenError>","RuntimeError","<class:LocalJumpError>","<class:TypeError>","<class:ArgumentError>","<class:UncaughtThrowError>","<class:IndexError>","<class:StopIteration>","IndexError","<class:ClosedQueueError>","StopIteration","<class:KeyError>","<class:RangeError>","<class:FloatDomainError>","RangeError","<class:IOError>","<class:EOFError>","IOError","<class:SystemCallError>","<class:RegexpError>","<class:ThreadError>","<class:FiberError>","Object","autoload","attr_reader","tag","value","@tag","@value","name","@name","@args","$kwargs","@receiver","receiver","@key","key","<module:JS>","<class:Error>"],"mappings":"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"}},{"offset":{"line":6078,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/constants.rb"],"sourcesContent":["::RUBY_PLATFORM       = 'opal'\n::RUBY_ENGINE         = 'opal'\n::RUBY_VERSION        = '3.1.0'\n::RUBY_ENGINE_VERSION = '1.4.1'\n::RUBY_RELEASE_DATE   = '2022-01-12'\n::RUBY_PATCHLEVEL     = 0\n::RUBY_REVISION       = '0'\n::RUBY_COPYRIGHT      = 'opal - Copyright (C) 2013-2021 Adam Beynon and the Opal contributors'\n::RUBY_DESCRIPTION    = \"opal #{::RUBY_ENGINE_VERSION} (#{::RUBY_RELEASE_DATE} revision #{::RUBY_REVISION})\"\n"],"names":["<top (required)>","0","RUBY_ENGINE_VERSION","RUBY_RELEASE_DATE","RUBY_REVISION"],"mappings":"AAAAA,oDAAAA;EAAAA;;;EAAA,WAAA,IAAA,mBAAwBA,MAAxB;EACA,WAAA,IAAA,iBAAwBA,MAAxB;EACA,WAAA,IAAA,kBAAwBA,OAAxB;EACA,WAAA,IAAA,yBAAwBA,OAAxB;EACA,WAAA,IAAA,uBAAwBA,YAAxB;EACA,WAAA,IAAA,qBAAwBC,CAAxB;EACA,WAAA,IAAA,mBAAwBD,GAAxB;EACA,WAAA,IAAA,oBAAwBA,sEAAxB;EACAA,OAAA,WAAA,IAAA,sBAAyBA,OAAD,GAAA,CAAQE,0BAAR,CAAA,GAA8BF,IAA9B,GAAA,CAAkCG,wBAAlC,CAAA,GAAsDH,YAAtD,GAAA,CAAkEI,oBAAlE,CAAA,GAAkFJ,GAA1G;AARAA;"}},{"offset":{"line":6093,"column":0},"map":{"version":3,"sourceRoot":"","sources":["opal/base.rb"],"sourcesContent":["::Object.require 'corelib/runtime'\n::Object.require 'corelib/helpers'\n::Object.require 'corelib/module'\n::Object.require 'corelib/class'\n::Object.require 'corelib/basic_object'\n::Object.require 'corelib/kernel'\n::Object.require 'corelib/main'\n::Object.require 'corelib/error'\n\n::Object.require 'corelib/constants'\n"],"names":["<top (required)>","Object","require"],"mappings":"AAAAA,4CAAAA;EAAAA;;EAAAA;;EAAAC,OAAQC,SAAAA,CAASF,iBAATE;EACRD,OAAQC,SAAAA,CAASF,iBAATE;EACRD,OAAQC,SAAAA,CAASF,gBAATE;EACRD,OAAQC,SAAAA,CAASF,eAATE;EACRD,OAAQC,SAAAA,CAASF,sBAATE;EACRD,OAAQC,SAAAA,CAASF,gBAATE;EACRD,OAAQC,SAAAA,CAASF,cAATE;EACRD,OAAQC,SAAAA,CAASF,eAATE;EAERF,OAAAC,OAAQC,SAAAA,CAASF,mBAATE;AATRF;"}},{"offset":{"line":6109,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/nil.rb"],"sourcesContent":["class ::NilClass\n  `self.$$prototype.$$meta = #{self}`\n\n  class << self\n    def allocate\n      ::Kernel.raise ::TypeError, \"allocator undefined for #{name}\"\n    end\n\n    undef :new\n  end\n\n  def !\n    true\n  end\n\n  def &(other)\n    false\n  end\n\n  def |(other)\n    `other !== false && other !== nil`\n  end\n\n  def ^(other)\n    `other !== false && other !== nil`\n  end\n\n  def ==(other)\n    `other === nil`\n  end\n\n  def dup\n    nil\n  end\n\n  def clone(freeze: true)\n    nil\n  end\n\n  def inspect\n    'nil'\n  end\n\n  def nil?\n    true\n  end\n\n  def singleton_class\n    ::NilClass\n  end\n\n  def to_a\n    []\n  end\n\n  def to_h\n    `Opal.hash()`\n  end\n\n  def to_i\n    0\n  end\n\n  def to_s\n    ''\n  end\n\n  def to_c\n    ::Complex.new(0, 0)\n  end\n\n  def rationalize(*args)\n    ::Kernel.raise ::ArgumentError if args.length > 1\n    ::Kernel.Rational(0, 1)\n  end\n\n  def to_r\n    ::Kernel.Rational(0, 1)\n  end\n\n  def instance_variables\n    []\n  end\n\n  alias to_f to_i\nend\n"],"names":["<top (required)>","<class:NilClass>","self","allocate","Kernel","raise","TypeError","name","!","&","other","|","^","==","dup","clone","$kwargs","inspect","nil?","singleton_class","NilClass","to_a","to_h","to_i","0","to_s","to_c","Complex","new","rationalize",">","args","length","1","ArgumentError","Rational","to_r","instance_variables"],"mappings":"AAAAA,8CAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;;IACGA,0BAA4BC;IAE7B;;;;AACEC,MAAAA,wBAAAA,oBAAAA;AAAAA,QAAAA;;QACEA,OAAAC,OAAQC,OAAAA,CAAOC,gBAAf,EAA6BH,0BAAD,GAAA,CAA2BD,IAAAK,MAAAA,CAAAA,CAA3B,CAApBF;MADVF,CAAAA,GAAAA;;;MAIA,sBAAM,KAAN;MARJ,OAAA;IAGE,4BAASD,IAAT;;AAQAM,IAAAA,iBAAAA,2BAAAA;AAAAA;MACEA,OAAA;IADFA,CAAAA,GAAAA;;AAIAC,IAAAA,iBAAAA,uBAAMC,KAAND;AAAAA;MACEA,OAAA;IADFA,CAAAA,GAAAA;;AAIAE,IAAAA,iBAAAA,uBAAMD,KAANC;AAAAA;MACEA,OAACA,gCAADA;IADFA,CAAAA,GAAAA;;AAIAC,IAAAA,iBAAAA,uBAAMF,KAANE;AAAAA;MACEA,OAACA,gCAADA;IADFA,CAAAA,GAAAA;;AAIAC,IAAAA,kBAAAA,4BAAOH,KAAPG;AAAAA;MACEA,OAACA,aAADA;IADFA,CAAAA,GAAAA;;AAIAC,IAAAA,mBAAAA,eAAAA;AAAAA;MACEA,OAAA;IADFA,CAAAA,GAAAA;;AAIAC,IAAAA,qBAAAA,iBAnCFC,OAmCED;AAAAA,MAAAA;;;;MAnCF;MAAA;MAAA;MAAA;MAAA;;MAmCY;MAAA,6BAAQ;MAChBA,OAAA;IADFA,CAAAA,IAAAA;;AAIAE,IAAAA,uBAAAA,mBAAAA;AAAAA;MACEA,OAAAA;IADFA,CAAAA,GAAAA;;AAIAC,IAAAA,oBAAAA,8BAAAA;AAAAA;MACEA,OAAA;IADFA,CAAAA,GAAAA;;AAIAC,IAAAA,+BAAAA,2BAAAA;AAAAA;MACEA,OAAAC;IADFD,CAAAA,GAAAA;;AAIAE,IAAAA,oBAAAA,gBAAAA;AAAAA;MACEA,OAAA;IADFA,CAAAA,GAAAA;;AAIAC,IAAAA,oBAAAA,gBAAAA;AAAAA;MACEA,OAACA,WAADA;IADFA,CAAAA,GAAAA;;AAIAC,IAAAA,oBAAAA,gBAAAA;AAAAA;MACEA,OAAAC;IADFD,CAAAA,GAAAA;;AAIAE,IAAAA,oBAAAA,gBAAAA;AAAAA;MACEA,OAAAA;IADFA,CAAAA,GAAAA;;AAIAC,IAAAA,oBAAAA,gBAAAA;AAAAA;MACEA,OAAAC,cAASC,KAAAA,CAAKJ,CAAd,EAAiBA,CAARI;IADXF,CAAAA,GAAAA;;AAIAG,IAAAA,2BAAAA,uBAvEF,EAuEEA;AAAAA,MAAAA;;;;MAvEF;;MAuEkB;MACd,IAAA,QAA8CC,OAAZC,IAAIC,QAAAA,CAAAA,CAAQF,EAAEG,CAAFH,CAA9C,CAAA;QAAA1B,OAAQC,OAAAA,CAAO6B,oBAAP7B;MAAR;MACAwB,OAAAzB,OAAQ+B,UAAAA,CAAUX,CAAlB,EAAqBS,CAAbE;IAFVN,CAAAA,IAAAA;;AAKAO,IAAAA,oBAAAA,gBAAAA;AAAAA;MACEA,OAAAhC,OAAQ+B,UAAAA,CAAUX,CAAlB,EAAqBS,CAAbE;IADVC,CAAAA,GAAAA;;AAIAC,IAAAA,kCAAAA,8BAAAA;AAAAA;MACEA,OAAA;IADFA,CAAAA,GAAAA;IAIApC,OAAA,aAAM,MAAN,EAAW,MAAX;EApFFA,GAAM,IAANA,EAAAA,IAAAA;AAAAD;"}},{"offset":{"line":6248,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/boolean.rb"],"sourcesContent":["# use_strict: true\n\nclass ::Boolean < `Boolean`\n  `Opal.prop(self.$$prototype, '$$is_boolean', true)`\n\n  %x{\n    var properties = ['$$class', '$$meta'];\n\n    for (var i = 0; i < properties.length; i++) {\n      Object.defineProperty(self.$$prototype, properties[i], {\n        configurable: true,\n        enumerable: false,\n        get: function() {\n          return this == true  ? Opal.TrueClass :\n                 this == false ? Opal.FalseClass :\n                                 Opal.Boolean;\n        }\n      });\n    }\n\n    Object.defineProperty(self.$$prototype, \"$$id\", {\n      configurable: true,\n      enumerable: false,\n      get: function() {\n        return this == true  ? 2 :\n               this == false ? 0 :\n                               nil;\n      }\n    });\n  }\n\n  class << self\n    def allocate\n      ::Kernel.raise ::TypeError, \"allocator undefined for #{name}\"\n    end\n\n    undef :new\n  end\n\n  def __id__\n    `self.valueOf() ? 2 : 0`\n  end\n\n  def !\n    `self != true`\n  end\n\n  def &(other)\n    `(self == true) ? (other !== false && other !== nil) : false`\n  end\n\n  def |(other)\n    `(self == true) ? true : (other !== false && other !== nil)`\n  end\n\n  def ^(other)\n    `(self == true) ? (other === false || other === nil) : (other !== false && other !== nil)`\n  end\n\n  def ==(other)\n    `(self == true) === other.valueOf()`\n  end\n\n  def singleton_class\n    `self.$$meta`\n  end\n\n  def to_s\n    `(self == true) ? 'true' : 'false'`\n  end\n\n  def dup\n    self\n  end\n\n  def clone(freeze: true)\n    self\n  end\n\n  # See: https://github.com/opal/opal/issues/2230\n  #\n  # This is a hack that allows you to add methods to TrueClass and FalseClass.\n  # Do note, that while true and false have a correct $$class (it's either\n  # TrueClass or FalseClass), their prototype is `Boolean.$$prototype`, which\n  # basically means that when calling `true.something` we actually call\n  # `Boolean#something` instead of `TrueClass#something`. So using\n  # method_missing we dispatch it to `TrueClass/FalseClass#something` correctly.\n  #\n  # The downside is that a correct implementation would also allow us to override\n  # the methods defined on Boolean, but our implementation doesn't allow that,\n  # unless you define them on Boolean and not on TrueClass/FalseClass.\n  def method_missing(method, *args, &block)\n    `var body = self.$$class.$$prototype['$' + #{method}]`\n    super unless `typeof body !== 'undefined' && !body.$$stub`\n    `Opal.send(self, body, #{args}, #{block})`\n  end\n\n  def respond_to_missing?(method, _include_all = false)\n    `var body = self.$$class.$$prototype['$' + #{method}]`\n    `typeof body !== 'undefined' && !body.$$stub`\n  end\n\n  alias eql? ==\n  alias equal? ==\n  alias inspect to_s\n  alias object_id __id__\nend\n\nclass ::TrueClass < ::Boolean; end\nclass ::FalseClass < ::Boolean; end\n"],"names":["<top (required)>","<class:Boolean>","allocate","Kernel","raise","TypeError","self","name","__id__","!","&","other","|","^","==","singleton_class","to_s","dup","clone","$kwargs","method_missing","method","args","block","respond_to_missing?","_include_all","<class:TrueClass>","Boolean","<class:FalseClass>"],"mappings":"AAAAA,kDAAAA;EAAAA;EAAAA;;EAAAA;;EAEAC;EAAAA;;IAAAA;;;IACGA;;AAGHA;;AAEAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;;AAEAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;IAEE;;;;AACEC,MAAAA,wBAAAA,oBAAAA;AAAAA,QAAAA;;QACEA,OAAAC,OAAQC,OAAAA,CAAOC,gBAAf,EAA6BH,0BAAD,GAAA,CAA2BI,IAAAC,MAAAA,CAAAA,CAA3B,CAApBH;MADVF,CAAAA,GAAAA;;;MAIA,sBAAM,KAAN;MApCJ,OAAA;IA+BE,4BAASI,IAAT;;AAQAE,IAAAA,sBAAAA,kBAAAA;AAAAA,MAAAA;;MACEA,OAACA,sBAADA;IADFA,CAAAA,GAAAA;;AAIAC,IAAAA,iBAAAA,0BAAAA;AAAAA,MAAAA;;MACEA,OAACA,YAADA;IADFA,CAAAA,GAAAA;;AAIAC,IAAAA,iBAAAA,sBAAMC,KAAND;AAAAA,MAAAA;;MACEA,OAACA,2DAADA;IADFA,CAAAA,GAAAA;;AAIAE,IAAAA,iBAAAA,sBAAMD,KAANC;AAAAA,MAAAA;;MACEA,OAACA,0DAADA;IADFA,CAAAA,GAAAA;;AAIAC,IAAAA,iBAAAA,sBAAMF,KAANE;AAAAA,MAAAA;;MACEA,OAACA,wFAADA;IADFA,CAAAA,GAAAA;;AAIAC,IAAAA,kBAAAA,2BAAOH,KAAPG;AAAAA,MAAAA;;MACEA,OAACA,kCAADA;IADFA,CAAAA,GAAAA;;AAIAC,IAAAA,+BAAAA,2BAAAA;AAAAA,MAAAA;;MACEA,OAACA,WAADA;IADFA,CAAAA,GAAAA;;AAIAC,IAAAA,oBAAAA,gBAAAA;AAAAA,MAAAA;;MACEA,OAACA,iCAADA;IADFA,CAAAA,GAAAA;;AAIAC,IAAAA,mBAAAA,eAAAA;AAAAA,MAAAA;;MACEA,OAAAX;IADFW,CAAAA,GAAAA;;AAIAC,IAAAA,qBAAAA,iBA3EFC,OA2EED;AAAAA,MAAAA;;;;MA3EF;MAAA;MAAA;MAAA;MAAA;;MA2EY;MAAA,6BAAQ;MAChBA,OAAAZ;IADFY,CAAAA,IAAAA;;AAgBAE,IAAAA,8BAAAA,0BAAmBC,MAAD,EA3FpB,EA2FED;AAAAA,MAAAA;;MAAAA;;;;MA3FF;;MA2F6B;MACxBA,0CAA4CC,MAAOD;MACpD,KAAA,QAAcA,2CAAd,CAAA;QAAA,OAAAd,IAAA,EAAA,kEAAA,kBAAA,EAAA,CAAAe,MAAA,CAAA,QAAA,MAAAC,IAAA,CAAA,CAAA,EAAA,KAAA;MAAA;MACAF,OAACA,sBAAwBE,IAAKF,EAAIG,KAAMH;IAH1CA,CAAAA,IAAAA;;AAMAI,IAAAA,mCAAAA,4CAAwBH,MAAD,EAASI,YAAhCD;AAAAA,MAAAA;;;;MAAgC,yCAAe,KAAf;MAC7BA,0CAA4CH,MAAOG;MACpDA,OAACA,2CAADA;IAFFA,CAAAA,IAAAA;IAKA,aAAM,MAAN,EAAW,IAAX;IACA,aAAM,QAAN,EAAa,IAAb;IACA,aAAM,SAAN,EAAc,MAAd;IACAvB,OAAA,aAAM,WAAN,EAAgB,QAAhB;EAvGFA,GAAM,IAANA,EAAmBD,OAAnBC;EA0GAyB,OAAM,IAANA,EAAoBC,cAApBD;EACA1B,OAAA4B,QAAM,IAANA,EAAqBD,cAArBC;AA7GA5B;"}},{"offset":{"line":6406,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/comparable.rb"],"sourcesContent":["# helpers: truthy\n\nmodule ::Comparable\n  %x{\n    function normalize(what) {\n      if (Opal.is_a(what, Opal.Integer)) { return what; }\n\n      if (#{`what` > 0}) { return 1; }\n      if (#{`what` < 0}) { return -1; }\n      return 0;\n    }\n\n    function fail_comparison(lhs, rhs) {\n      var class_name;\n      #{\n        case `rhs`\n        when nil, true, false, ::Integer, ::Float\n          `class_name = rhs.$inspect()`\n        else\n          `class_name = rhs.$$class`\n        end\n      }\n      #{::Kernel.raise ::ArgumentError, \"comparison of #{`lhs`.class} with #{`class_name`} failed\"}\n    }\n\n    function cmp_or_fail(lhs, rhs) {\n      var cmp = #{`lhs` <=> `rhs`};\n      if (!$truthy(cmp)) fail_comparison(lhs, rhs);\n      return normalize(cmp);\n    }\n  }\n\n  def ==(other)\n    return true if equal?(other)\n\n    %x{\n      if (self[\"$<=>\"] == Opal.Kernel[\"$<=>\"]) {\n        return false;\n      }\n\n      // check for infinite recursion\n      if (self.$$comparable) {\n        delete self.$$comparable;\n        return false;\n      }\n    }\n\n    return false unless cmp = (self <=> other)\n\n    `normalize(cmp) == 0`\n  end\n\n  def >(other)\n    `cmp_or_fail(self, other) > 0`\n  end\n\n  def >=(other)\n    `cmp_or_fail(self, other) >= 0`\n  end\n\n  def <(other)\n    `cmp_or_fail(self, other) < 0`\n  end\n\n  def <=(other)\n    `cmp_or_fail(self, other) <= 0`\n  end\n\n  def between?(min, max)\n    return false if self < min\n    return false if self > max\n    true\n  end\n\n  def clamp(min, max = nil)\n    %x{\n      var c, excl;\n\n      if (max === nil) {\n        // We are dealing with a new Ruby 2.7 behaviour that we are able to\n        // provide a single Range argument instead of 2 Comparables.\n\n        if (!Opal.is_a(min, Opal.Range)) {\n          #{::Kernel.raise ::TypeError, \"wrong argument type #{min.class} (expected Range)\"}\n        }\n\n        excl = min.excl;\n        max = min.end;\n        min = min.begin;\n\n        if (max !== nil && excl) {\n          #{::Kernel.raise ::ArgumentError, 'cannot clamp with an exclusive range'}\n        }\n      }\n\n      if (min !== nil && max !== nil && cmp_or_fail(min, max) > 0) {\n        #{::Kernel.raise ::ArgumentError, 'min argument must be smaller than max argument'}\n      }\n\n      if (min !== nil) {\n        c = cmp_or_fail(self, min);\n\n        if (c == 0) return self;\n        if (c < 0) return min;\n      }\n\n      if (max !== nil) {\n        c = cmp_or_fail(self, max);\n\n        if (c > 0) return max;\n      }\n\n      return self;\n    }\n  end\nend\n"],"names":["<top (required)>","<module:Comparable>",">","0","<","$ret_or_1","Integer","Float","Kernel","raise","ArgumentError","class","<=>","==","other","self","equal?","cmp",">=","<=","between?","min","max","clamp","TypeError"],"mappings":"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"}},{"offset":{"line":6547,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/regexp.rb"],"sourcesContent":["# helpers: coerce_to\n\nclass ::RegexpError < ::StandardError; end\n\nclass ::Regexp < `RegExp`\n  self::IGNORECASE = 1\n  self::EXTENDED = 2\n  self::MULTILINE = 4\n\n  `Opal.prop(self.$$prototype, '$$is_regexp', true)`\n\n  class << self\n    def allocate\n      allocated = super\n      `#{allocated}.uninitialized = true`\n      allocated\n    end\n\n    def escape(string)\n      `Opal.escape_regexp(string)`\n    end\n\n    def last_match(n = nil)\n      if n.nil?\n        $~\n      elsif $~\n        $~[n]\n      end\n    end\n\n    def union(*parts)\n      %x{\n        var is_first_part_array, quoted_validated, part, options, each_part_options;\n        if (parts.length == 0) {\n          return /(?!)/;\n        }\n        // return fast if there's only one element\n        if (parts.length == 1 && parts[0].$$is_regexp) {\n          return parts[0];\n        }\n        // cover the 2 arrays passed as arguments case\n        is_first_part_array = parts[0].$$is_array;\n        if (parts.length > 1 && is_first_part_array) {\n          #{::Kernel.raise ::TypeError, 'no implicit conversion of Array into String'}\n        }\n        // deal with splat issues (related to https://github.com/opal/opal/issues/858)\n        if (is_first_part_array) {\n          parts = parts[0];\n        }\n        options = undefined;\n        quoted_validated = [];\n        for (var i=0; i < parts.length; i++) {\n          part = parts[i];\n          if (part.$$is_string) {\n            quoted_validated.push(#{escape(`part`)});\n          }\n          else if (part.$$is_regexp) {\n            each_part_options = #{`part`.options};\n            if (options != undefined && options != each_part_options) {\n              #{::Kernel.raise ::TypeError, 'All expressions must use the same options'}\n            }\n            options = each_part_options;\n            quoted_validated.push('('+part.source+')');\n          }\n          else {\n            quoted_validated.push(#{escape(`part`.to_str)});\n          }\n        }\n      }\n      # Take advantage of logic that can parse options from JS Regex\n      new(`quoted_validated`.join('|'), `options`)\n    end\n\n    def new(regexp, options = undefined)\n      %x{\n        if (regexp.$$is_regexp) {\n          return new RegExp(regexp);\n        }\n\n        regexp = #{::Opal.coerce_to!(regexp, ::String, :to_str)};\n\n        if (regexp.charAt(regexp.length - 1) === '\\\\' && regexp.charAt(regexp.length - 2) !== '\\\\') {\n          #{::Kernel.raise ::RegexpError, \"too short escape sequence: /#{regexp}/\"}\n        }\n\n        if (options === undefined || #{!options}) {\n          return new RegExp(regexp);\n        }\n\n        if (options.$$is_number) {\n          var temp = '';\n          if (#{IGNORECASE} & options) { temp += 'i'; }\n          if (#{MULTILINE}  & options) { temp += 'm'; }\n          options = temp;\n        }\n        else {\n          options = 'i';\n        }\n\n        return new RegExp(regexp, options);\n      }\n    end\n\n    alias compile new\n    alias quote escape\n  end\n\n  def ==(other)\n    `other instanceof RegExp && self.toString() === other.toString()`\n  end\n\n  def ===(string)\n    `#{match(::Opal.coerce_to?(string, ::String, :to_str))} !== nil`\n  end\n\n  def =~(string)\n    match(string) && $~.begin(0)\n  end\n\n  def inspect\n    # Use a regexp to extract the regular expression and the optional mode modifiers from the string.\n    # In the regular expression, escape any front slash (not already escaped) with a backslash.\n    %x{\n      var regexp_format = /^\\/(.*)\\/([^\\/]*)$/;\n      var value = self.toString();\n      var matches = regexp_format.exec(value);\n      if (matches) {\n        var regexp_pattern = matches[1];\n        var regexp_flags = matches[2];\n        var chars = regexp_pattern.split('');\n        var chars_length = chars.length;\n        var char_escaped = false;\n        var regexp_pattern_escaped = '';\n        for (var i = 0; i < chars_length; i++) {\n          var current_char = chars[i];\n          if (!char_escaped && current_char == '/') {\n            regexp_pattern_escaped = regexp_pattern_escaped.concat('\\\\');\n          }\n          regexp_pattern_escaped = regexp_pattern_escaped.concat(current_char);\n          if (current_char == '\\\\') {\n            if (char_escaped) {\n              // does not over escape\n              char_escaped = false;\n            } else {\n              char_escaped = true;\n            }\n          } else {\n            char_escaped = false;\n          }\n        }\n        return '/' + regexp_pattern_escaped + '/' + regexp_flags;\n      } else {\n        return value;\n      }\n    }\n  end\n\n  def match(string, pos = undefined, &block)\n    %x{\n      if (self.uninitialized) {\n        #{::Kernel.raise ::TypeError, 'uninitialized Regexp'}\n      }\n\n      if (pos === undefined) {\n        if (string === nil) return #{$~ = nil};\n        var m = self.exec($coerce_to(string, #{::String}, 'to_str'));\n        if (m) {\n          #{$~ = ::MatchData.new(`self`, `m`)};\n          return block === nil ? #{$~} : #{yield $~};\n        } else {\n          return #{$~ = nil};\n        }\n      }\n\n      pos = $coerce_to(pos, #{::Integer}, 'to_int');\n\n      if (string === nil) {\n        return #{$~ = nil};\n      }\n\n      string = $coerce_to(string, #{::String}, 'to_str');\n\n      if (pos < 0) {\n        pos += string.length;\n        if (pos < 0) {\n          return #{$~ = nil};\n        }\n      }\n\n      // global RegExp maintains state, so not using self/this\n      var md, re = Opal.global_regexp(self);\n\n      while (true) {\n        md = re.exec(string);\n        if (md === null) {\n          return #{$~ = nil};\n        }\n        if (md.index >= pos) {\n          #{$~ = ::MatchData.new(`re`, `md`)};\n          return block === nil ? #{$~} : #{yield $~};\n        }\n        re.lastIndex = md.index + 1;\n      }\n    }\n  end\n\n  def match?(string, pos = undefined)\n    %x{\n      if (self.uninitialized) {\n        #{::Kernel.raise ::TypeError, 'uninitialized Regexp'}\n      }\n\n      if (pos === undefined) {\n        return string === nil ? false : self.test($coerce_to(string, #{::String}, 'to_str'));\n      }\n\n      pos = $coerce_to(pos, #{::Integer}, 'to_int');\n\n      if (string === nil) {\n        return false;\n      }\n\n      string = $coerce_to(string, #{::String}, 'to_str');\n\n      if (pos < 0) {\n        pos += string.length;\n        if (pos < 0) {\n          return false;\n        }\n      }\n\n      // global RegExp maintains state, so not using self/this\n      var md, re = Opal.global_regexp(self);\n\n      md = re.exec(string);\n      if (md === null || md.index < pos) {\n        return false;\n      } else {\n        return true;\n      }\n    }\n  end\n\n  def names\n    source.scan(/\\(?<(\\w+)>/, no_matchdata: true).map(&:first).uniq\n  end\n\n  def named_captures\n    source.scan(/\\(?<(\\w+)>/, no_matchdata: true) # Scan for capture groups\n          .map(&:first)                           # Get the first regexp match (\\w+)\n          .each_with_index                        # Add index to an iterator\n          .group_by(&:first)                      # Group by the capture group names\n          .transform_values do |i|                # Convert hash values\n            i.map { |j| j.last + 1 }              # Drop the capture group names; increase indexes by 1\n          end\n  end\n\n  def ~\n    self =~ $_\n  end\n\n  def source\n    `self.source`\n  end\n\n  def options\n    # Flags would be nice to use with this, but still experimental - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/flags\n    %x{\n      if (self.uninitialized) {\n        #{::Kernel.raise ::TypeError, 'uninitialized Regexp'}\n      }\n      var result = 0;\n      // should be supported in IE6 according to https://msdn.microsoft.com/en-us/library/7f5z26w4(v=vs.94).aspx\n      if (self.multiline) {\n        result |= #{MULTILINE};\n      }\n      if (self.ignoreCase) {\n        result |= #{IGNORECASE};\n      }\n      return result;\n    }\n  end\n\n  def casefold?\n    `self.ignoreCase`\n  end\n\n  alias eql? ==\n  alias to_s source\nend\n\nclass MatchData\n  attr_reader :post_match, :pre_match, :regexp, :string\n\n  def initialize(regexp, match_groups, no_matchdata: false)\n    $~          = self unless no_matchdata\n    @regexp     = regexp\n    @begin      = `match_groups.index`\n    @string     = `match_groups.input`\n    @pre_match  = `match_groups.input.slice(0, match_groups.index)`\n    @post_match = `match_groups.input.slice(match_groups.index + match_groups[0].length)`\n    @matches    = []\n\n    %x{\n      for (var i = 0, length = match_groups.length; i < length; i++) {\n        var group = match_groups[i];\n\n        if (group == null) {\n          #{@matches}.push(nil);\n        }\n        else {\n          #{@matches}.push(group);\n        }\n      }\n    }\n  end\n\n  def match(idx)\n    if (match = self[idx])\n      match\n    elsif idx.is_a?(Integer) && idx >= length\n      ::Kernel.raise ::IndexError, \"index #{idx} out of matches\"\n    end\n  end\n\n  def match_length(idx)\n    match(idx)&.length\n  end\n\n  def [](*args)\n    %x{\n      if (args[0].$$is_string) {\n        if (#{!regexp.names.include?(args[0])}) {\n          #{::Kernel.raise ::IndexError, \"undefined group name reference: #{args[0]}\"}\n        }\n        return #{named_captures[args[0]]}\n      }\n      else {\n        return #{@matches[*args]}\n      }\n    }\n  end\n\n  def offset(n)\n    %x{\n      if (n !== 0) {\n        #{::Kernel.raise ::ArgumentError, 'MatchData#offset only supports 0th element'}\n      }\n      return [self.begin, self.begin + self.matches[n].length];\n    }\n  end\n\n  def ==(other)\n    return false unless ::MatchData === other\n\n    `self.string == other.string` &&\n      `self.regexp.toString() == other.regexp.toString()` &&\n      `self.pre_match == other.pre_match` &&\n      `self.post_match == other.post_match` &&\n      `self.begin == other.begin`\n  end\n\n  def begin(n)\n    %x{\n      if (n !== 0) {\n        #{::Kernel.raise ::ArgumentError, 'MatchData#begin only supports 0th element'}\n      }\n      return self.begin;\n    }\n  end\n\n  def end(n)\n    %x{\n      if (n !== 0) {\n        #{::Kernel.raise ::ArgumentError, 'MatchData#end only supports 0th element'}\n      }\n      return self.begin + self.matches[n].length;\n    }\n  end\n\n  def captures\n    `#{@matches}.slice(1)`\n  end\n\n  def named_captures\n    matches = captures\n    regexp.named_captures.transform_values do |i|\n      matches[i.last - 1]\n    end\n  end\n\n  def names\n    regexp.names\n  end\n\n  def inspect\n    %x{\n      var str = \"#<MatchData \" + #{`#{@matches}[0]`.inspect};\n\n      if (#{regexp.names.empty?}) {\n        for (var i = 1, length = #{@matches}.length; i < length; i++) {\n          str += \" \" + i + \":\" + #{`#{@matches}[i]`.inspect};\n        }\n      }\n      else {\n        #{ named_captures.each do |k, v|\n             %x{\n               str += \" \" + #{k} + \":\" + #{v.inspect}\n             }\n           end }\n      }\n\n      return str + \">\";\n    }\n  end\n\n  def length\n    `#{@matches}.length`\n  end\n\n  def to_a\n    @matches\n  end\n\n  def to_s\n    `#{@matches}[0]`\n  end\n\n  def values_at(*args)\n    %x{\n      var i, a, index, values = [];\n\n      for (i = 0; i < args.length; i++) {\n\n        if (args[i].$$is_range) {\n          a = #{`args[i]`.to_a};\n          a.unshift(i, 1);\n          Array.prototype.splice.apply(args, a);\n        }\n\n        index = #{::Opal.coerce_to!(`args[i]`, ::Integer, :to_int)};\n\n        if (index < 0) {\n          index += #{@matches}.length;\n          if (index < 0) {\n            values.push(nil);\n            continue;\n          }\n        }\n\n        values.push(#{@matches}[index]);\n      }\n\n      return values;\n    }\n  end\n\n  alias eql? ==\n  alias size length\nend\n"],"names":["<top (required)>","<class:RegexpError>","StandardError","<class:Regexp>","self","1","2","4","allocate","allocated","escape","string","last_match","n","nil?","$~","[]","union","Kernel","raise","TypeError","options","to_str","new","join","regexp","Opal","coerce_to!","String","RegexpError","!","IGNORECASE","MULTILINE","==","other","===","match","coerce_to?","=~","$ret_or_1","begin","0","inspect","pos","MatchData","Integer","match?","names","map","source","scan","to_proc","uniq","named_captures","transform_values","group_by","each_with_index","block in named_captures","i","block (2 levels) in named_captures","j","block (3 levels) in named_captures","+","last","~","$_","casefold?","<class:MatchData>","attr_reader","initialize","match_groups","$kwargs","no_matchdata","@regexp","@begin","@string","@pre_match","@post_match","@matches","idx","is_a?",">=","length","IndexError","match_length","include?","args","offset","ArgumentError","$ret_or_2","$ret_or_3","$ret_or_4","end","captures","matches","-","empty?","each","block in inspect","k","v","block (2 levels) in inspect","to_a","to_s","values_at"],"mappings":"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"}},{"offset":{"line":7139,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/string.rb"],"sourcesContent":["# helpers: coerce_to, respond_to, global_multiline_regexp\n\nrequire 'corelib/comparable'\nrequire 'corelib/regexp'\n\nclass ::String < `String`\n  include ::Comparable\n\n  %x{\n    Opal.prop(#{self}.$$prototype, '$$is_string', true);\n\n    Opal.prop(#{self}.$$prototype, '$$cast', function(string) {\n      var klass = this.$$class;\n      if (klass.$$constructor === String) {\n        return string;\n      } else {\n        return new klass.$$constructor(string);\n      }\n    });\n  }\n\n  def __id__\n    `self.toString()`\n  end\n\n  def self.try_convert(what)\n    ::Opal.coerce_to?(what, ::String, :to_str)\n  end\n\n  def self.new(*args)\n    %x{\n      var str = args[0] || \"\";\n      var opts = args[args.length-1];\n      str = $coerce_to(str, #{::String}, 'to_str');\n      if (opts && opts.$$is_hash) {\n        if (opts.$$smap.encoding) str = str.$force_encoding(opts.$$smap.encoding);\n      }\n      str = new self.$$constructor(str);\n      if (!str.$initialize.$$pristine) #{`str`.initialize(*args)};\n      return str;\n    }\n  end\n\n  # Our initialize method does nothing, the string value setup is being\n  # done by String.new. Therefore not all kinds of subclassing will work.\n  # As a rule of thumb, when subclassing String, either make sure to override\n  # .new or make sure that the first argument given to a constructor is\n  # a string we want our subclass-string to hold.\n  def initialize(str = undefined, encoding: nil, capacity: nil)\n  end\n\n  def %(data)\n    if ::Array === data\n      format(self, *data)\n    else\n      format(self, data)\n    end\n  end\n\n  def *(count)\n    %x{\n      count = $coerce_to(count, #{::Integer}, 'to_int');\n\n      if (count < 0) {\n        #{::Kernel.raise ::ArgumentError, 'negative argument'}\n      }\n\n      if (count === 0) {\n        return self.$$cast('');\n      }\n\n      var result = '',\n          string = self.toString();\n\n      // All credit for the bit-twiddling magic code below goes to Mozilla\n      // polyfill implementation of String.prototype.repeat() posted here:\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\n\n      if (string.length * count >= 1 << 28) {\n        #{::Kernel.raise ::RangeError, 'multiply count must not overflow maximum string size'}\n      }\n\n      for (;;) {\n        if ((count & 1) === 1) {\n          result += string;\n        }\n        count >>>= 1;\n        if (count === 0) {\n          break;\n        }\n        string += string;\n      }\n\n      return self.$$cast(result);\n    }\n  end\n\n  def +(other)\n    other = `$coerce_to(#{other}, #{::String}, 'to_str')`\n\n    %x{\n      if (other == \"\" && self.$$class === Opal.String) return #{self};\n      if (self == \"\" && other.$$class === Opal.String) return #{other};\n      var out = self + other;\n      if (self.encoding === out.encoding && other.encoding === out.encoding) return out;\n      if (self.encoding.name === \"UTF-8\" || other.encoding.name === \"UTF-8\") return out;\n      return Opal.enc(out, self.encoding);\n    }\n  end\n\n  def <=>(other)\n    if other.respond_to? :to_str\n      other = other.to_str.to_s\n\n      `self > other ? 1 : (self < other ? -1 : 0)`\n    else\n      %x{\n        var cmp = #{other <=> self};\n\n        if (cmp === nil) {\n          return nil;\n        }\n        else {\n          return cmp > 0 ? -1 : (cmp < 0 ? 1 : 0);\n        }\n      }\n    end\n  end\n\n  def ==(other)\n    %x{\n      if (other.$$is_string) {\n        return self.toString() === other.toString();\n      }\n      if ($respond_to(other, '$to_str')) {\n        return #{other == self};\n      }\n      return false;\n    }\n  end\n\n  def =~(other)\n    %x{\n      if (other.$$is_string) {\n        #{::Kernel.raise ::TypeError, 'type mismatch: String given'};\n      }\n\n      return #{other =~ self};\n    }\n  end\n\n  def [](index, length = undefined)\n    %x{\n      var size = self.length, exclude, range;\n\n      if (index.$$is_range) {\n        exclude = index.excl;\n        range   = index;\n        length  = index.end === nil ? -1 : $coerce_to(index.end, #{::Integer}, 'to_int');\n        index   = index.begin === nil ? 0 : $coerce_to(index.begin, #{::Integer}, 'to_int');\n\n        if (Math.abs(index) > size) {\n          return nil;\n        }\n\n        if (index < 0) {\n          index += size;\n        }\n\n        if (length < 0) {\n          length += size;\n        }\n\n        if (!exclude || range.end === nil) {\n          length += 1;\n        }\n\n        length = length - index;\n\n        if (length < 0) {\n          length = 0;\n        }\n\n        return self.$$cast(self.substr(index, length));\n      }\n\n\n      if (index.$$is_string) {\n        if (length != null) {\n          #{::Kernel.raise ::TypeError}\n        }\n        return self.indexOf(index) !== -1 ? self.$$cast(index) : nil;\n      }\n\n\n      if (index.$$is_regexp) {\n        var match = self.match(index);\n\n        if (match === null) {\n          #{$~ = nil}\n          return nil;\n        }\n\n        #{$~ = ::MatchData.new(`index`, `match`)}\n\n        if (length == null) {\n          return self.$$cast(match[0]);\n        }\n\n        length = $coerce_to(length, #{::Integer}, 'to_int');\n\n        if (length < 0 && -length < match.length) {\n          return self.$$cast(match[length += match.length]);\n        }\n\n        if (length >= 0 && length < match.length) {\n          return self.$$cast(match[length]);\n        }\n\n        return nil;\n      }\n\n\n      index = $coerce_to(index, #{::Integer}, 'to_int');\n\n      if (index < 0) {\n        index += size;\n      }\n\n      if (length == null) {\n        if (index >= size || index < 0) {\n          return nil;\n        }\n        return self.$$cast(self.substr(index, 1));\n      }\n\n      length = $coerce_to(length, #{::Integer}, 'to_int');\n\n      if (length < 0) {\n        return nil;\n      }\n\n      if (index > size || index < 0) {\n        return nil;\n      }\n\n      return self.$$cast(self.substr(index, length));\n    }\n  end\n\n  def b\n    `new String(#{self})`.force_encoding('binary')\n  end\n\n  def capitalize\n    `self.$$cast(self.charAt(0).toUpperCase() + self.substr(1).toLowerCase())`\n  end\n\n  def casecmp(other)\n    return nil unless other.respond_to?(:to_str)\n    other = `$coerce_to(other, #{::String}, 'to_str')`.to_s\n    %x{\n      var ascii_only = /^[\\x00-\\x7F]*$/;\n      if (ascii_only.test(self) && ascii_only.test(other)) {\n        self = self.toLowerCase();\n        other = other.toLowerCase();\n      }\n    }\n    self <=> other\n  end\n\n  def casecmp?(other)\n    %x{\n      var cmp = #{casecmp(other)};\n      if (cmp === nil) {\n        return nil;\n      } else {\n        return cmp === 0;\n      }\n    }\n  end\n\n  def center(width, padstr = ' ')\n    width  = `$coerce_to(#{width}, #{::Integer}, 'to_int')`\n    padstr = `$coerce_to(#{padstr}, #{::String}, 'to_str')`.to_s\n\n    if padstr.empty?\n      ::Kernel.raise ::ArgumentError, 'zero width padding'\n    end\n\n    return self if `width <= self.length`\n\n    %x{\n      var ljustified = #{ljust ((width + `self.length`) / 2).ceil, padstr},\n          rjustified = #{rjust ((width + `self.length`) / 2).floor, padstr};\n\n      return self.$$cast(rjustified + ljustified.slice(self.length));\n    }\n  end\n\n  def chomp(separator = $/)\n    return self if `separator === nil || self.length === 0`\n\n    separator = ::Opal.coerce_to!(separator, ::String, :to_str).to_s\n\n    %x{\n      var result;\n\n      if (separator === \"\\n\") {\n        result = self.replace(/\\r?\\n?$/, '');\n      }\n      else if (separator === \"\") {\n        result = self.replace(/(\\r?\\n)+$/, '');\n      }\n      else if (self.length >= separator.length) {\n        var tail = self.substr(self.length - separator.length, separator.length);\n\n        if (tail === separator) {\n          result = self.substr(0, self.length - separator.length);\n        }\n      }\n\n      if (result != null) {\n        return self.$$cast(result);\n      }\n    }\n\n    self\n  end\n\n  def chop\n    %x{\n      var length = self.length, result;\n\n      if (length <= 1) {\n        result = \"\";\n      } else if (self.charAt(length - 1) === \"\\n\" && self.charAt(length - 2) === \"\\r\") {\n        result = self.substr(0, length - 2);\n      } else {\n        result = self.substr(0, length - 1);\n      }\n\n      return self.$$cast(result);\n    }\n  end\n\n  def chr\n    `self.charAt(0)`\n  end\n\n  def clone\n    copy = `new String(self)`\n    copy.copy_singleton_methods(self)\n    copy.initialize_clone(self)\n    copy\n  end\n\n  def dup\n    copy = `new String(self)`\n    copy.initialize_dup(self)\n    copy\n  end\n\n  def count(*sets)\n    %x{\n      if (sets.length === 0) {\n        #{::Kernel.raise ::ArgumentError, 'ArgumentError: wrong number of arguments (0 for 1+)'}\n      }\n      var char_class = char_class_from_char_sets(sets);\n      if (char_class === null) {\n        return 0;\n      }\n      return self.length - self.replace(new RegExp(char_class, 'g'), '').length;\n    }\n  end\n\n  def delete(*sets)\n    %x{\n      if (sets.length === 0) {\n        #{::Kernel.raise ::ArgumentError, 'ArgumentError: wrong number of arguments (0 for 1+)'}\n      }\n      var char_class = char_class_from_char_sets(sets);\n      if (char_class === null) {\n        return self;\n      }\n      return self.$$cast(self.replace(new RegExp(char_class, 'g'), ''));\n    }\n  end\n\n  def delete_prefix(prefix)\n    %x{\n      if (!prefix.$$is_string) {\n        prefix = $coerce_to(prefix, #{::String}, 'to_str');\n      }\n\n      if (self.slice(0, prefix.length) === prefix) {\n        return self.$$cast(self.slice(prefix.length));\n      } else {\n        return self;\n      }\n    }\n  end\n\n  def delete_suffix(suffix)\n    %x{\n      if (!suffix.$$is_string) {\n        suffix = $coerce_to(suffix, #{::String}, 'to_str');\n      }\n\n      if (self.slice(self.length - suffix.length) === suffix) {\n        return self.$$cast(self.slice(0, self.length - suffix.length));\n      } else {\n        return self;\n      }\n    }\n  end\n\n  def downcase\n    `self.$$cast(self.toLowerCase())`\n  end\n\n  def each_line(separator = $/, chomp: false, &block)\n    return enum_for :each_line, separator, chomp: chomp unless block_given?\n\n    %x{\n      if (separator === nil) {\n        Opal.yield1(block, self);\n\n        return self;\n      }\n\n      separator = $coerce_to(separator, #{::String}, 'to_str');\n\n      var a, i, n, length, chomped, trailing, splitted, value;\n\n      if (separator.length === 0) {\n        for (a = self.split(/((?:\\r?\\n){2})(?:(?:\\r?\\n)*)/), i = 0, n = a.length; i < n; i += 2) {\n          if (a[i] || a[i + 1]) {\n            value = (a[i] || \"\") + (a[i + 1] || \"\");\n            if (chomp) {\n              value = #{`value`.chomp(\"\\n\")};\n            }\n            Opal.yield1(block, value);\n          }\n        }\n\n        return self;\n      }\n\n      chomped  = #{chomp(separator)};\n      trailing = self.length != chomped.length;\n      splitted = chomped.split(separator);\n\n      for (i = 0, length = splitted.length; i < length; i++) {\n        value = splitted[i];\n        if (i < length - 1 || trailing) {\n          value += separator;\n        }\n        if (chomp) {\n          value = #{`value`.chomp(separator)};\n        }\n        Opal.yield1(block, value);\n      }\n    }\n\n    self\n  end\n\n  def empty?\n    `self.length === 0`\n  end\n\n  def end_with?(*suffixes)\n    %x{\n      for (var i = 0, length = suffixes.length; i < length; i++) {\n        var suffix = $coerce_to(suffixes[i], #{::String}, 'to_str').$to_s();\n\n        if (self.length >= suffix.length &&\n            self.substr(self.length - suffix.length, suffix.length) == suffix) {\n          return true;\n        }\n      }\n    }\n\n    false\n  end\n\n  def gsub(pattern, replacement = undefined, &block)\n    %x{\n      if (replacement === undefined && block === nil) {\n        return #{enum_for :gsub, pattern};\n      }\n\n      var result = '', match_data = nil, index = 0, match, _replacement;\n\n      if (pattern.$$is_regexp) {\n        pattern = $global_multiline_regexp(pattern);\n      } else {\n        pattern = $coerce_to(pattern, #{::String}, 'to_str');\n        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'gm');\n      }\n\n      var lastIndex;\n      while (true) {\n        match = pattern.exec(self);\n\n        if (match === null) {\n          #{$~ = nil}\n          result += self.slice(index);\n          break;\n        }\n\n        match_data = #{::MatchData.new `pattern`, `match`};\n\n        if (replacement === undefined) {\n          lastIndex = pattern.lastIndex;\n          _replacement = block(match[0]);\n          pattern.lastIndex = lastIndex; // save and restore lastIndex\n        }\n        else if (replacement.$$is_hash) {\n          _replacement = #{`replacement`[`match[0]`].to_s};\n        }\n        else {\n          if (!replacement.$$is_string) {\n            replacement = $coerce_to(replacement, #{::String}, 'to_str');\n          }\n          _replacement = replacement.replace(/([\\\\]+)([0-9+&`'])/g, function (original, slashes, command) {\n            if (slashes.length % 2 === 0) {\n              return original;\n            }\n            switch (command) {\n            case \"+\":\n              for (var i = match.length - 1; i > 0; i--) {\n                if (match[i] !== undefined) {\n                  return slashes.slice(1) + match[i];\n                }\n              }\n              return '';\n            case \"&\": return slashes.slice(1) + match[0];\n            case \"`\": return slashes.slice(1) + self.slice(0, match.index);\n            case \"'\": return slashes.slice(1) + self.slice(match.index + match[0].length);\n            default:  return slashes.slice(1) + (match[command] || '');\n            }\n          }).replace(/\\\\\\\\/g, '\\\\');\n        }\n\n        if (pattern.lastIndex === match.index) {\n          result += (self.slice(index, match.index) + _replacement + (self[match.index] || \"\"));\n          pattern.lastIndex += 1;\n        }\n        else {\n          result += (self.slice(index, match.index) + _replacement)\n        }\n        index = pattern.lastIndex;\n      }\n\n      #{$~ = `match_data`}\n      return self.$$cast(result);\n    }\n  end\n\n  def hash\n    `self.toString()`\n  end\n\n  def hex\n    to_i 16\n  end\n\n  def include?(other)\n    %x{\n      if (!other.$$is_string) {\n        other = $coerce_to(other, #{::String}, 'to_str');\n      }\n      return self.indexOf(other) !== -1;\n    }\n  end\n\n  def index(search, offset = undefined)\n    %x{\n      var index,\n          match,\n          regex;\n\n      if (offset === undefined) {\n        offset = 0;\n      } else {\n        offset = $coerce_to(offset, #{::Integer}, 'to_int');\n        if (offset < 0) {\n          offset += self.length;\n          if (offset < 0) {\n            return nil;\n          }\n        }\n      }\n\n      if (search.$$is_regexp) {\n        regex = $global_multiline_regexp(search);\n        while (true) {\n          match = regex.exec(self);\n          if (match === null) {\n            #{$~ = nil};\n            index = -1;\n            break;\n          }\n          if (match.index >= offset) {\n            #{$~ = ::MatchData.new(`regex`, `match`)}\n            index = match.index;\n            break;\n          }\n          regex.lastIndex = match.index + 1;\n        }\n      } else {\n        search = $coerce_to(search, #{::String}, 'to_str');\n        if (search.length === 0 && offset > self.length) {\n          index = -1;\n        } else {\n          index = self.indexOf(search, offset);\n        }\n      }\n\n      return index === -1 ? nil : index;\n    }\n  end\n\n  def inspect\n    %x{\n      /* eslint-disable no-misleading-character-class */\n      var escapable = /[\\\\\\\"\\x00-\\x1f\\u007F-\\u009F\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n          meta = {\n            '\\u0007': '\\\\a',\n            '\\u001b': '\\\\e',\n            '\\b': '\\\\b',\n            '\\t': '\\\\t',\n            '\\n': '\\\\n',\n            '\\f': '\\\\f',\n            '\\r': '\\\\r',\n            '\\v': '\\\\v',\n            '\"' : '\\\\\"',\n            '\\\\': '\\\\\\\\'\n          },\n          escaped = self.replace(escapable, function (chr) {\n            if (meta[chr]) return meta[chr];\n            chr = chr.charCodeAt(0);\n            if (chr <= 0xff && (self.encoding[\"$binary?\"]() || self.internal_encoding[\"$binary?\"]())) {\n              return '\\\\x' + ('00' + chr.toString(16).toUpperCase()).slice(-2);\n            } else {\n              return '\\\\u' + ('0000' + chr.toString(16).toUpperCase()).slice(-4);\n            }\n          });\n      return '\"' + escaped.replace(/\\#[\\$\\@\\{]/g, '\\\\$&') + '\"';\n      /* eslint-enable no-misleading-character-class */\n    }\n  end\n\n  def intern\n    `self.toString()`\n  end\n\n  def lines(separator = $/, chomp: false, &block)\n    e = each_line(separator, chomp: chomp, &block)\n    block ? self : e.to_a\n  end\n\n  def ljust(width, padstr = ' ')\n    width  = `$coerce_to(#{width}, #{::Integer}, 'to_int')`\n    padstr = `$coerce_to(#{padstr}, #{::String}, 'to_str')`.to_s\n\n    if padstr.empty?\n      ::Kernel.raise ::ArgumentError, 'zero width padding'\n    end\n\n    return self if `width <= self.length`\n\n    %x{\n      var index  = -1,\n          result = \"\";\n\n      width -= self.length;\n\n      while (++index < width) {\n        result += padstr;\n      }\n\n      return self.$$cast(self + result.slice(0, width));\n    }\n  end\n\n  def lstrip\n    `self.replace(/^[\\u0000\\s]*/, '')`\n  end\n\n  def ascii_only?\n    # non-ASCII-compatible encoding must return false\n    %x{\n      if (!self.encoding.ascii) return false;\n      return /^[\\x00-\\x7F]*$/.test(self);\n    }\n  end\n\n  def match(pattern, pos = undefined, &block)\n    if String === pattern || pattern.respond_to?(:to_str)\n      pattern = ::Regexp.new(pattern.to_str)\n    end\n\n    unless ::Regexp === pattern\n      ::Kernel.raise ::TypeError, \"wrong argument type #{pattern.class} (expected Regexp)\"\n    end\n\n    pattern.match(self, pos, &block)\n  end\n\n  def match?(pattern, pos = undefined)\n    if String === pattern || pattern.respond_to?(:to_str)\n      pattern = ::Regexp.new(pattern.to_str)\n    end\n\n    unless ::Regexp === pattern\n      ::Kernel.raise ::TypeError, \"wrong argument type #{pattern.class} (expected Regexp)\"\n    end\n\n    pattern.match?(self, pos)\n  end\n\n  def next\n    %x{\n      var i = self.length;\n      if (i === 0) {\n        return self.$$cast('');\n      }\n      var result = self;\n      var first_alphanum_char_index = self.search(/[a-zA-Z0-9]/);\n      var carry = false;\n      var code;\n      while (i--) {\n        code = self.charCodeAt(i);\n        if ((code >= 48 && code <= 57) ||\n          (code >= 65 && code <= 90) ||\n          (code >= 97 && code <= 122)) {\n          switch (code) {\n          case 57:\n            carry = true;\n            code = 48;\n            break;\n          case 90:\n            carry = true;\n            code = 65;\n            break;\n          case 122:\n            carry = true;\n            code = 97;\n            break;\n          default:\n            carry = false;\n            code += 1;\n          }\n        } else {\n          if (first_alphanum_char_index === -1) {\n            if (code === 255) {\n              carry = true;\n              code = 0;\n            } else {\n              carry = false;\n              code += 1;\n            }\n          } else {\n            carry = true;\n          }\n        }\n        result = result.slice(0, i) + String.fromCharCode(code) + result.slice(i + 1);\n        if (carry && (i === 0 || i === first_alphanum_char_index)) {\n          switch (code) {\n          case 65:\n            break;\n          case 97:\n            break;\n          default:\n            code += 1;\n          }\n          if (i === 0) {\n            result = String.fromCharCode(code) + result;\n          } else {\n            result = result.slice(0, i) + String.fromCharCode(code) + result.slice(i);\n          }\n          carry = false;\n        }\n        if (!carry) {\n          break;\n        }\n      }\n      return self.$$cast(result);\n    }\n  end\n\n  def oct\n    %x{\n      var result,\n          string = self,\n          radix = 8;\n\n      if (/^\\s*_/.test(string)) {\n        return 0;\n      }\n\n      string = string.replace(/^(\\s*[+-]?)(0[bodx]?)(.+)$/i, function (original, head, flag, tail) {\n        switch (tail.charAt(0)) {\n        case '+':\n        case '-':\n          return original;\n        case '0':\n          if (tail.charAt(1) === 'x' && flag === '0x') {\n            return original;\n          }\n        }\n        switch (flag) {\n        case '0b':\n          radix = 2;\n          break;\n        case '0':\n        case '0o':\n          radix = 8;\n          break;\n        case '0d':\n          radix = 10;\n          break;\n        case '0x':\n          radix = 16;\n          break;\n        }\n        return head + tail;\n      });\n\n      result = parseInt(string.replace(/_(?!_)/g, ''), radix);\n      return isNaN(result) ? 0 : result;\n    }\n  end\n\n  def ord\n    %x{\n      if (typeof self.codePointAt === \"function\") {\n        return self.codePointAt(0);\n      }\n      else {\n        return self.charCodeAt(0);\n      }\n    }\n  end\n\n  def partition(sep)\n    %x{\n      var i, m;\n\n      if (sep.$$is_regexp) {\n        m = sep.exec(self);\n        if (m === null) {\n          i = -1;\n        } else {\n          #{::MatchData.new `sep`, `m`};\n          sep = m[0];\n          i = m.index;\n        }\n      } else {\n        sep = $coerce_to(sep, #{::String}, 'to_str');\n        i = self.indexOf(sep);\n      }\n\n      if (i === -1) {\n        return [self, '', ''];\n      }\n\n      return [\n        self.slice(0, i),\n        self.slice(i, i + sep.length),\n        self.slice(i + sep.length)\n      ];\n    }\n  end\n\n  def reverse\n    `self.split('').reverse().join('')`\n  end\n\n  def rindex(search, offset = undefined)\n    %x{\n      var i, m, r, _m;\n\n      if (offset === undefined) {\n        offset = self.length;\n      } else {\n        offset = $coerce_to(offset, #{::Integer}, 'to_int');\n        if (offset < 0) {\n          offset += self.length;\n          if (offset < 0) {\n            return nil;\n          }\n        }\n      }\n\n      if (search.$$is_regexp) {\n        m = null;\n        r = $global_multiline_regexp(search);\n        while (true) {\n          _m = r.exec(self);\n          if (_m === null || _m.index > offset) {\n            break;\n          }\n          m = _m;\n          r.lastIndex = m.index + 1;\n        }\n        if (m === null) {\n          #{$~ = nil}\n          i = -1;\n        } else {\n          #{::MatchData.new `r`, `m`};\n          i = m.index;\n        }\n      } else {\n        search = $coerce_to(search, #{::String}, 'to_str');\n        i = self.lastIndexOf(search, offset);\n      }\n\n      return i === -1 ? nil : i;\n    }\n  end\n\n  def rjust(width, padstr = ' ')\n    width  = `$coerce_to(#{width}, #{::Integer}, 'to_int')`\n    padstr = `$coerce_to(#{padstr}, #{::String}, 'to_str')`.to_s\n\n    if padstr.empty?\n      ::Kernel.raise ::ArgumentError, 'zero width padding'\n    end\n\n    return self if `width <= self.length`\n\n    %x{\n      var chars     = Math.floor(width - self.length),\n          patterns  = Math.floor(chars / padstr.length),\n          result    = Array(patterns + 1).join(padstr),\n          remaining = chars - result.length;\n\n      return self.$$cast(result + padstr.slice(0, remaining) + self);\n    }\n  end\n\n  def rpartition(sep)\n    %x{\n      var i, m, r, _m;\n\n      if (sep.$$is_regexp) {\n        m = null;\n        r = $global_multiline_regexp(sep);\n\n        while (true) {\n          _m = r.exec(self);\n          if (_m === null) {\n            break;\n          }\n          m = _m;\n          r.lastIndex = m.index + 1;\n        }\n\n        if (m === null) {\n          i = -1;\n        } else {\n          #{::MatchData.new `r`, `m`};\n          sep = m[0];\n          i = m.index;\n        }\n\n      } else {\n        sep = $coerce_to(sep, #{::String}, 'to_str');\n        i = self.lastIndexOf(sep);\n      }\n\n      if (i === -1) {\n        return ['', '', self];\n      }\n\n      return [\n        self.slice(0, i),\n        self.slice(i, i + sep.length),\n        self.slice(i + sep.length)\n      ];\n    }\n  end\n\n  def rstrip\n    `self.replace(/[\\s\\u0000]*$/, '')`\n  end\n\n  def scan(pattern, no_matchdata: false, &block)\n    %x{\n      var result = [],\n          match_data = nil,\n          match;\n\n      if (pattern.$$is_regexp) {\n        pattern = $global_multiline_regexp(pattern);\n      } else {\n        pattern = $coerce_to(pattern, #{::String}, 'to_str');\n        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'gm');\n      }\n\n      while ((match = pattern.exec(self)) != null) {\n        match_data = #{::MatchData.new `pattern`, `match`, no_matchdata: no_matchdata};\n        if (block === nil) {\n          match.length == 1 ? result.push(match[0]) : result.push(#{`match_data`.captures});\n        } else {\n          match.length == 1 ? Opal.yield1(block, match[0]) : Opal.yield1(block, #{`match_data`.captures});\n        }\n        if (pattern.lastIndex === match.index) {\n          pattern.lastIndex += 1;\n        }\n      }\n\n      if (!no_matchdata) #{$~ = `match_data`};\n\n      return (block !== nil ? self : result);\n    }\n  end\n\n  # We redefine this method on String, as kernel.rb is in strict mode\n  # so that things like Boolean don't get boxed. For String though -\n  # we either need to box it to define properties on it, or run it in\n  # non-strict mode. This is a mess and we need to come back to it\n  # at a later time.\n  def singleton_class\n    `Opal.get_singleton_class(self)`\n  end\n\n  def split(pattern = undefined, limit = undefined)\n    %x{\n      if (self.length === 0) {\n        return [];\n      }\n\n      if (limit === undefined) {\n        limit = 0;\n      } else {\n        limit = #{::Opal.coerce_to!(limit, ::Integer, :to_int)};\n        if (limit === 1) {\n          return [self];\n        }\n      }\n\n      if (pattern === undefined || pattern === nil) {\n        pattern = #{$; || ' '};\n      }\n\n      var result = [],\n          string = self.toString(),\n          index = 0,\n          match,\n          i, ii;\n\n      if (pattern.$$is_regexp) {\n        pattern = $global_multiline_regexp(pattern);\n      } else {\n        pattern = $coerce_to(pattern, #{::String}, 'to_str').$to_s();\n        if (pattern === ' ') {\n          pattern = /\\s+/gm;\n          string = string.replace(/^\\s+/, '');\n        } else {\n          pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'gm');\n        }\n      }\n\n      result = string.split(pattern);\n\n      if (result.length === 1 && result[0] === string) {\n        return [self.$$cast(result[0])];\n      }\n\n      while ((i = result.indexOf(undefined)) !== -1) {\n        result.splice(i, 1);\n      }\n\n      function castResult() {\n        for (i = 0; i < result.length; i++) {\n          result[i] = self.$$cast(result[i]);\n        }\n      }\n\n      if (limit === 0) {\n        while (result[result.length - 1] === '') {\n          result.length -= 1;\n        }\n        castResult();\n        return result;\n      }\n\n      match = pattern.exec(string);\n\n      if (limit < 0) {\n        if (match !== null && match[0] === '' && pattern.source.indexOf('(?=') === -1) {\n          for (i = 0, ii = match.length; i < ii; i++) {\n            result.push('');\n          }\n        }\n        castResult();\n        return result;\n      }\n\n      if (match !== null && match[0] === '') {\n        result.splice(limit - 1, result.length - 1, result.slice(limit - 1).join(''));\n        castResult();\n        return result;\n      }\n\n      if (limit >= result.length) {\n        castResult();\n        return result;\n      }\n\n      i = 0;\n      while (match !== null) {\n        i++;\n        index = pattern.lastIndex;\n        if (i + 1 === limit) {\n          break;\n        }\n        match = pattern.exec(string);\n      }\n      result.splice(limit - 1, result.length - 1, string.slice(index));\n      castResult();\n      return result;\n    }\n  end\n\n  def squeeze(*sets)\n    %x{\n      if (sets.length === 0) {\n        return self.$$cast(self.replace(/(.)\\1+/g, '$1'));\n      }\n      var char_class = char_class_from_char_sets(sets);\n      if (char_class === null) {\n        return self;\n      }\n      return self.$$cast(self.replace(new RegExp('(' + char_class + ')\\\\1+', 'g'), '$1'));\n    }\n  end\n\n  def start_with?(*prefixes)\n    %x{\n      for (var i = 0, length = prefixes.length; i < length; i++) {\n        if (prefixes[i].$$is_regexp) {\n          var regexp = prefixes[i];\n          var match = regexp.exec(self);\n\n          if (match != null && match.index === 0) {\n            #{$~ = ::MatchData.new(`regexp`, `match`)};\n            return true;\n          } else {\n            #{$~ = nil}\n          }\n        } else {\n          var prefix = $coerce_to(prefixes[i], #{::String}, 'to_str').$to_s();\n\n          if (self.indexOf(prefix) === 0) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }\n  end\n\n  def strip\n    `self.replace(/^[\\s\\u0000]*|[\\s\\u0000]*$/g, '')`\n  end\n\n  def sub(pattern, replacement = undefined, &block)\n    %x{\n      if (!pattern.$$is_regexp) {\n        pattern = $coerce_to(pattern, #{::String}, 'to_str');\n        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'));\n      }\n\n      var result, match = pattern.exec(self);\n\n      if (match === null) {\n        #{$~ = nil}\n        result = self.toString();\n      } else {\n        #{::MatchData.new `pattern`, `match`}\n\n        if (replacement === undefined) {\n\n          if (block === nil) {\n            #{::Kernel.raise ::ArgumentError, 'wrong number of arguments (1 for 2)'}\n          }\n          result = self.slice(0, match.index) + block(match[0]) + self.slice(match.index + match[0].length);\n\n        } else if (replacement.$$is_hash) {\n\n          result = self.slice(0, match.index) + #{`replacement`[`match[0]`].to_s} + self.slice(match.index + match[0].length);\n\n        } else {\n\n          replacement = $coerce_to(replacement, #{::String}, 'to_str');\n\n          replacement = replacement.replace(/([\\\\]+)([0-9+&`'])/g, function (original, slashes, command) {\n            if (slashes.length % 2 === 0) {\n              return original;\n            }\n            switch (command) {\n            case \"+\":\n              for (var i = match.length - 1; i > 0; i--) {\n                if (match[i] !== undefined) {\n                  return slashes.slice(1) + match[i];\n                }\n              }\n              return '';\n            case \"&\": return slashes.slice(1) + match[0];\n            case \"`\": return slashes.slice(1) + self.slice(0, match.index);\n            case \"'\": return slashes.slice(1) + self.slice(match.index + match[0].length);\n            default:  return slashes.slice(1) + (match[command] || '');\n            }\n          }).replace(/\\\\\\\\/g, '\\\\');\n\n          result = self.slice(0, match.index) + replacement + self.slice(match.index + match[0].length);\n        }\n      }\n\n      return self.$$cast(result);\n    }\n  end\n\n  def sum(n = 16)\n    %x{\n      n = $coerce_to(n, #{::Integer}, 'to_int');\n\n      var result = 0,\n          length = self.length,\n          i = 0;\n\n      for (; i < length; i++) {\n        result += self.charCodeAt(i);\n      }\n\n      if (n <= 0) {\n        return result;\n      }\n\n      return result & (Math.pow(2, n) - 1);\n    }\n  end\n\n  def swapcase\n    %x{\n      var str = self.replace(/([a-z]+)|([A-Z]+)/g, function($0,$1,$2) {\n        return $1 ? $0.toUpperCase() : $0.toLowerCase();\n      });\n\n      if (self.constructor === String) {\n        return str;\n      }\n\n      return #{self.class.new `str`};\n    }\n  end\n\n  def to_f\n    %x{\n      if (self.charAt(0) === '_') {\n        return 0;\n      }\n\n      var result = parseFloat(self.replace(/_/g, ''));\n\n      if (isNaN(result) || result == Infinity || result == -Infinity) {\n        return 0;\n      }\n      else {\n        return result;\n      }\n    }\n  end\n\n  def to_i(base = 10)\n    %x{\n      var result,\n          string = self.toLowerCase(),\n          radix = $coerce_to(base, #{::Integer}, 'to_int');\n\n      if (radix === 1 || radix < 0 || radix > 36) {\n        #{::Kernel.raise ::ArgumentError, \"invalid radix #{`radix`}\"}\n      }\n\n      if (/^\\s*_/.test(string)) {\n        return 0;\n      }\n\n      string = string.replace(/^(\\s*[+-]?)(0[bodx]?)(.+)$/, function (original, head, flag, tail) {\n        switch (tail.charAt(0)) {\n        case '+':\n        case '-':\n          return original;\n        case '0':\n          if (tail.charAt(1) === 'x' && flag === '0x' && (radix === 0 || radix === 16)) {\n            return original;\n          }\n        }\n        switch (flag) {\n        case '0b':\n          if (radix === 0 || radix === 2) {\n            radix = 2;\n            return head + tail;\n          }\n          break;\n        case '0':\n        case '0o':\n          if (radix === 0 || radix === 8) {\n            radix = 8;\n            return head + tail;\n          }\n          break;\n        case '0d':\n          if (radix === 0 || radix === 10) {\n            radix = 10;\n            return head + tail;\n          }\n          break;\n        case '0x':\n          if (radix === 0 || radix === 16) {\n            radix = 16;\n            return head + tail;\n          }\n          break;\n        }\n        return original\n      });\n\n      result = parseInt(string.replace(/_(?!_)/g, ''), radix);\n      return isNaN(result) ? 0 : result;\n    }\n  end\n\n  def to_proc\n    method_name = '$' + `self.valueOf()`\n\n    ::Kernel.proc do |*args, &block|\n      %x{\n        if (args.length === 0) {\n          #{::Kernel.raise ::ArgumentError, 'no receiver given'}\n        }\n\n        var recv = args[0];\n\n        if (recv == null) recv = nil;\n\n        var body = recv[#{method_name}];\n\n        if (!body) {\n          return recv.$method_missing.apply(recv, args);\n        }\n\n        if (typeof block === 'function') {\n          body.$$p = block;\n        }\n\n        if (args.length === 1) {\n          return body.call(recv);\n        } else {\n          return body.apply(recv, args.slice(1));\n        }\n      }\n    end\n  end\n\n  def to_s\n    `self.toString()`\n  end\n\n  def tr(from, to)\n    %x{\n      from = $coerce_to(from, #{::String}, 'to_str').$to_s();\n      to = $coerce_to(to, #{::String}, 'to_str').$to_s();\n\n      if (from.length == 0 || from === to) {\n        return self;\n      }\n\n      var i, in_range, c, ch, start, end, length;\n      var subs = {};\n      var from_chars = from.split('');\n      var from_length = from_chars.length;\n      var to_chars = to.split('');\n      var to_length = to_chars.length;\n\n      var inverse = false;\n      var global_sub = null;\n      if (from_chars[0] === '^' && from_chars.length > 1) {\n        inverse = true;\n        from_chars.shift();\n        global_sub = to_chars[to_length - 1]\n        from_length -= 1;\n      }\n\n      var from_chars_expanded = [];\n      var last_from = null;\n      in_range = false;\n      for (i = 0; i < from_length; i++) {\n        ch = from_chars[i];\n        if (last_from == null) {\n          last_from = ch;\n          from_chars_expanded.push(ch);\n        }\n        else if (ch === '-') {\n          if (last_from === '-') {\n            from_chars_expanded.push('-');\n            from_chars_expanded.push('-');\n          }\n          else if (i == from_length - 1) {\n            from_chars_expanded.push('-');\n          }\n          else {\n            in_range = true;\n          }\n        }\n        else if (in_range) {\n          start = last_from.charCodeAt(0);\n          end = ch.charCodeAt(0);\n          if (start > end) {\n            #{::Kernel.raise ::ArgumentError, \"invalid range \\\"#{`String.fromCharCode(start)`}-#{`String.fromCharCode(end)`}\\\" in string transliteration\"}\n          }\n          for (c = start + 1; c < end; c++) {\n            from_chars_expanded.push(String.fromCharCode(c));\n          }\n          from_chars_expanded.push(ch);\n          in_range = null;\n          last_from = null;\n        }\n        else {\n          from_chars_expanded.push(ch);\n        }\n      }\n\n      from_chars = from_chars_expanded;\n      from_length = from_chars.length;\n\n      if (inverse) {\n        for (i = 0; i < from_length; i++) {\n          subs[from_chars[i]] = true;\n        }\n      }\n      else {\n        if (to_length > 0) {\n          var to_chars_expanded = [];\n          var last_to = null;\n          in_range = false;\n          for (i = 0; i < to_length; i++) {\n            ch = to_chars[i];\n            if (last_to == null) {\n              last_to = ch;\n              to_chars_expanded.push(ch);\n            }\n            else if (ch === '-') {\n              if (last_to === '-') {\n                to_chars_expanded.push('-');\n                to_chars_expanded.push('-');\n              }\n              else if (i == to_length - 1) {\n                to_chars_expanded.push('-');\n              }\n              else {\n                in_range = true;\n              }\n            }\n            else if (in_range) {\n              start = last_to.charCodeAt(0);\n              end = ch.charCodeAt(0);\n              if (start > end) {\n                #{::Kernel.raise ::ArgumentError, \"invalid range \\\"#{`String.fromCharCode(start)`}-#{`String.fromCharCode(end)`}\\\" in string transliteration\"}\n              }\n              for (c = start + 1; c < end; c++) {\n                to_chars_expanded.push(String.fromCharCode(c));\n              }\n              to_chars_expanded.push(ch);\n              in_range = null;\n              last_to = null;\n            }\n            else {\n              to_chars_expanded.push(ch);\n            }\n          }\n\n          to_chars = to_chars_expanded;\n          to_length = to_chars.length;\n        }\n\n        var length_diff = from_length - to_length;\n        if (length_diff > 0) {\n          var pad_char = (to_length > 0 ? to_chars[to_length - 1] : '');\n          for (i = 0; i < length_diff; i++) {\n            to_chars.push(pad_char);\n          }\n        }\n\n        for (i = 0; i < from_length; i++) {\n          subs[from_chars[i]] = to_chars[i];\n        }\n      }\n\n      var new_str = ''\n      for (i = 0, length = self.length; i < length; i++) {\n        ch = self.charAt(i);\n        var sub = subs[ch];\n        if (inverse) {\n          new_str += (sub == null ? global_sub : ch);\n        }\n        else {\n          new_str += (sub != null ? sub : ch);\n        }\n      }\n      return self.$$cast(new_str);\n    }\n  end\n\n  def tr_s(from, to)\n    %x{\n      from = $coerce_to(from, #{::String}, 'to_str').$to_s();\n      to = $coerce_to(to, #{::String}, 'to_str').$to_s();\n\n      if (from.length == 0) {\n        return self;\n      }\n\n      var i, in_range, c, ch, start, end, length;\n      var subs = {};\n      var from_chars = from.split('');\n      var from_length = from_chars.length;\n      var to_chars = to.split('');\n      var to_length = to_chars.length;\n\n      var inverse = false;\n      var global_sub = null;\n      if (from_chars[0] === '^' && from_chars.length > 1) {\n        inverse = true;\n        from_chars.shift();\n        global_sub = to_chars[to_length - 1]\n        from_length -= 1;\n      }\n\n      var from_chars_expanded = [];\n      var last_from = null;\n      in_range = false;\n      for (i = 0; i < from_length; i++) {\n        ch = from_chars[i];\n        if (last_from == null) {\n          last_from = ch;\n          from_chars_expanded.push(ch);\n        }\n        else if (ch === '-') {\n          if (last_from === '-') {\n            from_chars_expanded.push('-');\n            from_chars_expanded.push('-');\n          }\n          else if (i == from_length - 1) {\n            from_chars_expanded.push('-');\n          }\n          else {\n            in_range = true;\n          }\n        }\n        else if (in_range) {\n          start = last_from.charCodeAt(0);\n          end = ch.charCodeAt(0);\n          if (start > end) {\n            #{::Kernel.raise ::ArgumentError, \"invalid range \\\"#{`String.fromCharCode(start)`}-#{`String.fromCharCode(end)`}\\\" in string transliteration\"}\n          }\n          for (c = start + 1; c < end; c++) {\n            from_chars_expanded.push(String.fromCharCode(c));\n          }\n          from_chars_expanded.push(ch);\n          in_range = null;\n          last_from = null;\n        }\n        else {\n          from_chars_expanded.push(ch);\n        }\n      }\n\n      from_chars = from_chars_expanded;\n      from_length = from_chars.length;\n\n      if (inverse) {\n        for (i = 0; i < from_length; i++) {\n          subs[from_chars[i]] = true;\n        }\n      }\n      else {\n        if (to_length > 0) {\n          var to_chars_expanded = [];\n          var last_to = null;\n          in_range = false;\n          for (i = 0; i < to_length; i++) {\n            ch = to_chars[i];\n            if (last_from == null) {\n              last_from = ch;\n              to_chars_expanded.push(ch);\n            }\n            else if (ch === '-') {\n              if (last_to === '-') {\n                to_chars_expanded.push('-');\n                to_chars_expanded.push('-');\n              }\n              else if (i == to_length - 1) {\n                to_chars_expanded.push('-');\n              }\n              else {\n                in_range = true;\n              }\n            }\n            else if (in_range) {\n              start = last_from.charCodeAt(0);\n              end = ch.charCodeAt(0);\n              if (start > end) {\n                #{::Kernel.raise ::ArgumentError, \"invalid range \\\"#{`String.fromCharCode(start)`}-#{`String.fromCharCode(end)`}\\\" in string transliteration\"}\n              }\n              for (c = start + 1; c < end; c++) {\n                to_chars_expanded.push(String.fromCharCode(c));\n              }\n              to_chars_expanded.push(ch);\n              in_range = null;\n              last_from = null;\n            }\n            else {\n              to_chars_expanded.push(ch);\n            }\n          }\n\n          to_chars = to_chars_expanded;\n          to_length = to_chars.length;\n        }\n\n        var length_diff = from_length - to_length;\n        if (length_diff > 0) {\n          var pad_char = (to_length > 0 ? to_chars[to_length - 1] : '');\n          for (i = 0; i < length_diff; i++) {\n            to_chars.push(pad_char);\n          }\n        }\n\n        for (i = 0; i < from_length; i++) {\n          subs[from_chars[i]] = to_chars[i];\n        }\n      }\n      var new_str = ''\n      var last_substitute = null\n      for (i = 0, length = self.length; i < length; i++) {\n        ch = self.charAt(i);\n        var sub = subs[ch]\n        if (inverse) {\n          if (sub == null) {\n            if (last_substitute == null) {\n              new_str += global_sub;\n              last_substitute = true;\n            }\n          }\n          else {\n            new_str += ch;\n            last_substitute = null;\n          }\n        }\n        else {\n          if (sub != null) {\n            if (last_substitute == null || last_substitute !== sub) {\n              new_str += sub;\n              last_substitute = sub;\n            }\n          }\n          else {\n            new_str += ch;\n            last_substitute = null;\n          }\n        }\n      }\n      return self.$$cast(new_str);\n    }\n  end\n\n  def upcase\n    `self.$$cast(self.toUpperCase())`\n  end\n\n  def upto(stop, excl = false, &block)\n    return enum_for :upto, stop, excl unless block_given?\n    %x{\n      var a, b, s = self.toString();\n\n      stop = $coerce_to(stop, #{::String}, 'to_str');\n\n      if (s.length === 1 && stop.length === 1) {\n\n        a = s.charCodeAt(0);\n        b = stop.charCodeAt(0);\n\n        while (a <= b) {\n          if (excl && a === b) {\n            break;\n          }\n\n          block(String.fromCharCode(a));\n\n          a += 1;\n        }\n\n      } else if (parseInt(s, 10).toString() === s && parseInt(stop, 10).toString() === stop) {\n\n        a = parseInt(s, 10);\n        b = parseInt(stop, 10);\n\n        while (a <= b) {\n          if (excl && a === b) {\n            break;\n          }\n\n          block(a.toString());\n\n          a += 1;\n        }\n\n      } else {\n\n        while (s.length <= stop.length && s <= stop) {\n          if (excl && s === stop) {\n            break;\n          }\n\n          block(s);\n\n          s = #{`s`.succ};\n        }\n\n      }\n      return self;\n    }\n  end\n\n  %x{\n    function char_class_from_char_sets(sets) {\n      function explode_sequences_in_character_set(set) {\n        var result = '',\n            i, len = set.length,\n            curr_char,\n            skip_next_dash,\n            char_code_from,\n            char_code_upto,\n            char_code;\n        for (i = 0; i < len; i++) {\n          curr_char = set.charAt(i);\n          if (curr_char === '-' && i > 0 && i < (len - 1) && !skip_next_dash) {\n            char_code_from = set.charCodeAt(i - 1);\n            char_code_upto = set.charCodeAt(i + 1);\n            if (char_code_from > char_code_upto) {\n              #{::Kernel.raise ::ArgumentError, \"invalid range \\\"#{`char_code_from`}-#{`char_code_upto`}\\\" in string transliteration\"}\n            }\n            for (char_code = char_code_from + 1; char_code < char_code_upto + 1; char_code++) {\n              result += String.fromCharCode(char_code);\n            }\n            skip_next_dash = true;\n            i++;\n          } else {\n            skip_next_dash = (curr_char === '\\\\');\n            result += curr_char;\n          }\n        }\n        return result;\n      }\n\n      function intersection(setA, setB) {\n        if (setA.length === 0) {\n          return setB;\n        }\n        var result = '',\n            i, len = setA.length,\n            chr;\n        for (i = 0; i < len; i++) {\n          chr = setA.charAt(i);\n          if (setB.indexOf(chr) !== -1) {\n            result += chr;\n          }\n        }\n        return result;\n      }\n\n      var i, len, set, neg, chr, tmp,\n          pos_intersection = '',\n          neg_intersection = '';\n\n      for (i = 0, len = sets.length; i < len; i++) {\n        set = $coerce_to(sets[i], #{::String}, 'to_str');\n        neg = (set.charAt(0) === '^' && set.length > 1);\n        set = explode_sequences_in_character_set(neg ? set.slice(1) : set);\n        if (neg) {\n          neg_intersection = intersection(neg_intersection, set);\n        } else {\n          pos_intersection = intersection(pos_intersection, set);\n        }\n      }\n\n      if (pos_intersection.length > 0 && neg_intersection.length > 0) {\n        tmp = '';\n        for (i = 0, len = pos_intersection.length; i < len; i++) {\n          chr = pos_intersection.charAt(i);\n          if (neg_intersection.indexOf(chr) === -1) {\n            tmp += chr;\n          }\n        }\n        pos_intersection = tmp;\n        neg_intersection = '';\n      }\n\n      if (pos_intersection.length > 0) {\n        return '[' + #{::Regexp.escape(`pos_intersection`)} + ']';\n      }\n\n      if (neg_intersection.length > 0) {\n        return '[^' + #{::Regexp.escape(`neg_intersection`)} + ']';\n      }\n\n      return null;\n    }\n  }\n\n  def instance_variables\n    []\n  end\n\n  def self._load(*args)\n    new(*args)\n  end\n\n  def unicode_normalize(form = :nfc)\n    ::Kernel.raise ::ArgumentError, \"Invalid normalization form #{form}\" unless %i[nfc nfd nfkc nfkd].include?(form)\n    `self.normalize(#{form.upcase})`\n  end\n\n  def unicode_normalized?(form = :nfc)\n    unicode_normalize(form) == self\n  end\n\n  def unpack(format)\n    ::Kernel.raise \"To use String#unpack, you must first require 'corelib/string/unpack'.\"\n  end\n\n  def unpack1(format)\n    ::Kernel.raise \"To use String#unpack1, you must first require 'corelib/string/unpack'.\"\n  end\n\n  def freeze\n    %x{\n      if (typeof self === 'string') return self;\n      self.$$frozen = true;\n      return self;\n    }\n  end\n\n  def -@\n    %x{\n      if (typeof self === 'string') return self;\n      if (self.$$frozen === true) return self;\n      if (self.encoding.name == 'UTF-8' && self.internal_encoding.name == 'UTF-8') return self.toString();\n      return self.$dup().$freeze();\n    }\n  end\n\n  def frozen?\n    `typeof self === 'string' || self.$$frozen === true`\n  end\n\n  alias +@ dup\n  alias === ==\n  alias byteslice []\n  alias eql? ==\n  alias equal? ===\n  alias object_id __id__\n  alias slice []\n  alias succ next\n  alias to_str to_s\n  alias to_sym intern\n\n  ::Opal.pristine self, :initialize\nend\n\nSymbol = String\n"],"names":["<top (required)>","self","require","<class:String>","include","Comparable","__id__","try_convert","what","Opal","coerce_to?","String","new","initialize","args","%","data","Array","format","*","count","Integer","Kernel","raise","ArgumentError","RangeError","+","other","<=>","respond_to?","to_str","to_s","==","=~","TypeError","[]","index","length","$~","MatchData","b","force_encoding","capitalize","casecmp","casecmp?","center","width","padstr","empty?","ljust","/","2","ceil","rjust","floor","chomp","separator","$/","coerce_to!","chop","chr","clone","copy","copy_singleton_methods","initialize_clone","dup","initialize_dup","delete","delete_prefix","prefix","delete_suffix","suffix","downcase","each_line","block_given?","enum_for","end_with?","gsub","pattern","replacement","hash","hex","to_i","16","include?","search","offset","inspect","intern","lines","e","block","to_proc","to_a","lstrip","ascii_only?","match","pos","Regexp","class","match?","next","oct","ord","partition","sep","reverse","rindex","rpartition","rstrip","scan","$kwargs","no_matchdata","captures","singleton_class","split","limit","$ret_or_1","$;","squeeze","start_with?","strip","sub","sum","n","swapcase","to_f","base","10","method_name","proc","block in to_proc","block (2 levels) in to_proc","tr","from","to","tr_s","upcase","upto","stop","excl","succ","escape","instance_variables","_load","unicode_normalize","form","unicode_normalized?","unpack","unpack1","freeze","-@","frozen?","pristine"],"mappings":"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H,aAAS0H;;AAErCA;AACAA;AACAA;;AAEAA;AACAA;AACAA;AACAA;AACAA;AACAA;;AAEAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;;AAEAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA,YAAc/G,OAAQC,OAAAA,CAAOC,oBAAf,EAAiC6G,kBAAD,GAAA,CAAoBA,0BAApB,CAAA,GAAgDA,GAAhD,GAAA,CAAoDA,wBAApD,CAAA,GAA8EA,8BAAtG9G;AACtB8G;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;;AAEAA;AACAA;;AAEAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA,gBAAkB/G,OAAQC,OAAAA,CAAOC,oBAAf,EAAiC6G,kBAAD,GAAA,CAAoBA,0BAApB,CAAA,GAAgDA,GAAhD,GAAA,CAAoDA,wBAApD,CAAA,GAA8EA,8BAAtG9G;AAC1B8G;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;;AAEAA;AACAA;AACAA;;AAEAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;;AAEAA;AACAA;AACAA;AACAA;;AAEAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;IA9IEA,CAAAA,GAAAA;;AAiJAG,IAAAA,oBAAAA,gBAASF,IAAD,EAAOC,EAAfC;AAAAA,MAAAA;;;AAEFA,8BAAgC7H,aAAS6H;AACzCA,0BAA4B7H,aAAS6H;;AAErCA;AACAA;AACAA;;AAEAA;AACAA;AACAA;AACAA;AACAA;AACAA;;AAEAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;;AAEAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA,YAAclH,OAAQC,OAAAA,CAAOC,oBAAf,EAAiCgH,kBAAD,GAAA,CAAoBA,0BAApB,CAAA,GAAgDA,GAAhD,GAAA,CAAoDA,wBAApD,CAAA,GAA8EA,8BAAtGjH;AACtBiH;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;;AAEAA;AACAA;;AAEAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA,gBAAkBlH,OAAQC,OAAAA,CAAOC,oBAAf,EAAiCgH,kBAAD,GAAA,CAAoBA,0BAApB,CAAA,GAAgDA,GAAhD,GAAA,CAAoDA,wBAApD,CAAA,GAA8EA,8BAAtGjH;AAC1BiH;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;;AAEAA;AACAA;AACAA;;AAEAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;;AAEAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;IAhKEA,CAAAA,GAAAA;;AAmKAC,IAAAA,sBAAAA,kBAAAA;AAAAA,MAAAA;;MACEA,OAACA,+BAADA;IADFA,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"}},{"offset":{"line":9341,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/enumerable.rb"],"sourcesContent":["# helpers: truthy, coerce_to, yield1, yieldX\n\nmodule ::Enumerable\n  %x{\n    function comparableForPattern(value) {\n      if (value.length === 0) {\n        value = [nil];\n      }\n\n      if (value.length > 1) {\n        value = [value];\n      }\n\n      return value;\n    }\n  }\n\n  def all?(pattern = undefined, &block)\n    if `pattern !== undefined`\n      each do |*value|\n        comparable = `comparableForPattern(value)`\n\n        return false unless pattern.public_send(:===, *comparable)\n      end\n    elsif block_given?\n      each do |*value|\n        unless yield(*value)\n          return false\n        end\n      end\n    else\n      each do |*value|\n        unless ::Opal.destructure(value)\n          return false\n        end\n      end\n    end\n\n    true\n  end\n\n  def any?(pattern = undefined, &block)\n    if `pattern !== undefined`\n      each do |*value|\n        comparable = `comparableForPattern(value)`\n\n        return true if pattern.public_send(:===, *comparable)\n      end\n    elsif block_given?\n      each do |*value|\n        if yield(*value)\n          return true\n        end\n      end\n    else\n      each do |*value|\n        if ::Opal.destructure(value)\n          return true\n        end\n      end\n    end\n\n    false\n  end\n\n  def chunk(&block)\n    return to_enum(:chunk) { enumerator_size } unless block_given?\n\n    ::Enumerator.new do |yielder|\n      %x{\n        var previous = nil, accumulate = [];\n\n        function releaseAccumulate() {\n          if (accumulate.length > 0) {\n            #{yielder.yield(`previous`, `accumulate`)}\n          }\n        }\n\n        self.$each.$$p = function(value) {\n          var key = $yield1(block, value);\n\n          if (key === nil) {\n            releaseAccumulate();\n            accumulate = [];\n            previous = nil;\n          } else {\n            if (previous === nil || previous === key) {\n              accumulate.push(value);\n            } else {\n              releaseAccumulate();\n              accumulate = [value];\n            }\n\n            previous = key;\n          }\n        }\n\n        self.$each();\n\n        releaseAccumulate();\n      }\n    end\n  end\n\n  def chunk_while(&block)\n    ::Kernel.raise ::ArgumentError, 'no block given' unless block_given?\n\n    slice_when { |before, after| !(yield before, after) }\n  end\n\n  def collect(&block)\n    return enum_for(:collect) { enumerator_size } unless block_given?\n\n    %x{\n      var result = [];\n\n      self.$each.$$p = function() {\n        var value = $yieldX(block, arguments);\n\n        result.push(value);\n      };\n\n      self.$each();\n\n      return result;\n    }\n  end\n\n  def collect_concat(&block)\n    return enum_for(:collect_concat) { enumerator_size } unless block_given?\n    map { |item| yield item }.flatten(1)\n  end\n\n  def compact\n    to_a.compact\n  end\n\n  def count(object = undefined, &block)\n    result = 0\n\n    %x{\n      if (object != null && block !== nil) {\n        #{warn('warning: given block not used')}\n      }\n    }\n\n    if `object != null`\n      block = ::Kernel.proc do |*args|\n        ::Opal.destructure(args) == object\n      end\n    elsif block.nil?\n      block = ::Kernel.proc { true }\n    end\n\n    each do |*args|\n      `result++` if `$yieldX(block, args)`\n    end\n\n    result\n  end\n\n  def cycle(n = nil, &block)\n    unless block_given?\n      return enum_for(:cycle, n) do\n        if n.nil?\n          respond_to?(:size) ? ::Float::INFINITY : nil\n        else\n          n = ::Opal.coerce_to!(n, ::Integer, :to_int)\n          n > 0 ? enumerator_size * n : 0\n        end\n      end\n    end\n\n    unless n.nil?\n      n = ::Opal.coerce_to! n, ::Integer, :to_int\n\n      return if `n <= 0`\n    end\n\n    %x{\n      var all = [], i, length, value;\n\n      self.$each.$$p = function() {\n        var param = #{::Opal.destructure(`arguments`)},\n            value = $yield1(block, param);\n\n        all.push(param);\n      }\n\n      self.$each();\n\n      if (all.length === 0) {\n        return nil;\n      }\n\n      if (n === nil) {\n        while (true) {\n          for (i = 0, length = all.length; i < length; i++) {\n            value = $yield1(block, all[i]);\n          }\n        }\n      }\n      else {\n        while (n > 1) {\n          for (i = 0, length = all.length; i < length; i++) {\n            value = $yield1(block, all[i]);\n          }\n\n          n--;\n        }\n      }\n    }\n  end\n\n  def detect(ifnone = undefined, &block)\n    return enum_for :detect, ifnone unless block_given?\n\n    each do |*args|\n      value = ::Opal.destructure(args)\n      if yield(value)\n        return value\n      end\n    end\n\n    %x{\n      if (ifnone !== undefined) {\n        if (typeof(ifnone) === 'function') {\n          return ifnone();\n        } else {\n          return ifnone;\n        }\n      }\n    }\n\n    nil\n  end\n\n  def drop(number)\n    number = `$coerce_to(number, #{::Integer}, 'to_int')`\n\n    if `number < 0`\n      ::Kernel.raise ::ArgumentError, 'attempt to drop negative size'\n    end\n\n    %x{\n      var result  = [],\n          current = 0;\n\n      self.$each.$$p = function() {\n        if (number <= current) {\n          result.push(#{::Opal.destructure(`arguments`)});\n        }\n\n        current++;\n      };\n\n      self.$each()\n\n      return result;\n    }\n  end\n\n  def drop_while(&block)\n    return enum_for :drop_while unless block_given?\n\n    %x{\n      var result   = [],\n          dropping = true;\n\n      self.$each.$$p = function() {\n        var param = #{::Opal.destructure(`arguments`)};\n\n        if (dropping) {\n          var value = $yield1(block, param);\n\n          if (!$truthy(value)) {\n            dropping = false;\n            result.push(param);\n          }\n        }\n        else {\n          result.push(param);\n        }\n      };\n\n      self.$each();\n\n      return result;\n    }\n  end\n\n  def each_cons(n, &block)\n    if `arguments.length != 1`\n      ::Kernel.raise ::ArgumentError, \"wrong number of arguments (#{`arguments.length`} for 1)\"\n    end\n\n    n = ::Opal.try_convert n, ::Integer, :to_int\n\n    if `n <= 0`\n      ::Kernel.raise ::ArgumentError, 'invalid size'\n    end\n\n    unless block_given?\n      return enum_for(:each_cons, n) do\n        enum_size = enumerator_size\n        if enum_size.nil?\n          nil\n        elsif enum_size == 0 || enum_size < n\n          0\n        else\n          enum_size - n + 1\n        end\n      end\n    end\n\n    %x{\n      var buffer = [];\n\n      self.$each.$$p = function() {\n        var element = #{::Opal.destructure(`arguments`)};\n        buffer.push(element);\n        if (buffer.length > n) {\n          buffer.shift();\n        }\n        if (buffer.length == n) {\n          $yield1(block, buffer.slice(0, n));\n        }\n      }\n\n      self.$each();\n\n      return self;\n    }\n  end\n\n  def each_entry(*data, &block)\n    unless block_given?\n      return to_enum(:each_entry, *data) { enumerator_size }\n    end\n\n    %x{\n      self.$each.$$p = function() {\n        var item = #{::Opal.destructure(`arguments`)};\n\n        $yield1(block, item);\n      }\n\n      self.$each.apply(self, data);\n\n      return self;\n    }\n  end\n\n  def each_slice(n, &block)\n    n = `$coerce_to(#{n}, #{::Integer}, 'to_int')`\n\n    if `n <= 0`\n      ::Kernel.raise ::ArgumentError, 'invalid slice size'\n    end\n\n    return enum_for(:each_slice, n) { respond_to?(:size) ? (size / n).ceil : nil } unless block_given?\n\n    %x{\n      var slice = []\n\n      self.$each.$$p = function() {\n        var param = #{::Opal.destructure(`arguments`)};\n\n        slice.push(param);\n\n        if (slice.length === n) {\n          $yield1(block, slice);\n          slice = [];\n        }\n      };\n\n      self.$each();\n\n      // our \"last\" group, if smaller than n then won't have been yielded\n      if (slice.length > 0) {\n        $yield1(block, slice);\n      }\n    }\n\n    self\n  end\n\n  def each_with_index(*args, &block)\n    return enum_for(:each_with_index, *args) { enumerator_size } unless block_given?\n\n    %x{\n      var index = 0;\n\n      self.$each.$$p = function() {\n        var param = #{::Opal.destructure(`arguments`)};\n\n        block(param, index);\n\n        index++;\n      };\n\n      self.$each.apply(self, args);\n    }\n\n    self\n  end\n\n  def each_with_object(object, &block)\n    return enum_for(:each_with_object, object) { enumerator_size } unless block_given?\n\n    %x{\n      self.$each.$$p = function() {\n        var param = #{::Opal.destructure(`arguments`)};\n\n        block(param, object);\n      };\n\n      self.$each();\n    }\n\n    object\n  end\n\n  def entries(*args)\n    %x{\n      var result = [];\n\n      self.$each.$$p = function() {\n        result.push(#{::Opal.destructure(`arguments`)});\n      };\n\n      self.$each.apply(self, args);\n\n      return result;\n    }\n  end\n\n  def filter_map(&block)\n    return enum_for(:filter_map) { enumerator_size } unless block_given?\n\n    map(&block).select(&:itself)\n  end\n\n  def find_all(&block)\n    return enum_for(:find_all) { enumerator_size } unless block_given?\n\n    %x{\n      var result = [];\n\n      self.$each.$$p = function() {\n        var param = #{::Opal.destructure(`arguments`)},\n            value = $yield1(block, param);\n\n        if ($truthy(value)) {\n          result.push(param);\n        }\n      };\n\n      self.$each();\n\n      return result;\n    }\n  end\n\n  def find_index(object = undefined, &block)\n    return enum_for :find_index if `object === undefined && block === nil`\n\n    %x{\n      if (object != null && block !== nil) {\n        #{warn('warning: given block not used')}\n      }\n    }\n\n    index = 0\n\n    if `object != null`\n      each do |*value|\n        if ::Opal.destructure(value) == object\n          return index\n        end\n\n        `index += 1`\n      end\n    else\n      each do |*value|\n        if yield(*value)\n          return index\n        end\n\n        `index += 1`\n      end\n    end\n\n    nil\n  end\n\n  def first(number = undefined)\n    if `number === undefined`\n      each do |value|\n        return value\n      end\n    else\n      result = []\n      number = `$coerce_to(number, #{::Integer}, 'to_int')`\n\n      if `number < 0`\n        ::Kernel.raise ::ArgumentError, 'attempt to take negative size'\n      end\n\n      if `number == 0`\n        return []\n      end\n\n      current = 0\n\n      each do |*args|\n        `result.push(#{::Opal.destructure(args)})`\n\n        if `number <= ++current`\n          return result\n        end\n      end\n\n      result\n    end\n  end\n\n  def grep(pattern, &block)\n    result = []\n\n    each do |*value|\n      cmp = `comparableForPattern(value)`\n      next unless pattern.__send__(:===, *cmp)\n      if block_given?\n        value = [value] if value.length > 1\n        value = yield(*value)\n      elsif value.length <= 1\n        value = value[0]\n      end\n\n      result.push(value)\n    end\n\n    result\n  end\n\n  def grep_v(pattern, &block)\n    result = []\n\n    each do |*value|\n      cmp = `comparableForPattern(value)`\n      next if pattern.__send__(:===, *cmp)\n      if block_given?\n        value = [value] if value.length > 1\n        value = yield(*value)\n      elsif value.length <= 1\n        value = value[0]\n      end\n\n      result.push(value)\n    end\n\n    result\n  end\n\n  def group_by(&block)\n    return enum_for(:group_by) { enumerator_size } unless block_given?\n\n    hash = {}\n\n    %x{\n      var result;\n\n      self.$each.$$p = function() {\n        var param = #{::Opal.destructure(`arguments`)},\n            value = $yield1(block, param);\n\n        #{(hash[`value`] ||= []) << `param`};\n      }\n\n      self.$each();\n\n      if (result !== undefined) {\n        return result;\n      }\n    }\n\n    hash\n  end\n\n  def include?(obj)\n    each do |*args|\n      if ::Opal.destructure(args) == obj\n        return true\n      end\n    end\n\n    false\n  end\n\n  def inject(object = undefined, sym = undefined, &block)\n    %x{\n      var result = object;\n\n      if (block !== nil && sym === undefined) {\n        self.$each.$$p = function() {\n          var value = #{::Opal.destructure(`arguments`)};\n\n          if (result === undefined) {\n            result = value;\n            return;\n          }\n\n          value = $yieldX(block, [result, value]);\n\n          result = value;\n        };\n      }\n      else {\n        if (sym === undefined) {\n          if (!#{::Symbol === object}) {\n            #{::Kernel.raise ::TypeError, \"#{object.inspect} is not a Symbol\"};\n          }\n\n          sym    = object;\n          result = undefined;\n        }\n\n        self.$each.$$p = function() {\n          var value = #{::Opal.destructure(`arguments`)};\n\n          if (result === undefined) {\n            result = value;\n            return;\n          }\n\n          result = #{`result`.__send__ sym, `value`};\n        };\n      }\n\n      self.$each();\n\n      return result == undefined ? nil : result;\n    }\n  end\n\n  def lazy\n    ::Enumerator::Lazy.new(self, enumerator_size) do |enum, *args|\n      enum.yield(*args)\n    end\n  end\n\n  def enumerator_size\n    respond_to?(:size) ? size : nil\n  end\n\n  def max(n = undefined, &block)\n    %x{\n      if (n === undefined || n === nil) {\n        var result, value;\n\n        self.$each.$$p = function() {\n          var item = #{::Opal.destructure(`arguments`)};\n\n          if (result === undefined) {\n            result = item;\n            return;\n          }\n\n          if (block !== nil) {\n            value = $yieldX(block, [item, result]);\n          } else {\n            value = #{`item` <=> `result`};\n          }\n\n          if (value === nil) {\n            #{::Kernel.raise ::ArgumentError, 'comparison failed'};\n          }\n\n          if (value > 0) {\n            result = item;\n          }\n        }\n\n        self.$each();\n\n        if (result === undefined) {\n          return nil;\n        } else {\n          return result;\n        }\n      }\n\n      n = $coerce_to(n, #{::Integer}, 'to_int');\n    }\n\n    sort(&block).reverse.first(n)\n  end\n\n  def max_by(n = nil, &block)\n    return enum_for(:max_by, n) { enumerator_size } unless block\n\n    unless n.nil?\n      return sort_by(&block).reverse.take n\n    end\n\n    %x{\n      var result,\n          by;\n\n      self.$each.$$p = function() {\n        var param = #{::Opal.destructure(`arguments`)},\n            value = $yield1(block, param);\n\n        if (result === undefined) {\n          result = param;\n          by     = value;\n          return;\n        }\n\n        if (#{`value` <=> `by`} > 0) {\n          result = param\n          by     = value;\n        }\n      };\n\n      self.$each();\n\n      return result === undefined ? nil : result;\n    }\n  end\n\n  def min(n = nil, &block)\n    unless n.nil?\n      if block_given?\n        return sort { |a, b| yield a, b }.take n\n      else\n        return sort.take n\n      end\n    end\n\n    %x{\n      var result;\n\n      if (block !== nil) {\n        self.$each.$$p = function() {\n          var param = #{::Opal.destructure(`arguments`)};\n\n          if (result === undefined) {\n            result = param;\n            return;\n          }\n\n          var value = block(param, result);\n\n          if (value === nil) {\n            #{::Kernel.raise ::ArgumentError, 'comparison failed'};\n          }\n\n          if (value < 0) {\n            result = param;\n          }\n        };\n      }\n      else {\n        self.$each.$$p = function() {\n          var param = #{::Opal.destructure(`arguments`)};\n\n          if (result === undefined) {\n            result = param;\n            return;\n          }\n\n          if (#{::Opal.compare(`param`, `result`)} < 0) {\n            result = param;\n          }\n        };\n      }\n\n      self.$each();\n\n      return result === undefined ? nil : result;\n    }\n  end\n\n  def min_by(n = nil, &block)\n    return enum_for(:min_by, n) { enumerator_size } unless block\n\n    unless n.nil?\n      return sort_by(&block).take n\n    end\n\n    %x{\n      var result,\n          by;\n\n      self.$each.$$p = function() {\n        var param = #{::Opal.destructure(`arguments`)},\n            value = $yield1(block, param);\n\n        if (result === undefined) {\n          result = param;\n          by     = value;\n          return;\n        }\n\n        if (#{`value` <=> `by`} < 0) {\n          result = param\n          by     = value;\n        }\n      };\n\n      self.$each();\n\n      return result === undefined ? nil : result;\n    }\n  end\n\n  def minmax(&block)\n    block ||= ::Kernel.proc { |a, b| a <=> b }\n\n    %x{\n      var min = nil, max = nil, first_time = true;\n\n      self.$each.$$p = function() {\n        var element = #{::Opal.destructure(`arguments`)};\n        if (first_time) {\n          min = max = element;\n          first_time = false;\n        } else {\n          var min_cmp = #{block.call(`min`, `element`)};\n\n          if (min_cmp === nil) {\n            #{::Kernel.raise ::ArgumentError, 'comparison failed'}\n          } else if (min_cmp > 0) {\n            min = element;\n          }\n\n          var max_cmp = #{block.call(`max`, `element`)};\n\n          if (max_cmp === nil) {\n            #{::Kernel.raise ::ArgumentError, 'comparison failed'}\n          } else if (max_cmp < 0) {\n            max = element;\n          }\n        }\n      }\n\n      self.$each();\n\n      return [min, max];\n    }\n  end\n\n  def minmax_by(&block)\n    return enum_for(:minmax_by) { enumerator_size } unless block\n\n    %x{\n      var min_result = nil,\n          max_result = nil,\n          min_by,\n          max_by;\n\n      self.$each.$$p = function() {\n        var param = #{::Opal.destructure(`arguments`)},\n            value = $yield1(block, param);\n\n        if ((min_by === undefined) || #{`value` <=> `min_by`} < 0) {\n          min_result = param;\n          min_by     = value;\n        }\n\n        if ((max_by === undefined) || #{`value` <=> `max_by`} > 0) {\n          max_result = param;\n          max_by     = value;\n        }\n      };\n\n      self.$each();\n\n      return [min_result, max_result];\n    }\n  end\n\n  def none?(pattern = undefined, &block)\n    if `pattern !== undefined`\n      each do |*value|\n        comparable = `comparableForPattern(value)`\n\n        return false if pattern.public_send(:===, *comparable)\n      end\n    elsif block_given?\n      each do |*value|\n        if yield(*value)\n          return false\n        end\n      end\n    else\n      each do |*value|\n        item = ::Opal.destructure(value)\n\n        return false if item\n      end\n    end\n\n    true\n  end\n\n  def one?(pattern = undefined, &block)\n    count = 0\n\n    if `pattern !== undefined`\n      each do |*value|\n        comparable = `comparableForPattern(value)`\n\n        if pattern.public_send(:===, *comparable)\n          count += 1\n          return false if count > 1\n        end\n      end\n    elsif block_given?\n      each do |*value|\n        next unless yield(*value)\n        count += 1\n\n        return false if count > 1\n      end\n    else\n      each do |*value|\n        next unless ::Opal.destructure(value)\n        count += 1\n\n        return false if count > 1\n      end\n    end\n\n    count == 1\n  end\n\n  def partition(&block)\n    return enum_for(:partition) { enumerator_size } unless block_given?\n\n    %x{\n      var truthy = [], falsy = [], result;\n\n      self.$each.$$p = function() {\n        var param = #{::Opal.destructure(`arguments`)},\n            value = $yield1(block, param);\n\n        if ($truthy(value)) {\n          truthy.push(param);\n        }\n        else {\n          falsy.push(param);\n        }\n      };\n\n      self.$each();\n\n      return [truthy, falsy];\n    }\n  end\n\n  def reject(&block)\n    return enum_for(:reject) { enumerator_size } unless block_given?\n\n    %x{\n      var result = [];\n\n      self.$each.$$p = function() {\n        var param = #{::Opal.destructure(`arguments`)},\n            value = $yield1(block, param);\n\n        if (!$truthy(value)) {\n          result.push(param);\n        }\n      };\n\n      self.$each();\n\n      return result;\n    }\n  end\n\n  def reverse_each(&block)\n    return enum_for(:reverse_each) { enumerator_size } unless block_given?\n\n    %x{\n      var result = [];\n\n      self.$each.$$p = function() {\n        result.push(arguments);\n      };\n\n      self.$each();\n\n      for (var i = result.length - 1; i >= 0; i--) {\n        $yieldX(block, result[i]);\n      }\n\n      return result;\n    }\n  end\n\n  def slice_before(pattern = undefined, &block)\n    if `pattern === undefined && block === nil`\n      ::Kernel.raise ::ArgumentError, 'both pattern and block are given'\n    end\n\n    if `pattern !== undefined && block !== nil || arguments.length > 1`\n      ::Kernel.raise ::ArgumentError, \"wrong number of arguments (#{`arguments.length`} expected 1)\"\n    end\n\n    ::Enumerator.new do |e|\n      %x{\n        var slice = [];\n\n        if (block !== nil) {\n          if (pattern === undefined) {\n            self.$each.$$p = function() {\n              var param = #{::Opal.destructure(`arguments`)},\n                  value = $yield1(block, param);\n\n              if ($truthy(value) && slice.length > 0) {\n                #{e << `slice`};\n                slice = [];\n              }\n\n              slice.push(param);\n            };\n          }\n          else {\n            self.$each.$$p = function() {\n              var param = #{::Opal.destructure(`arguments`)},\n                  value = block(param, #{pattern.dup});\n\n              if ($truthy(value) && slice.length > 0) {\n                #{e << `slice`};\n                slice = [];\n              }\n\n              slice.push(param);\n            };\n          }\n        }\n        else {\n          self.$each.$$p = function() {\n            var param = #{::Opal.destructure(`arguments`)},\n                value = #{pattern === `param`};\n\n            if ($truthy(value) && slice.length > 0) {\n              #{e << `slice`};\n              slice = [];\n            }\n\n            slice.push(param);\n          };\n        }\n\n        self.$each();\n\n        if (slice.length > 0) {\n          #{e << `slice`};\n        }\n      }\n    end\n  end\n\n  def slice_after(pattern = undefined, &block)\n    if `pattern === undefined && block === nil`\n      ::Kernel.raise ::ArgumentError, 'both pattern and block are given'\n    end\n\n    if `pattern !== undefined && block !== nil || arguments.length > 1`\n      ::Kernel.raise ::ArgumentError, \"wrong number of arguments (#{`arguments.length`} expected 1)\"\n    end\n\n    if `pattern !== undefined`\n      block = ::Kernel.proc { |e| pattern === e }\n    end\n\n    ::Enumerator.new do |yielder|\n      %x{\n        var accumulate;\n\n        self.$each.$$p = function() {\n          var element = #{::Opal.destructure(`arguments`)},\n              end_chunk = $yield1(block, element);\n\n          if (accumulate == null) {\n            accumulate = [];\n          }\n\n          if ($truthy(end_chunk)) {\n            accumulate.push(element);\n            #{yielder.yield(`accumulate`)};\n            accumulate = null;\n          } else {\n            accumulate.push(element)\n          }\n        }\n\n        self.$each();\n\n        if (accumulate != null) {\n          #{yielder.yield(`accumulate`)};\n        }\n      }\n    end\n  end\n\n  def slice_when(&block)\n    ::Kernel.raise ::ArgumentError, 'wrong number of arguments (0 for 1)' unless block_given?\n\n    ::Enumerator.new do |yielder|\n      %x{\n        var slice = nil, last_after = nil;\n\n        self.$each_cons.$$p = function() {\n          var params = #{::Opal.destructure(`arguments`)},\n              before = params[0],\n              after = params[1],\n              match = $yieldX(block, [before, after]);\n\n          last_after = after;\n\n          if (slice === nil) {\n            slice = [];\n          }\n\n          if ($truthy(match)) {\n            slice.push(before);\n            #{yielder.yield(`slice`)};\n            slice = [];\n          } else {\n            slice.push(before);\n          }\n        }\n\n        self.$each_cons(2);\n\n        if (slice !== nil) {\n          slice.push(last_after);\n          #{yielder.yield(`slice`)};\n        }\n      }\n    end\n  end\n\n  def sort(&block)\n    ary = to_a\n    block = ->(a, b) { a <=> b } unless block_given?\n    ary.sort(&block)\n  end\n\n  def sort_by(&block)\n    return enum_for(:sort_by) { enumerator_size } unless block_given?\n\n    dup = map do\n      arg = ::Opal.destructure(`arguments`)\n      [yield(arg), arg]\n    end\n    dup.sort! { |a, b| `a[0]` <=> `b[0]` }\n    dup.map! { |i| `i[1]` }\n  end\n\n  # This method implements the Kahan summation algorithm if it is possible to apply one.\n  def sum(initial = 0)\n    result = initial\n    compensation = 0\n\n    each do |*args|\n      item = if block_given?\n               yield(*args)\n             else\n               ::Opal.destructure(args)\n             end\n\n      if ![::Float::INFINITY, -::Float::INFINITY].include?(item) && item.respond_to?(:-)\n        y = item - compensation\n        t = result + y\n        compensation = (t - result) - y\n        result = t\n      else\n        result += item\n      end\n    end\n\n    result\n  end\n\n  def take(num)\n    first(num)\n  end\n\n  def take_while(&block)\n    return enum_for :take_while unless block\n\n    result = []\n\n    each do |*args|\n      value = ::Opal.destructure(args)\n\n      unless yield(value)\n        return result\n      end\n\n      `result.push(value)`\n    end\n  end\n\n  def uniq(&block)\n    hash = {}\n\n    each do |*args|\n      value = ::Opal.destructure(args)\n\n      produced = if block_given?\n                   yield(value)\n                 else\n                   value\n                 end\n\n      unless hash.key?(produced)\n        hash[produced] = value\n      end\n    end\n\n    hash.values\n  end\n\n  def tally(hash = undefined)\n    out = group_by(&:itself).transform_values(&:count)\n    if hash\n      out.each { |k, v| hash[k] = hash.fetch(k, 0) + v }\n      hash\n    else\n      out\n    end\n  end\n\n  def to_h(*args, &block)\n    return map(&block).to_h(*args) if block_given?\n\n    %x{\n      var hash = #{{}};\n\n      self.$each.$$p = function() {\n        var param = #{::Opal.destructure(`arguments`)};\n        var ary = #{::Opal.coerce_to?(`param`, ::Array, :to_ary)}, key, val;\n        if (!ary.$$is_array) {\n          #{::Kernel.raise ::TypeError, \"wrong element type #{`ary`.class} (expected array)\"}\n        }\n        if (ary.length !== 2) {\n          #{::Kernel.raise ::ArgumentError, \"wrong array length (expected 2, was #{`ary`.length})\"}\n        }\n        key = ary[0];\n        val = ary[1];\n\n        Opal.hash_put(hash, key, val);\n      };\n\n      self.$each.apply(self, args);\n\n      return hash;\n    }\n  end\n\n  def zip(*others, &block)\n    to_a.zip(*others)\n  end\n\n  alias find detect\n  alias filter find_all\n  alias flat_map collect_concat\n  alias map collect\n  alias member? include?\n  alias reduce inject\n  alias select find_all\n  alias to_a entries\nend\n"],"names":["<top (required)>","<module:Enumerable>","all?","pattern","each","self","block in all?","block (2 levels) in all?","comparable","public_send","block_given?","value","Opal","destructure","any?","block in any?","block (2 levels) in any?","chunk","to_enum","block in chunk","block (2 levels) in chunk","enumerator_size","new","Enumerator","yielder","yield","chunk_while","Kernel","raise","ArgumentError","slice_when","block in chunk_while","before","after","block (2 levels) in chunk_while","!","collect","enum_for","block in collect","block (2 levels) in collect","collect_concat","block in collect_concat","block (2 levels) in collect_concat","map","item","flatten","1","compact","to_a","count","object","result","0","warn","block","proc","block in count","block (2 levels) in count","args","==","nil?","cycle","n","block in cycle","block (2 levels) in cycle","respond_to?","Float::INFINITY","Float","coerce_to!","Integer",">","*","detect","ifnone","block in detect","block (2 levels) in detect","drop","number","drop_while","each_cons","try_convert","block in each_cons","block (2 levels) in each_cons","enum_size","<","+","-","each_entry","data","block in each_entry","block (2 levels) in each_entry","each_slice","block in each_slice","block (2 levels) in each_slice","/","size","ceil","each_with_index","block in each_with_index","block (2 levels) in each_with_index","each_with_object","block in each_with_object","block (2 levels) in each_with_object","entries","filter_map","block in filter_map","block (2 levels) in filter_map","select","to_proc","find_all","block in find_all","block (2 levels) in find_all","find_index","index","block in find_index","block (2 levels) in find_index","first","block in first","current","block (2 levels) in first","grep","block in grep","block (2 levels) in grep","cmp","__send__","length","<=","[]","push","grep_v","block in grep_v","block (2 levels) in grep_v","group_by","block in group_by","block (2 levels) in group_by","hash","$ret_or_1","$writer","[]=","<<","include?","obj","block in include?","block (2 levels) in include?","inject","sym","Symbol","===","TypeError","inspect","lazy","Enumerator::Lazy","block in lazy","enum$","block (2 levels) in lazy","max","<=>","sort","reverse","max_by","block in max_by","block (2 levels) in max_by","sort_by","take","min","block in min","a","b","compare","min_by","block in min_by","block (2 levels) in min_by","minmax","block in minmax","block (2 levels) in minmax","call","minmax_by","block in minmax_by","block (2 levels) in minmax_by","none?","block in none?","block (2 levels) in none?","one?","block in one?","block (2 levels) in one?","partition","block in partition","block (2 levels) in partition","reject","block in reject","block (2 levels) in reject","reverse_each","block in reverse_each","block (2 levels) in reverse_each","slice_before","block in slice_before","e","block (2 levels) in slice_before","dup","slice_after","block in slice_after","block (2 levels) in slice_after","block in slice_when","block (2 levels) in slice_when","ary","block in sort","block (2 levels) in sort","block in sort_by","block (2 levels) in sort_by","arg","sort!","map!","i","sum","initial","compensation","block in sum","block (2 levels) in sum","-@","y","t","num","take_while","block in take_while","block (2 levels) in take_while","uniq","block in uniq","block (2 levels) in uniq","produced","key?","values","tally","out","transform_values","block in tally","k","v","block (2 levels) in tally","fetch","to_h","coerce_to?","Array","class","zip","others"],"mappings":"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"}},{"offset":{"line":11194,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/enumerator/arithmetic_sequence.rb"],"sourcesContent":["class ::Enumerator\n  class self::ArithmeticSequence < self\n    `Opal.prop(self.$$prototype, '$$is_arithmetic_seq', true)`\n\n    `var inf = Infinity`\n\n    # @private\n    def initialize(range, step = undefined, creation_method = :step)\n      @creation_method = creation_method\n      if range.is_a? ::Array\n        @step_arg1, @step_arg2, @topfx, @bypfx = *range\n        @receiver_num = step\n        @step = 1\n\n        @range = if @step_arg2\n                   @step = @step_arg2\n                   (@receiver_num..@step_arg1)\n                 elsif @step_arg1\n                   (@receiver_num..@step_arg1)\n                 else\n                   (@receiver_num..nil)\n                 end\n      else\n        @skipped_arg = true unless step\n        @range, @step = range, step || 1\n      end\n\n      @object = self\n\n      ::Kernel.raise ArgumentError, \"step can't be 0\" if @step == 0\n      unless @step.respond_to? :to_int\n        ::Kernel.raise ArgumentError, \"no implicit conversion of #{@step.class} \" \\\n                                      'into Integer'\n      end\n    end\n\n    attr_reader :step\n\n    def begin\n      @range.begin\n    end\n\n    def end\n      @range.end\n    end\n\n    def exclude_end?\n      @range.exclude_end?\n    end\n\n    # @private\n    def _lesser_than_end?(val)\n      end_ = self.end || `inf`\n      if step > 0\n        exclude_end? ? val < end_ : val <= end_\n      else\n        exclude_end? ? val > end_ : val >= end_\n      end\n    end\n\n    # @private\n    def _greater_than_begin?(val)\n      begin_ = self.begin || -`inf`\n      if step > 0\n        val > begin_\n      else\n        val < begin_\n      end\n    end\n\n    def first(count = undefined)\n      iter = self.begin || -`inf`\n\n      return _lesser_than_end?(iter) ? iter : nil unless count\n\n      out = []\n\n      while _lesser_than_end?(iter) && count > 0\n        out << iter\n        iter += step\n        count -= 1\n      end\n\n      out\n    end\n\n    def each(&block)\n      return self unless block_given?\n\n      case self.begin\n      when nil\n        ::Kernel.raise TypeError, \"nil can't be coerced into Integer\"\n      end\n\n      iter = self.begin || -`inf`\n\n      while _lesser_than_end?(iter)\n        yield iter\n        iter += step\n      end\n      self\n    end\n\n    def last(count = undefined)\n      case self.end\n      when `inf`, -`inf`\n        ::Kernel.raise ::FloatDomainError, self.end\n      when nil\n        ::Kernel.raise ::RangeError, 'cannot get the last element of endless arithmetic sequence'\n      end\n\n      iter = self.end - ((self.end - self.begin) % step)\n      iter -= step unless _lesser_than_end?(iter)\n\n      return _greater_than_begin?(iter) ? iter : nil unless count\n\n      out = []\n\n      while _greater_than_begin?(iter) && count > 0\n        out << iter\n        iter -= step\n        count -= 1\n      end\n\n      out.reverse\n    end\n\n    def size\n      step_sign = step > 0 ? 1 : -1\n\n      if !_lesser_than_end?(self.begin)\n        0\n      elsif [-`inf`, `inf`].include?(step)\n        1\n      elsif [-`inf` * step_sign, nil].include?(self.begin) ||\n            [`inf` * step_sign, nil].include?(self.end)\n        `inf`\n      else\n        iter = self.end - ((self.end - self.begin) % step)\n        iter -= step unless _lesser_than_end?(iter)\n        ((iter - self.begin) / step).abs.to_i + 1\n      end\n    end\n\n    def ==(other)\n      self.class == other.class &&\n        self.begin == other.begin &&\n        self.end == other.end &&\n        step == other.step &&\n        exclude_end? == other.exclude_end?\n    end\n\n    def hash\n      [self.begin, self.end, step, exclude_end?].hash\n    end\n\n    def inspect\n      if @receiver_num\n        args = if @step_arg2\n                 \"(#{@topfx}#{@step_arg1.inspect}, #{@bypfx}#{@step_arg2.inspect})\"\n               elsif @step_arg1\n                 \"(#{@topfx}#{@step_arg1.inspect})\"\n               end\n\n        \"(#{@receiver_num.inspect}.#{@creation_method}#{args})\"\n      else\n        args = unless @skipped_arg\n                 \"(#{@step})\"\n               end\n        \"((#{@range.inspect}).#{@creation_method}#{args})\"\n      end\n    end\n\n    alias === ==\n    alias eql? ==\n  end\nend\n"],"names":["<top (required)>","<class:Enumerator>","<class:self::ArithmeticSequence>","initialize","range","step","creation_method","@creation_method","is_a?","Array","@step_arg1","@step_arg2","@topfx","@bypfx","@receiver_num","@step","1","@range","@skipped_arg","$ret_or_1","@object","self","0","Kernel","raise","ArgumentError","respond_to?","class","attr_reader","begin","end","exclude_end?","_lesser_than_end?","val","end_",">","<","<=",">=","_greater_than_begin?","begin_","-@","first","count","iter","out","<<","+","-","each","block_given?","TypeError","last","FloatDomainError","RangeError","%","reverse","size","step_sign","-1","include?","*","/","abs","to_i","==","other","$ret_or_2","$ret_or_3","$ret_or_4","hash","inspect","args"],"mappings":"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"}},{"offset":{"line":11421,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/enumerator/chain.rb"],"sourcesContent":["class ::Enumerator\n  class self::Chain < self\n    def initialize(*enums)\n      @enums = enums\n      @iterated = []\n      @object = self\n    end\n\n    def each(*args, &block)\n      return to_enum(:each, *args) { size } unless block_given?\n\n      @enums.each do |enum|\n        @iterated << enum\n        enum.each(*args, &block)\n      end\n\n      self\n    end\n\n    def size(*args)\n      accum = 0\n      @enums.each do |enum|\n        size = enum.size(*args)\n        return size if [nil, ::Float::INFINITY].include? size\n        accum += size\n      end\n      accum\n    end\n\n    def rewind\n      @iterated.reverse_each do |enum|\n        enum.rewind if enum.respond_to? :rewind\n      end\n      @iterated = []\n      self\n    end\n\n    def inspect\n      \"#<Enumerator::Chain: #{@enums.inspect}>\"\n    end\n  end\nend\n"],"names":["<top (required)>","<class:Enumerator>","<class:self::Chain>","initialize","@enums","enums","@iterated","@object","self","each","block_given?","to_enum","args","block in each","block (2 levels) in each","size","enum$","<<","block","to_proc","accum","0","block in size","block (2 levels) in size","Float::INFINITY","Float","include?","+","rewind","reverse_each","block in rewind","respond_to?","block (2 levels) in rewind","inspect"],"mappings":"AAAAA,2DAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;;IACEA,OAAAC;IAAAA;;MAAAA;;AAAAA;;;AACEC,MAAAA,0BAAAA,sBAFJ,EAEIA;AAAAA,QAAAA;;;;QAFJ;;QAEmB;QACbC,aAASC;QACTC,gBAAY;QACZH,OAAAI,CAAAA,cAAUC,IAAVD;MAHFJ,CAAAA,IAAAA;;AAMAM,MAAAA,oBAAAA,gBARJ,EAQIA;AAAAA,QAAAA;;QAAAA;;;;QARJ;;QAQa;QACP,KAA6CC,eAA7C;UAAA,OAAOC,MAAAH,IAAAG,WAAAA,EAAA,CAAQ,MAAR,CAAA,QAAe,MAACC,IAAD,CAAf,CAAAD,EAAAE,aAAAA,EAAAC;;YAAwBA,OAAAN,IAAAO,MAAAA,CAAAA,CAAxBF,CAAAA,GAAAA,qBAAAA,CAAAF;QAAP;QAEMF,MAANL,UAAMK,QAAAA,EAAAA,EAAAA,EAANI,aAAgBG,KAAhBH,EAAAC;AAAAA;;;;UAAgB;UACdR,aAAUW,OAAAA,CAAGD,KAAHC;UACVH,OAAIL,MAAJO,KAAIP,QAAAA,EAAM,MAACG,IAAD,CAANH,EAAcS,KAADC,SAAAA,CAAAA,CAAbV,EAFNI,CAAAA,GAAAA,qBAAAA,CAAMJ;QAKNA,OAAAD;MARFC,CAAAA,IAAAA;;AAWAM,MAAAA,oBAAAA,gBAnBJ,EAmBIA,GAAAA;;AAAAA,QAAAA;;;;QAnBJ;;QAmBa;QACPK,QAAQC;QACFZ,MAANL,UAAMK,QAAAA,EAAAA,EAAAA,EAANa,aAAgBN,KAAhBM,EAAAC;;;;UAAgB;UACdR,OAAWA,MAAJC,KAAID,QAAAA,EAAM,MAACH,IAAD,CAANG;UACX,IAAA,QAAe,CAAC,GAAD,EAAMS,IAAAC,YAAAD,aAAN,CAAwBE,aAAAA,CAAUX,IAAVW,CAAvC,CAAA;YAAA,SAAOX,IAAP;UAAA;UACAQ,OAAAH,CAAAA,QAAMO,SAANP,KAAMO,EAAGZ,IAAHY,CAANP,EAHFE,CAAAA,GAAMb;QAKNM,OAAAK;QAPFL,8EAAAA;MAAAA,CAAAA,IAAAA;;AAUAa,MAAAA,sBAAAA,kBAAAA;AAAAA,QAAAA;;;QACWC,MAATvB,aAASuB,gBAAAA,EAAAA,EAAAA,EAATC,aAA2Bd,KAA3Bc;;;UAA2B;UACzB,IAAA,QAAed,KAAIe,gBAAAA,CAAa,QAAbA,CAAnB,CAAA;YAAAC,OAAAhB,KAAIY,QAAAA,CAAAA;UAAJ;YA/BRI,OAAA;UA+BQ,EADFF,CAAAA,GAASD;QAGTvB,gBAAY;QACZsB,OAAApB;MALFoB,CAAAA,GAAAA;MAQA1B,OAAA+B,uBAAAA,mBAAAA;AAAAA,QAAAA;;QACEA,OAACA,uBAAD,GAAA,CAAwB7B,UAAM6B,SAAAA,CAAAA,CAA9B,CAAA,GAAuCA;MADzCA,CAAAA,GAAAA;IApCF/B,GAAMM,IAANN,EAAoBM,IAApBN;EADFD,GAAM,IAANA,EAAAA,IAAAA;AAAAD;"}},{"offset":{"line":11525,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/enumerator/generator.rb"],"sourcesContent":["# helpers: breaker\n\nclass Enumerator\n  class Generator\n    include ::Enumerable\n\n    def initialize(&block)\n      ::Kernel.raise ::LocalJumpError, 'no block given' unless block\n\n      @block = block\n    end\n\n    def each(*args, &block)\n      yielder = Yielder.new(&block)\n\n      %x{\n        try {\n          args.unshift(#{yielder});\n\n          Opal.yieldX(#{@block}, args);\n        }\n        catch (e) {\n          if (e === $breaker) {\n            return $breaker.$v;\n          }\n          else {\n            throw e;\n          }\n        }\n      }\n\n      self\n    end\n  end\nend\n"],"names":["<top (required)>","<class:Enumerator>","<class:Generator>","self","include","Enumerable","initialize","block","Kernel","raise","LocalJumpError","@block","each","yielder","new","Yielder","to_proc"],"mappings":"AAAAA,+DAAAA;EAAAA;;EAAAA;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;AAAAA;;MACEC,IAAAC,SAAAA,CAAQC,iBAARD;;AAEAE,MAAAA,0BAAAA,sBAAAA;AAAAA,QAAAA;;QAAAA;;;QACE,KAAA,QAAyDC,KAAzD,CAAA;UAAAC,OAAQC,OAAAA,CAAOC,qBAAf,EAAiCJ,gBAAzBG;QAAR;QAEAH,OAAAK,CAAAA,aAASJ,KAATI;MAHFL,CAAAA,GAAAA;MAMAJ,OAAAU,oBAAAA,gBAZJ,EAYIA;AAAAA,QAAAA;;QAAAA;;;;QAZJ;;QAYa;QACPC,UAAiBC,MAAPC,aAAOD,OAAAA,EAAAA,EAAAA,EAAMP,KAADS,SAAAA,CAAAA,CAALF;;AAGvBF;AACAA,uBAAyBC,OAAQD;;AAEjCA,sBAAwBD,UAAOC;AAC/BA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;QAEMA,OAAAT;MAnBFS,CAAAA,IAAAA;IATFV,GAAAA,WAAAA,EAAAA,IAAAA;EADFD,GAAAA,WAAAA,EAAAA,IAAAA;AAFAD;"}},{"offset":{"line":11586,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/enumerator/lazy.rb"],"sourcesContent":["# helpers: truthy, coerce_to, yield1, yieldX\n\nclass ::Enumerator\n  class self::Lazy < self\n    class self::StopLazyError < ::Exception; end\n\n    def self.for(object, *)\n      lazy = super\n      `lazy.enumerator = object`\n      lazy\n    end\n\n    def initialize(object, size = nil, &block)\n      unless block_given?\n        ::Kernel.raise ::ArgumentError, 'tried to call lazy new without a block'\n      end\n\n      @enumerator = object\n\n      super size do |yielder, *each_args|\n        object.each(*each_args) do |*args|\n          %x{\n            args.unshift(#{yielder});\n\n            $yieldX(block, args);\n          }\n        end\n      rescue StopLazyError\n        nil\n      end\n    end\n\n    def lazy\n      self\n    end\n\n    def collect(&block)\n      unless block\n        ::Kernel.raise ::ArgumentError, 'tried to call lazy map without a block'\n      end\n\n      Lazy.new(self, enumerator_size) do |enum, *args|\n        %x{\n          var value = $yieldX(block, args);\n\n          #{enum.yield `value`};\n        }\n      end\n    end\n\n    def collect_concat(&block)\n      unless block\n        ::Kernel.raise ::ArgumentError, 'tried to call lazy map without a block'\n      end\n\n      Lazy.new(self, nil) do |enum, *args|\n        %x{\n          var value = $yieldX(block, args);\n\n          if (#{`value`.respond_to? :force} && #{`value`.respond_to? :each}) {\n            #{`value`.each { |v| enum.yield v }}\n          }\n          else {\n            var array = #{::Opal.try_convert `value`, ::Array, :to_ary};\n\n            if (array === nil) {\n              #{enum.yield `value`};\n            }\n            else {\n              #{`value`.each { |v| enum.yield v }};\n            }\n          }\n        }\n      end\n    end\n\n    def drop(n)\n      n = `$coerce_to(#{n}, #{::Integer}, 'to_int')`\n\n      if n < 0\n        ::Kernel.raise ::ArgumentError, 'attempt to drop negative size'\n      end\n\n      current_size = enumerator_size\n      set_size     = if ::Integer === current_size\n                       n < current_size ? n : current_size\n                     else\n                       current_size\n                     end\n\n      dropped = 0\n      Lazy.new(self, set_size) do |enum, *args|\n        if dropped < n\n          dropped += 1\n        else\n          enum.yield(*args)\n        end\n      end\n    end\n\n    def drop_while(&block)\n      unless block\n        ::Kernel.raise ::ArgumentError, 'tried to call lazy drop_while without a block'\n      end\n\n      succeeding = true\n      Lazy.new(self, nil) do |enum, *args|\n        if succeeding\n          %x{\n            var value = $yieldX(block, args);\n\n            if (!$truthy(value)) {\n              succeeding = false;\n\n              #{enum.yield(*args)};\n            }\n          }\n        else\n          enum.yield(*args)\n        end\n      end\n    end\n\n    def enum_for(method = :each, *args, &block)\n      self.class.for(self, method, *args, &block)\n    end\n\n    def find_all(&block)\n      unless block\n        ::Kernel.raise ::ArgumentError, 'tried to call lazy select without a block'\n      end\n\n      Lazy.new(self, nil) do |enum, *args|\n        %x{\n          var value = $yieldX(block, args);\n\n          if ($truthy(value)) {\n            #{enum.yield(*args)};\n          }\n        }\n      end\n    end\n\n    def grep(pattern, &block)\n      if block\n        Lazy.new(self, nil) do |enum, *args|\n          %x{\n            var param = #{::Opal.destructure(args)},\n                value = #{pattern === `param`};\n\n            if ($truthy(value)) {\n              value = $yield1(block, param);\n\n              #{enum.yield `$yield1(block, param)`};\n            }\n          }\n        end\n      else\n        Lazy.new(self, nil) do |enum, *args|\n          %x{\n            var param = #{::Opal.destructure(args)},\n                value = #{pattern === `param`};\n\n            if ($truthy(value)) {\n              #{enum.yield `param`};\n            }\n          }\n        end\n      end\n    end\n\n    def reject(&block)\n      unless block\n        ::Kernel.raise ::ArgumentError, 'tried to call lazy reject without a block'\n      end\n\n      Lazy.new(self, nil) do |enum, *args|\n        %x{\n          var value = $yieldX(block, args);\n\n          if (!$truthy(value)) {\n            #{enum.yield(*args)};\n          }\n        }\n      end\n    end\n\n    def take(n)\n      n = `$coerce_to(#{n}, #{::Integer}, 'to_int')`\n\n      if n < 0\n        ::Kernel.raise ::ArgumentError, 'attempt to take negative size'\n      end\n\n      current_size = enumerator_size\n      set_size     = if ::Integer === current_size\n                       n < current_size ? n : current_size\n                     else\n                       current_size\n                     end\n\n      taken = 0\n      Lazy.new(self, set_size) do |enum, *args|\n        if taken < n\n          enum.yield(*args)\n          taken += 1\n        else\n          ::Kernel.raise StopLazyError\n        end\n      end\n    end\n\n    def take_while(&block)\n      unless block\n        ::Kernel.raise ::ArgumentError, 'tried to call lazy take_while without a block'\n      end\n\n      Lazy.new(self, nil) do |enum, *args|\n        %x{\n          var value = $yieldX(block, args);\n\n          if ($truthy(value)) {\n            #{enum.yield(*args)};\n          }\n          else {\n            #{::Kernel.raise StopLazyError};\n          }\n        }\n      end\n    end\n\n    def inspect\n      \"#<#{self.class}: #{@enumerator.inspect}>\"\n    end\n\n    alias force to_a\n    alias filter find_all\n    alias flat_map collect_concat\n    alias map collect\n    alias select find_all\n    alias to_enum enum_for\n  end\nend\n"],"names":["<top (required)>","<class:Enumerator>","<class:self::Lazy>","<class:self::StopLazyError>","self","Exception","for","object","lazy","initialize","size","block_given?","Kernel","raise","ArgumentError","@enumerator","block in initialize","yielder","block (2 levels) in initialize","each","each_args","block (3 levels) in initialize","StopLazyError","collect","block","new","Lazy","enumerator_size","block in collect","enum$","block (2 levels) in collect","yield","collect_concat","block in collect_concat","block (2 levels) in collect_concat","respond_to?","v","block (3 levels) in collect_concat","Opal","try_convert","Array","drop","n","Integer","<","0","current_size","set_size","dropped","block in drop","block (2 levels) in drop","+","1","args","drop_while","succeeding","block in drop_while","block (2 levels) in drop_while","enum_for","class","method","to_proc","find_all","block in find_all","block (2 levels) in find_all","grep","pattern","block in grep","block (2 levels) in grep","destructure","===","reject","block in reject","block (2 levels) in reject","take","taken","block in take","block (2 levels) in take","take_while","block in take_while","block (2 levels) in take_while","inspect"],"mappings":"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"}},{"offset":{"line":11988,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/enumerator/yielder.rb"],"sourcesContent":["# helpers: breaker\n\nclass Enumerator\n  class Yielder\n    def initialize(&block)\n      @block = block\n      # rubocop:disable Lint/Void\n      self\n      # rubocop:enable Lint/Void\n    end\n\n    def yield(*values)\n      %x{\n        var value = Opal.yieldX(#{@block}, values);\n\n        if (value === $breaker) {\n          throw $breaker;\n        }\n\n        return value;\n      }\n    end\n\n    def <<(value)\n      self.yield(value)\n\n      self\n    end\n\n    def to_proc\n      proc do |*values|\n        self.yield(*values)\n      end\n    end\n  end\nend\n"],"names":["<top (required)>","<class:Enumerator>","<class:Yielder>","initialize","@block","block","self","yield","<<","value","to_proc","proc","block in to_proc","block (2 levels) in to_proc","values"],"mappings":"AAAAA,6DAAAA;EAAAA;;EAAAA;EAEAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;AAAAA;;;AACEC,MAAAA,0BAAAA,sBAAAA;AAAAA,QAAAA;;QAAAA;;;QACEC,aAASC;QAETF,OAAAG;MAHFH,CAAAA,GAAAA;;AAOAI,MAAAA,qBAAAA,0BAXJ,EAWIA;AAAAA,QAAAA;;;;QAXJ;;QAWc;;AAEdA,gCAAkCH,UAAOG;;AAEzCA;AACAA;AACAA;;AAEAA;AACAA;MATIA,CAAAA,IAAAA;;AAYAC,MAAAA,kBAAAA,2BAAOC,KAAPD;AAAAA,QAAAA;;;QACEF,IAAIC,OAAAA,CAAOE,KAAPF;QAEJC,OAAAF;MAHFE,CAAAA,GAAAA;MAMAN,OAAAQ,uBAAAA,mBAAAA;AAAAA,QAAAA;;QACEA,OAAAC,MAAAL,IAAAK,QAAAA,EAAAA,EAAAA,EAAAC,aA9BN,EA8BMA,EAAAC;;;;UA9BN;;UA8Be;UACPA,OAAIN,MAAJD,IAAIC,SAAAA,EAAO,MAACO,MAAD,CAAPP,EADNK,CAAAA,GAAAA,sBAAAA,CAAAD;MADFD,CAAAA,GAAAA;IA1BFR,GAAAA,WAAAA,EAAAA,IAAAA;EADFD,GAAAA,WAAAA,EAAAA,IAAAA;AAFAD;"}},{"offset":{"line":12057,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/enumerator.rb"],"sourcesContent":["# helpers: slice, coerce_to\n\nrequire 'corelib/enumerable'\n\nclass ::Enumerator\n  include ::Enumerable\n\n  `self.$$prototype.$$is_enumerator = true`\n\n  def self.for(object, method = :each, *args, &block)\n    %x{\n      var obj = #{allocate};\n\n      obj.object = object;\n      obj.size   = block;\n      obj.method = method;\n      obj.args   = args;\n      obj.cursor = 0;\n\n      return obj;\n    }\n  end\n\n  def initialize(*, &block)\n    @cursor = 0\n    if block\n      @object = Generator.new(&block)\n      @method = :each\n      @args   = []\n      @size   = `arguments[0] || nil`\n\n      if @size && !@size.respond_to?(:call)\n        @size = `$coerce_to(#{@size}, #{::Integer}, 'to_int')`\n      end\n    else\n      @object = `arguments[0]`\n      @method = `arguments[1] || \"each\"`\n      @args   = `$slice.call(arguments, 2)`\n      @size   = nil\n    end\n  end\n\n  def each(*args, &block)\n    return self if block.nil? && args.empty?\n\n    args = @args + args\n\n    return self.class.new(@object, @method, *args) if block.nil?\n\n    @object.__send__(@method, *args, &block)\n  end\n\n  def size\n    @size.respond_to?(:call) ? @size.call(*@args) : @size\n  end\n\n  def with_index(offset = 0, &block)\n    offset = if offset\n               `$coerce_to(offset, #{::Integer}, 'to_int')`\n             else\n               0\n             end\n\n    return enum_for(:with_index, offset) { size } unless block\n\n    %x{\n      var result, index = offset;\n\n      self.$each.$$p = function() {\n        var param = #{::Opal.destructure(`arguments`)},\n            value = block(param, index);\n\n        index++;\n\n        return value;\n      }\n\n      return self.$each();\n    }\n  end\n\n  def each_with_index(&block)\n    return enum_for(:each_with_index) { size } unless block_given?\n\n    super\n    @object\n  end\n\n  def rewind\n    @cursor = 0\n\n    self\n  end\n\n  def peek_values\n    @values ||= map { |*i| i }\n    ::Kernel.raise ::StopIteration, 'iteration reached an end' if @cursor >= @values.length\n    @values[@cursor]\n  end\n\n  def peek\n    values = peek_values\n    values.length <= 1 ? values[0] : values\n  end\n\n  def next_values\n    out = peek_values\n    @cursor += 1\n    out\n  end\n\n  def next\n    values = next_values\n    values.length <= 1 ? values[0] : values\n  end\n\n  def feed(arg)\n    raise NotImplementedError, \"Opal doesn't support Enumerator#feed\"\n  end\n\n  def +(other)\n    ::Enumerator::Chain.new(self, other)\n  end\n\n  def inspect\n    result = \"#<#{self.class}: #{@object.inspect}:#{@method}\"\n\n    if @args.any?\n      result += \"(#{@args.inspect[::Range.new(1, -2)]})\"\n    end\n\n    result + '>'\n  end\n\n  alias with_object each_with_object\n\n  autoload :ArithmeticSequence, 'corelib/enumerator/arithmetic_sequence'\n  autoload :Chain, 'corelib/enumerator/chain'\n  autoload :Generator, 'corelib/enumerator/generator'\n  autoload :Lazy, 'corelib/enumerator/lazy'\n  autoload :Yielder, 'corelib/enumerator/yielder'\nend\n"],"names":["<top (required)>","self","require","<class:Enumerator>","include","Enumerable","for","object","allocate","initialize","@cursor","0","block","@object","new","Generator","to_proc","@method","@args","@size","respond_to?","Integer","each","nil?","args","empty?","+","class","__send__","size","call","with_index","offset","enum_for","block in with_index","block (2 levels) in with_index","Opal","destructure","each_with_index","block_given?","block in each_with_index","block (2 levels) in each_with_index","rewind","peek_values","@values","$ret_or_1","map","block in peek_values","block (2 levels) in peek_values","i",">=","length","Kernel","raise","StopIteration","[]","peek","values","<=","1","next_values","out","next","feed","arg","NotImplementedError","other","Enumerator::Chain","Enumerator","inspect","result","any?","Range","-2","autoload"],"mappings":"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"}},{"offset":{"line":12294,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/numeric.rb"],"sourcesContent":["require 'corelib/comparable'\n\nclass ::Numeric\n  include ::Comparable\n\n  def coerce(other)\n    if other.instance_of? self.class\n      return [other, self]\n    end\n\n    [::Kernel.Float(other), ::Kernel.Float(self)]\n  end\n\n  def __coerced__(method, other)\n    if other.respond_to?(:coerce)\n      a, b = other.coerce(self)\n      a.__send__ method, b\n    else\n      case method\n      when :+, :-, :*, :/, :%, :&, :|, :^, :**\n        ::Kernel.raise ::TypeError, \"#{other.class} can't be coerced into Numeric\"\n      when :>, :>=, :<, :<=, :<=>\n        ::Kernel.raise ::ArgumentError, \"comparison of #{self.class} with #{other.class} failed\"\n      end\n    end\n  end\n\n  def <=>(other)\n    if equal? other\n      return 0\n    end\n\n    nil\n  end\n\n  def +@\n    self\n  end\n\n  def -@\n    0 - self\n  end\n\n  def %(other)\n    self - other * div(other)\n  end\n\n  def abs\n    self < 0 ? -self : self\n  end\n\n  def abs2\n    self * self\n  end\n\n  def angle\n    self < 0 ? ::Math::PI : 0\n  end\n\n  def ceil(ndigits = 0)\n    to_f.ceil(ndigits)\n  end\n\n  def conj\n    self\n  end\n\n  def denominator\n    to_r.denominator\n  end\n\n  def div(other)\n    ::Kernel.raise ::ZeroDivisionError, 'divided by o' if other == 0\n\n    (self / other).floor\n  end\n\n  def divmod(other)\n    [div(other), self % other]\n  end\n\n  def fdiv(other)\n    to_f / other\n  end\n\n  def floor(ndigits = 0)\n    to_f.floor(ndigits)\n  end\n\n  def i\n    ::Kernel.Complex(0, self)\n  end\n\n  def imag\n    0\n  end\n\n  def integer?\n    false\n  end\n\n  def nonzero?\n    zero? ? nil : self\n  end\n\n  def numerator\n    to_r.numerator\n  end\n\n  def polar\n    [abs, arg]\n  end\n\n  def quo(other)\n    ::Opal.coerce_to!(self, ::Rational, :to_r) / other\n  end\n\n  def real\n    self\n  end\n\n  def real?\n    true\n  end\n\n  def rect\n    [self, 0]\n  end\n\n  def round(digits = undefined)\n    to_f.round(digits)\n  end\n\n  def step(limit = undefined, step = undefined, to: undefined, by: undefined, &block)\n    %x{\n      if (limit !== undefined && to !== undefined) {\n        #{::Kernel.raise ::ArgumentError, 'to is given twice'}\n      }\n\n      if (step !== undefined && by !== undefined) {\n        #{::Kernel.raise ::ArgumentError, 'step is given twice'}\n      }\n\n      if (to !== undefined) {\n        limit = to;\n      }\n\n      if (by !== undefined) {\n        step = by;\n      }\n\n      if (limit === undefined) {\n        limit = nil;\n      }\n\n      function validateParameters() {\n        if (step === nil) {\n          #{::Kernel.raise ::TypeError, 'step must be numeric'}\n        }\n\n        if (step != null && #{step == 0}) {\n          #{::Kernel.raise ::ArgumentError, \"step can't be 0\"}\n        }\n\n        if (step === nil || step == null) {\n          step = 1;\n        }\n\n        var sign = #{step <=> 0};\n\n        if (sign === nil) {\n          #{::Kernel.raise ::ArgumentError, \"0 can't be coerced into #{step.class}\"}\n        }\n\n        if (limit === nil || limit == null) {\n          limit = sign > 0 ? #{::Float::INFINITY} : #{-::Float::INFINITY};\n        }\n\n        #{::Opal.compare(self, limit)}\n      }\n\n      function stepFloatSize() {\n        if ((step > 0 && self > limit) || (step < 0 && self < limit)) {\n          return 0;\n        } else if (step === Infinity || step === -Infinity) {\n          return 1;\n        } else {\n          var abs = Math.abs, floor = Math.floor,\n              err = (abs(self) + abs(limit) + abs(limit - self)) / abs(step) * #{::Float::EPSILON};\n\n          if (err === Infinity || err === -Infinity) {\n            return 0;\n          } else {\n            if (err > 0.5) {\n              err = 0.5;\n            }\n\n            return floor((limit - self) / step + err) + 1\n          }\n        }\n      }\n\n      function stepSize() {\n        validateParameters();\n\n        if (step === 0) {\n          return Infinity;\n        }\n\n        if (step % 1 !== 0) {\n          return stepFloatSize();\n        } else if ((step > 0 && self > limit) || (step < 0 && self < limit)) {\n          return 0;\n        } else {\n          var ceil = Math.ceil, abs = Math.abs,\n              lhs = abs(self - limit) + 1,\n              rhs = abs(step);\n\n          return ceil(lhs / rhs);\n        }\n      }\n\n    }\n\n    unless block_given?\n      if (!limit || limit.is_a?(::Numeric)) &&\n         (!step || step.is_a?(::Numeric))\n\n        return ::Enumerator::ArithmeticSequence.new(\n          [limit, step, ('to: ' if to), ('by: ' if by)], self\n        )\n      else\n        return enum_for(:step, limit, step, &`stepSize`)\n      end\n    end\n\n    %x{\n      validateParameters();\n\n      var isDesc = #{step.negative?},\n          isInf = #{step == 0} ||\n                  (limit === Infinity && !isDesc) ||\n                  (limit === -Infinity && isDesc);\n\n      if (self.$$is_number && step.$$is_number && limit.$$is_number) {\n        if (self % 1 === 0 && (isInf || limit % 1 === 0) && step % 1 === 0) {\n          var value = self;\n\n          if (isInf) {\n            for (;; value += step) {\n              block(value);\n            }\n          } else if (isDesc) {\n            for (; value >= limit; value += step) {\n              block(value);\n            }\n          } else {\n            for (; value <= limit; value += step) {\n              block(value);\n            }\n          }\n\n          return self;\n        } else {\n          var begin = #{to_f}.valueOf();\n          step = #{step.to_f}.valueOf();\n          limit = #{limit.to_f}.valueOf();\n\n          var n = stepFloatSize();\n\n          if (!isFinite(step)) {\n            if (n !== 0) block(begin);\n          } else if (step === 0) {\n            while (true) {\n              block(begin);\n            }\n          } else {\n            for (var i = 0; i < n; i++) {\n              var d = i * step + self;\n              if (step >= 0 ? limit < d : limit > d) {\n                d = limit;\n              }\n              block(d);\n            }\n          }\n\n          return self;\n        }\n      }\n    }\n\n    counter = self\n\n    while `isDesc ? #{counter >= limit} : #{counter <= limit}`\n      yield counter\n      counter += step\n    end\n  end\n\n  def to_c\n    ::Kernel.Complex(self, 0)\n  end\n\n  def to_int\n    to_i\n  end\n\n  def truncate(ndigits = 0)\n    to_f.truncate(ndigits)\n  end\n\n  def zero?\n    self == 0\n  end\n\n  def positive?\n    self > 0\n  end\n\n  def negative?\n    self < 0\n  end\n\n  def dup\n    self\n  end\n\n  def clone(freeze: true)\n    self\n  end\n\n  def finite?\n    true\n  end\n\n  def infinite?\n    nil\n  end\n\n  alias arg angle\n  alias conjugate conj\n  alias imaginary imag\n  alias magnitude abs\n  alias modulo %\n  alias phase arg\n  alias rectangular rect\nend\n"],"names":["<top (required)>","self","require","<class:Numeric>","include","Comparable","coerce","other","instance_of?","class","Kernel","Float","__coerced__","method","respond_to?","a","b","__send__","$ret_or_1","raise","TypeError","ArgumentError","<=>","equal?","0","+@","-@","-","%","*","div","abs","<","abs2","angle","Math::PI","Math","ceil","ndigits","to_f","conj","denominator","to_r","ZeroDivisionError","/","floor","divmod","fdiv","i","Complex","imag","integer?","nonzero?","zero?","numerator","polar","arg","quo","Opal","coerce_to!","Rational","real","real?","rect","round","digits","step","==","Float::INFINITY","compare","limit","Float::EPSILON","block_given?","is_a?","Numeric","Enumerator::ArithmeticSequence","Enumerator","new","to","by","enum_for","to_proc","negative?","counter",">=","<=","+","to_c","to_int","to_i","truncate","positive?",">","dup","clone","$kwargs","finite?","infinite?"],"mappings":"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"}},{"offset":{"line":12770,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/array.rb"],"sourcesContent":["# helpers: truthy, falsy, hash_ids, yield1, hash_get, hash_put, hash_delete, coerce_to, respond_to\n\nrequire 'corelib/enumerable'\nrequire 'corelib/numeric'\n\nclass ::Array < `Array`\n  include ::Enumerable\n\n  # Mark all javascript arrays as being valid ruby arrays\n  `Opal.prop(self.$$prototype, '$$is_array', true)`\n\n  %x{\n    // Recent versions of V8 (> 7.1) only use an optimized implementation when Array.prototype is unmodified.\n    // For instance, \"array-splice.tq\" has a \"fast path\" (ExtractFastJSArray, defined in \"src/codegen/code-stub-assembler.cc\")\n    // but it's only enabled when \"IsPrototypeInitialArrayPrototype()\" is true.\n    //\n    // Older versions of V8 were using relatively fast JS-with-extensions code even when Array.prototype is modified:\n    // https://github.com/v8/v8/blob/7.0.1/src/js/array.js#L599-L642\n    //\n    // In short, Array operations are slow in recent versions of V8 when the Array.prototype has been tampered.\n    // So, when possible, we are using faster open-coded version to boost the performance.\n\n    // As of V8 8.4, depending on the size of the array, this is up to ~25x times faster than Array#shift()\n    // Implementation is heavily inspired by: https://github.com/nodejs/node/blob/ba684805b6c0eded76e5cd89ee00328ac7a59365/lib/internal/util.js#L341-L347\n    function shiftNoArg(list) {\n      var r = list[0];\n      var index = 1;\n      var length = list.length;\n      for (; index < length; index++) {\n        list[index - 1] = list[index];\n      }\n      list.pop();\n      return r;\n    }\n\n    function toArraySubclass(obj, klass) {\n      if (klass.$$name === Opal.Array) {\n        return obj;\n      } else {\n        return klass.$allocate().$replace(#{`obj`.to_a});\n      }\n    }\n\n    // A helper for keep_if and delete_if, filter is either Opal.truthy\n    // or Opal.falsy.\n    function filterIf(self, filter, block) {\n      var value, raised = null, updated = new Array(self.length);\n\n      for (var i = 0, i2 = 0, length = self.length; i < length; i++) {\n        if (!raised) {\n          try {\n            value = $yield1(block, self[i])\n          } catch(error) {\n            raised = error;\n          }\n        }\n\n        if (raised || filter(value)) {\n          updated[i2] = self[i]\n          i2 += 1;\n        }\n      }\n\n      if (i2 !== i) {\n        self.splice.apply(self, [0, updated.length].concat(updated));\n        self.splice(i2, updated.length);\n      }\n\n      if (raised) throw raised;\n    }\n  }\n\n  def self.[](*objects)\n    `toArraySubclass(objects, self)`\n  end\n\n  def initialize(size = nil, obj = nil, &block)\n    %x{\n      if (obj !== nil && block !== nil) {\n        #{::Kernel.warn('warning: block supersedes default value argument')}\n      }\n\n      if (size > #{::Integer::MAX}) {\n        #{::Kernel.raise ::ArgumentError, 'array size too big'}\n      }\n\n      if (arguments.length > 2) {\n        #{::Kernel.raise ::ArgumentError, \"wrong number of arguments (#{`arguments.length`} for 0..2)\"}\n      }\n\n      if (arguments.length === 0) {\n        self.splice(0, self.length);\n        return self;\n      }\n\n      if (arguments.length === 1) {\n        if (size.$$is_array) {\n          #{replace(size.to_a)}\n          return self;\n        } else if (#{size.respond_to? :to_ary}) {\n          #{replace(size.to_ary)}\n          return self;\n        }\n      }\n\n      size = $coerce_to(size, #{::Integer}, 'to_int');\n\n      if (size < 0) {\n        #{::Kernel.raise ::ArgumentError, 'negative array size'}\n      }\n\n      self.splice(0, self.length);\n      var i, value;\n\n      if (block === nil) {\n        for (i = 0; i < size; i++) {\n          self.push(obj);\n        }\n      }\n      else {\n        for (i = 0, value; i < size; i++) {\n          value = block(i);\n          self[i] = value;\n        }\n      }\n\n      return self;\n    }\n  end\n\n  def self.try_convert(obj)\n    ::Opal.coerce_to? obj, ::Array, :to_ary\n  end\n\n  def &(other)\n    other = if ::Array === other\n              other.to_a\n            else\n              `$coerce_to(other, #{::Array}, 'to_ary')`.to_a\n            end\n\n    %x{\n      var result = [], hash = #{{}}, i, length, item;\n\n      for (i = 0, length = other.length; i < length; i++) {\n        $hash_put(hash, other[i], true);\n      }\n\n      for (i = 0, length = self.length; i < length; i++) {\n        item = self[i];\n        if ($hash_delete(hash, item) !== undefined) {\n          result.push(item);\n        }\n      }\n\n      return result;\n    }\n  end\n\n  def |(other)\n    other = if ::Array === other\n              other.to_a\n            else\n              `$coerce_to(other, #{::Array}, 'to_ary')`.to_a\n            end\n\n    %x{\n      var hash = #{{}}, i, length, item;\n\n      for (i = 0, length = self.length; i < length; i++) {\n        $hash_put(hash, self[i], true);\n      }\n\n      for (i = 0, length = other.length; i < length; i++) {\n        $hash_put(hash, other[i], true);\n      }\n\n      return hash.$keys();\n    }\n  end\n\n  def *(other)\n    return join(other.to_str) if other.respond_to? :to_str\n\n    other = `$coerce_to(other, #{::Integer}, 'to_int')`\n\n    if `other < 0`\n      ::Kernel.raise ::ArgumentError, 'negative argument'\n    end\n\n    %x{\n      var result = [],\n          converted = #{to_a};\n\n      for (var i = 0; i < other; i++) {\n        result = result.concat(converted);\n      }\n\n      return result;\n    }\n  end\n\n  def +(other)\n    other = if ::Array === other\n              other.to_a\n            else\n              `$coerce_to(other, #{::Array}, 'to_ary')`.to_a\n            end\n\n    `self.concat(other)`\n  end\n\n  def -(other)\n    other = if ::Array === other\n              other.to_a\n            else\n              `$coerce_to(other, #{::Array}, 'to_ary')`.to_a\n            end\n\n    return [] if `self.length === 0`\n    return `self.slice()` if `other.length === 0`\n\n    %x{\n      var result = [], hash = #{{}}, i, length, item;\n\n      for (i = 0, length = other.length; i < length; i++) {\n        $hash_put(hash, other[i], true);\n      }\n\n      for (i = 0, length = self.length; i < length; i++) {\n        item = self[i];\n        if ($hash_get(hash, item) === undefined) {\n          result.push(item);\n        }\n      }\n\n      return result;\n    }\n  end\n\n  def <<(object)\n    `self.push(object)`\n\n    self\n  end\n\n  def <=>(other)\n    if ::Array === other\n      other = other.to_a\n    elsif other.respond_to? :to_ary\n      other = other.to_ary.to_a\n    else\n      return\n    end\n\n    %x{\n      if (#{hash} === #{other.hash}) {\n        return 0;\n      }\n\n      var count = Math.min(self.length, other.length);\n\n      for (var i = 0; i < count; i++) {\n        var tmp = #{`self[i]` <=> `other[i]`};\n\n        if (tmp !== 0) {\n          return tmp;\n        }\n      }\n\n      return #{`self.length` <=> `other.length`};\n    }\n  end\n\n  def ==(other)\n    %x{\n      var recursed = {};\n\n      function _eqeq(array, other) {\n        var i, length, a, b;\n\n        if (array === other)\n          return true;\n\n        if (!other.$$is_array) {\n          if ($respond_to(other, '$to_ary')) {\n            return #{`other` == `array`};\n          } else {\n            return false;\n          }\n        }\n\n        if (array.$$constructor !== Array)\n          array = #{`array`.to_a};\n        if (other.$$constructor !== Array)\n          other = #{`other`.to_a};\n\n        if (array.length !== other.length) {\n          return false;\n        }\n\n        recursed[#{`array`.object_id}] = true;\n\n        for (i = 0, length = array.length; i < length; i++) {\n          a = array[i];\n          b = other[i];\n          if (a.$$is_array) {\n            if (b.$$is_array && b.length !== a.length) {\n              return false;\n            }\n            if (!recursed.hasOwnProperty(#{`a`.object_id})) {\n              if (!_eqeq(a, b)) {\n                return false;\n              }\n            }\n          } else {\n            if (!#{`a` == `b`}) {\n              return false;\n            }\n          }\n        }\n\n        return true;\n      }\n\n      return _eqeq(self, other);\n    }\n  end\n\n  %x{\n    function $array_slice_range(self, index) {\n      var size = self.length,\n          exclude, from, to, result;\n\n      exclude = index.excl;\n      from    = index.begin === nil ? 0 : $coerce_to(index.begin, Opal.Integer, 'to_int');\n      to      = index.end === nil ? -1 : $coerce_to(index.end, Opal.Integer, 'to_int');\n\n      if (from < 0) {\n        from += size;\n\n        if (from < 0) {\n          return nil;\n        }\n      }\n\n      if (index.excl_rev && index.begin !== nil) {\n        from += 1;\n      }\n\n      if (from > size) {\n        return nil;\n      }\n\n      if (to < 0) {\n        to += size;\n\n        if (to < 0) {\n          return [];\n        }\n      }\n\n      if (!exclude || index.end === nil) {\n        to += 1;\n      }\n\n      result = self.slice(from, to);\n      return result;\n    }\n\n    function $array_slice_arithmetic_seq(self, index) {\n      var array, out = [], i = 0, pseudorange;\n\n      if (index.step < 0) {\n        pseudorange = {\n          begin: index.range.end,\n          end: index.range.begin,\n          excl: false,\n          excl_rev: index.range.excl\n        };\n        array = $array_slice_range(self, pseudorange).$reverse();\n      }\n      else {\n        array = $array_slice_range(self, index.range);\n      }\n\n      while (i < array.length) {\n        out.push(array[i]);\n        i += Math.abs(index.step);\n      }\n\n      return out;\n    }\n\n    function $array_slice_index_length(self, index, length) {\n      var size = self.length,\n          exclude, from, to, result;\n\n      index = $coerce_to(index, Opal.Integer, 'to_int');\n\n      if (index < 0) {\n        index += size;\n\n        if (index < 0) {\n          return nil;\n        }\n      }\n\n      if (length === undefined) {\n        if (index >= size || index < 0) {\n          return nil;\n        }\n\n        return self[index];\n      }\n      else {\n        length = $coerce_to(length, Opal.Integer, 'to_int');\n\n        if (length < 0 || index > size || index < 0) {\n          return nil;\n        }\n\n        result = self.slice(index, index + length);\n      }\n      return result;\n    }\n  }\n\n  def [](index, length = undefined)\n    %x{\n      if (index.$$is_range) {\n        return $array_slice_range(self, index);\n      }\n      else if (index.$$is_arithmetic_seq) {\n        return $array_slice_arithmetic_seq(self, index);\n      }\n      else {\n        return $array_slice_index_length(self, index, length);\n      }\n    }\n  end\n\n  def []=(index, value, extra = undefined)\n    %x{\n      var i, size = self.length;\n    }\n\n    if ::Range === index\n      data = if ::Array === value\n               value.to_a\n             elsif value.respond_to? :to_ary\n               value.to_ary.to_a\n             else\n               [value]\n             end\n\n      %x{\n        var exclude = index.excl,\n            from    = index.begin === nil ? 0 : $coerce_to(index.begin, Opal.Integer, 'to_int'),\n            to      = index.end === nil ? -1 : $coerce_to(index.end, Opal.Integer, 'to_int');\n\n        if (from < 0) {\n          from += size;\n\n          if (from < 0) {\n            #{::Kernel.raise ::RangeError, \"#{index.inspect} out of range\"};\n          }\n        }\n\n        if (to < 0) {\n          to += size;\n        }\n\n        if (!exclude || index.end === nil) {\n          to += 1;\n        }\n\n        if (from > size) {\n          for (i = size; i < from; i++) {\n            self[i] = nil;\n          }\n        }\n\n        if (to < 0) {\n          self.splice.apply(self, [from, 0].concat(data));\n        }\n        else {\n          self.splice.apply(self, [from, to - from].concat(data));\n        }\n\n        return value;\n      }\n    else\n      if `extra === undefined`\n        length = 1\n      else\n        length = value\n        value  = extra\n\n        data = if ::Array === value\n                 value.to_a\n               elsif value.respond_to? :to_ary\n                 value.to_ary.to_a\n               else\n                 [value]\n               end\n      end\n\n      %x{\n        var old;\n\n        index  = $coerce_to(index, #{::Integer}, 'to_int');\n        length = $coerce_to(length, #{::Integer}, 'to_int');\n\n        if (index < 0) {\n          old    = index;\n          index += size;\n\n          if (index < 0) {\n            #{::Kernel.raise ::IndexError, \"index #{`old`} too small for array; minimum #{`-self.length`}\"};\n          }\n        }\n\n        if (length < 0) {\n          #{::Kernel.raise ::IndexError, \"negative length (#{length})\"}\n        }\n\n        if (index > size) {\n          for (i = size; i < index; i++) {\n            self[i] = nil;\n          }\n        }\n\n        if (extra === undefined) {\n          self[index] = value;\n        }\n        else {\n          self.splice.apply(self, [index, length].concat(data));\n        }\n\n        return value;\n      }\n    end\n  end\n\n  def any?(pattern = undefined, &block)\n    `if (self.length === 0) return false`\n    super\n  end\n\n  def assoc(object)\n    %x{\n      for (var i = 0, length = self.length, item; i < length; i++) {\n        if (item = self[i], item.length && #{`item[0]` == object}) {\n          return item;\n        }\n      }\n\n      return nil;\n    }\n  end\n\n  def at(index)\n    %x{\n      index = $coerce_to(index, #{::Integer}, 'to_int')\n\n      if (index < 0) {\n        index += self.length;\n      }\n\n      if (index < 0 || index >= self.length) {\n        return nil;\n      }\n\n      return self[index];\n    }\n  end\n\n  def bsearch_index(&block)\n    return enum_for :bsearch_index unless block_given?\n\n    %x{\n      var min = 0,\n          max = self.length,\n          mid,\n          val,\n          ret,\n          smaller = false,\n          satisfied = nil;\n\n      while (min < max) {\n        mid = min + Math.floor((max - min) / 2);\n        val = self[mid];\n        ret = $yield1(block, val);\n\n        if (ret === true) {\n          satisfied = mid;\n          smaller = true;\n        }\n        else if (ret === false || ret === nil) {\n          smaller = false;\n        }\n        else if (ret.$$is_number) {\n          if (ret === 0) { return mid; }\n          smaller = (ret < 0);\n        }\n        else {\n          #{::Kernel.raise ::TypeError, \"wrong argument type #{`ret`.class} (must be numeric, true, false or nil)\"}\n        }\n\n        if (smaller) { max = mid; } else { min = mid + 1; }\n      }\n\n      return satisfied;\n    }\n  end\n\n  def bsearch(&block)\n    return enum_for :bsearch unless block_given?\n\n    index = bsearch_index(&block)\n\n    %x{\n      if (index != null && index.$$is_number) {\n        return self[index];\n      } else {\n        return index;\n      }\n    }\n  end\n\n  def cycle(n = nil, &block)\n    unless block_given?\n      return enum_for(:cycle, n) do\n        if n.nil?\n          ::Float::INFINITY\n        else\n          n = ::Opal.coerce_to!(n, ::Integer, :to_int)\n          n > 0 ? enumerator_size * n : 0\n        end\n      end\n    end\n\n    return if empty? || n == 0\n\n    %x{\n      var i, length, value;\n\n      if (n === nil) {\n        while (true) {\n          for (i = 0, length = self.length; i < length; i++) {\n            value = $yield1(block, self[i]);\n          }\n        }\n      }\n      else {\n        n = #{::Opal.coerce_to!(n, ::Integer, :to_int)};\n        if (n <= 0) {\n          return self;\n        }\n\n        while (n > 0) {\n          for (i = 0, length = self.length; i < length; i++) {\n            value = $yield1(block, self[i]);\n          }\n\n          n--;\n        }\n      }\n    }\n\n    self\n  end\n\n  def clear\n    `self.splice(0, self.length)`\n\n    self\n  end\n\n  def count(object = undefined, &block)\n    if `object !== undefined` || block\n      super\n    else\n      size\n    end\n  end\n\n  def initialize_copy(other)\n    replace other\n  end\n\n  def collect(&block)\n    return enum_for(:collect) { size } unless block_given?\n\n    %x{\n      var result = [];\n\n      for (var i = 0, length = self.length; i < length; i++) {\n        var value = $yield1(block, self[i]);\n        result.push(value);\n      }\n\n      return result;\n    }\n  end\n\n  def collect!(&block)\n    return enum_for(:collect!) { size } unless block_given?\n\n    %x{\n      for (var i = 0, length = self.length; i < length; i++) {\n        var value = $yield1(block, self[i]);\n        self[i] = value;\n      }\n    }\n\n    self\n  end\n\n  %x{\n    function binomial_coefficient(n, k) {\n      if (n === k || k === 0) {\n        return 1;\n      }\n\n      if (k > 0 && n > k) {\n        return binomial_coefficient(n - 1, k - 1) + binomial_coefficient(n - 1, k);\n      }\n\n      return 0;\n    }\n  }\n\n  def combination(n)\n    num = ::Opal.coerce_to! n, ::Integer, :to_int\n    return enum_for(:combination, num) { `binomial_coefficient(#{self}.length, num)` } unless block_given?\n\n    %x{\n      var i, length, stack, chosen, lev, done, next;\n\n      if (num === 0) {\n        #{yield []}\n      } else if (num === 1) {\n        for (i = 0, length = self.length; i < length; i++) {\n          #{yield `[self[i]]`}\n        }\n      }\n      else if (num === self.length) {\n        #{yield `self.slice()`}\n      }\n      else if (num >= 0 && num < self.length) {\n        stack = [];\n        for (i = 0; i <= num + 1; i++) {\n          stack.push(0);\n        }\n\n        chosen = [];\n        lev = 0;\n        done = false;\n        stack[0] = -1;\n\n        while (!done) {\n          chosen[lev] = self[stack[lev+1]];\n          while (lev < num - 1) {\n            lev++;\n            next = stack[lev+1] = stack[lev] + 1;\n            chosen[lev] = self[next];\n          }\n          #{ yield `chosen.slice()` }\n          lev++;\n          do {\n            done = (lev === 0);\n            stack[lev]++;\n            lev--;\n          } while ( stack[lev+1] + num === self.length + lev + 1 );\n        }\n      }\n    }\n    self\n  end\n\n  def repeated_combination(n)\n    num = ::Opal.coerce_to! n, ::Integer, :to_int\n\n    unless block_given?\n      return enum_for(:repeated_combination, num) { `binomial_coefficient(self.length + num - 1, num)` }\n    end\n\n    %x{\n      function iterate(max, from, buffer, self) {\n        if (buffer.length == max) {\n          var copy = buffer.slice();\n          #{yield `copy`}\n          return;\n        }\n        for (var i = from; i < self.length; i++) {\n          buffer.push(self[i]);\n          iterate(max, i, buffer, self);\n          buffer.pop();\n        }\n      }\n\n      if (num >= 0) {\n        iterate(num, 0, [], self);\n      }\n    }\n    self\n  end\n\n  def compact\n    %x{\n      var result = [];\n\n      for (var i = 0, length = self.length, item; i < length; i++) {\n        if ((item = self[i]) !== nil) {\n          result.push(item);\n        }\n      }\n\n      return result;\n    }\n  end\n\n  def compact!\n    %x{\n      var original = self.length;\n\n      for (var i = 0, length = self.length; i < length; i++) {\n        if (self[i] === nil) {\n          self.splice(i, 1);\n\n          length--;\n          i--;\n        }\n      }\n\n      return self.length === original ? nil : self;\n    }\n  end\n\n  def concat(*others)\n    others = others.map do |other|\n      other = if ::Array === other\n                other.to_a\n              else\n                `$coerce_to(other, #{::Array}, 'to_ary')`.to_a\n              end\n\n      if other.equal?(self)\n        other = other.dup\n      end\n\n      other\n    end\n\n    others.each do |other|\n      %x{\n        for (var i = 0, length = other.length; i < length; i++) {\n          self.push(other[i]);\n        }\n      }\n    end\n\n    self\n  end\n\n  def delete(object)\n    %x{\n      var original = self.length;\n\n      for (var i = 0, length = original; i < length; i++) {\n        if (#{`self[i]` == object}) {\n          self.splice(i, 1);\n\n          length--;\n          i--;\n        }\n      }\n\n      if (self.length === original) {\n        if (#{block_given?}) {\n          return #{yield};\n        }\n        return nil;\n      }\n      return object;\n    }\n  end\n\n  def delete_at(index)\n    %x{\n      index = $coerce_to(index, #{::Integer}, 'to_int');\n\n      if (index < 0) {\n        index += self.length;\n      }\n\n      if (index < 0 || index >= self.length) {\n        return nil;\n      }\n\n      var result = self[index];\n\n      self.splice(index, 1);\n\n      return result;\n    }\n  end\n\n  def delete_if(&block)\n    return enum_for(:delete_if) { size } unless block_given?\n    %x{filterIf(self, $falsy, block)}\n    self\n  end\n\n  def difference(*arrays)\n    arrays.reduce(to_a.dup) { |a, b| a - b }\n  end\n\n  def dig(idx, *idxs)\n    item = self[idx]\n\n    %x{\n      if (item === nil || idxs.length === 0) {\n        return item;\n      }\n    }\n\n    unless item.respond_to?(:dig)\n      ::Kernel.raise ::TypeError, \"#{item.class} does not have #dig method\"\n    end\n\n    item.dig(*idxs)\n  end\n\n  def drop(number)\n    %x{\n      number = $coerce_to(number, #{::Integer}, 'to_int');\n\n      if (number < 0) {\n        #{::Kernel.raise ::ArgumentError}\n      }\n\n      return self.slice(number);\n    }\n  end\n\n  def dup\n    %x{\n      if (self.$$class === Opal.Array &&\n          self.$$class.$allocate.$$pristine &&\n          self.$copy_instance_variables.$$pristine &&\n          self.$initialize_dup.$$pristine) {\n        return self.slice(0);\n      }\n    }\n\n    super\n  end\n\n  def each(&block)\n    return enum_for(:each) { size } unless block_given?\n\n    %x{\n      for (var i = 0, length = self.length; i < length; i++) {\n        var value = $yield1(block, self[i]);\n      }\n    }\n\n    self\n  end\n\n  def each_index(&block)\n    return enum_for(:each_index) { size } unless block_given?\n\n    %x{\n      for (var i = 0, length = self.length; i < length; i++) {\n        var value = $yield1(block, i);\n      }\n    }\n\n    self\n  end\n\n  def empty?\n    `self.length === 0`\n  end\n\n  def eql?(other)\n    %x{\n      var recursed = {};\n\n      function _eql(array, other) {\n        var i, length, a, b;\n\n        if (!other.$$is_array) {\n          return false;\n        }\n\n        other = #{other.to_a};\n\n        if (array.length !== other.length) {\n          return false;\n        }\n\n        recursed[#{`array`.object_id}] = true;\n\n        for (i = 0, length = array.length; i < length; i++) {\n          a = array[i];\n          b = other[i];\n          if (a.$$is_array) {\n            if (b.$$is_array && b.length !== a.length) {\n              return false;\n            }\n            if (!recursed.hasOwnProperty(#{`a`.object_id})) {\n              if (!_eql(a, b)) {\n                return false;\n              }\n            }\n          } else {\n            if (!#{`a`.eql?(`b`)}) {\n              return false;\n            }\n          }\n        }\n\n        return true;\n      }\n\n      return _eql(self, other);\n    }\n  end\n\n  def fetch(index, defaults = undefined, &block)\n    %x{\n      var original = index;\n\n      index = $coerce_to(index, #{::Integer}, 'to_int');\n\n      if (index < 0) {\n        index += self.length;\n      }\n\n      if (index >= 0 && index < self.length) {\n        return self[index];\n      }\n\n      if (block !== nil && defaults != null) {\n        #{warn('warning: block supersedes default value argument')}\n      }\n\n      if (block !== nil) {\n        return block(original);\n      }\n\n      if (defaults != null) {\n        return defaults;\n      }\n\n      if (self.length === 0) {\n        #{::Kernel.raise ::IndexError, \"index #{`original`} outside of array bounds: 0...0\"}\n      }\n      else {\n        #{::Kernel.raise ::IndexError, \"index #{`original`} outside of array bounds: -#{`self.length`}...#{`self.length`}\"};\n      }\n    }\n  end\n\n  def fill(*args, &block)\n    %x{\n      var i, length, value;\n    }\n\n    if block\n      if `args.length > 2`\n        ::Kernel.raise ::ArgumentError, \"wrong number of arguments (#{args.length} for 0..2)\"\n      end\n\n      one, two = args\n    else\n      if `args.length == 0`\n        ::Kernel.raise ::ArgumentError, 'wrong number of arguments (0 for 1..3)'\n      elsif `args.length > 3`\n        ::Kernel.raise ::ArgumentError, \"wrong number of arguments (#{args.length} for 1..3)\"\n      end\n\n      obj, one, two = args\n    end\n\n    if ::Range === one\n      ::Kernel.raise ::TypeError, 'length invalid with range' if two\n\n      left   = `one.begin === nil ? 0 : $coerce_to(one.begin, #{::Integer}, 'to_int')`\n      `left += this.length` if `left < 0`\n      ::Kernel.raise ::RangeError, \"#{one.inspect} out of range\" if `left < 0`\n\n      right = `one.end === nil ? -1 : $coerce_to(one.end, #{::Integer}, 'to_int')`\n      `right += this.length` if `right < 0`\n      `right += 1` unless one.exclude_end?\n\n      return self if `right <= left`\n    elsif one\n      left   = `$coerce_to(one, #{::Integer}, 'to_int')`\n      `left += this.length` if `left < 0`\n      left   = 0 if `left < 0`\n\n      if two\n        right = `$coerce_to(two, #{::Integer}, 'to_int')`\n\n        return self if `right == 0`\n\n        `right += left`\n      else\n        right = `this.length`\n      end\n    else\n      left  = 0\n      right = `this.length`\n    end\n\n    if `left > this.length`\n      %x{\n        for (i = this.length; i < right; i++) {\n          self[i] = nil;\n        }\n      }\n    end\n\n    if `right > this.length`\n      `this.length = right`\n    end\n\n    if block\n      %x{\n        for (length = this.length; left < right; left++) {\n          value = block(left);\n          self[left] = value;\n        }\n      }\n    else\n      %x{\n        for (length = this.length; left < right; left++) {\n          self[left] = #{obj};\n        }\n      }\n    end\n\n    self\n  end\n\n  def first(count = undefined)\n    %x{\n      if (count == null) {\n        return self.length === 0 ? nil : self[0];\n      }\n\n      count = $coerce_to(count, #{::Integer}, 'to_int');\n\n      if (count < 0) {\n        #{::Kernel.raise ::ArgumentError, 'negative array size'};\n      }\n\n      return self.slice(0, count);\n    }\n  end\n\n  def flatten(level = undefined)\n    %x{\n      function _flatten(array, level) {\n        var result = [],\n            i, length,\n            item, ary;\n\n        array = #{`array`.to_a};\n\n        for (i = 0, length = array.length; i < length; i++) {\n          item = array[i];\n\n          if (!$respond_to(item, '$to_ary', true)) {\n            result.push(item);\n            continue;\n          }\n\n          ary = #{`item`.to_ary};\n\n          if (ary === nil) {\n            result.push(item);\n            continue;\n          }\n\n          if (!ary.$$is_array) {\n            #{::Kernel.raise ::TypeError};\n          }\n\n          if (ary === self) {\n            #{::Kernel.raise ::ArgumentError};\n          }\n\n          switch (level) {\n          case undefined:\n            result = result.concat(_flatten(ary));\n            break;\n          case 0:\n            result.push(ary);\n            break;\n          default:\n            result.push.apply(result, _flatten(ary, level - 1));\n          }\n        }\n        return result;\n      }\n\n      if (level !== undefined) {\n        level = $coerce_to(level, #{::Integer}, 'to_int');\n      }\n\n      return _flatten(self, level);\n    }\n  end\n\n  def flatten!(level = undefined)\n    %x{\n      var flattened = #{flatten level};\n\n      if (self.length == flattened.length) {\n        for (var i = 0, length = self.length; i < length; i++) {\n          if (self[i] !== flattened[i]) {\n            break;\n          }\n        }\n\n        if (i == length) {\n          return nil;\n        }\n      }\n\n      #{replace `flattened`};\n    }\n\n    self\n  end\n\n  def hash\n    %x{\n      var top = ($hash_ids === undefined),\n          result = ['A'],\n          hash_id = self.$object_id(),\n          item, i, key;\n\n      try {\n        if (top) {\n          $hash_ids = Object.create(null);\n        }\n\n        // return early for recursive structures\n        if ($hash_ids[hash_id]) {\n          return 'self';\n        }\n\n        for (key in $hash_ids) {\n          item = $hash_ids[key];\n          if (#{eql?(`item`)}) {\n            return 'self';\n          }\n        }\n\n        $hash_ids[hash_id] = self;\n\n        for (i = 0; i < self.length; i++) {\n          item = self[i];\n          result.push(item.$hash());\n        }\n\n        return result.join(',');\n      } finally {\n        if (top) {\n          $hash_ids = undefined;\n        }\n      }\n    }\n  end\n\n  def include?(member)\n    %x{\n      for (var i = 0, length = self.length; i < length; i++) {\n        if (#{`self[i]` == member}) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  end\n\n  def index(object = undefined, &block)\n    %x{\n      var i, length, value;\n\n      if (object != null && block !== nil) {\n        #{warn('warning: given block not used')}\n      }\n\n      if (object != null) {\n        for (i = 0, length = self.length; i < length; i++) {\n          if (#{`self[i]` == object}) {\n            return i;\n          }\n        }\n      }\n      else if (block !== nil) {\n        for (i = 0, length = self.length; i < length; i++) {\n          value = block(self[i]);\n\n          if (value !== false && value !== nil) {\n            return i;\n          }\n        }\n      }\n      else {\n        return #{enum_for :index};\n      }\n\n      return nil;\n    }\n  end\n\n  def insert(index, *objects)\n    %x{\n      index = $coerce_to(index, #{::Integer}, 'to_int');\n\n      if (objects.length > 0) {\n        if (index < 0) {\n          index += self.length + 1;\n\n          if (index < 0) {\n            #{ ::Kernel.raise ::IndexError, \"#{index} is out of bounds\" };\n          }\n        }\n        if (index > self.length) {\n          for (var i = self.length; i < index; i++) {\n            self.push(nil);\n          }\n        }\n\n        self.splice.apply(self, [index, 0].concat(objects));\n      }\n    }\n\n    self\n  end\n\n  `var inspect_stack = []`\n\n  def inspect\n    %x{\n      var result = [],\n      id = #{__id__},\n      pushed = true;\n    }\n\n    begin\n      %x{\n        if (inspect_stack.indexOf(id) !== -1) {\n          pushed = false;\n          return '[...]';\n        }\n        inspect_stack.push(id)\n\n        for (var i = 0, length = self.length; i < length; i++) {\n          var item = #{self[`i`]};\n\n          result.push(#{Opal.inspect(`item`)});\n        }\n\n        return '[' + result.join(', ') + ']';\n      }\n      nil\n    ensure\n      `if (pushed) inspect_stack.pop()`\n    end\n  end\n\n  def intersection(*arrays)\n    arrays.reduce(to_a.dup) { |a, b| a & b }\n  end\n\n  def intersect?(other)\n    !intersection(other).empty?\n  end\n\n  def join(sep = nil)\n    return '' if `self.length === 0`\n\n    if `sep === nil`\n      sep = $,\n    end\n\n    %x{\n      var result = [];\n      var i, length, item, tmp;\n\n      for (i = 0, length = self.length; i < length; i++) {\n        item = self[i];\n\n        if ($respond_to(item, '$to_str')) {\n          tmp = #{`item`.to_str};\n\n          if (tmp !== nil) {\n            result.push(#{`tmp`.to_s});\n\n            continue;\n          }\n        }\n\n        if ($respond_to(item, '$to_ary')) {\n          tmp = #{`item`.to_ary};\n\n          if (tmp === self) {\n            #{::Kernel.raise ::ArgumentError};\n          }\n\n          if (tmp !== nil) {\n            result.push(#{`tmp`.join(sep)});\n\n            continue;\n          }\n        }\n\n        if ($respond_to(item, '$to_s')) {\n          tmp = #{`item`.to_s};\n\n          if (tmp !== nil) {\n            result.push(tmp);\n\n            continue;\n          }\n        }\n\n        #{::Kernel.raise ::NoMethodError.new(\"#{Opal.inspect(item)} doesn't respond to #to_str, #to_ary or #to_s\", 'to_str')};\n      }\n\n      if (sep === nil) {\n        return result.join('');\n      }\n      else {\n        return result.join(#{::Opal.coerce_to!(sep, ::String, :to_str).to_s});\n      }\n    }\n  end\n\n  def keep_if(&block)\n    return enum_for(:keep_if) { size } unless block_given?\n    %x{filterIf(self, $truthy, block)}\n    self\n  end\n\n  def last(count = undefined)\n    %x{\n      if (count == null) {\n        return self.length === 0 ? nil : self[self.length - 1];\n      }\n\n      count = $coerce_to(count, #{::Integer}, 'to_int');\n\n      if (count < 0) {\n        #{::Kernel.raise ::ArgumentError, 'negative array size'};\n      }\n\n      if (count > self.length) {\n        count = self.length;\n      }\n\n      return self.slice(self.length - count, self.length);\n    }\n  end\n\n  def length\n    `self.length`\n  end\n\n  def max(n = undefined, &block)\n    each.max(n, &block)\n  end\n\n  def min(&block)\n    each.min(&block)\n  end\n\n  %x{\n    // Returns the product of from, from-1, ..., from - how_many + 1.\n    function descending_factorial(from, how_many) {\n      var count = how_many >= 0 ? 1 : 0;\n      while (how_many) {\n        count *= from;\n        from--;\n        how_many--;\n      }\n      return count;\n    }\n  }\n\n  def permutation(num = undefined, &block)\n    unless block_given?\n      return enum_for(:permutation, num) do\n        `descending_factorial(self.length, num === undefined ? self.length : num)`\n      end\n    end\n\n    %x{\n      var permute, offensive, output;\n\n      if (num === undefined) {\n        num = self.length;\n      }\n      else {\n        num = $coerce_to(num, #{::Integer}, 'to_int');\n      }\n\n      if (num < 0 || self.length < num) {\n        // no permutations, yield nothing\n      }\n      else if (num === 0) {\n        // exactly one permutation: the zero-length array\n        #{ yield [] }\n      }\n      else if (num === 1) {\n        // this is a special, easy case\n        for (var i = 0; i < self.length; i++) {\n          #{ yield `[self[i]]` }\n        }\n      }\n      else {\n        // this is the general case\n        #{ perm = Array.new(num) };\n        #{ used = Array.new(`self.length`, false) };\n\n        permute = function(num, perm, index, used, blk) {\n          self = this;\n          for(var i = 0; i < self.length; i++){\n            if(#{ !used[`i`] }) {\n              perm[index] = i;\n              if(index < num - 1) {\n                used[i] = true;\n                permute.call(self, num, perm, index + 1, used, blk);\n                used[i] = false;\n              }\n              else {\n                output = [];\n                for (var j = 0; j < perm.length; j++) {\n                  output.push(self[perm[j]]);\n                }\n                $yield1(blk, output);\n              }\n            }\n          }\n        }\n\n        if (#{block_given?}) {\n          // offensive (both definitions) copy.\n          offensive = self.slice();\n          permute.call(offensive, num, perm, 0, used, block);\n        }\n        else {\n          permute.call(self, num, perm, 0, used, block);\n        }\n      }\n    }\n\n    self\n  end\n\n  def repeated_permutation(n)\n    num = ::Opal.coerce_to! n, ::Integer, :to_int\n    return enum_for(:repeated_permutation, num) { num >= 0 ? size**num : 0 } unless block_given?\n\n    %x{\n      function iterate(max, buffer, self) {\n        if (buffer.length == max) {\n          var copy = buffer.slice();\n          #{yield `copy`}\n          return;\n        }\n        for (var i = 0; i < self.length; i++) {\n          buffer.push(self[i]);\n          iterate(max, buffer, self);\n          buffer.pop();\n        }\n      }\n\n      iterate(num, [], self.slice());\n    }\n\n    self\n  end\n\n  def pop(count = undefined)\n    if `count === undefined`\n      return if `self.length === 0`\n      return `self.pop()`\n    end\n\n    count = `$coerce_to(count, #{::Integer}, 'to_int')`\n\n    if `count < 0`\n      ::Kernel.raise ::ArgumentError, 'negative array size'\n    end\n\n    return [] if `self.length === 0`\n\n    if `count === 1`\n      `[self.pop()]`\n    elsif `count > self.length`\n      `self.splice(0, self.length)`\n    else\n      `self.splice(self.length - count, self.length)`\n    end\n  end\n\n  def product(*args, &block)\n    %x{\n      var result = #{block_given?} ? null : [],\n          n = args.length + 1,\n          counters = new Array(n),\n          lengths  = new Array(n),\n          arrays   = new Array(n),\n          i, m, subarray, len, resultlen = 1;\n\n      arrays[0] = self;\n      for (i = 1; i < n; i++) {\n        arrays[i] = $coerce_to(args[i - 1], #{::Array}, 'to_ary');\n      }\n\n      for (i = 0; i < n; i++) {\n        len = arrays[i].length;\n        if (len === 0) {\n          return result || self;\n        }\n        resultlen *= len;\n        if (resultlen > 2147483647) {\n          #{::Kernel.raise ::RangeError, 'too big to product'}\n        }\n        lengths[i] = len;\n        counters[i] = 0;\n      }\n\n      outer_loop: for (;;) {\n        subarray = [];\n        for (i = 0; i < n; i++) {\n          subarray.push(arrays[i][counters[i]]);\n        }\n        if (result) {\n          result.push(subarray);\n        } else {\n          #{yield `subarray`}\n        }\n        m = n - 1;\n        counters[m]++;\n        while (counters[m] === lengths[m]) {\n          counters[m] = 0;\n          if (--m < 0) break outer_loop;\n          counters[m]++;\n        }\n      }\n\n      return result || self;\n    }\n  end\n\n  def push(*objects)\n    %x{\n      for (var i = 0, length = objects.length; i < length; i++) {\n        self.push(objects[i]);\n      }\n    }\n\n    self\n  end\n\n  def rassoc(object)\n    %x{\n      for (var i = 0, length = self.length, item; i < length; i++) {\n        item = self[i];\n\n        if (item.length && item[1] !== undefined) {\n          if (#{`item[1]` == object}) {\n            return item;\n          }\n        }\n      }\n\n      return nil;\n    }\n  end\n\n  def reject(&block)\n    return enum_for(:reject) { size } unless block_given?\n\n    %x{\n      var result = [];\n\n      for (var i = 0, length = self.length, value; i < length; i++) {\n        value = block(self[i]);\n\n        if (value === false || value === nil) {\n          result.push(self[i]);\n        }\n      }\n      return result;\n    }\n  end\n\n  def reject!(&block)\n    return enum_for(:reject!) { size } unless block_given?\n\n    original = length\n    delete_if(&block)\n\n    unless length == original\n      self\n    end\n  end\n\n  def replace(other)\n    other = if ::Array === other\n              other.to_a\n            else\n              `$coerce_to(other, #{::Array}, 'to_ary')`.to_a\n            end\n\n    %x{\n      self.splice(0, self.length);\n      self.push.apply(self, other);\n    }\n\n    self\n  end\n\n  def reverse\n    `self.slice(0).reverse()`\n  end\n\n  def reverse!\n    `self.reverse()`\n  end\n\n  def reverse_each(&block)\n    return enum_for(:reverse_each) { size } unless block_given?\n\n    reverse.each(&block)\n    self\n  end\n\n  def rindex(object = undefined, &block)\n    %x{\n      var i, value;\n\n      if (object != null && block !== nil) {\n        #{warn('warning: given block not used')}\n      }\n\n      if (object != null) {\n        for (i = self.length - 1; i >= 0; i--) {\n          if (i >= self.length) {\n            break;\n          }\n          if (#{`self[i]` == `object`}) {\n            return i;\n          }\n        }\n      }\n      else if (block !== nil) {\n        for (i = self.length - 1; i >= 0; i--) {\n          if (i >= self.length) {\n            break;\n          }\n\n          value = block(self[i]);\n\n          if (value !== false && value !== nil) {\n            return i;\n          }\n        }\n      }\n      else if (object == null) {\n        return #{enum_for :rindex};\n      }\n\n      return nil;\n    }\n  end\n\n  def rotate(n = 1)\n    %x{\n      var ary, idx, firstPart, lastPart;\n\n      n = $coerce_to(n, #{::Integer}, 'to_int')\n\n      if (self.length === 1) {\n        return self.slice();\n      }\n      if (self.length === 0) {\n        return [];\n      }\n\n      ary = self.slice();\n      idx = n % ary.length;\n\n      firstPart = ary.slice(idx);\n      lastPart = ary.slice(0, idx);\n      return firstPart.concat(lastPart);\n    }\n  end\n\n  def rotate!(cnt = 1)\n    %x{\n      if (self.length === 0 || self.length === 1) {\n        return self;\n      }\n      cnt = $coerce_to(cnt, #{::Integer}, 'to_int');\n    }\n    ary = rotate(cnt)\n    replace ary\n  end\n\n  class self::SampleRandom\n    def initialize(rng)\n      @rng = rng\n    end\n\n    def rand(size)\n      random = `$coerce_to(#{@rng.rand(size)}, #{::Integer}, 'to_int')`\n      ::Kernel.raise ::RangeError, 'random value must be >= 0' if `random < 0`\n      ::Kernel.raise ::RangeError, 'random value must be less than Array size' unless `random < size`\n\n      random\n    end\n  end\n\n  def sample(count = undefined, options = undefined)\n    return at ::Kernel.rand(`self.length`) if `count === undefined`\n\n    if `options === undefined`\n      if (o = ::Opal.coerce_to? count, ::Hash, :to_hash)\n        options = o\n        count = nil\n      else\n        options = nil\n        count = `$coerce_to(count, #{::Integer}, 'to_int')`\n      end\n    else\n      count = `$coerce_to(count, #{::Integer}, 'to_int')`\n      options = `$coerce_to(options, #{::Hash}, 'to_hash')`\n    end\n\n    if count && `count < 0`\n      ::Kernel.raise ::ArgumentError, 'count must be greater than 0'\n    end\n\n    rng = options[:random] if options\n    rng = if rng && rng.respond_to?(:rand)\n            SampleRandom.new rng\n          else\n            ::Kernel\n          end\n\n    return `self[#{rng.rand(`self.length`)}]` unless count\n\n    %x{\n\n      var abandon, spin, result, i, j, k, targetIndex, oldValue;\n\n      if (count > self.length) {\n        count = self.length;\n      }\n\n      switch (count) {\n        case 0:\n          return [];\n          break;\n        case 1:\n          return [self[#{rng.rand(`self.length`)}]];\n          break;\n        case 2:\n          i = #{rng.rand(`self.length`)};\n          j = #{rng.rand(`self.length`)};\n          if (i === j) {\n            j = i === 0 ? i + 1 : i - 1;\n          }\n          return [self[i], self[j]];\n          break;\n        default:\n          if (self.length / count > 3) {\n            abandon = false;\n            spin = 0;\n\n            result = #{ Array.new(count) };\n            i = 1;\n\n            result[0] = #{rng.rand(`self.length`)};\n            while (i < count) {\n              k = #{rng.rand(`self.length`)};\n              j = 0;\n\n              while (j < i) {\n                while (k === result[j]) {\n                  spin++;\n                  if (spin > 100) {\n                    abandon = true;\n                    break;\n                  }\n                  k = #{rng.rand(`self.length`)};\n                }\n                if (abandon) { break; }\n\n                j++;\n              }\n\n              if (abandon) { break; }\n\n              result[i] = k;\n\n              i++;\n            }\n\n            if (!abandon) {\n              i = 0;\n              while (i < count) {\n                result[i] = self[result[i]];\n                i++;\n              }\n\n              return result;\n            }\n          }\n\n          result = self.slice();\n\n          for (var c = 0; c < count; c++) {\n            targetIndex = #{rng.rand(`self.length`)};\n            oldValue = result[c];\n            result[c] = result[targetIndex];\n            result[targetIndex] = oldValue;\n          }\n\n          return count === self.length ? result : #{`result`[0, count]};\n      }\n    }\n  end\n\n  def select(&block)\n    return enum_for(:select) { size } unless block_given?\n\n    %x{\n      var result = [];\n\n      for (var i = 0, length = self.length, item, value; i < length; i++) {\n        item = self[i];\n\n        value = $yield1(block, item);\n\n        if ($truthy(value)) {\n          result.push(item);\n        }\n      }\n\n      return result;\n    }\n  end\n\n  def select!(&block)\n    return enum_for(:select!) { size } unless block_given?\n\n    %x{\n      var original = self.length;\n      #{ keep_if(&block) };\n      return self.length === original ? nil : self;\n    }\n  end\n\n  def shift(count = undefined)\n    if `count === undefined`\n      return if `self.length === 0`\n      return `shiftNoArg(self)`\n    end\n\n    count = `$coerce_to(count, #{::Integer}, 'to_int')`\n\n    if `count < 0`\n      ::Kernel.raise ::ArgumentError, 'negative array size'\n    end\n\n    return [] if `self.length === 0`\n\n    `self.splice(0, count)`\n  end\n\n  def shuffle(rng = undefined)\n    dup.to_a.shuffle!(rng)\n  end\n\n  def shuffle!(rng = undefined)\n    %x{\n      var randgen, i = self.length, j, tmp;\n\n      if (rng !== undefined) {\n        rng = #{::Opal.coerce_to?(rng, ::Hash, :to_hash)};\n\n        if (rng !== nil) {\n          rng = #{rng[:random]};\n\n          if (rng !== nil && #{rng.respond_to?(:rand)}) {\n            randgen = rng;\n          }\n        }\n      }\n\n      while (i) {\n        if (randgen) {\n          j = randgen.$rand(i).$to_int();\n\n          if (j < 0) {\n            #{::Kernel.raise ::RangeError, \"random number too small #{`j`}\"}\n          }\n\n          if (j >= i) {\n            #{::Kernel.raise ::RangeError, \"random number too big #{`j`}\"}\n          }\n        }\n        else {\n          j = #{rand(`i`)};\n        }\n\n        tmp = self[--i];\n        self[i] = self[j];\n        self[j] = tmp;\n      }\n\n      return self;\n    }\n  end\n\n  def slice!(index, length = undefined)\n    result = nil\n\n    if `length === undefined`\n      if ::Range === index\n        range = index\n        result = self[range]\n\n        range_start = `range.begin === nil ? 0 : $coerce_to(range.begin, #{::Integer}, 'to_int')`\n        range_end = `range.end === nil ? -1 : $coerce_to(range.end, #{::Integer}, 'to_int')`\n\n        %x{\n          if (range_start < 0) {\n            range_start += self.length;\n          }\n\n          if (range_end < 0) {\n            range_end += self.length;\n          } else if (range_end >= self.length) {\n            range_end = self.length - 1;\n            if (range.excl) {\n              range_end += 1;\n            }\n          }\n\n          var range_length = range_end - range_start;\n          if (range.excl && range.end !== nil) {\n            range_end -= 1;\n          } else {\n            range_length += 1;\n          }\n\n          if (range_start < self.length && range_start >= 0 && range_end < self.length && range_end >= 0 && range_length > 0) {\n            self.splice(range_start, range_length);\n          }\n        }\n      else\n        start = `$coerce_to(index, #{::Integer}, 'to_int')`\n        %x{\n          if (start < 0) {\n            start += self.length;\n          }\n\n          if (start < 0 || start >= self.length) {\n            return nil;\n          }\n\n          result = self[start];\n\n          if (start === 0) {\n            self.shift();\n          } else {\n            self.splice(start, 1);\n          }\n        }\n      end\n    else\n      start = `$coerce_to(index, #{::Integer}, 'to_int')`\n      length = `$coerce_to(length, #{::Integer}, 'to_int')`\n\n      %x{\n        if (length < 0) {\n          return nil;\n        }\n\n        var end = start + length;\n\n        result = #{self[start, length]};\n\n        if (start < 0) {\n          start += self.length;\n        }\n\n        if (start + length > self.length) {\n          length = self.length - start;\n        }\n\n        if (start < self.length && start >= 0) {\n          self.splice(start, length);\n        }\n      }\n    end\n    result\n  end\n\n  def sort(&block)\n    return self unless `self.length > 1`\n\n    %x{\n      if (block === nil) {\n        block = function(a, b) {\n          return #{`a` <=> `b`};\n        };\n      }\n\n      return self.slice().sort(function(x, y) {\n        var ret = block(x, y);\n\n        if (ret === nil) {\n          #{::Kernel.raise ::ArgumentError, \"comparison of #{`x`.inspect} with #{`y`.inspect} failed\"};\n        }\n\n        return #{`ret` > 0} ? 1 : (#{`ret` < 0} ? -1 : 0);\n      });\n    }\n  end\n\n  def sort!(&block)\n    %x{\n      var result;\n\n      if (#{block_given?}) {\n        result = #{`self.slice()`.sort(&block)};\n      }\n      else {\n        result = #{`self.slice()`.sort};\n      }\n\n      self.length = 0;\n      for(var i = 0, length = result.length; i < length; i++) {\n        self.push(result[i]);\n      }\n\n      return self;\n    }\n  end\n\n  def sort_by!(&block)\n    return enum_for(:sort_by!) { size } unless block_given?\n\n    replace sort_by(&block)\n  end\n\n  def take(count)\n    %x{\n      if (count < 0) {\n        #{::Kernel.raise ::ArgumentError};\n      }\n\n      return self.slice(0, count);\n    }\n  end\n\n  def take_while(&block)\n    %x{\n      var result = [];\n\n      for (var i = 0, length = self.length, item, value; i < length; i++) {\n        item = self[i];\n\n        value = block(item);\n\n        if (value === false || value === nil) {\n          return result;\n        }\n\n        result.push(item);\n      }\n\n      return result;\n    }\n  end\n\n  def to_a\n    %x{\n      if (self.$$class === Opal.Array) {\n        return self;\n      }\n      else {\n        return Opal.Array.$new(self);\n      }\n    }\n  end\n\n  def to_ary\n    self\n  end\n\n  def to_h(&block)\n    array = self\n    array = array.map(&block) if block_given?\n\n    %x{\n      var i, len = array.length, ary, key, val, hash = #{{}};\n\n      for (i = 0; i < len; i++) {\n        ary = #{::Opal.coerce_to?(`array[i]`, ::Array, :to_ary)};\n        if (!ary.$$is_array) {\n          #{::Kernel.raise ::TypeError, \"wrong element type #{`ary`.class} at #{`i`} (expected array)\"}\n        }\n        if (ary.length !== 2) {\n          #{::Kernel.raise ::ArgumentError, \"wrong array length at #{`i`} (expected 2, was #{`ary`.length})\"}\n        }\n        key = ary[0];\n        val = ary[1];\n        $hash_put(hash, key, val);\n      }\n\n      return hash;\n    }\n  end\n\n  def transpose\n    return [] if empty?\n\n    result = []\n    max    = nil\n\n    each do |row|\n      row = if ::Array === row\n              row.to_a\n            else\n              `$coerce_to(row, #{::Array}, 'to_ary')`.to_a\n            end\n\n      max ||= `row.length`\n\n      if `row.length` != max\n        ::Kernel.raise ::IndexError, \"element size differs (#{`row.length`} should be #{max})\"\n      end\n\n      `row.length`.times do |i|\n        entry = (result[i] ||= [])\n        entry << row.at(i)\n      end\n    end\n\n    result\n  end\n\n  def union(*arrays)\n    arrays.reduce(uniq) { |a, b| a | b }\n  end\n\n  def uniq(&block)\n    %x{\n      var hash = #{{}}, i, length, item, key;\n\n      if (block === nil) {\n        for (i = 0, length = self.length; i < length; i++) {\n          item = self[i];\n          if ($hash_get(hash, item) === undefined) {\n            $hash_put(hash, item, item);\n          }\n        }\n      }\n      else {\n        for (i = 0, length = self.length; i < length; i++) {\n          item = self[i];\n          key = $yield1(block, item);\n          if ($hash_get(hash, key) === undefined) {\n            $hash_put(hash, key, item);\n          }\n        }\n      }\n\n      return #{`hash`.values};\n    }\n  end\n\n  def uniq!(&block)\n    %x{\n      var original_length = self.length, hash = #{{}}, i, length, item, key;\n\n      for (i = 0, length = original_length; i < length; i++) {\n        item = self[i];\n        key = (block === nil ? item : $yield1(block, item));\n\n        if ($hash_get(hash, key) === undefined) {\n          $hash_put(hash, key, item);\n          continue;\n        }\n\n        self.splice(i, 1);\n        length--;\n        i--;\n      }\n\n      return self.length === original_length ? nil : self;\n    }\n  end\n\n  def unshift(*objects)\n    %x{\n      var selfLength = self.length\n      var objectsLength = objects.length\n      if (objectsLength == 0) return self;\n      var index = selfLength - objectsLength\n      for (var i = 0; i < objectsLength; i++) {\n        self.push(self[index + i])\n      }\n      var len = selfLength - 1\n      while (len - objectsLength >= 0) {\n        self[len] = self[len - objectsLength]\n        len--\n      }\n      for (var j = 0; j < objectsLength; j++) {\n        self[j] = objects[j]\n      }\n      return self;\n    }\n  end\n\n  def values_at(*args)\n    out = []\n\n    args.each do |elem|\n      if elem.is_a? ::Range\n        finish = `#{elem.end} === nil ? -1 : $coerce_to(#{elem.end}, #{::Integer}, 'to_int')`\n        start = `#{elem.begin} === nil ? 0 : $coerce_to(#{elem.begin}, #{::Integer}, 'to_int')`\n\n        %x{\n          if (start < 0) {\n            start = start + self.length;\n            #{next};\n          }\n        }\n\n        %x{\n          if (finish < 0) {\n            finish = finish + self.length;\n          }\n          if (#{elem.exclude_end?} && #{elem.end} !== nil) {\n            finish--;\n          }\n          if (finish < start) {\n            #{next};\n          }\n        }\n\n        start.upto(finish) { |i| out << at(i) }\n      else\n        i = `$coerce_to(elem, #{::Integer}, 'to_int')`\n        out << at(i)\n      end\n    end\n\n    out\n  end\n\n  def zip(*others, &block)\n    %x{\n      var result = [], size = self.length, part, o, i, j, jj;\n\n      for (j = 0, jj = others.length; j < jj; j++) {\n        o = others[j];\n        if (o.$$is_array) {\n          continue;\n        }\n        if (o.$$is_range || o.$$is_enumerator) {\n          others[j] = o.$take(size);\n          continue;\n        }\n        others[j] = #{(\n          ::Opal.coerce_to?(`o`, ::Array, :to_ary) ||\n          ::Opal.coerce_to!(`o`, ::Enumerator, :to_enum, :each)\n        ).to_a};\n      }\n\n      for (i = 0; i < size; i++) {\n        part = [self[i]];\n\n        for (j = 0, jj = others.length; j < jj; j++) {\n          o = others[j][i];\n\n          if (o == null) {\n            o = nil;\n          }\n\n          part[j + 1] = o;\n        }\n\n        result[i] = part;\n      }\n\n      if (block !== nil) {\n        for (i = 0; i < size; i++) {\n          Opal.yield1(block, result[i]);\n        }\n\n        return nil;\n      }\n\n      return result;\n    }\n  end\n\n  def self.inherited(klass)\n    %x{\n      klass.$$prototype.$to_a = function() {\n        return this.slice(0, this.length);\n      }\n    }\n  end\n\n  def instance_variables\n    super.reject { |ivar| `/^@\\d+$/.test(#{ivar})` || ivar == '@length' }\n  end\n\n  def pack(*args)\n    ::Kernel.raise \"To use Array#pack, you must first require 'corelib/array/pack'.\"\n  end\n\n  alias append push\n  alias filter select\n  alias filter! select!\n  alias map collect\n  alias map! collect!\n  alias prepend unshift\n  alias size length\n  alias slice []\n  alias to_s inspect\n\n  ::Opal.pristine singleton_class, :allocate\n  ::Opal.pristine self, :copy_instance_variables, :initialize_dup\nend\n"],"names":["<top (required)>","self","require","<class:Array>","include","Enumerable","to_a","[]","initialize","size","obj","Kernel","warn","Integer::MAX","Integer","raise","ArgumentError","replace","respond_to?","to_ary","try_convert","Opal","coerce_to?","Array","&","other","|","*","join","to_str","+","-","<<","object","<=>","hash","==","object_id","index","length","[]=","value","extra","Range","data","RangeError","inspect","1","IndexError","any?","pattern","assoc","at","bsearch_index","block_given?","enum_for","TypeError","class","bsearch","block","to_proc","cycle","n","block in cycle","block (2 levels) in cycle","nil?","Float::INFINITY","Float","coerce_to!",">","0","enumerator_size","empty?","clear","count","initialize_copy","collect","block in collect","block (2 levels) in collect","collect!","block in collect!","block (2 levels) in collect!","combination","num","block in combination","block (2 levels) in combination","repeated_combination","block in repeated_combination","block (2 levels) in repeated_combination","compact","compact!","concat","others","map","block in concat","block (2 levels) in concat","equal?","dup","each","delete","delete_at","delete_if","block in delete_if","block (2 levels) in delete_if","difference","reduce","arrays","block in difference","a","b","block (2 levels) in difference","dig","idx","item","idxs","drop","number","block in each","block (2 levels) in each","each_index","block in each_index","block (2 levels) in each_index","eql?","fetch","defaults","fill","args","one","two","left","right","exclude_end?","first","flatten","level","flatten!","include?","member","insert","__id__","intersection","block in intersection","block (2 levels) in intersection","intersect?","!","sep","$,","to_s","NoMethodError","new","String","keep_if","block in keep_if","block (2 levels) in keep_if","last","max","min","permutation","block in permutation","block (2 levels) in permutation","perm","used","repeated_permutation","block in repeated_permutation","block (2 levels) in repeated_permutation",">=","**","pop","product","push","rassoc","reject","block in reject","block (2 levels) in reject","reject!","block in reject!","block (2 levels) in reject!","original","reverse","reverse!","reverse_each","block in reverse_each","block (2 levels) in reverse_each","rindex","rotate","rotate!","cnt","ary","<class:self::SampleRandom>","rng","@rng","rand","random","sample","options","o","Hash","SampleRandom","select","block in select","block (2 levels) in select","select!","block in select!","block (2 levels) in select!","shift","shuffle","shuffle!","slice!","result","range","range_start","range_end","start","sort","<","sort!","sort_by!","block in sort_by!","block (2 levels) in sort_by!","sort_by","take","take_while","to_h","array","transpose","block in transpose","row","block (2 levels) in transpose","$ret_or_1","times","i","block (3 levels) in transpose","entry","$writer","union","uniq","block in union","block (2 levels) in union","values","uniq!","unshift","values_at","out","block in values_at","elem","block (2 levels) in values_at","is_a?","finish","end","begin","upto","block (3 levels) in values_at","zip","Enumerator","inherited","klass","instance_variables","block in instance_variables","ivar","block (2 levels) in instance_variables","pack","pristine","singleton_class"],"mappings":"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"}},{"offset":{"line":15703,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/hash.rb"],"sourcesContent":["# helpers: yield1, hash, hash_init, hash_get, hash_put, hash_delete\n\nrequire 'corelib/enumerable'\n\n# ---\n# Internal properties:\n#\n# - $$map         [JS::Object<String => hash-bucket>] the hash table for ordinary keys\n# - $$smap        [JS::Object<String => hash-bucket>] the hash table for string keys\n# - $$keys        [Array<hash-bucket>] the list of all keys\n# - $$proc        [Proc,null,nil] the default proc used for missing keys\n# - hash-bucket   [JS::Object] an element of a linked list that holds hash values, keys are `{key:,key_hash:,value:,next:}`\nclass ::Hash\n  include ::Enumerable\n\n  # Mark all hash instances as valid hashes (used to check keyword args, etc)\n  `self.$$prototype.$$is_hash = true`\n\n  def self.[](*argv)\n    %x{\n      var hash, argc = argv.length, i;\n\n      if (argc === 1) {\n        hash = #{::Opal.coerce_to?(argv[0], ::Hash, :to_hash)};\n        if (hash !== nil) {\n          return #{allocate.merge!(`hash`)};\n        }\n\n        argv = #{::Opal.coerce_to?(argv[0], ::Array, :to_ary)};\n        if (argv === nil) {\n          #{::Kernel.raise ::ArgumentError, 'odd number of arguments for Hash'}\n        }\n\n        argc = argv.length;\n        hash = #{allocate};\n\n        for (i = 0; i < argc; i++) {\n          if (!argv[i].$$is_array) continue;\n          switch(argv[i].length) {\n          case 1:\n            hash.$store(argv[i][0], nil);\n            break;\n          case 2:\n            hash.$store(argv[i][0], argv[i][1]);\n            break;\n          default:\n            #{::Kernel.raise ::ArgumentError, \"invalid number of elements (#{`argv[i].length`} for 1..2)\"}\n          }\n        }\n\n        return hash;\n      }\n\n      if (argc % 2 !== 0) {\n        #{::Kernel.raise ::ArgumentError, 'odd number of arguments for Hash'}\n      }\n\n      hash = #{allocate};\n\n      for (i = 0; i < argc; i += 2) {\n        hash.$store(argv[i], argv[i + 1]);\n      }\n\n      return hash;\n    }\n  end\n\n  def self.allocate\n    %x{\n      var hash = new self.$$constructor();\n\n      $hash_init(hash);\n\n      hash.$$none = nil;\n      hash.$$proc = nil;\n\n      return hash;\n    }\n  end\n\n  def self.try_convert(obj)\n    ::Opal.coerce_to?(obj, ::Hash, :to_hash)\n  end\n\n  def initialize(defaults = undefined, &block)\n    %x{\n      if (defaults !== undefined && block !== nil) {\n        #{::Kernel.raise ::ArgumentError, 'wrong number of arguments (1 for 0)'}\n      }\n      self.$$none = (defaults === undefined ? nil : defaults);\n      self.$$proc = block;\n\n      return self;\n    }\n  end\n\n  def ==(other)\n    %x{\n      if (self === other) {\n        return true;\n      }\n\n      if (!other.$$is_hash) {\n        return false;\n      }\n\n      if (self.$$keys.length !== other.$$keys.length) {\n        return false;\n      }\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, other_value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n          other_value = other.$$smap[key];\n        } else {\n          value = key.value;\n          other_value = $hash_get(other, key.key);\n        }\n\n        if (other_value === undefined || !value['$eql?'](other_value)) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  end\n\n  def >=(other)\n    other = ::Opal.coerce_to!(other, ::Hash, :to_hash)\n\n    %x{\n      if (self.$$keys.length < other.$$keys.length) {\n        return false\n      }\n    }\n\n    result = true\n\n    other.each do |other_key, other_val|\n      val = fetch(other_key, `null`)\n\n      %x{\n        if (val == null || val !== other_val) {\n          result = false;\n          return;\n        }\n      }\n    end\n\n    result\n  end\n\n  def >(other)\n    other = ::Opal.coerce_to!(other, ::Hash, :to_hash)\n\n    %x{\n      if (self.$$keys.length <= other.$$keys.length) {\n        return false\n      }\n    }\n\n    self >= other\n  end\n\n  def <(other)\n    other = ::Opal.coerce_to!(other, ::Hash, :to_hash)\n    other > self\n  end\n\n  def <=(other)\n    other = ::Opal.coerce_to!(other, ::Hash, :to_hash)\n    other >= self\n  end\n\n  def [](key)\n    %x{\n      var value = $hash_get(self, key);\n\n      if (value !== undefined) {\n        return value;\n      }\n\n      return self.$default(key);\n    }\n  end\n\n  def []=(key, value)\n    %x{\n      $hash_put(self, key, value);\n      return value;\n    }\n  end\n\n  def assoc(object)\n    %x{\n      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          if (#{`key` == object}) {\n            return [key, self.$$smap[key]];\n          }\n        } else {\n          if (#{`key.key` == object}) {\n            return [key.key, key.value];\n          }\n        }\n      }\n\n      return nil;\n    }\n  end\n\n  def clear\n    %x{\n      $hash_init(self);\n      return self;\n    }\n  end\n\n  def clone\n    %x{\n      var hash = new self.$$class();\n\n      $hash_init(hash);\n      Opal.hash_clone(self, hash);\n\n      return hash;\n    }\n  end\n\n  def compact\n    %x{\n      var hash = $hash();\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        if (value !== nil) {\n          $hash_put(hash, key, value);\n        }\n      }\n\n      return hash;\n    }\n  end\n\n  def compact!\n    %x{\n      var changes_were_made = false;\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        if (value === nil) {\n          if ($hash_delete(self, key) !== undefined) {\n            changes_were_made = true;\n            length--;\n            i--;\n          }\n        }\n      }\n\n      return changes_were_made ? self : nil;\n    }\n  end\n\n  def compare_by_identity\n    %x{\n      var i, ii, key, keys = self.$$keys, identity_hash;\n\n      if (self.$$by_identity) return self;\n      if (self.$$keys.length === 0) {\n        self.$$by_identity = true\n        return self;\n      }\n\n      identity_hash = #{ {}.compare_by_identity };\n      for(i = 0, ii = keys.length; i < ii; i++) {\n        key = keys[i];\n        if (!key.$$is_string) key = key.key;\n        $hash_put(identity_hash, key, $hash_get(self, key));\n      }\n\n      self.$$by_identity = true;\n      self.$$map = identity_hash.$$map;\n      self.$$smap = identity_hash.$$smap;\n      return self;\n    }\n  end\n\n  def compare_by_identity?\n    `self.$$by_identity === true`\n  end\n\n  def default(key = undefined)\n    %x{\n      if (key !== undefined && self.$$proc !== nil && self.$$proc !== undefined) {\n        return self.$$proc.$call(self, key);\n      }\n      if (self.$$none === undefined) {\n        return nil;\n      }\n      return self.$$none;\n    }\n  end\n\n  def default=(object)\n    %x{\n      self.$$proc = nil;\n      self.$$none = object;\n\n      return object;\n    }\n  end\n\n  def default_proc\n    %x{\n      if (self.$$proc !== undefined) {\n        return self.$$proc;\n      }\n      return nil;\n    }\n  end\n\n  def default_proc=(default_proc)\n    %x{\n      var proc = default_proc;\n\n      if (proc !== nil) {\n        proc = #{::Opal.coerce_to!(`proc`, ::Proc, :to_proc)};\n\n        if (#{`proc`.lambda?} && #{`proc`.arity.abs} !== 2) {\n          #{::Kernel.raise ::TypeError, 'default_proc takes two arguments'};\n        }\n      }\n\n      self.$$none = nil;\n      self.$$proc = proc;\n\n      return default_proc;\n    }\n  end\n\n  def delete(key, &block)\n    %x{\n      var value = $hash_delete(self, key);\n\n      if (value !== undefined) {\n        return value;\n      }\n\n      if (block !== nil) {\n        return #{yield key};\n      }\n\n      return nil;\n    }\n  end\n\n  def delete_if(&block)\n    return enum_for(:delete_if) { size } unless block\n\n    %x{\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        obj = block(key, value);\n\n        if (obj !== false && obj !== nil) {\n          if ($hash_delete(self, key) !== undefined) {\n            length--;\n            i--;\n          }\n        }\n      }\n\n      return self;\n    }\n  end\n\n  def dig(key, *keys)\n    item = self[key]\n\n    %x{\n      if (item === nil || keys.length === 0) {\n        return item;\n      }\n    }\n\n    unless item.respond_to?(:dig)\n      ::Kernel.raise ::TypeError, \"#{item.class} does not have #dig method\"\n    end\n\n    item.dig(*keys)\n  end\n\n  def each(&block)\n    return enum_for(:each) { size } unless block\n\n    %x{\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        $yield1(block, [key, value]);\n      }\n\n      return self;\n    }\n  end\n\n  def each_key(&block)\n    return enum_for(:each_key) { size } unless block\n\n    %x{\n      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {\n        key = keys[i];\n\n        block(key.$$is_string ? key : key.key);\n      }\n\n      return self;\n    }\n  end\n\n  def each_value(&block)\n    return enum_for(:each_value) { size } unless block\n\n    %x{\n      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {\n        key = keys[i];\n\n        block(key.$$is_string ? self.$$smap[key] : key.value);\n      }\n\n      return self;\n    }\n  end\n\n  def empty?\n    `self.$$keys.length === 0`\n  end\n\n  def except(*keys)\n    dup.except!(*keys)\n  end\n\n  def except!(*keys)\n    keys.each { |key| delete(key) }\n    self\n  end\n\n  def fetch(key, defaults = undefined, &block)\n    %x{\n      var value = $hash_get(self, key);\n\n      if (value !== undefined) {\n        return value;\n      }\n\n      if (block !== nil) {\n        return block(key);\n      }\n\n      if (defaults !== undefined) {\n        return defaults;\n      }\n    }\n\n    ::Kernel.raise ::KeyError.new(\"key not found: #{key.inspect}\", key: key, receiver: self)\n  end\n\n  def fetch_values(*keys, &block)\n    keys.map { |key| fetch(key, &block) }\n  end\n\n  def flatten(level = 1)\n    level = ::Opal.coerce_to!(level, ::Integer, :to_int)\n\n    %x{\n      var result = [];\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        result.push(key);\n\n        if (value.$$is_array) {\n          if (level === 1) {\n            result.push(value);\n            continue;\n          }\n\n          result = result.concat(#{`value`.flatten(`level - 2`)});\n          continue;\n        }\n\n        result.push(value);\n      }\n\n      return result;\n    }\n  end\n\n  def has_key?(key)\n    `$hash_get(self, key) !== undefined`\n  end\n\n  def has_value?(value)\n    %x{\n      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {\n        key = keys[i];\n\n        if (#{`(key.$$is_string ? self.$$smap[key] : key.value)` == value}) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  end\n\n  def hash\n    %x{\n      var top = (Opal.hash_ids === undefined),\n          hash_id = self.$object_id(),\n          result = ['Hash'],\n          key, item;\n\n      try {\n        if (top) {\n          Opal.hash_ids = Object.create(null);\n        }\n\n        if (Opal[hash_id]) {\n          return 'self';\n        }\n\n        for (key in Opal.hash_ids) {\n          item = Opal.hash_ids[key];\n          if (#{eql?(`item`)}) {\n            return 'self';\n          }\n        }\n\n        Opal.hash_ids[hash_id] = self;\n\n        for (var i = 0, keys = self.$$keys, length = keys.length; i < length; i++) {\n          key = keys[i];\n\n          if (key.$$is_string) {\n            result.push([key, self.$$smap[key].$hash()]);\n          } else {\n            result.push([key.key_hash, key.value.$hash()]);\n          }\n        }\n\n        return result.sort().join();\n\n      } finally {\n        if (top) {\n          Opal.hash_ids = undefined;\n        }\n      }\n    }\n  end\n\n  def index(object)\n    %x{\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        if (#{`value` == object}) {\n          return key;\n        }\n      }\n\n      return nil;\n    }\n  end\n\n  def indexes(*args)\n    %x{\n      var result = [];\n\n      for (var i = 0, length = args.length, key, value; i < length; i++) {\n        key = args[i];\n        value = $hash_get(self, key);\n\n        if (value === undefined) {\n          result.push(#{default});\n          continue;\n        }\n\n        result.push(value);\n      }\n\n      return result;\n    }\n  end\n\n  `var inspect_ids`\n\n  def inspect\n    %x{\n      var top = (inspect_ids === undefined),\n          hash_id = self.$object_id(),\n          result = [];\n    }\n\n    begin\n      %x{\n        if (top) {\n          inspect_ids = {};\n        }\n\n        if (inspect_ids.hasOwnProperty(hash_id)) {\n          return '{...}';\n        }\n\n        inspect_ids[hash_id] = true;\n\n        for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n          key = keys[i];\n\n          if (key.$$is_string) {\n            value = self.$$smap[key];\n          } else {\n            value = key.value;\n            key = key.key;\n          }\n\n          key = #{Opal.inspect(`key`)}\n          value = #{Opal.inspect(`value`)}\n\n          result.push(key + '=>' + value);\n        }\n\n        return '{' + result.join(', ') + '}';\n      }\n      nil\n    ensure\n      `if (top) inspect_ids = undefined`\n    end\n  end\n\n  def invert\n    %x{\n      var hash = $hash();\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        $hash_put(hash, value, key);\n      }\n\n      return hash;\n    }\n  end\n\n  def keep_if(&block)\n    return enum_for(:keep_if) { size } unless block\n\n    %x{\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        obj = block(key, value);\n\n        if (obj === false || obj === nil) {\n          if ($hash_delete(self, key) !== undefined) {\n            length--;\n            i--;\n          }\n        }\n      }\n\n      return self;\n    }\n  end\n\n  def keys\n    %x{\n      var result = [];\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          result.push(key);\n        } else {\n          result.push(key.key);\n        }\n      }\n\n      return result;\n    }\n  end\n\n  def length\n    `self.$$keys.length`\n  end\n\n  def merge(*others, &block)\n    dup.merge!(*others, &block)\n  end\n\n  def merge!(*others, &block)\n    %x{\n      var i, j, other, other_keys, length, key, value, other_value;\n      for (i = 0; i < others.length; ++i) {\n        other = #{::Opal.coerce_to!(`others[i]`, ::Hash, :to_hash)};\n        other_keys = other.$$keys, length = other_keys.length;\n\n        if (block === nil) {\n          for (j = 0; j < length; j++) {\n            key = other_keys[j];\n\n            if (key.$$is_string) {\n              other_value = other.$$smap[key];\n            } else {\n              other_value = key.value;\n              key = key.key;\n            }\n\n            $hash_put(self, key, other_value);\n          }\n        } else {\n          for (j = 0; j < length; j++) {\n            key = other_keys[j];\n\n            if (key.$$is_string) {\n              other_value = other.$$smap[key];\n            } else {\n              other_value = key.value;\n              key = key.key;\n            }\n\n            value = $hash_get(self, key);\n\n            if (value === undefined) {\n              $hash_put(self, key, other_value);\n              continue;\n            }\n\n            $hash_put(self, key, block(key, value, other_value));\n          }\n        }\n      }\n\n      return self;\n    }\n  end\n\n  def rassoc(object)\n    %x{\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        if (#{`value` == object}) {\n          return [key, value];\n        }\n      }\n\n      return nil;\n    }\n  end\n\n  def rehash\n    %x{\n      Opal.hash_rehash(self);\n      return self;\n    }\n  end\n\n  def reject(&block)\n    return enum_for(:reject) { size } unless block\n\n    %x{\n      var hash = $hash();\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        obj = block(key, value);\n\n        if (obj === false || obj === nil) {\n          $hash_put(hash, key, value);\n        }\n      }\n\n      return hash;\n    }\n  end\n\n  def reject!(&block)\n    return enum_for(:reject!) { size } unless block\n\n    %x{\n      var changes_were_made = false;\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        obj = block(key, value);\n\n        if (obj !== false && obj !== nil) {\n          if ($hash_delete(self, key) !== undefined) {\n            changes_were_made = true;\n            length--;\n            i--;\n          }\n        }\n      }\n\n      return changes_were_made ? self : nil;\n    }\n  end\n\n  def replace(other)\n    other = ::Opal.coerce_to!(other, ::Hash, :to_hash)\n\n    %x{\n      $hash_init(self);\n\n      for (var i = 0, other_keys = other.$$keys, length = other_keys.length, key, value, other_value; i < length; i++) {\n        key = other_keys[i];\n\n        if (key.$$is_string) {\n          other_value = other.$$smap[key];\n        } else {\n          other_value = key.value;\n          key = key.key;\n        }\n\n        $hash_put(self, key, other_value);\n      }\n    }\n\n    if other.default_proc\n      self.default_proc = other.default_proc\n    else\n      self.default = other.default\n    end\n\n    self\n  end\n\n  def select(&block)\n    return enum_for(:select) { size } unless block\n\n    %x{\n      var hash = $hash();\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        obj = block(key, value);\n\n        if (obj !== false && obj !== nil) {\n          $hash_put(hash, key, value);\n        }\n      }\n\n      return hash;\n    }\n  end\n\n  def select!(&block)\n    return enum_for(:select!) { size } unless block\n\n    %x{\n      var result = nil;\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        obj = block(key, value);\n\n        if (obj === false || obj === nil) {\n          if ($hash_delete(self, key) !== undefined) {\n            length--;\n            i--;\n          }\n          result = self;\n        }\n      }\n\n      return result;\n    }\n  end\n\n  def shift\n    %x{\n      var keys = self.$$keys,\n          key;\n\n      if (keys.length > 0) {\n        key = keys[0];\n\n        key = key.$$is_string ? key : key.key;\n\n        return [key, $hash_delete(self, key)];\n      }\n\n      return self.$default(nil);\n    }\n  end\n\n  def slice(*keys)\n    %x{\n      var result = $hash();\n\n      for (var i = 0, length = keys.length; i < length; i++) {\n        var key = keys[i], value = $hash_get(self, key);\n\n        if (value !== undefined) {\n          $hash_put(result, key, value);\n        }\n      }\n\n      return result;\n    }\n  end\n\n  def to_a\n    %x{\n      var result = [];\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        result.push([key, value]);\n      }\n\n      return result;\n    }\n  end\n\n  def to_h(&block)\n    return map(&block).to_h if block_given?\n\n    %x{\n      if (self.$$class === Opal.Hash) {\n        return self;\n      }\n\n      var hash = new Opal.Hash();\n\n      $hash_init(hash);\n      Opal.hash_clone(self, hash);\n\n      return hash;\n    }\n  end\n\n  def to_hash\n    self\n  end\n\n  def to_proc\n    proc do |key = undefined|\n      %x{\n        if (key == null) {\n          #{::Kernel.raise ::ArgumentError, 'no key given'}\n        }\n      }\n\n      self[key]\n    end\n  end\n\n  def transform_keys(&block)\n    return enum_for(:transform_keys) { size } unless block\n\n    %x{\n      var result = $hash();\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        key = $yield1(block, key);\n\n        $hash_put(result, key, value);\n      }\n\n      return result;\n    }\n  end\n\n  def transform_keys!(&block)\n    return enum_for(:transform_keys!) { size } unless block\n\n    %x{\n      var keys = Opal.slice.call(self.$$keys),\n          i, length = keys.length, key, value, new_key;\n\n      for (i = 0; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        new_key = $yield1(block, key);\n\n        $hash_delete(self, key);\n        $hash_put(self, new_key, value);\n      }\n\n      return self;\n    }\n  end\n\n  def transform_values(&block)\n    return enum_for(:transform_values) { size } unless block\n\n    %x{\n      var result = $hash();\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        value = $yield1(block, value);\n\n        $hash_put(result, key, value);\n      }\n\n      return result;\n    }\n  end\n\n  def transform_values!(&block)\n    return enum_for(:transform_values!) { size } unless block\n\n    %x{\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        value = $yield1(block, value);\n\n        $hash_put(self, key, value);\n      }\n\n      return self;\n    }\n  end\n\n  def values\n    %x{\n      var result = [];\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          result.push(self.$$smap[key]);\n        } else {\n          result.push(key.value);\n        }\n      }\n\n      return result;\n    }\n  end\n\n  alias dup clone\n  alias each_pair each\n  alias eql? ==\n  alias filter select\n  alias filter! select!\n  alias include? has_key?\n  alias indices indexes\n  alias key index\n  alias key? has_key?\n  alias member? has_key?\n  alias size length\n  alias store []=\n  alias to_s inspect\n  alias update merge!\n  alias value? has_value?\n  alias values_at indexes\nend\n"],"names":["<top (required)>","self","require","<class:Hash>","include","Enumerable","[]","Opal","coerce_to?","argv","0","Hash","allocate","merge!","Array","Kernel","raise","ArgumentError","try_convert","obj","initialize","defaults","==","other",">=","coerce_to!","result","each","block in >=","other_key","other_val","block (2 levels) in >=","val","fetch",">","<","<=","key","[]=","value","assoc","object","clear","clone","compact","compact!","compare_by_identity","compare_by_identity?","default","default=","default_proc","default_proc=","Proc","lambda?","arity","abs","TypeError","delete","delete_if","block","enum_for","block in delete_if","block (2 levels) in delete_if","size","dig","item","respond_to?","class","keys","block in each","block (2 levels) in each","each_key","block in each_key","block (2 levels) in each_key","each_value","block in each_value","block (2 levels) in each_value","empty?","except","except!","dup","block in except!","block (2 levels) in except!","KeyError","new","inspect","fetch_values","map","block in fetch_values","block (2 levels) in fetch_values","to_proc","flatten","level","1","Integer","has_key?","has_value?","hash","eql?","index","indexes","invert","keep_if","block in keep_if","block (2 levels) in keep_if","length","merge","others","rassoc","rehash","reject","block in reject","block (2 levels) in reject","reject!","block in reject!","block (2 levels) in reject!","replace","$writer","-","select","block in select","block (2 levels) in select","select!","block in select!","block (2 levels) in select!","shift","slice","to_a","to_h","block_given?","to_hash","proc","block in to_proc","block (2 levels) in to_proc","transform_keys","block in transform_keys","block (2 levels) in transform_keys","transform_keys!","block in transform_keys!","block (2 levels) in transform_keys!","transform_values","block in transform_values","block (2 levels) in transform_values","transform_values!","block in transform_values!","block (2 levels) in transform_values!","values"],"mappings":"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"}},{"offset":{"line":17195,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/number.rb"],"sourcesContent":["require 'corelib/numeric'\n\nclass ::Number < ::Numeric\n  ::Opal.bridge(`Number`, self)\n  `Opal.prop(self.$$prototype, '$$is_number', true)`\n  `self.$$is_number_class = true`\n\n  class << self\n    def allocate\n      ::Kernel.raise ::TypeError, \"allocator undefined for #{name}\"\n    end\n\n    undef :new\n  end\n\n  def coerce(other)\n    %x{\n      if (other === nil) {\n        #{::Kernel.raise ::TypeError, \"can't convert #{other.class} into Float\"};\n      }\n      else if (other.$$is_string) {\n        return [#{::Kernel.Float(other)}, self];\n      }\n      else if (#{other.respond_to?(:to_f)}) {\n        return [#{::Opal.coerce_to!(other, ::Float, :to_f)}, self];\n      }\n      else if (other.$$is_number) {\n        return [other, self];\n      }\n      else {\n        #{::Kernel.raise ::TypeError, \"can't convert #{other.class} into Float\"};\n      }\n    }\n  end\n\n  def __id__\n    `(self * 2) + 1`\n  end\n\n  def +(other)\n    %x{\n      if (other.$$is_number) {\n        return self + other;\n      }\n      else {\n        return #{__coerced__ :+, other};\n      }\n    }\n  end\n\n  def -(other)\n    %x{\n      if (other.$$is_number) {\n        return self - other;\n      }\n      else {\n        return #{__coerced__ :-, other};\n      }\n    }\n  end\n\n  def *(other)\n    %x{\n      if (other.$$is_number) {\n        return self * other;\n      }\n      else {\n        return #{__coerced__ :*, other};\n      }\n    }\n  end\n\n  def /(other)\n    %x{\n      if (other.$$is_number) {\n        return self / other;\n      }\n      else {\n        return #{__coerced__ :/, other};\n      }\n    }\n  end\n\n  def %(other)\n    %x{\n      if (other.$$is_number) {\n        if (other == -Infinity) {\n          return other;\n        }\n        else if (other == 0) {\n          #{::Kernel.raise ::ZeroDivisionError, 'divided by 0'};\n        }\n        else if (other < 0 || self < 0) {\n          return (self % other + other) % other;\n        }\n        else {\n          return self % other;\n        }\n      }\n      else {\n        return #{__coerced__ :%, other};\n      }\n    }\n  end\n\n  def &(other)\n    %x{\n      if (other.$$is_number) {\n        return self & other;\n      }\n      else {\n        return #{__coerced__ :&, other};\n      }\n    }\n  end\n\n  def |(other)\n    %x{\n      if (other.$$is_number) {\n        return self | other;\n      }\n      else {\n        return #{__coerced__ :|, other};\n      }\n    }\n  end\n\n  def ^(other)\n    %x{\n      if (other.$$is_number) {\n        return self ^ other;\n      }\n      else {\n        return #{__coerced__ :^, other};\n      }\n    }\n  end\n\n  def <(other)\n    %x{\n      if (other.$$is_number) {\n        return self < other;\n      }\n      else {\n        return #{__coerced__ :<, other};\n      }\n    }\n  end\n\n  def <=(other)\n    %x{\n      if (other.$$is_number) {\n        return self <= other;\n      }\n      else {\n        return #{__coerced__ :<=, other};\n      }\n    }\n  end\n\n  def >(other)\n    %x{\n      if (other.$$is_number) {\n        return self > other;\n      }\n      else {\n        return #{__coerced__ :>, other};\n      }\n    }\n  end\n\n  def >=(other)\n    %x{\n      if (other.$$is_number) {\n        return self >= other;\n      }\n      else {\n        return #{__coerced__ :>=, other};\n      }\n    }\n  end\n\n  # Compute the result of the spaceship operator inside its own function so it\n  # can be optimized despite a try/finally construct.\n  %x{\n    var spaceship_operator = function(self, other) {\n      if (other.$$is_number) {\n        if (isNaN(self) || isNaN(other)) {\n          return nil;\n        }\n\n        if (self > other) {\n          return 1;\n        } else if (self < other) {\n          return -1;\n        } else {\n          return 0;\n        }\n      }\n      else {\n        return #{__coerced__ :<=>, `other`};\n      }\n    }\n  }\n\n  def <=>(other)\n    `spaceship_operator(self, other)`\n  rescue ::ArgumentError\n    nil\n  end\n\n  def <<(count)\n    count = ::Opal.coerce_to! count, ::Integer, :to_int\n\n    `#{count} > 0 ? self << #{count} : self >> -#{count}`\n  end\n\n  def >>(count)\n    count = ::Opal.coerce_to! count, ::Integer, :to_int\n\n    `#{count} > 0 ? self >> #{count} : self << -#{count}`\n  end\n\n  def [](bit)\n    bit = ::Opal.coerce_to! bit, ::Integer, :to_int\n\n    %x{\n      if (#{bit} < 0) {\n        return 0;\n      }\n      if (#{bit} >= 32) {\n        return #{ self } < 0 ? 1 : 0;\n      }\n      return (self >> #{bit}) & 1;\n    }\n  end\n\n  def +@\n    `+self`\n  end\n\n  def -@\n    `-self`\n  end\n\n  def ~\n    `~self`\n  end\n\n  def **(other)\n    if ::Integer === other\n      if !(::Integer === self) || other > 0\n        `Math.pow(self, other)`\n      else\n        ::Rational.new(self, 1)**other\n      end\n    elsif self < 0 && (::Float === other || ::Rational === other)\n      ::Complex.new(self, 0)**other.to_f\n    elsif `other.$$is_number != null`\n      `Math.pow(self, other)`\n    else\n      __coerced__ :**, other\n    end\n  end\n\n  def ===(other)\n    %x{\n      if (other.$$is_number) {\n        return self.valueOf() === other.valueOf();\n      }\n      else if (#{other.respond_to? :==}) {\n        return #{other == self};\n      }\n      else {\n        return false;\n      }\n    }\n  end\n\n  def ==(other)\n    %x{\n      if (other.$$is_number) {\n        return self.valueOf() === other.valueOf();\n      }\n      else if (#{other.respond_to? :==}) {\n        return #{other == self};\n      }\n      else {\n        return false;\n      }\n    }\n  end\n\n  def abs\n    `Math.abs(self)`\n  end\n\n  def abs2\n    `Math.abs(self * self)`\n  end\n\n  def allbits?(mask)\n    mask = ::Opal.coerce_to! mask, ::Integer, :to_int\n    `(self & mask) == mask`\n  end\n\n  def anybits?(mask)\n    mask = ::Opal.coerce_to! mask, ::Integer, :to_int\n    `(self & mask) !== 0`\n  end\n\n  def angle\n    return self if nan?\n\n    %x{\n      if (self == 0) {\n        if (1 / self > 0) {\n          return 0;\n        }\n        else {\n          return Math.PI;\n        }\n      }\n      else if (self < 0) {\n        return Math.PI;\n      }\n      else {\n        return 0;\n      }\n    }\n  end\n\n  def bit_length\n    unless ::Integer === self\n      ::Kernel.raise ::NoMethodError.new(\"undefined method `bit_length` for #{self}:Float\", 'bit_length')\n    end\n\n    %x{\n      if (self === 0 || self === -1) {\n        return 0;\n      }\n\n      var result = 0,\n          value  = self < 0 ? ~self : self;\n\n      while (value != 0) {\n        result   += 1;\n        value  >>>= 1;\n      }\n\n      return result;\n    }\n  end\n\n  def ceil(ndigits = 0)\n    %x{\n      var f = #{to_f};\n\n      if (f % 1 === 0 && ndigits >= 0) {\n        return f;\n      }\n\n      var factor = Math.pow(10, ndigits),\n          result = Math.ceil(f * factor) / factor;\n\n      if (f % 1 === 0) {\n        result = Math.round(result);\n      }\n\n      return result;\n    }\n  end\n\n  def chr(encoding = undefined)\n    `Opal.enc(String.fromCharCode(self), encoding || \"BINARY\")`\n  end\n\n  def denominator\n    if nan? || infinite?\n      1\n    else\n      super\n    end\n  end\n\n  def downto(stop, &block)\n    unless block_given?\n      return enum_for(:downto, stop) do\n        ::Kernel.raise ::ArgumentError, \"comparison of #{self.class} with #{stop.class} failed\" unless ::Numeric === stop\n        stop > self ? 0 : self - stop + 1\n      end\n    end\n\n    %x{\n      if (!stop.$$is_number) {\n        #{::Kernel.raise ::ArgumentError, \"comparison of #{self.class} with #{stop.class} failed\"}\n      }\n      for (var i = self; i >= stop; i--) {\n        block(i);\n      }\n    }\n\n    self\n  end\n\n  def equal?(other)\n    self == other || `isNaN(self) && isNaN(other)`\n  end\n\n  def even?\n    `self % 2 === 0`\n  end\n\n  def floor(ndigits = 0)\n    %x{\n      var f = #{to_f};\n\n      if (f % 1 === 0 && ndigits >= 0) {\n        return f;\n      }\n\n      var factor = Math.pow(10, ndigits),\n          result = Math.floor(f * factor) / factor;\n\n      if (f % 1 === 0) {\n        result = Math.round(result);\n      }\n\n      return result;\n    }\n  end\n\n  def gcd(other)\n    unless ::Integer === other\n      ::Kernel.raise ::TypeError, 'not an integer'\n    end\n\n    %x{\n      var min = Math.abs(self),\n          max = Math.abs(other);\n\n      while (min > 0) {\n        var tmp = min;\n\n        min = max % min;\n        max = tmp;\n      }\n\n      return max;\n    }\n  end\n\n  def gcdlcm(other)\n    [gcd(other), lcm(other)]\n  end\n\n  def integer?\n    `self % 1 === 0`\n  end\n\n  def is_a?(klass)\n    return true if klass == ::Integer && ::Integer === self\n    return true if klass == ::Integer && ::Integer === self\n    return true if klass == ::Float && ::Float === self\n\n    super\n  end\n\n  def instance_of?(klass)\n    return true if klass == ::Integer && ::Integer === self\n    return true if klass == ::Integer && ::Integer === self\n    return true if klass == ::Float && ::Float === self\n\n    super\n  end\n\n  def lcm(other)\n    unless ::Integer === other\n      ::Kernel.raise ::TypeError, 'not an integer'\n    end\n\n    %x{\n      if (self == 0 || other == 0) {\n        return 0;\n      }\n      else {\n        return Math.abs(self * other / #{gcd(other)});\n      }\n    }\n  end\n\n  def next\n    `self + 1`\n  end\n\n  def nobits?(mask)\n    mask = ::Opal.coerce_to! mask, ::Integer, :to_int\n    `(self & mask) == 0`\n  end\n\n  def nonzero?\n    `self == 0 ? nil : self`\n  end\n\n  def numerator\n    if nan? || infinite?\n      self\n    else\n      super\n    end\n  end\n\n  def odd?\n    `self % 2 !== 0`\n  end\n\n  def ord\n    self\n  end\n\n  def pow(b, m = undefined)\n    %x{\n      if (self == 0) {\n        #{::Kernel.raise ::ZeroDivisionError, 'divided by 0'}\n      }\n\n      if (m === undefined) {\n        return #{self**b};\n      } else {\n        if (!(#{::Integer === b})) {\n          #{::Kernel.raise ::TypeError, 'Integer#pow() 2nd argument not allowed unless a 1st argument is integer'}\n        }\n\n        if (b < 0) {\n          #{::Kernel.raise ::TypeError, 'Integer#pow() 1st argument cannot be negative when 2nd argument specified'}\n        }\n\n        if (!(#{::Integer === m})) {\n          #{::Kernel.raise ::TypeError, 'Integer#pow() 2nd argument not allowed unless all arguments are integers'}\n        }\n\n        if (m === 0) {\n          #{::Kernel.raise ::ZeroDivisionError, 'divided by 0'}\n        }\n\n        return #{(self**b) % m}\n      }\n    }\n  end\n\n  def pred\n    `self - 1`\n  end\n\n  def quo(other)\n    if ::Integer === self\n      super\n    else\n      self / other\n    end\n  end\n\n  def rationalize(eps = undefined)\n    %x{\n      if (arguments.length > 1) {\n        #{::Kernel.raise ::ArgumentError, \"wrong number of arguments (#{`arguments.length`} for 0..1)\"};\n      }\n    }\n\n    if ::Integer === self\n      ::Rational.new(self, 1)\n    elsif infinite?\n      ::Kernel.raise ::FloatDomainError, 'Infinity'\n    elsif nan?\n      ::Kernel.raise ::FloatDomainError, 'NaN'\n    elsif `eps == null`\n      f, n  = ::Math.frexp self\n      f     = ::Math.ldexp(f, ::Float::MANT_DIG).to_i\n      n    -= ::Float::MANT_DIG\n\n      ::Rational.new(2 * f, 1 << (1 - n)).rationalize(::Rational.new(1, 1 << (1 - n)))\n    else\n      to_r.rationalize(eps)\n    end\n  end\n\n  def remainder(y)\n    self - y * (self / y).truncate\n  end\n\n  def round(ndigits = undefined)\n    if ::Integer === self\n      if `ndigits == null`\n        return self\n      end\n\n      if ::Float === ndigits && ndigits.infinite?\n        ::Kernel.raise ::RangeError, 'Infinity'\n      end\n\n      ndigits = ::Opal.coerce_to!(ndigits, ::Integer, :to_int)\n\n      if ndigits < ::Integer::MIN\n        ::Kernel.raise ::RangeError, 'out of bounds'\n      end\n\n      if `ndigits >= 0`\n        return self\n      end\n\n      ndigits = -ndigits\n\n      %x{\n        if (0.415241 * ndigits - 0.125 > #{size}) {\n          return 0;\n        }\n\n        var f = Math.pow(10, ndigits),\n            x = Math.floor((Math.abs(self) + f / 2) / f) * f;\n\n        return self < 0 ? -x : x;\n      }\n    else\n      if nan? && `ndigits == null`\n        ::Kernel.raise ::FloatDomainError, 'NaN'\n      end\n\n      ndigits = ::Opal.coerce_to!(`ndigits || 0`, ::Integer, :to_int)\n\n      if ndigits <= 0\n        if nan?\n          ::Kernel.raise ::RangeError, 'NaN'\n        elsif infinite?\n          ::Kernel.raise ::FloatDomainError, 'Infinity'\n        end\n      elsif ndigits == 0\n        return `Math.round(self)`\n      elsif nan? || infinite?\n        return self\n      end\n\n      _, exp = ::Math.frexp(self)\n\n      if ndigits >= (::Float::DIG + 2) - (exp > 0 ? exp / 4 : exp / 3 - 1)\n        return self\n      end\n\n      if ndigits < -(exp > 0 ? exp / 3 + 1 : exp / 4)\n        return 0\n      end\n\n      `Math.round(self * Math.pow(10, ndigits)) / Math.pow(10, ndigits)`\n    end\n  end\n\n  def times(&block)\n    return enum_for(:times) { self } unless block\n\n    %x{\n      for (var i = 0; i < self; i++) {\n        block(i);\n      }\n    }\n\n    self\n  end\n\n  def to_f\n    self\n  end\n\n  def to_i\n    `self < 0 ? Math.ceil(self) : Math.floor(self)`\n  end\n\n  def to_r\n    if ::Integer === self\n      ::Rational.new(self, 1)\n    else\n      f, e  = ::Math.frexp(self)\n      f     = ::Math.ldexp(f, ::Float::MANT_DIG).to_i\n      e    -= ::Float::MANT_DIG\n\n      (f * (::Float::RADIX**e)).to_r\n    end\n  end\n\n  def to_s(base = 10)\n    base = ::Opal.coerce_to! base, ::Integer, :to_int\n\n    if base < 2 || base > 36\n      ::Kernel.raise ::ArgumentError, \"invalid radix #{base}\"\n    end\n\n    # Don't lose the negative zero\n    if self == 0 && `1/self === -Infinity`\n      return '-0.0'\n    end\n\n    `self.toString(base)`\n  end\n\n  def truncate(ndigits = 0)\n    %x{\n      var f = #{to_f};\n\n      if (f % 1 === 0 && ndigits >= 0) {\n        return f;\n      }\n\n      var factor = Math.pow(10, ndigits),\n          result = parseInt(f * factor, 10) / factor;\n\n      if (f % 1 === 0) {\n        result = Math.round(result);\n      }\n\n      return result;\n    }\n  end\n\n  def digits(base = 10)\n    if self < 0\n      ::Kernel.raise ::Math::DomainError, 'out of domain'\n    end\n\n    base = ::Opal.coerce_to! base, ::Integer, :to_int\n\n    if base < 2\n      ::Kernel.raise ::ArgumentError, \"invalid radix #{base}\"\n    end\n\n    %x{\n      if (self != parseInt(self)) #{::Kernel.raise ::NoMethodError, \"undefined method `digits' for #{inspect}\"}\n\n      var value = self, result = [];\n\n      if (self == 0) {\n        return [0];\n      }\n\n      while (value != 0) {\n        result.push(value % base);\n        value = parseInt(value / base, 10);\n      }\n\n      return result;\n    }\n  end\n\n  def divmod(other)\n    if nan? || other.nan?\n      ::Kernel.raise ::FloatDomainError, 'NaN'\n    elsif infinite?\n      ::Kernel.raise ::FloatDomainError, 'Infinity'\n    else\n      super\n    end\n  end\n\n  def upto(stop, &block)\n    unless block_given?\n      return enum_for(:upto, stop) do\n        ::Kernel.raise ::ArgumentError, \"comparison of #{self.class} with #{stop.class} failed\" unless ::Numeric === stop\n        stop < self ? 0 : stop - self + 1\n      end\n    end\n\n    %x{\n      if (!stop.$$is_number) {\n        #{::Kernel.raise ::ArgumentError, \"comparison of #{self.class} with #{stop.class} failed\"}\n      }\n      for (var i = self; i <= stop; i++) {\n        block(i);\n      }\n    }\n\n    self\n  end\n\n  def zero?\n    `self == 0`\n  end\n\n  # Since bitwise operations are 32 bit, declare it to be so.\n  def size\n    4\n  end\n\n  def nan?\n    `isNaN(self)`\n  end\n\n  def finite?\n    `self != Infinity && self != -Infinity && !isNaN(self)`\n  end\n\n  def infinite?\n    %x{\n      if (self == Infinity) {\n        return +1;\n      }\n      else if (self == -Infinity) {\n        return -1;\n      }\n      else {\n        return nil;\n      }\n    }\n  end\n\n  def positive?\n    `self != 0 && (self == Infinity || 1 / self > 0)`\n  end\n\n  def negative?\n    `self == -Infinity || 1 / self < 0`\n  end\n\n  alias arg angle\n  alias eql? ==\n  alias fdiv /\n  alias inspect to_s\n  alias kind_of? is_a?\n  alias magnitude abs\n  alias modulo %\n  alias object_id __id__\n  alias phase angle\n  alias succ next\n  alias to_int to_i\nend\n\n::Fixnum = ::Number\n\nclass ::Integer < ::Numeric\n  `self.$$is_number_class = true`\n  `self.$$is_integer_class = true`\n\n  class << self\n    def allocate\n      ::Kernel.raise ::TypeError, \"allocator undefined for #{name}\"\n    end\n\n    undef :new\n\n    def sqrt(n)\n      n = ::Opal.coerce_to!(n, ::Integer, :to_int)\n      %x{\n        if (n < 0) {\n          #{::Kernel.raise ::Math::DomainError, 'Numerical argument is out of domain - \"isqrt\"'}\n        }\n\n        return parseInt(Math.sqrt(n), 10);\n      }\n    end\n\n    def try_convert(object)\n      Opal.coerce_to?(object, self, :to_int)\n    end\n  end\n\n  self::MAX = `Math.pow(2, 30) - 1`\n  self::MIN = `-Math.pow(2, 30)`\nend\n\nclass ::Float < ::Numeric\n  `self.$$is_number_class = true`\n\n  class << self\n    def allocate\n      ::Kernel.raise ::TypeError, \"allocator undefined for #{name}\"\n    end\n\n    undef :new\n\n    def ===(other)\n      `!!other.$$is_number`\n    end\n  end\n\n  self::INFINITY = `Infinity`\n  self::MAX      = `Number.MAX_VALUE`\n  self::MIN      = `Number.MIN_VALUE`\n  self::NAN      = `NaN`\n\n  self::DIG      = 15\n  self::MANT_DIG = 53\n  self::RADIX    = 2\n\n  self::EPSILON = `Number.EPSILON || 2.2204460492503130808472633361816E-16`\nend\n"],"names":["<top (required)>","self","require","<class:Number>","Opal","bridge","allocate","Kernel","raise","TypeError","name","coerce","other","class","Float","respond_to?","coerce_to!","__id__","+","__coerced__","-","*","/","%","ZeroDivisionError","&","|","^","<","<=",">",">=","<=>","ArgumentError","<<","count","Integer",">>","[]","bit","+@","-@","~","**","===","0","Rational","new","1","Complex","to_f","==","abs","abs2","allbits?","mask","anybits?","angle","nan?","bit_length","NoMethodError","ceil","ndigits","chr","encoding","denominator","infinite?","downto","stop","block_given?","enum_for","block in downto","block (2 levels) in downto","Numeric","equal?","$ret_or_1","even?","floor","gcd","gcdlcm","lcm","integer?","is_a?","klass","instance_of?","next","nobits?","nonzero?","numerator","odd?","ord","pow","b","m","pred","quo","rationalize","eps","FloatDomainError","Math","frexp","f","n","ldexp","Float::MANT_DIG","to_i","2","to_r","remainder","y","truncate","round","RangeError","Integer::MIN","size","_","exp","Float::DIG","4","3","times","block","block in times","block (2 levels) in times","e","Float::RADIX","to_s","base","10","36","digits","Math::DomainError","inspect","divmod","upto","block in upto","block (2 levels) in upto","zero?","finite?","positive?","negative?","Number","<class:Integer>","sqrt","try_convert","object","coerce_to?","<class:Float>","15","53"],"mappings":"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"}},{"offset":{"line":18313,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/range.rb"],"sourcesContent":["require 'corelib/enumerable'\n\nclass ::Range\n  include ::Enumerable\n\n  `self.$$prototype.$$is_range = true`\n\n  attr_reader :begin, :end\n\n  def initialize(first, last, exclude = false)\n    ::Kernel.raise ::NameError, \"'initialize' called twice\" if @begin\n    ::Kernel.raise ::ArgumentError, 'bad value for range' unless first <=> last || first.nil? || last.nil?\n\n    @begin = first\n    @end   = last\n    @excl  = exclude\n  end\n\n  def ===(value)\n    include? value\n  end\n\n  %x{\n    function is_infinite(self) {\n      if (self.begin === nil || self.end === nil ||\n          self.begin === -Infinity || self.end === Infinity ||\n          self.begin === Infinity || self.end === -Infinity) return true;\n      return false;\n    }\n  }\n\n  def count(&block)\n    if !block_given? && `is_infinite(self)`\n      return ::Float::INFINITY\n    end\n    super\n  end\n\n  def to_a\n    ::Kernel.raise ::TypeError, 'cannot convert endless range to an array' if `is_infinite(self)`\n    super\n  end\n\n  def cover?(value)\n    beg_cmp = (@begin.nil? && -1) || (@begin <=> value) || false\n    end_cmp = (@end.nil? && -1) || (value <=> @end) || false\n    if @excl\n      end_cmp && end_cmp < 0\n    else\n      end_cmp && end_cmp <= 0\n    end && beg_cmp && beg_cmp <= 0\n  end\n\n  def each(&block)\n    return enum_for(:each) { size } unless block_given?\n\n    %x{\n      var i, limit;\n\n      if (#{@begin}.$$is_number && #{@end}.$$is_number) {\n        if (#{@begin} % 1 !== 0 || #{@end} % 1 !== 0) {\n          #{::Kernel.raise ::TypeError, \"can't iterate from Float\"}\n        }\n\n        for (i = #{@begin}, limit = #{@end} + #{@excl ? 0 : 1}; i < limit; i++) {\n          block(i);\n        }\n\n        return self;\n      }\n\n      if (#{@begin}.$$is_string && #{@end}.$$is_string) {\n        #{@begin.upto(@end, @excl, &block)}\n        return self;\n      }\n    }\n\n    current = @begin\n    last    = @end\n\n    unless current.respond_to?(:succ)\n      ::Kernel.raise ::TypeError, \"can't iterate from #{current.class}\"\n    end\n\n    while @end.nil? || (current <=> last) < 0\n      yield current\n\n      current = current.succ\n    end\n\n    yield current if !@excl && current == last\n\n    self\n  end\n\n  def eql?(other)\n    return false unless ::Range === other\n\n    @excl === other.exclude_end? &&\n      @begin.eql?(other.begin) &&\n      @end.eql?(other.end)\n  end\n\n  def exclude_end?\n    @excl\n  end\n\n  def first(n = undefined)\n    ::Kernel.raise ::RangeError, 'cannot get the minimum of beginless range' if @begin.nil?\n    return @begin if `n == null`\n    super\n  end\n\n  def last(n = undefined)\n    ::Kernel.raise ::RangeError, 'cannot get the maximum of endless range' if @end.nil?\n    return @end if `n == null`\n    to_a.last(n)\n  end\n\n  # FIXME: currently hardcoded to assume range holds numerics\n  def max\n    if @end.nil?\n      ::Kernel.raise ::RangeError, 'cannot get the maximum of endless range'\n    elsif block_given?\n      super\n    elsif !@begin.nil? && (@begin > @end ||\n                           @excl && @begin == @end)\n      nil\n    else\n      `#{@excl} ? #{@end} - 1 : #{@end}`\n    end\n  end\n\n  def min\n    if @begin.nil?\n      ::Kernel.raise ::RangeError, 'cannot get the minimum of beginless range'\n    elsif block_given?\n      super\n    elsif !@end.nil? && (@begin > @end ||\n                         @excl && @begin == @end)\n      nil\n    else\n      @begin\n    end\n  end\n\n  def size\n    infinity = ::Float::INFINITY\n\n    return 0 if (@begin == infinity && !@end.nil?) || (@end == -infinity && !@begin.nil?)\n    return infinity if `is_infinite(self)`\n    return nil unless ::Numeric === @begin && ::Numeric === @end\n\n    range_begin = @begin\n    range_end   = @end\n    range_end  -= 1 if @excl\n\n    return 0 if range_end < range_begin\n\n    `Math.abs(range_end - range_begin) + 1`.to_i\n  end\n\n  def step(n = undefined)\n    %x{\n      function coerceStepSize() {\n        if (n == null) {\n          n = 1;\n        }\n        else if (!n.$$is_number) {\n          n = #{::Opal.coerce_to!(n, ::Integer, :to_int)}\n        }\n\n        if (n < 0) {\n          #{::Kernel.raise ::ArgumentError, \"step can't be negative\"}\n        } else if (n === 0) {\n          #{::Kernel.raise ::ArgumentError, \"step can't be 0\"}\n        }\n      }\n\n      function enumeratorSize() {\n        if (!#{@begin.respond_to?(:succ)}) {\n          return nil;\n        }\n\n        if (#{@begin}.$$is_string && #{@end}.$$is_string) {\n          return nil;\n        }\n\n        if (n % 1 === 0) {\n          return #{(size / n).ceil};\n        } else {\n          // n is a float\n          var begin = self.begin, end = self.end,\n              abs = Math.abs, floor = Math.floor,\n              err = (abs(begin) + abs(end) + abs(end - begin)) / abs(n) * #{::Float::EPSILON},\n              size;\n\n          if (err > 0.5) {\n            err = 0.5;\n          }\n\n          if (self.excl) {\n            size = floor((end - begin) / n - err);\n            if (size * n + begin < end) {\n              size++;\n            }\n          } else {\n            size = floor((end - begin) / n + err) + 1\n          }\n\n          return size;\n        }\n      }\n    }\n\n    unless block_given?\n      if (@begin.is_a?(Numeric) || @begin.nil?) &&\n         (@end.is_a?(Numeric) || @end.nil?) &&\n         !(@begin.nil? && @end.nil?)\n\n        return ::Enumerator::ArithmeticSequence.new(self, n, :step)\n      else\n        return enum_for(:step, n) do\n          %x{\n            coerceStepSize();\n            return enumeratorSize();\n          }\n        end\n      end\n    end\n\n    `coerceStepSize()`\n\n    if `self.begin.$$is_number && self.end.$$is_number`\n      i = 0\n      loop do\n        current = @begin + i * n\n        if @excl\n          break if current >= @end\n        elsif current > @end\n          break\n        end\n        yield(current)\n        i += 1\n      end\n    else\n      %x{\n        if (#{@begin}.$$is_string && #{@end}.$$is_string && n % 1 !== 0) {\n          #{::Kernel.raise ::TypeError, 'no implicit conversion to float from string'}\n        }\n      }\n      each_with_index do |value, idx|\n        yield(value) if idx % n == 0\n      end\n    end\n    self\n  end\n\n  def %(n)\n    if @begin.is_a?(Numeric) && @end.is_a?(Numeric)\n      ::Enumerator::ArithmeticSequence.new(self, n, :%)\n    else\n      step(n)\n    end\n  end\n\n  def bsearch(&block)\n    return enum_for(:bsearch) unless block_given?\n\n    if `is_infinite(self) && (self.begin.$$is_number || self.end.$$is_number)`\n      ::Kernel.raise ::NotImplementedError, \"Can't #bsearch an infinite range\"\n    end\n\n    unless `self.begin.$$is_number && self.end.$$is_number`\n      ::Kernel.raise ::TypeError, \"can't do binary search for #{@begin.class}\"\n    end\n\n    to_a.bsearch(&block)\n  end\n\n  def to_s\n    \"#{@begin || ''}#{@excl ? '...' : '..'}#{@end || ''}\"\n  end\n\n  def inspect\n    \"#{@begin && @begin.inspect}#{@excl ? '...' : '..'}#{@end && @end.inspect}\"\n  end\n\n  def marshal_load(args)\n    @begin = args[:begin]\n    @end = args[:end]\n    @excl = args[:excl]\n  end\n\n  def hash\n    [@begin, @end, @excl].hash\n  end\n\n  alias == eql?\n  alias include? cover?\n  alias member? cover?\nend\n"],"names":["<top (required)>","self","require","<class:Range>","include","Enumerable","attr_reader","initialize","first","last","exclude","@begin","Kernel","raise","NameError","<=>","nil?","ArgumentError","@end","@excl","===","value","include?","count","block_given?","Float::INFINITY","Float","to_a","TypeError","cover?","beg_cmp","$ret_or_1","$ret_or_2","$ret_or_3","-1","end_cmp","<","0","<=","each","enum_for","block in each","block (2 levels) in each","size","1","upto","block","to_proc","current","respond_to?","class","succ","eql?","other","Range","exclude_end?","begin","end","n","RangeError","max",">","min","infinity","-@","Numeric","range_begin","range_end","-","to_i","step","Opal","coerce_to!","Integer","/","ceil","Float::EPSILON","is_a?","Enumerator::ArithmeticSequence","Enumerator","new","block in step","block (2 levels) in step","i","loop","+","*",">=","each_with_index","idx","%","bsearch","NotImplementedError","to_s","inspect","marshal_load","args","[]","hash"],"mappings":"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"}},{"offset":{"line":18721,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/proc.rb"],"sourcesContent":["# helpers: slice\n\nclass ::Proc < `Function`\n  `Opal.prop(self.$$prototype, '$$is_proc', true)`\n  `Opal.prop(self.$$prototype, '$$is_lambda', false)`\n\n  def self.new(&block)\n    unless block\n      ::Kernel.raise ::ArgumentError, 'tried to create a Proc object without a block'\n    end\n\n    block\n  end\n\n  def call(*args, &block)\n    %x{\n      if (block !== nil) {\n        self.$$p = block;\n      }\n\n      var result, $brk = self.$$brk;\n\n      if ($brk) {\n        try {\n          if (self.$$is_lambda) {\n            result = self.apply(null, args);\n          }\n          else {\n            result = Opal.yieldX(self, args);\n          }\n        } catch (err) {\n          if (err === $brk) {\n            return $brk.$v\n          }\n          else {\n            throw err\n          }\n        }\n      }\n      else {\n        if (self.$$is_lambda) {\n          result = self.apply(null, args);\n        }\n        else {\n          result = Opal.yieldX(self, args);\n        }\n      }\n\n      return result;\n    }\n  end\n\n  def >>(other)\n    ::Kernel.proc do |*args, &block|\n      out = call(*args, &block)\n      other.call(out)\n    end\n  end\n\n  def <<(other)\n    ::Kernel.proc do |*args, &block|\n      out = other.call(*args, &block)\n      call(out)\n    end\n  end\n\n  def to_proc\n    self\n  end\n\n  def lambda?\n    # This method should tell the user if the proc tricks are unavailable,\n    # (see Proc#lambda? on ruby docs to find out more).\n    `!!self.$$is_lambda`\n  end\n\n  def arity\n    %x{\n      if (self.$$is_curried) {\n        return -1;\n      } else {\n        return self.$$arity;\n      }\n    }\n  end\n\n  def source_location\n    `if (self.$$is_curried) { return nil; }`\n    nil\n  end\n\n  def binding\n    `if (self.$$is_curried) { #{::Kernel.raise ::ArgumentError, \"Can't create Binding\"} }`\n\n    if defined? ::Binding\n      ::Binding.new(nil, [], `self.$$s`, source_location)\n    end\n  end\n\n  def parameters\n    %x{\n      if (self.$$is_curried) {\n        return #{[[:rest]]};\n      } else if (self.$$parameters) {\n        if (self.$$is_lambda) {\n          return self.$$parameters;\n        } else {\n          var result = [], i, length;\n\n          for (i = 0, length = self.$$parameters.length; i < length; i++) {\n            var parameter = self.$$parameters[i];\n\n            if (parameter[0] === 'req') {\n              // required arguments always have name\n              parameter = ['opt', parameter[1]];\n            }\n\n            result.push(parameter);\n          }\n\n          return result;\n        }\n      } else {\n        return [];\n      }\n    }\n  end\n\n  def curry(arity = undefined)\n    %x{\n      if (arity === undefined) {\n        arity = self.length;\n      }\n      else {\n        arity = #{::Opal.coerce_to!(arity, ::Integer, :to_int)};\n        if (self.$$is_lambda && arity !== self.length) {\n          #{::Kernel.raise ::ArgumentError, \"wrong number of arguments (#{`arity`} for #{`self.length`})\"}\n        }\n      }\n\n      function curried () {\n        var args = $slice.call(arguments),\n            length = args.length,\n            result;\n\n        if (length > arity && self.$$is_lambda && !self.$$is_curried) {\n          #{::Kernel.raise ::ArgumentError, \"wrong number of arguments (#{`length`} for #{`arity`})\"}\n        }\n\n        if (length >= arity) {\n          return self.$call.apply(self, args);\n        }\n\n        result = function () {\n          return curried.apply(null,\n            args.concat($slice.call(arguments)));\n        }\n        result.$$is_lambda = self.$$is_lambda;\n        result.$$is_curried = true;\n\n        return result;\n      };\n\n      curried.$$is_lambda = self.$$is_lambda;\n      curried.$$is_curried = true;\n      return curried;\n    }\n  end\n\n  def dup\n    %x{\n      var original_proc = self.$$original_proc || self,\n          proc = function () {\n            return original_proc.apply(this, arguments);\n          };\n\n      for (var prop in self) {\n        if (self.hasOwnProperty(prop)) {\n          proc[prop] = self[prop];\n        }\n      }\n\n      return proc;\n    }\n  end\n\n  alias === call\n  alias clone dup\n  alias yield call\n  alias [] call\nend\n"],"names":["<top (required)>","<class:Proc>","new","self","block","Kernel","raise","ArgumentError","call",">>","other","proc","block in >>","block (2 levels) in >>","out","args","to_proc","<<","block in <<","block (2 levels) in <<","lambda?","arity","source_location","binding","Binding","parameters","curry","Opal","coerce_to!","Integer","dup"],"mappings":"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"}},{"offset":{"line":18970,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/method.rb"],"sourcesContent":["class ::Method\n  attr_reader :owner, :receiver, :name\n\n  def initialize(receiver, owner, method, name)\n    @receiver = receiver\n    @owner    = owner\n    @name     = name\n    @method   = method\n  end\n\n  def arity\n    @method.arity\n  end\n\n  def parameters\n    `#{@method}.$$parameters`\n  end\n\n  def source_location\n    `#{@method}.$$source_location` || ['(eval)', 0]\n  end\n\n  def comments\n    `#{@method}.$$comments` || []\n  end\n\n  def call(*args, &block)\n    %x{\n      #{@method}.$$p = block;\n\n      return #{@method}.apply(#{@receiver}, args);\n    }\n  end\n\n  def curry(arity = undefined)\n    @method.curry(arity)\n  end\n\n  def >>(other)\n    @method >> other\n  end\n\n  def <<(other)\n    @method << other\n  end\n\n  def unbind\n    ::UnboundMethod.new(@receiver.class, @owner, @method, @name)\n  end\n\n  def to_proc\n    %x{\n      var proc = self.$call.bind(self);\n      proc.$$unbound = #{@method};\n      proc.$$is_lambda = true;\n      proc.$$arity = #{@method}.$$arity;\n      proc.$$parameters = #{@method}.$$parameters;\n      return proc;\n    }\n  end\n\n  def inspect\n    \"#<#{self.class}: #{@receiver.class}##{@name} (defined in #{@owner} in #{source_location.join(':')})>\"\n  end\n\n  alias [] call\n  alias === call\nend\n\nclass ::UnboundMethod\n  attr_reader :source, :owner, :name\n\n  def initialize(source, owner, method, name)\n    @source = source\n    @owner  = owner\n    @method = method\n    @name   = name\n  end\n\n  def arity\n    @method.arity\n  end\n\n  def parameters\n    `#{@method}.$$parameters`\n  end\n\n  def source_location\n    `#{@method}.$$source_location` || ['(eval)', 0]\n  end\n\n  def comments\n    `#{@method}.$$comments` || []\n  end\n\n  def bind(object)\n    %x{\n      if (#{@owner}.$$is_module || Opal.is_a(#{object}, #{@owner})) {\n        return #{::Method.new(object, @owner, @method, @name)};\n      }\n      else {\n        #{::Kernel.raise ::TypeError, \"can't bind singleton method to a different class (expected #{object}.kind_of?(#{@owner} to be true)\"};\n      }\n    }\n  end\n\n  def bind_call(object, *args, &block)\n    bind(object).call(*args, &block)\n  end\n\n  def inspect\n    \"#<#{self.class}: #{@source}##{@name} (defined in #{@owner} in #{source_location.join(':')})>\"\n  end\nend\n"],"names":["<top (required)>","<class:Method>","self","attr_reader","initialize","receiver","owner","method","name","@receiver","@owner","@name","@method","arity","parameters","source_location","$ret_or_1","0","comments","call","curry",">>","other","<<","unbind","UnboundMethod","new","class","to_proc","inspect","join","<class:UnboundMethod>","source","@source","bind","object","Method","Kernel","raise","TypeError","bind_call","args","block"],"mappings":"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"}},{"offset":{"line":19174,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/variables.rb"],"sourcesContent":["# regexp matches\n%x{$gvars['&'] = $gvars['~'] = $gvars['`'] = $gvars[\"'\"] = nil}\n\n# requires\n$LOADED_FEATURES = $\" = `Opal.loaded_features`\n$LOAD_PATH       = $: = []\n\n# split lines\n$/ = \"\\n\"\n$, = nil\n\n::ARGV = []\n::ARGF = ::Object.new\n::ENV  = {}\n\n$VERBOSE = false\n$DEBUG   = false\n$SAFE    = 0\n"],"names":["<top (required)>","$LOADED_FEATURES","$\"","$LOAD_PATH","$:","$/","$,","Object","new","$VERBOSE","$DEBUG","$SAFE","0"],"mappings":"AAAAA,oDAAAA;EAAAA;;EAAAA;;EACGA;EAGHC,yBAAmBC,CAAAA,eAAMF,oBAANE;EACnBC,mBAAmBC,CAAAA,cAAK,EAALA;EAGnBC,cAAKL;EACLM,cAAK;EAEL,WAAA,IAAA,UAAS,EAAT;EACA,WAAA,IAAA,UAASC,OAAQC,KAAAA,CAAAA,CAAjB;EACA,WAAA,IAAA,SAAS,YAAA,EAAT;EAEAC,iBAAW;EACXC,eAAW;EACXV,OAAAW,CAAAA,cAAWC,CAAXD;AAjBAX;"}},{"offset":{"line":19192,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/io.rb"],"sourcesContent":["class ::IO\n  self::SEEK_SET = 0\n  self::SEEK_CUR = 1\n  self::SEEK_END = 2\n  self::SEEK_DATA = 3\n  self::SEEK_HOLE = 4\n\n  self::READABLE = 1\n  self::WRITABLE = 4\n\n  attr_reader :eof\n\n  attr_accessor :read_proc,  :sync, :tty, :write_proc\n\n  def initialize(fd, flags = 'r')\n    @fd = fd\n    @flags = flags\n    @eof = false\n\n    if flags.include?('r') && !flags.match?(/[wa+]/)\n      @closed = :write\n    elsif flags.match?(/[wa]/) && !flags.match?(/[r+]/)\n      @closed = :read\n    end\n  end\n\n  def fileno\n    @fd\n  end\n\n  def tty?\n    `self.tty == true`\n  end\n\n  def write(string)\n    `self.write_proc(string)`\n    string.size\n  end\n\n  def flush\n    # noop\n  end\n\n  def <<(string)\n    write(string)\n    self\n  end\n\n  def print(*args)\n    %x{\n      for (var i = 0, ii = args.length; i < ii; i++) {\n        args[i] = #{::Kernel.String(`args[i]`)}\n      }\n      self.$write(args.join(#{$,}));\n    }\n    nil\n  end\n\n  def puts(*args)\n    %x{\n      var line\n      if (args.length === 0) {\n        #{write \"\\n\"};\n        return nil;\n      } else {\n        for (var i = 0, ii = args.length; i < ii; i++) {\n          if (args[i].$$is_array){\n            var ary = #{`args[i]`.flatten}\n            if (ary.length > 0) #{puts(*`ary`)}\n          } else {\n            if (args[i].$$is_string) {\n              line = args[i].valueOf();\n            } else {\n              line = #{::Kernel.String(`args[i]`)};\n            }\n            if (!line.endsWith(\"\\n\")) line += \"\\n\"\n            #{write `line`}\n          }\n        }\n      }\n    }\n    nil\n  end\n\n  # Reading\n\n  def getc\n    @read_buffer ||= ''\n    parts = ''\n\n    # Will execure at most twice - one time reading from a buffer\n    # second time\n    begin\n      @read_buffer += parts\n      if @read_buffer != ''\n        ret = @read_buffer[0]\n        @read_buffer = @read_buffer[1..-1]\n        return ret\n      end\n    end while parts = sysread_noraise(1)\n\n    nil\n  end\n\n  def getbyte\n    getc&.ord\n  end\n\n  def readbyte\n    readchar.ord\n  end\n\n  def readchar\n    getc || ::Kernel.raise(::EOFError, 'end of file reached')\n  end\n\n  def readline(*args)\n    gets(*args) || ::Kernel.raise(::EOFError, 'end of file reached')\n  end\n\n  def gets(sep = false, limit = nil, opts = {})\n    if `sep.$$is_number` && !limit\n      sep, limit, opts = false, sep, limit\n    end\n    if `sep.$$is_hash` && !limit && opts == {}\n      sep, limit, opts = false, nil, sep\n    elsif `limit.$$is_hash` && opts == {}\n      sep, limit, opts = sep, nil, limit\n    end\n\n    orig_sep = sep\n\n    sep = $/ if sep == false\n    sep = /\\r?\\n\\r?\\n/ if sep == ''\n    sep ||= ''\n    sep = sep.to_str unless orig_sep == ''\n\n    # Try to deduce length of a regexp\n    seplen = orig_sep == '' ? 2 : sep.length\n\n    sep = / / if sep == ' ' # WTF is this, String#split(\" \") matches all whitespaces???\n\n    @read_buffer ||= ''\n    data = ''\n    ret = nil\n\n    begin\n      @read_buffer += data\n      if sep != '' && (`sep.$$is_regexp` ? @read_buffer.match?(sep) : @read_buffer.include?(sep))\n        orig_buffer = @read_buffer\n        ret, @read_buffer = @read_buffer.split(sep, 2)\n        ret += orig_buffer[ret.length, seplen] if ret != orig_buffer\n        break\n      end\n    end while data = sysread_noraise(sep == '' ? 65_536 : 1)\n\n    unless ret\n      ret, @read_buffer = (@read_buffer || ''), ''\n      ret = nil if ret == ''\n    end\n\n    if ret\n      if limit\n        ret = ret[0...limit]\n        @read_buffer = ret[limit..-1] + @read_buffer\n      end\n      ret = ret.sub(/\\r?\\n\\z/, '') if opts[:chomp]\n      ret = ret.sub(/\\A[\\r\\n]+/, '') if orig_sep == ''\n    end\n\n    $_ = ret if orig_sep == false\n    ret\n  end\n\n  # This method is to be overloaded, or read_proc can be changed\n  def sysread(integer)\n    `self.read_proc(integer)` || begin\n      @eof = true\n      ::Kernel.raise ::EOFError, 'end of file reached'\n    end\n  end\n\n  # @private\n  def sysread_noraise(integer)\n    sysread(integer)\n  rescue ::EOFError\n    nil\n  end\n\n  def readpartial(integer)\n    @read_buffer ||= ''\n    part = sysread(integer)\n    ret, @read_buffer = @read_buffer + (part || ''), ''\n    ret = nil if ret == ''\n    ret\n  end\n\n  def read(integer = nil)\n    @read_buffer ||= ''\n    parts = ''\n    ret = nil\n\n    begin\n      @read_buffer += parts\n      if integer && @read_buffer.length > integer\n        ret, @read_buffer = @read_buffer[0...integer], @read_buffer[integer..-1]\n        return ret\n      end\n    end while parts = sysread_noraise(integer || 65_536)\n\n    ret, @read_buffer = @read_buffer, ''\n    ret\n  end\n\n  # Eaches\n\n  def readlines(separator = $/)\n    each_line(separator).to_a\n  end\n\n  def each(sep = $/, *args, &block)\n    return enum_for :each, sep, *args unless block_given?\n\n    while (s = gets(sep, *args))\n      yield(s)\n    end\n\n    self\n  end\n\n  def each_byte(&block)\n    return enum_for :each_byte unless block_given?\n\n    while (s = getbyte)\n      yield(s)\n    end\n\n    self\n  end\n\n  def each_char(&block)\n    return enum_for :each_char unless block_given?\n\n    while (s = getc)\n      yield(s)\n    end\n\n    self\n  end\n\n  # Closedness\n\n  def close\n    @closed = :both\n  end\n\n  def close_read\n    if @closed == :write\n      @closed = :both\n    else\n      @closed = :read\n    end\n  end\n\n  def close_write\n    if @closed == :read\n      @closed = :both\n    else\n      @closed = :write\n    end\n  end\n\n  def closed?\n    @closed == :both\n  end\n\n  def closed_read?\n    @closed == :read || @closed == :both\n  end\n\n  def closed_write?\n    @closed == :write || @closed == :both\n  end\n\n  # @private\n  def check_writable\n    if closed_write?\n      ::Kernel.raise ::IOError, 'not opened for writing'\n    end\n  end\n\n  # @private\n  def check_readable\n    if closed_read?\n      ::Kernel.raise ::IOError, 'not opened for reading'\n    end\n  end\n\n  alias each_line each\n  alias eof? eof\nend\n\n::STDIN  = $stdin  = ::IO.new(0, 'r')\n::STDOUT = $stdout = ::IO.new(1, 'w')\n::STDERR = $stderr = ::IO.new(2, 'w')\n\n`var console = Opal.global.console`\n::STDOUT.write_proc = `typeof(process) === 'object' && typeof(process.stdout) === 'object' ? function(s){process.stdout.write(s)} : function(s){console.log(s)}`\n::STDERR.write_proc = `typeof(process) === 'object' && typeof(process.stderr) === 'object' ? function(s){process.stderr.write(s)} : function(s){console.warn(s)}`\n\n::STDIN.read_proc = `function(s) { var p = prompt(); if (p !== null) return p + \"\\n\"; return nil; }`\n"],"names":["<top (required)>","<class:IO>","self","0","1","2","3","4","attr_reader","attr_accessor","initialize","fd","flags","@fd","@flags","@eof","include?","match?","@closed","fileno","tty?","write","string","size","flush","<<","print","Kernel","String","$,","puts","flatten","getc","@read_buffer","$ret_or_1","parts","+","ret","[]","-1","sysread_noraise","getbyte","readbyte","readchar","ord","raise","EOFError","readline","gets","args","sep","limit","opts","orig_sep","$/","to_str","seplen","length","data","orig_buffer","split","65536","sub","$_","sysread","integer","readpartial","part","read",">","readlines","separator","each_line","to_a","each","block_given?","enum_for","s","each_byte","each_char","close","close_read","close_write","closed?","==","closed_read?","closed_write?","check_writable","IOError","check_readable","$stdin","IO","new","$stdout","$stderr","$writer","write_proc=","STDOUT","-","STDERR","read_proc=","STDIN"],"mappings":"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"}},{"offset":{"line":19665,"column":0},"map":{"version":3,"sourceRoot":"","sources":["opal/regexp_anchors.rb"],"sourcesContent":["# frozen_string_literal: true\n\nmodule Opal\n  self::REGEXP_START = RUBY_ENGINE == 'opal' ? '^' : '\\A'\n  self::REGEXP_END = RUBY_ENGINE == 'opal' ? '$' : '\\z'\n\n  # Unicode characters in ranges\n  # \\u0001 - \\u002F (blank unicode characters + space + !\"#$%&'()*+,-./ chars)\n  # \\u003A - \\u0040 (:;<=>?@ chars)\n  # \\u005B - \\u005E ([\\]^ chars)\n  # \\u0060          (` char)\n  # \\u007B - \\u007F ({|}~ chars})\n  # are not allowed to be used in identifier in the beggining or middle of its name\n  self::FORBIDDEN_STARTING_IDENTIFIER_CHARS = '\\u0001-\\u002F\\u003A-\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F'\n\n  # Unicode characters in ranges\n  # \\u0001 - \\u0020 (blank unicode characters + space)\n  # \\u0022 - \\u002F (\"#$%&'()*+,-./ chars)\n  # \\u003A - \\u003E (:;<=> chars)\n  # \\u0040          (@ char)\n  # \\u005B - \\u005E ([\\]^ chars)\n  # \\u0060          (` char)\n  # \\u007B - \\u007F ({|}~ chars})\n  # are not allowed to be used in identifier in the end of its name\n  # In fact, FORBIDDEN_STARTING_IDENTIFIER_CHARS = FORBIDDEN_ENDING_IDENTIFIER_CHARS + \\u0021 ('?') + \\u003F ('!')\n  self::FORBIDDEN_ENDING_IDENTIFIER_CHARS   = '\\u0001-\\u0020\\u0022-\\u002F\\u003A-\\u003E\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F'\n  self::INLINE_IDENTIFIER_REGEXP = Regexp.new(\"[^#{self::FORBIDDEN_STARTING_IDENTIFIER_CHARS}]*[^#{self::FORBIDDEN_ENDING_IDENTIFIER_CHARS}]\")\n\n  # For constants rules are pretty much the same, but ':' is allowed and '?!' are not.\n  # Plus it may start with a '::' which indicates that the constant comes from toplevel.\n  self::FORBIDDEN_CONST_NAME_CHARS = '\\u0001-\\u0020\\u0021-\\u002F\\u003B-\\u003F\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F'\n  self::CONST_NAME_REGEXP = Regexp.new(\"#{self::REGEXP_START}(::)?[A-Z][^#{self::FORBIDDEN_CONST_NAME_CHARS}]*#{self::REGEXP_END}\")\nend\n"],"names":["<top (required)>","<module:Opal>","self","Regexp","new","self::FORBIDDEN_STARTING_IDENTIFIER_CHARS","self::FORBIDDEN_ENDING_IDENTIFIER_CHARS","self::REGEXP_START","self::FORBIDDEN_CONST_NAME_CHARS","self::REGEXP_END"],"mappings":"AAAAA,sDAAAA;EAAAA;;EAAAA;EAEAA,OAAAC;EAAAA;;IAAAA;;;IACE,WAAAC,IAAA,kBAA6CD,GAA7C;IACA,WAAAC,IAAA,gBAA2CD,GAA3C;IASA,WAAAC,IAAA,yCAA4CD,qEAA5C;IAYA,WAAAC,IAAA,uCAA4CD,2FAA5C;IACA,WAAAC,IAAA,8BAAiCC,YAAMC,KAAAA,CAAMH,IAAD,GAAA,CAAKI,IAAAH,IAAAG,wCAAL,CAAA,GAA+CJ,MAA/C,GAAA,CAAqDK,IAAAJ,IAAAI,sCAArD,CAAA,GAA6FL,GAAlGG,CAAvC;IAIA,WAAAF,IAAA,gCAAmCD,2FAAnC;IACAA,OAAA,WAAAC,IAAA,uBAA0BC,YAAMC,KAAAA,CAAK,EAAA,GAAA,CAAGG,IAAAL,IAAAK,iBAAH,CAAA,GAAsBN,cAAtB,GAAA,CAAoCO,IAAAN,IAAAM,+BAApC,CAAA,GAAqEP,IAArE,GAAA,CAAyEQ,IAAAP,IAAAO,eAAzE,CAALL,CAAhC;EA7BFH,GAAAA,WAAAA;AAFAD;"}},{"offset":{"line":19685,"column":0},"map":{"version":3,"sourceRoot":"","sources":["opal/mini.rb"],"sourcesContent":["::Object.require 'opal/base'\n\n::Object.require 'corelib/nil'\n::Object.require 'corelib/boolean'\n::Object.require 'corelib/string'\n::Object.require 'corelib/comparable'\n::Object.require 'corelib/enumerable'\n::Object.require 'corelib/enumerator'\n::Object.require 'corelib/array'\n::Object.require 'corelib/hash'\n::Object.require 'corelib/number'\n::Object.require 'corelib/range'\n::Object.require 'corelib/proc'\n::Object.require 'corelib/method'\n::Object.require 'corelib/regexp'\n::Object.require 'corelib/variables'\n::Object.require 'corelib/io'\n::Object.require 'opal/regexp_anchors'\n"],"names":["<top (required)>","Object","require"],"mappings":"AAAAA,4CAAAA;EAAAA;;EAAAA;;EAAAC,OAAQC,SAAAA,CAASF,WAATE;EAERD,OAAQC,SAAAA,CAASF,aAATE;EACRD,OAAQC,SAAAA,CAASF,iBAATE;EACRD,OAAQC,SAAAA,CAASF,gBAATE;EACRD,OAAQC,SAAAA,CAASF,oBAATE;EACRD,OAAQC,SAAAA,CAASF,oBAATE;EACRD,OAAQC,SAAAA,CAASF,oBAATE;EACRD,OAAQC,SAAAA,CAASF,eAATE;EACRD,OAAQC,SAAAA,CAASF,cAATE;EACRD,OAAQC,SAAAA,CAASF,gBAATE;EACRD,OAAQC,SAAAA,CAASF,eAATE;EACRD,OAAQC,SAAAA,CAASF,cAATE;EACRD,OAAQC,SAAAA,CAASF,gBAATE;EACRD,OAAQC,SAAAA,CAASF,gBAATE;EACRD,OAAQC,SAAAA,CAASF,mBAATE;EACRD,OAAQC,SAAAA,CAASF,YAATE;EACRF,OAAAC,OAAQC,SAAAA,CAASF,qBAATE;AAjBRF;"}},{"offset":{"line":19709,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/kernel/format.rb"],"sourcesContent":["# helpers: coerce_to\n\nmodule ::Kernel\n  def format(format_string, *args)\n    if args.length == 1 && args[0].respond_to?(:to_ary)\n      ary = ::Opal.coerce_to?(args[0], ::Array, :to_ary)\n      args = ary.to_a unless ary.nil?\n    end\n\n    %x{\n      var result = '',\n          //used for slicing:\n          begin_slice = 0,\n          end_slice,\n          //used for iterating over the format string:\n          i,\n          len = format_string.length,\n          //used for processing field values:\n          arg,\n          str,\n          //used for processing %g and %G fields:\n          exponent,\n          //used for keeping track of width and precision:\n          width,\n          precision,\n          //used for holding temporary values:\n          tmp_num,\n          //used for processing %{} and %<> fileds:\n          hash_parameter_key,\n          closing_brace_char,\n          //used for processing %b, %B, %o, %x, and %X fields:\n          base_number,\n          base_prefix,\n          base_neg_zero_regex,\n          base_neg_zero_digit,\n          //used for processing arguments:\n          next_arg,\n          seq_arg_num = 1,\n          pos_arg_num = 0,\n          //used for keeping track of flags:\n          flags,\n          FNONE  = 0,\n          FSHARP = 1,\n          FMINUS = 2,\n          FPLUS  = 4,\n          FZERO  = 8,\n          FSPACE = 16,\n          FWIDTH = 32,\n          FPREC  = 64,\n          FPREC0 = 128;\n\n      function CHECK_FOR_FLAGS() {\n        if (flags&FWIDTH) { #{::Kernel.raise ::ArgumentError, 'flag after width'} }\n        if (flags&FPREC0) { #{::Kernel.raise ::ArgumentError, 'flag after precision'} }\n      }\n\n      function CHECK_FOR_WIDTH() {\n        if (flags&FWIDTH) { #{::Kernel.raise ::ArgumentError, 'width given twice'} }\n        if (flags&FPREC0) { #{::Kernel.raise ::ArgumentError, 'width after precision'} }\n      }\n\n      function GET_NTH_ARG(num) {\n        if (num >= args.length) { #{::Kernel.raise ::ArgumentError, 'too few arguments'} }\n        return args[num];\n      }\n\n      function GET_NEXT_ARG() {\n        switch (pos_arg_num) {\n        case -1: #{::Kernel.raise ::ArgumentError, \"unnumbered(#{`seq_arg_num`}) mixed with numbered\"} // raise\n        case -2: #{::Kernel.raise ::ArgumentError, \"unnumbered(#{`seq_arg_num`}) mixed with named\"} // raise\n        }\n        pos_arg_num = seq_arg_num++;\n        return GET_NTH_ARG(pos_arg_num - 1);\n      }\n\n      function GET_POS_ARG(num) {\n        if (pos_arg_num > 0) {\n          #{::Kernel.raise ::ArgumentError, \"numbered(#{`num`}) after unnumbered(#{`pos_arg_num`})\"}\n        }\n        if (pos_arg_num === -2) {\n          #{::Kernel.raise ::ArgumentError, \"numbered(#{`num`}) after named\"}\n        }\n        if (num < 1) {\n          #{::Kernel.raise ::ArgumentError, \"invalid index - #{`num`}$\"}\n        }\n        pos_arg_num = -1;\n        return GET_NTH_ARG(num - 1);\n      }\n\n      function GET_ARG() {\n        return (next_arg === undefined ? GET_NEXT_ARG() : next_arg);\n      }\n\n      function READ_NUM(label) {\n        var num, str = '';\n        for (;; i++) {\n          if (i === len) {\n            #{::Kernel.raise ::ArgumentError, 'malformed format string - %*[0-9]'}\n          }\n          if (format_string.charCodeAt(i) < 48 || format_string.charCodeAt(i) > 57) {\n            i--;\n            num = parseInt(str, 10) || 0;\n            if (num > 2147483647) {\n              #{::Kernel.raise ::ArgumentError, \"#{`label`} too big\"}\n            }\n            return num;\n          }\n          str += format_string.charAt(i);\n        }\n      }\n\n      function READ_NUM_AFTER_ASTER(label) {\n        var arg, num = READ_NUM(label);\n        if (format_string.charAt(i + 1) === '$') {\n          i++;\n          arg = GET_POS_ARG(num);\n        } else {\n          arg = GET_NEXT_ARG();\n        }\n        return #{`arg`.to_int};\n      }\n\n      for (i = format_string.indexOf('%'); i !== -1; i = format_string.indexOf('%', i)) {\n        str = undefined;\n\n        flags = FNONE;\n        width = -1;\n        precision = -1;\n        next_arg = undefined;\n\n        end_slice = i;\n\n        i++;\n\n        switch (format_string.charAt(i)) {\n        case '%':\n          begin_slice = i;\n          // no-break\n        case '':\n        case '\\n':\n        case '\\0':\n          i++;\n          continue;\n        }\n\n        format_sequence: for (; i < len; i++) {\n          switch (format_string.charAt(i)) {\n\n          case ' ':\n            CHECK_FOR_FLAGS();\n            flags |= FSPACE;\n            continue format_sequence;\n\n          case '#':\n            CHECK_FOR_FLAGS();\n            flags |= FSHARP;\n            continue format_sequence;\n\n          case '+':\n            CHECK_FOR_FLAGS();\n            flags |= FPLUS;\n            continue format_sequence;\n\n          case '-':\n            CHECK_FOR_FLAGS();\n            flags |= FMINUS;\n            continue format_sequence;\n\n          case '0':\n            CHECK_FOR_FLAGS();\n            flags |= FZERO;\n            continue format_sequence;\n\n          case '1':\n          case '2':\n          case '3':\n          case '4':\n          case '5':\n          case '6':\n          case '7':\n          case '8':\n          case '9':\n            tmp_num = READ_NUM('width');\n            if (format_string.charAt(i + 1) === '$') {\n              if (i + 2 === len) {\n                str = '%';\n                i++;\n                break format_sequence;\n              }\n              if (next_arg !== undefined) {\n                #{::Kernel.raise ::ArgumentError, \"value given twice - %#{`tmp_num`}$\"}\n              }\n              next_arg = GET_POS_ARG(tmp_num);\n              i++;\n            } else {\n              CHECK_FOR_WIDTH();\n              flags |= FWIDTH;\n              width = tmp_num;\n            }\n            continue format_sequence;\n\n          case '<':\n          case '\\{':\n            closing_brace_char = (format_string.charAt(i) === '<' ? '>' : '\\}');\n            hash_parameter_key = '';\n\n            i++;\n\n            for (;; i++) {\n              if (i === len) {\n                #{::Kernel.raise ::ArgumentError, 'malformed name - unmatched parenthesis'}\n              }\n              if (format_string.charAt(i) === closing_brace_char) {\n\n                if (pos_arg_num > 0) {\n                  #{::Kernel.raise ::ArgumentError, \"named #{`hash_parameter_key`} after unnumbered(#{`pos_arg_num`})\"}\n                }\n                if (pos_arg_num === -1) {\n                  #{::Kernel.raise ::ArgumentError, \"named #{`hash_parameter_key`} after numbered\"}\n                }\n                pos_arg_num = -2;\n\n                if (args[0] === undefined || !args[0].$$is_hash) {\n                  #{::Kernel.raise ::ArgumentError, 'one hash required'}\n                }\n\n                next_arg = #{`args[0]`.fetch(`hash_parameter_key`)};\n\n                if (closing_brace_char === '>') {\n                  continue format_sequence;\n                } else {\n                  str = next_arg.toString();\n                  if (precision !== -1) { str = str.slice(0, precision); }\n                  if (flags&FMINUS) {\n                    while (str.length < width) { str = str + ' '; }\n                  } else {\n                    while (str.length < width) { str = ' ' + str; }\n                  }\n                  break format_sequence;\n                }\n              }\n              hash_parameter_key += format_string.charAt(i);\n            }\n            // raise\n\n          case '*':\n            i++;\n            CHECK_FOR_WIDTH();\n            flags |= FWIDTH;\n            width = READ_NUM_AFTER_ASTER('width');\n            if (width < 0) {\n              flags |= FMINUS;\n              width = -width;\n            }\n            continue format_sequence;\n\n          case '.':\n            if (flags&FPREC0) {\n              #{::Kernel.raise ::ArgumentError, 'precision given twice'}\n            }\n            flags |= FPREC|FPREC0;\n            precision = 0;\n            i++;\n            if (format_string.charAt(i) === '*') {\n              i++;\n              precision = READ_NUM_AFTER_ASTER('precision');\n              if (precision < 0) {\n                flags &= ~FPREC;\n              }\n              continue format_sequence;\n            }\n            precision = READ_NUM('precision');\n            continue format_sequence;\n\n          case 'd':\n          case 'i':\n          case 'u':\n            arg = #{::Kernel.Integer(`GET_ARG()`)};\n            if (arg >= 0) {\n              str = arg.toString();\n              while (str.length < precision) { str = '0' + str; }\n              if (flags&FMINUS) {\n                if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }\n                while (str.length < width) { str = str + ' '; }\n              } else {\n                if (flags&FZERO && precision === -1) {\n                  while (str.length < width - ((flags&FPLUS || flags&FSPACE) ? 1 : 0)) { str = '0' + str; }\n                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }\n                } else {\n                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }\n                  while (str.length < width) { str = ' ' + str; }\n                }\n              }\n            } else {\n              str = (-arg).toString();\n              while (str.length < precision) { str = '0' + str; }\n              if (flags&FMINUS) {\n                str = '-' + str;\n                while (str.length < width) { str = str + ' '; }\n              } else {\n                if (flags&FZERO && precision === -1) {\n                  while (str.length < width - 1) { str = '0' + str; }\n                  str = '-' + str;\n                } else {\n                  str = '-' + str;\n                  while (str.length < width) { str = ' ' + str; }\n                }\n              }\n            }\n            break format_sequence;\n\n          case 'b':\n          case 'B':\n          case 'o':\n          case 'x':\n          case 'X':\n            switch (format_string.charAt(i)) {\n            case 'b':\n            case 'B':\n              base_number = 2;\n              base_prefix = '0b';\n              base_neg_zero_regex = /^1+/;\n              base_neg_zero_digit = '1';\n              break;\n            case 'o':\n              base_number = 8;\n              base_prefix = '0';\n              base_neg_zero_regex = /^3?7+/;\n              base_neg_zero_digit = '7';\n              break;\n            case 'x':\n            case 'X':\n              base_number = 16;\n              base_prefix = '0x';\n              base_neg_zero_regex = /^f+/;\n              base_neg_zero_digit = 'f';\n              break;\n            }\n            arg = #{::Kernel.Integer(`GET_ARG()`)};\n            if (arg >= 0) {\n              str = arg.toString(base_number);\n              while (str.length < precision) { str = '0' + str; }\n              if (flags&FMINUS) {\n                if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }\n                if (flags&FSHARP && arg !== 0) { str = base_prefix + str; }\n                while (str.length < width) { str = str + ' '; }\n              } else {\n                if (flags&FZERO && precision === -1) {\n                  while (str.length < width - ((flags&FPLUS || flags&FSPACE) ? 1 : 0) - ((flags&FSHARP && arg !== 0) ? base_prefix.length : 0)) { str = '0' + str; }\n                  if (flags&FSHARP && arg !== 0) { str = base_prefix + str; }\n                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }\n                } else {\n                  if (flags&FSHARP && arg !== 0) { str = base_prefix + str; }\n                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }\n                  while (str.length < width) { str = ' ' + str; }\n                }\n              }\n            } else {\n              if (flags&FPLUS || flags&FSPACE) {\n                str = (-arg).toString(base_number);\n                while (str.length < precision) { str = '0' + str; }\n                if (flags&FMINUS) {\n                  if (flags&FSHARP) { str = base_prefix + str; }\n                  str = '-' + str;\n                  while (str.length < width) { str = str + ' '; }\n                } else {\n                  if (flags&FZERO && precision === -1) {\n                    while (str.length < width - 1 - (flags&FSHARP ? 2 : 0)) { str = '0' + str; }\n                    if (flags&FSHARP) { str = base_prefix + str; }\n                    str = '-' + str;\n                  } else {\n                    if (flags&FSHARP) { str = base_prefix + str; }\n                    str = '-' + str;\n                    while (str.length < width) { str = ' ' + str; }\n                  }\n                }\n              } else {\n                str = (arg >>> 0).toString(base_number).replace(base_neg_zero_regex, base_neg_zero_digit);\n                while (str.length < precision - 2) { str = base_neg_zero_digit + str; }\n                if (flags&FMINUS) {\n                  str = '..' + str;\n                  if (flags&FSHARP) { str = base_prefix + str; }\n                  while (str.length < width) { str = str + ' '; }\n                } else {\n                  if (flags&FZERO && precision === -1) {\n                    while (str.length < width - 2 - (flags&FSHARP ? base_prefix.length : 0)) { str = base_neg_zero_digit + str; }\n                    str = '..' + str;\n                    if (flags&FSHARP) { str = base_prefix + str; }\n                  } else {\n                    str = '..' + str;\n                    if (flags&FSHARP) { str = base_prefix + str; }\n                    while (str.length < width) { str = ' ' + str; }\n                  }\n                }\n              }\n            }\n            if (format_string.charAt(i) === format_string.charAt(i).toUpperCase()) {\n              str = str.toUpperCase();\n            }\n            break format_sequence;\n\n          case 'f':\n          case 'e':\n          case 'E':\n          case 'g':\n          case 'G':\n            arg = #{::Kernel.Float(`GET_ARG()`)};\n            if (arg >= 0 || isNaN(arg)) {\n              if (arg === Infinity) {\n                str = 'Inf';\n              } else {\n                switch (format_string.charAt(i)) {\n                case 'f':\n                  str = arg.toFixed(precision === -1 ? 6 : precision);\n                  break;\n                case 'e':\n                case 'E':\n                  str = arg.toExponential(precision === -1 ? 6 : precision);\n                  break;\n                case 'g':\n                case 'G':\n                  str = arg.toExponential();\n                  exponent = parseInt(str.split('e')[1], 10);\n                  if (!(exponent < -4 || exponent >= (precision === -1 ? 6 : precision))) {\n                    str = arg.toPrecision(precision === -1 ? (flags&FSHARP ? 6 : undefined) : precision);\n                  }\n                  break;\n                }\n              }\n              if (flags&FMINUS) {\n                if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }\n                while (str.length < width) { str = str + ' '; }\n              } else {\n                if (flags&FZERO && arg !== Infinity && !isNaN(arg)) {\n                  while (str.length < width - ((flags&FPLUS || flags&FSPACE) ? 1 : 0)) { str = '0' + str; }\n                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }\n                } else {\n                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }\n                  while (str.length < width) { str = ' ' + str; }\n                }\n              }\n            } else {\n              if (arg === -Infinity) {\n                str = 'Inf';\n              } else {\n                switch (format_string.charAt(i)) {\n                case 'f':\n                  str = (-arg).toFixed(precision === -1 ? 6 : precision);\n                  break;\n                case 'e':\n                case 'E':\n                  str = (-arg).toExponential(precision === -1 ? 6 : precision);\n                  break;\n                case 'g':\n                case 'G':\n                  str = (-arg).toExponential();\n                  exponent = parseInt(str.split('e')[1], 10);\n                  if (!(exponent < -4 || exponent >= (precision === -1 ? 6 : precision))) {\n                    str = (-arg).toPrecision(precision === -1 ? (flags&FSHARP ? 6 : undefined) : precision);\n                  }\n                  break;\n                }\n              }\n              if (flags&FMINUS) {\n                str = '-' + str;\n                while (str.length < width) { str = str + ' '; }\n              } else {\n                if (flags&FZERO && arg !== -Infinity) {\n                  while (str.length < width - 1) { str = '0' + str; }\n                  str = '-' + str;\n                } else {\n                  str = '-' + str;\n                  while (str.length < width) { str = ' ' + str; }\n                }\n              }\n            }\n            if (format_string.charAt(i) === format_string.charAt(i).toUpperCase() && arg !== Infinity && arg !== -Infinity && !isNaN(arg)) {\n              str = str.toUpperCase();\n            }\n            str = str.replace(/([eE][-+]?)([0-9])$/, '$10$2');\n            break format_sequence;\n\n          case 'a':\n          case 'A':\n            // Not implemented because there are no specs for this field type.\n            #{::Kernel.raise ::NotImplementedError, '`A` and `a` format field types are not implemented in Opal yet'}\n            // raise\n\n          case 'c':\n            arg = GET_ARG();\n            if (#{`arg`.respond_to?(:to_ary)}) { arg = #{`arg`.to_ary}[0]; }\n            if (#{`arg`.respond_to?(:to_str)}) {\n              str = #{`arg`.to_str};\n            } else {\n              str = String.fromCharCode($coerce_to(arg, #{::Integer}, 'to_int'));\n            }\n            if (str.length !== 1) {\n              #{::Kernel.raise ::ArgumentError, '%c requires a character'}\n            }\n            if (flags&FMINUS) {\n              while (str.length < width) { str = str + ' '; }\n            } else {\n              while (str.length < width) { str = ' ' + str; }\n            }\n            break format_sequence;\n\n          case 'p':\n            str = #{`GET_ARG()`.inspect};\n            if (precision !== -1) { str = str.slice(0, precision); }\n            if (flags&FMINUS) {\n              while (str.length < width) { str = str + ' '; }\n            } else {\n              while (str.length < width) { str = ' ' + str; }\n            }\n            break format_sequence;\n\n          case 's':\n            str = #{`GET_ARG()`.to_s};\n            if (precision !== -1) { str = str.slice(0, precision); }\n            if (flags&FMINUS) {\n              while (str.length < width) { str = str + ' '; }\n            } else {\n              while (str.length < width) { str = ' ' + str; }\n            }\n            break format_sequence;\n\n          default:\n            #{::Kernel.raise ::ArgumentError, \"malformed format string - %#{`format_string.charAt(i)`}\"}\n          }\n        }\n\n        if (str === undefined) {\n          #{::Kernel.raise ::ArgumentError, 'malformed format string - %'}\n        }\n\n        result += format_string.slice(begin_slice, end_slice) + str;\n        begin_slice = i + 1;\n      }\n\n      if (#{$DEBUG} && pos_arg_num >= 0 && seq_arg_num < args.length) {\n        #{::Kernel.raise ::ArgumentError, 'too many arguments for format string'}\n      }\n\n      return result + format_string.slice(begin_slice);\n    }\n  end\n\n  alias sprintf format\nend\n"],"names":["<top (required)>","<module:Kernel>","format","format_string","args","length","1","[]","0","respond_to?","ary","Opal","coerce_to?","Array","nil?","to_a","Kernel","raise","ArgumentError","to_int","fetch","Integer","Float","NotImplementedError","to_ary","to_str","inspect","to_s","$DEBUG"],"mappings":"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ACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA,kBAAoBc,OAAQK,SAAAA,CAAUnB,SAAVmB,CAAsBnB;AAClDA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;;AAEAA;AACAA;AACAA;AACAA;AACAA;AACAA,kBAAoBc,OAAQM,OAAAA,CAAQpB,SAARoB,CAAoBpB;AAChDA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;;AAEAA;AACAA;AACAA;AACAA,YAAcc,OAAQC,OAAAA,CAAOM,0BAAf,EAAsCrB,gEAA9Be;AACtBf;;AAEAA;AACAA;AACAA,gBAAkBA,CAACA,GAADA,CAAKO,gBAAAA,CAAa,QAAbA,CAAsBP,UAAYA,CAACA,GAADA,CAAKsB,QAAAA,CAAAA,CAAQtB;AACtEA,gBAAkBA,CAACA,GAADA,CAAKO,gBAAAA,CAAa,QAAbA,CAAsBP;AAC7CA,oBAAsBA,CAACA,GAADA,CAAKuB,QAAAA,CAAAA,CAAQvB;AACnCA;AACAA,wDAA0DmB,cAAUnB;AACpEA;AACAA;AACAA,cAAgBc,OAAQC,OAAAA,CAAOC,oBAAf,EAAgChB,yBAAxBe;AACxBf;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;;AAEAA;AACAA,kBAAoBA,CAACA,SAADA,CAAWwB,SAAAA,CAAAA,CAASxB;AACxCA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;;AAEAA;AACAA,kBAAoBA,CAACA,SAADA,CAAWyB,MAAAA,CAAAA,CAAMzB;AACrCA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;;AAEAA;AACAA,YAAcc,OAAQC,OAAAA,CAAOC,oBAAf,EAAiChB,6BAAD,GAAA,CAA+BA,uBAA/B,CAAxBe;AACtBf;AACAA;;AAEAA;AACAA,UAAYc,OAAQC,OAAAA,CAAOC,oBAAf,EAAgChB,6BAAxBe;AACpBf;;AAEAA;AACAA;AACAA;;AAEAA,UAAY0B,YAAO1B;AACnBA,QAAUc,OAAQC,OAAAA,CAAOC,oBAAf,EAAgChB,sCAAxBe;AAClBf;;AAEAA;AACAA;IA7hBEA,CAAAA,IAAAA;IAgiBAD,OAAA,aAAM,SAAN,EAAc,QAAd;EAjiBFA,GAAO,IAAPA;AAFAD;"}},{"offset":{"line":20276,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/string/encoding.rb"],"sourcesContent":["require 'corelib/string'\n\nclass ::Encoding\n  def self.register(name, options = {}, &block)\n    names = [name] + (options[:aliases] || [])\n    ascii = options[:ascii] || false\n    dummy = options[:dummy] || false\n\n    if options[:inherits]\n      encoding = options[:inherits].clone\n      encoding.initialize(name, names, ascii, dummy)\n    else\n      encoding = new(name, names, ascii, dummy)\n    end\n    encoding.instance_eval(&block) if block_given?\n\n    register = `Opal.encodings`\n    names.each do |encoding_name|\n      const_set encoding_name.tr('-', '_'), encoding\n      register.JS[encoding_name] = encoding\n    end\n  end\n\n  def self.find(name)\n    return default_external if name == :default_external\n    `return Opal.find_encoding(name)`\n  end\n\n  singleton_class.attr_accessor :default_external\n\n  attr_reader :name, :names\n\n  def initialize(name, names, ascii, dummy)\n    @name  = name\n    @names = names\n    @ascii = ascii\n    @dummy = dummy\n  end\n\n  def ascii_compatible?\n    @ascii\n  end\n\n  def dummy?\n    @dummy\n  end\n\n  def binary?\n    false\n  end\n\n  def to_s\n    @name\n  end\n\n  def inspect\n    \"#<Encoding:#{@name}#{' (dummy)' if @dummy}>\"\n  end\n\n  # methods to implement per encoding\n  def charsize(string)\n    %x{\n      var len = 0;\n      for (var i = 0, length = string.length; i < length; i++) {\n        var charcode = string.charCodeAt(i);\n        if (!(charcode >= 0xD800 && charcode <= 0xDBFF)) {\n          len++;\n        }\n      }\n      return len;\n    }\n  end\n\n  def each_char(string, &block)\n    %x{\n      var low_surrogate = \"\";\n      for (var i = 0, length = string.length; i < length; i++) {\n        var charcode = string.charCodeAt(i);\n        var chr = string.charAt(i);\n        if (charcode >= 0xDC00 && charcode <= 0xDFFF) {\n          low_surrogate = chr;\n          continue;\n        }\n        else if (charcode >= 0xD800 && charcode <= 0xDBFF) {\n          chr = low_surrogate + chr;\n        }\n        if (string.encoding.name != \"UTF-8\") {\n          chr = new String(chr);\n          chr.encoding = string.encoding;\n        }\n        Opal.yield1(block, chr);\n      }\n    }\n  end\n\n  def each_byte(*)\n    ::Kernel.raise ::NotImplementedError\n  end\n\n  def bytesize(*)\n    ::Kernel.raise ::NotImplementedError\n  end\n\n  class ::EncodingError < ::StandardError; end\n  class ::CompatibilityError < ::EncodingError; end\nend\n\n::Encoding.register 'UTF-8', aliases: ['CP65001'], ascii: true do\n  def each_byte(string, &block)\n    %x{\n      // Taken from: https://github.com/feross/buffer/blob/f52dffd9df0445b93c0c9065c2f8f0f46b2c729a/index.js#L1954-L2032\n      var units = Infinity;\n      var codePoint;\n      var length = string.length;\n      var leadSurrogate = null;\n\n      for (var i = 0; i < length; ++i) {\n        codePoint = string.charCodeAt(i);\n\n        // is surrogate component\n        if (codePoint > 0xD7FF && codePoint < 0xE000) {\n          // last char was a lead\n          if (!leadSurrogate) {\n            // no lead yet\n            if (codePoint > 0xDBFF) {\n              // unexpected trail\n              if ((units -= 3) > -1) {\n                #{yield `0xEF`};\n                #{yield `0xBF`};\n                #{yield `0xBD`};\n              }\n              continue;\n            } else if (i + 1 === length) {\n              // unpaired lead\n              if ((units -= 3) > -1) {\n                #{yield `0xEF`};\n                #{yield `0xBF`};\n                #{yield `0xBD`};\n              }\n              continue;\n            }\n\n            // valid lead\n            leadSurrogate = codePoint;\n\n            continue;\n          }\n\n          // 2 leads in a row\n          if (codePoint < 0xDC00) {\n            if ((units -= 3) > -1) {\n              #{yield `0xEF`};\n              #{yield `0xBF`};\n              #{yield `0xBD`};\n            }\n            leadSurrogate = codePoint;\n            continue;\n          }\n\n          // valid surrogate pair\n          codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n        } else if (leadSurrogate) {\n          // valid bmp char, but last char was a lead\n          if ((units -= 3) > -1) {\n            #{yield `0xEF`};\n            #{yield `0xBF`};\n            #{yield `0xBD`};\n          }\n        }\n\n        leadSurrogate = null;\n\n        // encode utf8\n        if (codePoint < 0x80) {\n          if ((units -= 1) < 0) break;\n          #{yield `codePoint`};\n        } else if (codePoint < 0x800) {\n          if ((units -= 2) < 0) break;\n          #{yield `codePoint >> 0x6 | 0xC0`};\n          #{yield `codePoint & 0x3F | 0x80`};\n        } else if (codePoint < 0x10000) {\n          if ((units -= 3) < 0) break;\n          #{yield `codePoint >> 0xC | 0xE0`};\n          #{yield `codePoint >> 0x6 & 0x3F | 0x80`};\n          #{yield `codePoint & 0x3F | 0x80`};\n        } else if (codePoint < 0x110000) {\n          if ((units -= 4) < 0) break;\n          #{yield `codePoint >> 0x12 | 0xF0`};\n          #{yield `codePoint >> 0xC & 0x3F | 0x80`};\n          #{yield `codePoint >> 0x6 & 0x3F | 0x80`};\n          #{yield `codePoint & 0x3F | 0x80`};\n        } else {\n          // Invalid code point\n        }\n      }\n    }\n  end\n\n  def bytesize(string)\n    string.bytes.length\n  end\nend\n\n::Encoding.register 'UTF-16LE' do\n  def each_byte(string, &block)\n    %x{\n      for (var i = 0, length = string.length; i < length; i++) {\n        var code = string.charCodeAt(i);\n\n        #{yield `code & 0xff`};\n        #{yield `code >> 8`};\n      }\n    }\n  end\n\n  def bytesize(string)\n    `string.length * 2`\n  end\nend\n\n::Encoding.register 'UTF-16BE', inherits: ::Encoding::UTF_16LE do\n  def each_byte(string, &block)\n    %x{\n      for (var i = 0, length = string.length; i < length; i++) {\n        var code = string.charCodeAt(i);\n\n        #{yield `code >> 8`};\n        #{yield `code & 0xff`};\n      }\n    }\n  end\nend\n\n::Encoding.register 'UTF-32LE' do\n  def each_byte(string, &block)\n    %x{\n      for (var i = 0, length = string.length; i < length; i++) {\n        var code = string.charCodeAt(i);\n\n        #{yield `code & 0xff`};\n        #{yield `code >> 8`};\n        #{yield 0};\n        #{yield 0};\n      }\n    }\n  end\n\n  def bytesize(string)\n    `string.length * 4`\n  end\nend\n\n::Encoding.register 'UTF-32BE', inherits: ::Encoding::UTF_32LE do\n  def each_byte(string, &block)\n    %x{\n      for (var i = 0, length = string.length; i < length; i++) {\n        var code = string.charCodeAt(i);\n\n        #{yield 0};\n        #{yield 0};\n        #{yield `code >> 8`};\n        #{yield `code & 0xff`};\n      }\n    }\n  end\nend\n\n::Encoding.register 'ASCII-8BIT', aliases: ['BINARY'], ascii: true do\n  def each_char(string, &block)\n    %x{\n      for (var i = 0, length = string.length; i < length; i++) {\n        var chr = new String(string.charAt(i));\n        chr.encoding = string.encoding;\n        #{yield `chr`};\n      }\n    }\n  end\n\n  def charsize(string)\n    `string.length`\n  end\n\n  def each_byte(string, &block)\n    %x{\n      for (var i = 0, length = string.length; i < length; i++) {\n        var code = string.charCodeAt(i);\n        #{yield `code & 0xff`};\n      }\n    }\n  end\n\n  def bytesize(string)\n    `string.length`\n  end\n\n  def binary?\n    true\n  end\nend\n\n::Encoding.register 'ISO-8859-1', aliases: ['ISO8859-1'], ascii: true, inherits: ::Encoding::ASCII_8BIT\n::Encoding.register 'US-ASCII', aliases: ['ASCII'], ascii: true, inherits: ::Encoding::ASCII_8BIT\n\nclass ::String\n  attr_reader :encoding\n  attr_reader :internal_encoding\n  `Opal.prop(String.prototype, 'bytes', nil)`\n  `Opal.prop(String.prototype, 'encoding', #{::Encoding::UTF_8})`\n  `Opal.prop(String.prototype, 'internal_encoding', #{::Encoding::UTF_8})`\n\n  def b\n    dup.force_encoding('binary')\n  end\n\n  def bytesize\n    @internal_encoding.bytesize(self)\n  end\n\n  def each_byte(&block)\n    return enum_for(:each_byte) { bytesize } unless block_given?\n\n    @internal_encoding.each_byte(self, &block)\n\n    self\n  end\n\n  def bytes\n    # REMIND: required when running in strict mode, otherwise the following error will be thrown:\n    # Cannot create property 'bytes' on string 'abc'\n    %x{\n      if (typeof self === 'string') {\n        return #{`new String(self)`.each_byte.to_a};\n      }\n    }\n\n    @bytes ||= each_byte.to_a\n    @bytes.dup\n  end\n\n  def each_char(&block)\n    return enum_for(:each_char) { length } unless block_given?\n\n    @encoding.each_char(self, &block)\n\n    self\n  end\n\n  def chars(&block)\n    return each_char.to_a unless block\n\n    each_char(&block)\n  end\n\n  def each_codepoint(&block)\n    return enum_for :each_codepoint unless block_given?\n    %x{\n      for (var i = 0, length = self.length; i < length; i++) {\n        #{yield `self.codePointAt(i)`};\n      }\n    }\n    self\n  end\n\n  def codepoints(&block)\n    # If a block is given, which is a deprecated form, works the same as each_codepoint.\n    return each_codepoint(&block) if block_given?\n    each_codepoint.to_a\n  end\n\n  def encode(encoding)\n    `Opal.enc(self, encoding)`\n  end\n\n  def force_encoding(encoding)\n    %x{\n      var str = self;\n\n      if (encoding === str.encoding) { return str; }\n\n      encoding = #{::Opal.coerce_to!(encoding, ::String, :to_s)};\n      encoding = #{::Encoding.find(encoding)};\n\n      if (encoding === str.encoding) { return str; }\n\n      str = Opal.set_encoding(str, encoding);\n\n      return str;\n    }\n  end\n\n  def getbyte(idx)\n    string_bytes = bytes\n    idx = ::Opal.coerce_to!(idx, ::Integer, :to_int)\n    return if string_bytes.length < idx\n\n    string_bytes[idx]\n  end\n\n  def initialize_copy(other)\n    %{\n      self.encoding = other.encoding;\n      self.internal_encoding = other.internal_encoding;\n    }\n  end\n\n  def length\n    `self.length`\n  end\n\n  alias size length\n\n  # stub\n  def valid_encoding?\n    true\n  end\nend\n\n::Encoding.default_external = __ENCODING__\n"],"names":["<top (required)>","self","require","<class:Encoding>","register","name","options","names","+","$ret_or_1","[]","ascii","dummy","encoding","clone","initialize","new","block_given?","instance_eval","block","to_proc","each","block in register","encoding_name","block (2 levels) in register","const_set","tr","find","default_external","singleton_class","attr_accessor","attr_reader","@name","@names","@ascii","@dummy","ascii_compatible?","dummy?","binary?","to_s","inspect","charsize","string","each_char","each_byte","Kernel","raise","NotImplementedError","bytesize","<class:EncodingError>","StandardError","<class:CompatibilityError>","EncodingError","Encoding","block in <top (required)>","block (2 levels) in <top (required)>","bytes","length","Encoding::UTF_16LE","0","Encoding::UTF_32LE","Encoding::ASCII_8BIT","<class:String>","Encoding::UTF_8","b","dup","force_encoding","@internal_encoding","enum_for","block in each_byte","block (2 levels) in each_byte","to_a","@bytes","block in each_char","block (2 levels) in each_char","@encoding","chars","each_codepoint","codepoints","encode","Opal","coerce_to!","String","getbyte","idx","string_bytes","Integer","<","initialize_copy","other","valid_encoding?","$writer","default_external=","-","1"],"mappings":"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"}},{"offset":{"line":20837,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/math.rb"],"sourcesContent":["# helpers: type_error\n\nmodule ::Math\n  self::E  = `Math.E`\n  self::PI = `Math.PI`\n\n  self::DomainError = ::Class.new(::StandardError)\n\n  def self.checked(method, *args)\n    %x{\n      if (isNaN(args[0]) || (args.length == 2 && isNaN(args[1]))) {\n        return NaN;\n      }\n\n      var result = Math[method].apply(null, args);\n\n      if (isNaN(result)) {\n        #{::Kernel.raise DomainError, \"Numerical argument is out of domain - \\\"#{method}\\\"\"};\n      }\n\n      return result;\n    }\n  end\n\n  def self.float!(value)\n    ::Kernel.Float(value)\n  rescue ::ArgumentError\n    ::Kernel.raise `$type_error(value, #{::Float})`\n  end\n\n  def self.integer!(value)\n    ::Kernel.Integer(value)\n  rescue ::ArgumentError\n    ::Kernel.raise `$type_error(value, #{::Integer})`\n  end\n\n  module_function\n\n  def acos(x)\n    ::Math.checked :acos, ::Math.float!(x)\n  end\n\n  unless defined?(`Math.acosh`)\n    %x{\n      Math.acosh = function(x) {\n        return Math.log(x + Math.sqrt(x * x - 1));\n      }\n    }\n  end\n\n  def acosh(x)\n    ::Math.checked :acosh, ::Math.float!(x)\n  end\n\n  def asin(x)\n    ::Math.checked :asin, ::Math.float!(x)\n  end\n\n  unless defined?(`Math.asinh`)\n    %x{\n      Math.asinh = function(x) {\n        return Math.log(x + Math.sqrt(x * x + 1))\n      }\n    }\n  end\n\n  def asinh(x)\n    ::Math.checked :asinh, ::Math.float!(x)\n  end\n\n  def atan(x)\n    ::Math.checked :atan, ::Math.float!(x)\n  end\n\n  def atan2(y, x)\n    ::Math.checked :atan2, ::Math.float!(y), ::Math.float!(x)\n  end\n\n  unless defined?(`Math.atanh`)\n    %x{\n      Math.atanh = function(x) {\n        return 0.5 * Math.log((1 + x) / (1 - x));\n      }\n    }\n  end\n\n  def atanh(x)\n    ::Math.checked :atanh, ::Math.float!(x)\n  end\n\n  unless defined?(`Math.cbrt`)\n    %x{\n      Math.cbrt = function(x) {\n        if (x == 0) {\n          return 0;\n        }\n\n        if (x < 0) {\n          return -Math.cbrt(-x);\n        }\n\n        var r  = x,\n            ex = 0;\n\n        while (r < 0.125) {\n          r *= 8;\n          ex--;\n        }\n\n        while (r > 1.0) {\n          r *= 0.125;\n          ex++;\n        }\n\n        r = (-0.46946116 * r + 1.072302) * r + 0.3812513;\n\n        while (ex < 0) {\n          r *= 0.5;\n          ex++;\n        }\n\n        while (ex > 0) {\n          r *= 2;\n          ex--;\n        }\n\n        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);\n        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);\n        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);\n        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);\n\n        return r;\n      }\n    }\n  end\n\n  def cbrt(x)\n    ::Math.checked :cbrt, ::Math.float!(x)\n  end\n\n  def cos(x)\n    ::Math.checked :cos, ::Math.float!(x)\n  end\n\n  unless defined?(`Math.cosh`)\n    %x{\n      Math.cosh = function(x) {\n        return (Math.exp(x) + Math.exp(-x)) / 2;\n      }\n    }\n  end\n\n  def cosh(x)\n    ::Math.checked :cosh, ::Math.float!(x)\n  end\n\n  unless defined?(`Math.erf`)\n    %x{\n      Opal.prop(Math, 'erf', function(x) {\n        var A1 =  0.254829592,\n            A2 = -0.284496736,\n            A3 =  1.421413741,\n            A4 = -1.453152027,\n            A5 =  1.061405429,\n            P  =  0.3275911;\n\n        var sign = 1;\n\n        if (x < 0) {\n            sign = -1;\n        }\n\n        x = Math.abs(x);\n\n        var t = 1.0 / (1.0 + P * x);\n        var y = 1.0 - (((((A5 * t + A4) * t) + A3) * t + A2) * t + A1) * t * Math.exp(-x * x);\n\n        return sign * y;\n      });\n    }\n  end\n\n  def erf(x)\n    ::Math.checked :erf, ::Math.float!(x)\n  end\n\n  unless defined?(`Math.erfc`)\n    %x{\n      Opal.prop(Math, 'erfc', function(x) {\n        var z = Math.abs(x),\n            t = 1.0 / (0.5 * z + 1.0);\n\n        var A1 = t * 0.17087277 + -0.82215223,\n            A2 = t * A1 + 1.48851587,\n            A3 = t * A2 + -1.13520398,\n            A4 = t * A3 + 0.27886807,\n            A5 = t * A4 + -0.18628806,\n            A6 = t * A5 + 0.09678418,\n            A7 = t * A6 + 0.37409196,\n            A8 = t * A7 + 1.00002368,\n            A9 = t * A8,\n            A10 = -z * z - 1.26551223 + A9;\n\n        var a = t * Math.exp(A10);\n\n        if (x < 0.0) {\n          return 2.0 - a;\n        }\n        else {\n          return a;\n        }\n      });\n    }\n  end\n\n  def erfc(x)\n    ::Math.checked :erfc, ::Math.float!(x)\n  end\n\n  def exp(x)\n    ::Math.checked :exp, ::Math.float!(x)\n  end\n\n  def frexp(x)\n    x = Math.float!(x)\n\n    %x{\n      if (isNaN(x)) {\n        return [NaN, 0];\n      }\n\n      var ex   = Math.floor(Math.log(Math.abs(x)) / Math.log(2)) + 1,\n          frac = x / Math.pow(2, ex);\n\n      return [frac, ex];\n    }\n  end\n\n  def gamma(n)\n    n = Math.float!(n)\n\n    %x{\n      var i, t, x, value, result, twoN, threeN, fourN, fiveN;\n\n      var G = 4.7421875;\n\n      var P = [\n         0.99999999999999709182,\n         57.156235665862923517,\n        -59.597960355475491248,\n         14.136097974741747174,\n        -0.49191381609762019978,\n         0.33994649984811888699e-4,\n         0.46523628927048575665e-4,\n        -0.98374475304879564677e-4,\n         0.15808870322491248884e-3,\n        -0.21026444172410488319e-3,\n         0.21743961811521264320e-3,\n        -0.16431810653676389022e-3,\n         0.84418223983852743293e-4,\n        -0.26190838401581408670e-4,\n         0.36899182659531622704e-5\n      ];\n\n\n      if (isNaN(n)) {\n        return NaN;\n      }\n\n      if (n === 0 && 1 / n < 0) {\n        return -Infinity;\n      }\n\n      if (n === -1 || n === -Infinity) {\n        #{::Kernel.raise DomainError, 'Numerical argument is out of domain - \"gamma\"'};\n      }\n\n      if (#{Integer === n}) {\n        if (n <= 0) {\n          return isFinite(n) ? Infinity : NaN;\n        }\n\n        if (n > 171) {\n          return Infinity;\n        }\n\n        value  = n - 2;\n        result = n - 1;\n\n        while (value > 1) {\n          result *= value;\n          value--;\n        }\n\n        if (result == 0) {\n          result = 1;\n        }\n\n        return result;\n      }\n\n      if (n < 0.5) {\n        return Math.PI / (Math.sin(Math.PI * n) * #{::Math.gamma(1 - n)});\n      }\n\n      if (n >= 171.35) {\n        return Infinity;\n      }\n\n      if (n > 85.0) {\n        twoN   = n * n;\n        threeN = twoN * n;\n        fourN  = threeN * n;\n        fiveN  = fourN * n;\n\n        return Math.sqrt(2 * Math.PI / n) * Math.pow((n / Math.E), n) *\n          (1 + 1 / (12 * n) + 1 / (288 * twoN) - 139 / (51840 * threeN) -\n          571 / (2488320 * fourN) + 163879 / (209018880 * fiveN) +\n          5246819 / (75246796800 * fiveN * n));\n      }\n\n      n -= 1;\n      x  = P[0];\n\n      for (i = 1; i < P.length; ++i) {\n        x += P[i] / (n + i);\n      }\n\n      t = n + G + 0.5;\n\n      return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;\n    }\n  end\n\n  unless defined?(`Math.hypot`)\n    %x{\n      Math.hypot = function(x, y) {\n        return Math.sqrt(x * x + y * y)\n      }\n    }\n  end\n\n  def hypot(x, y)\n    ::Math.checked :hypot, ::Math.float!(x), ::Math.float!(y)\n  end\n\n  def ldexp(mantissa, exponent)\n    mantissa = Math.float!(mantissa)\n    exponent = Math.integer!(exponent)\n\n    %x{\n      if (isNaN(exponent)) {\n        #{::Kernel.raise ::RangeError, 'float NaN out of range of integer'};\n      }\n\n      return mantissa * Math.pow(2, exponent);\n    }\n  end\n\n  def lgamma(n)\n    %x{\n      if (n == -1) {\n        return [Infinity, 1];\n      }\n      else {\n        return [Math.log(Math.abs(#{::Math.gamma(n)})), #{::Math.gamma(n)} < 0 ? -1 : 1];\n      }\n    }\n  end\n\n  def log(x, base = undefined)\n    if ::String === x\n      ::Kernel.raise `$type_error(x, #{::Float})`\n    end\n\n    if `base == null`\n      ::Math.checked :log, ::Math.float!(x)\n    else\n      if ::String === base\n        ::Kernel.raise `$type_error(base, #{::Float})`\n      end\n\n      ::Math.checked(:log, ::Math.float!(x)) / ::Math.checked(:log, ::Math.float!(base))\n    end\n  end\n\n  unless defined?(`Math.log10`)\n    %x{\n      Math.log10 = function(x) {\n        return Math.log(x) / Math.LN10;\n      }\n    }\n  end\n\n  def log10(x)\n    if ::String === x\n      ::Kernel.raise `$type_error(x, #{::Float})`\n    end\n\n    ::Math.checked :log10, ::Math.float!(x)\n  end\n\n  unless defined?(`Math.log2`)\n    %x{\n      Math.log2 = function(x) {\n        return Math.log(x) / Math.LN2;\n      }\n    }\n  end\n\n  def log2(x)\n    if ::String === x\n      ::Kernel.raise `$type_error(x, #{::Float})`\n    end\n\n    ::Math.checked :log2, ::Math.float!(x)\n  end\n\n  def sin(x)\n    ::Math.checked :sin, ::Math.float!(x)\n  end\n\n  unless defined?(`Math.sinh`)\n    %x{\n      Math.sinh = function(x) {\n        return (Math.exp(x) - Math.exp(-x)) / 2;\n      }\n    }\n  end\n\n  def sinh(x)\n    ::Math.checked :sinh, ::Math.float!(x)\n  end\n\n  def sqrt(x)\n    ::Math.checked :sqrt, ::Math.float!(x)\n  end\n\n  def tan(x)\n    x = ::Math.float!(x)\n\n    if x.infinite?\n      return ::Float::NAN\n    end\n\n    ::Math.checked :tan, ::Math.float!(x)\n  end\n\n  unless defined?(`Math.tanh`)\n    %x{\n      Math.tanh = function(x) {\n        if (x == Infinity) {\n          return 1;\n        }\n        else if (x == -Infinity) {\n          return -1;\n        }\n        else {\n          return (Math.exp(x) - Math.exp(-x)) / (Math.exp(x) + Math.exp(-x));\n        }\n      }\n    }\n  end\n\n  def tanh(x)\n    ::Math.checked :tanh, ::Math.float!(x)\n  end\nend\n"],"names":["<top (required)>","<module:Math>","self","Class","new","StandardError","checked","method","Kernel","raise","DomainError","float!","value","Float","ArgumentError","integer!","Integer","module_function","acos","x","Math","acosh","asin","asinh","atan","atan2","y","atanh","cbrt","cos","cosh","erf","erfc","exp","frexp","gamma","n","===","-","1","hypot","ldexp","mantissa","exponent","RangeError","lgamma","log","base","String","/","log10","log2","sin","sinh","sqrt","tan","infinite?","Float::NAN","tanh"],"mappings":"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"}},{"offset":{"line":21343,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/complex/base.rb"],"sourcesContent":["module ::Kernel\n  def Complex(real, imag = nil)\n    if imag\n      Complex.new(real, imag)\n    else\n      Complex.new(real, 0)\n    end\n  end\nend\n\nclass ::String\n  def to_c\n    Complex.from_string(self)\n  end\nend\n"],"names":["<top (required)>","<module:Kernel>","Complex","real","imag","new","0","<class:String>","to_c","from_string","self"],"mappings":"AAAAA,uDAAAA;EAAAA;;EAAAA;;EAAAC;EAAAA;;IAAAA;;IACEA,OAAAC,uBAAAA,mBAAYC,IAAD,EAAOC,IAAlBF;AAAAA;;;MAAkB,yBAAO,GAAP;MAChB,IAAA,QAAGE,IAAH,CAAA;QACEF,OAAAA,aAAOG,KAAAA,CAAKF,IAAZ,EAAkBC,IAAXC;MADT;QAGEH,OAAAA,aAAOG,KAAAA,CAAKF,IAAZ,EAAkBG,CAAXD;MAHT;IADFH,CAAAA,IAAAA;EADFD,GAAO,IAAPA;EAUAD,OAAAO;EAAAA;;IAAAA;;IACEA,OAAAC,oBAAAA,gBAAAA;AAAAA,MAAAA;;MACEA,OAAAN,aAAOO,aAAAA,CAAaC,IAAbD;IADTD,CAAAA,GAAAA;EADFD,GAAM,IAANA,EAAAA,IAAAA;AAVAP;"}},{"offset":{"line":21378,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/complex.rb"],"sourcesContent":["require 'corelib/numeric'\nrequire 'corelib/complex/base'\n\nclass ::Complex < ::Numeric\n  def self.rect(real, imag = 0)\n    unless ::Numeric === real && real.real? && ::Numeric === imag && imag.real?\n      ::Kernel.raise ::TypeError, 'not a real'\n    end\n\n    new(real, imag)\n  end\n\n  def self.polar(r, theta = 0)\n    unless ::Numeric === r && r.real? && ::Numeric === theta && theta.real?\n      ::Kernel.raise ::TypeError, 'not a real'\n    end\n\n    new(r * ::Math.cos(theta), r * ::Math.sin(theta))\n  end\n\n  attr_reader :real, :imag\n\n  def initialize(real, imag = 0)\n    @real = real\n    @imag = imag\n  end\n\n  def coerce(other)\n    if ::Complex === other\n      [other, self]\n    elsif ::Numeric === other && other.real?\n      [::Complex.new(other, 0), self]\n    else\n      ::Kernel.raise ::TypeError, \"#{other.class} can't be coerced into Complex\"\n    end\n  end\n\n  def ==(other)\n    if ::Complex === other\n      @real == other.real && @imag == other.imag\n    elsif ::Numeric === other && other.real?\n      @real == other && @imag == 0\n    else\n      other == self\n    end\n  end\n\n  def -@\n    ::Kernel.Complex(-@real, -@imag)\n  end\n\n  def +(other)\n    if ::Complex === other\n      ::Kernel.Complex(@real + other.real, @imag + other.imag)\n    elsif ::Numeric === other && other.real?\n      ::Kernel.Complex(@real + other, @imag)\n    else\n      __coerced__ :+, other\n    end\n  end\n\n  def -(other)\n    if ::Complex === other\n      ::Kernel.Complex(@real - other.real, @imag - other.imag)\n    elsif ::Numeric === other && other.real?\n      ::Kernel.Complex(@real - other, @imag)\n    else\n      __coerced__ :-, other\n    end\n  end\n\n  def *(other)\n    if ::Complex === other\n      ::Kernel.Complex(@real * other.real - @imag * other.imag,\n        @real * other.imag + @imag * other.real,\n      )\n    elsif ::Numeric === other && other.real?\n      ::Kernel.Complex(@real * other, @imag * other)\n    else\n      __coerced__ :*, other\n    end\n  end\n\n  def /(other)\n    if ::Complex === other\n      if (::Number === @real && @real.nan?) || (::Number === @imag && @imag.nan?) ||\n         (::Number === other.real && other.real.nan?) || (::Number === other.imag && other.imag.nan?)\n        ::Complex.new(::Float::NAN, ::Float::NAN)\n      else\n        self * other.conj / other.abs2\n      end\n    elsif ::Numeric === other && other.real?\n      ::Kernel.Complex(@real.quo(other), @imag.quo(other))\n    else\n      __coerced__ :/, other\n    end\n  end\n\n  def **(other)\n    if other == 0\n      return ::Complex.new(1, 0)\n    end\n\n    if ::Complex === other\n      r, theta = polar\n      ore      = other.real\n      oim      = other.imag\n      nr       = ::Math.exp(ore * ::Math.log(r) - oim * theta)\n      ntheta   = theta * ore + oim * ::Math.log(r)\n\n      ::Complex.polar(nr, ntheta)\n    elsif ::Integer === other\n      if other > 0\n        x = self\n        z = x\n        n = other - 1\n\n        while n != 0\n          div, mod = n.divmod(2)\n          while mod == 0\n            x = ::Kernel.Complex(x.real * x.real - x.imag * x.imag, 2 * x.real * x.imag)\n            n = div\n            div, mod = n.divmod(2)\n          end\n\n          z *= x\n          n -= 1\n        end\n\n        z\n      else\n        (::Rational.new(1, 1) / self)**-other\n      end\n    elsif ::Float === other || ::Rational === other\n      r, theta = polar\n\n      ::Complex.polar(r**other, theta * other)\n    else\n      __coerced__ :**, other\n    end\n  end\n\n  def abs\n    ::Math.hypot(@real, @imag)\n  end\n\n  def abs2\n    @real * @real + @imag * @imag\n  end\n\n  def angle\n    ::Math.atan2(@imag, @real)\n  end\n\n  def conj\n    ::Kernel.Complex(@real, -@imag)\n  end\n\n  def denominator\n    @real.denominator.lcm(@imag.denominator)\n  end\n\n  def eql?(other)\n    Complex === other && @real.class == @imag.class && self == other\n  end\n\n  def fdiv(other)\n    unless ::Numeric === other\n      ::Kernel.raise ::TypeError, \"#{other.class} can't be coerced into Complex\"\n    end\n\n    self / other\n  end\n\n  def finite?\n    @real.finite? && @imag.finite?\n  end\n\n  def hash\n    \"Complex:#{@real}:#{@imag}\"\n  end\n\n  def infinite?\n    @real.infinite? || @imag.infinite?\n  end\n\n  def inspect\n    \"(#{self})\"\n  end\n\n  def numerator\n    d = denominator\n\n    ::Kernel.Complex(@real.numerator * (d / @real.denominator),\n      @imag.numerator * (d / @imag.denominator),\n    )\n  end\n\n  def polar\n    [abs, arg]\n  end\n\n  def rationalize(eps = undefined)\n    %x{\n      if (arguments.length > 1) {\n        #{::Kernel.raise ::ArgumentError, \"wrong number of arguments (#{`arguments.length`} for 0..1)\"};\n      }\n    }\n\n    if @imag != 0\n      ::Kernel.raise ::RangeError, \"can't convert #{self} into Rational\"\n    end\n\n    real.rationalize(eps)\n  end\n\n  def real?\n    false\n  end\n\n  def rect\n    [@real, @imag]\n  end\n\n  def to_f\n    unless @imag == 0\n      ::Kernel.raise ::RangeError, \"can't convert #{self} into Float\"\n    end\n\n    @real.to_f\n  end\n\n  def to_i\n    unless @imag == 0\n      ::Kernel.raise ::RangeError, \"can't convert #{self} into Integer\"\n    end\n\n    @real.to_i\n  end\n\n  def to_r\n    unless @imag == 0\n      ::Kernel.raise ::RangeError, \"can't convert #{self} into Rational\"\n    end\n\n    @real.to_r\n  end\n\n  def to_s\n    result = @real.inspect\n\n    result +=\n      if (::Number === @imag && @imag.nan?) || @imag.positive? || @imag.zero?\n        '+'\n      else\n        '-'\n      end\n\n    result += @imag.abs.inspect\n\n    if ::Number === @imag && (@imag.nan? || @imag.infinite?)\n      result += '*'\n    end\n\n    result + 'i'\n  end\n\n  I = new(0, 1)\n\n  def self.from_string(str)\n    %x{\n      var re = /[+-]?[\\d_]+(\\.[\\d_]+)?(e\\d+)?/,\n          match = str.match(re),\n          real, imag, denominator;\n\n      function isFloat() {\n        return re.test(str);\n      }\n\n      function cutFloat() {\n        var match = str.match(re);\n        var number = match[0];\n        str = str.slice(number.length);\n        return number.replace(/_/g, '');\n      }\n\n      // handles both floats and rationals\n      function cutNumber() {\n        if (isFloat()) {\n          var numerator = parseFloat(cutFloat());\n\n          if (str[0] === '/') {\n            // rational real part\n            str = str.slice(1);\n\n            if (isFloat()) {\n              var denominator = parseFloat(cutFloat());\n              return #{::Kernel.Rational(`numerator`, `denominator`)};\n            } else {\n              // reverting '/'\n              str = '/' + str;\n              return numerator;\n            }\n          } else {\n            // float real part, no denominator\n            return numerator;\n          }\n        } else {\n          return null;\n        }\n      }\n\n      real = cutNumber();\n\n      if (!real) {\n        if (str[0] === 'i') {\n          // i => Complex(0, 1)\n          return #{::Kernel.Complex(0, 1)};\n        }\n        if (str[0] === '-' && str[1] === 'i') {\n          // -i => Complex(0, -1)\n          return #{::Kernel.Complex(0, -1)};\n        }\n        if (str[0] === '+' && str[1] === 'i') {\n          // +i => Complex(0, 1)\n          return #{::Kernel.Complex(0, 1)};\n        }\n        // anything => Complex(0, 0)\n        return #{::Kernel.Complex(0, 0)};\n      }\n\n      imag = cutNumber();\n      if (!imag) {\n        if (str[0] === 'i') {\n          // 3i => Complex(0, 3)\n          return #{::Kernel.Complex(0, `real`)};\n        } else {\n          // 3 => Complex(3, 0)\n          return #{::Kernel.Complex(`real`, 0)};\n        }\n      } else {\n        // 3+2i => Complex(3, 2)\n        return #{::Kernel.Complex(`real`, `imag`)};\n      }\n    }\n  end\n\n  class << self\n    alias rectangular rect\n  end\n\n  alias arg angle\n  alias conjugate conj\n  alias divide /\n  alias imaginary imag\n  alias magnitude abs\n  alias phase arg\n  alias quo /\n  alias rectangular rect\n\n  undef negative?\n  undef positive?\n  undef step\nend\n"],"names":["<top (required)>","self","require","<class:Complex>","rect","real","imag","0","Numeric","real?","Kernel","raise","TypeError","new","polar","r","theta","*","Math","cos","sin","attr_reader","initialize","@real","@imag","coerce","other","Complex","class","==","$ret_or_1","-@","+","__coerced__","-","/","Number","nan?","Float::NAN","Float","conj","abs2","quo","**","1","ore","oim","nr","exp","log","ntheta","Integer",">","x","z","n","divmod","2","div","mod","Rational","abs","hypot","angle","atan2","denominator","lcm","eql?","$ret_or_2","===","fdiv","finite?","hash","infinite?","inspect","numerator","d","arg","rationalize","eps","ArgumentError","RangeError","to_f","to_i","to_r","to_s","result","positive?","zero?","from_string","str","-1"],"mappings":"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"}},{"offset":{"line":21829,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/rational/base.rb"],"sourcesContent":["module ::Kernel\n  def Rational(numerator, denominator = 1)\n    ::Rational.convert(numerator, denominator)\n  end\nend\n\nclass ::String\n  def to_r\n    ::Rational.from_string(self)\n  end\nend\n"],"names":["<top (required)>","<module:Kernel>","Rational","numerator","denominator","1","convert","<class:String>","to_r","from_string","self"],"mappings":"AAAAA,wDAAAA;EAAAA;;EAAAA;;EAAAC;EAAAA;;;IACEA,OAAAC,wBAAAA,oBAAaC,SAAD,EAAYC,WAAxBF;AAAAA;;;MAAwB,uCAAcG,CAAd;MACtBH,OAAAA,eAAUI,SAAAA,CAASH,SAAnB,EAA8BC,WAApBE;IADZJ,CAAAA,IAAAA;EADFD,GAAO,IAAPA;EAMAD,OAAAO;EAAAA;;;IACEA,OAAAC,oBAAAA,gBAAAA;AAAAA,MAAAA;;MACEA,OAAAN,eAAUO,aAAAA,CAAaC,IAAbD;IADZD,CAAAA,GAAAA;EADFD,GAAM,IAANA,EAAAA,IAAAA;AANAP;"}},{"offset":{"line":21858,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/rational.rb"],"sourcesContent":["require 'corelib/numeric'\nrequire 'corelib/rational/base'\n\nclass ::Rational < ::Numeric\n  def self.reduce(num, den)\n    num = num.to_i\n    den = den.to_i\n\n    if den == 0\n      ::Kernel.raise ::ZeroDivisionError, 'divided by 0'\n    elsif den < 0\n      num = -num\n      den = -den\n    elsif den == 1\n      return new(num, den)\n    end\n\n    gcd = num.gcd(den)\n\n    new(num / gcd, den / gcd)\n  end\n\n  def self.convert(num, den)\n    if num.nil? || den.nil?\n      ::Kernel.raise ::TypeError, 'cannot convert nil into Rational'\n    end\n\n    if ::Integer === num && ::Integer === den\n      return reduce(num, den)\n    end\n\n    if ::Float === num || ::String === num || ::Complex === num\n      num = num.to_r\n    end\n\n    if ::Float === den || ::String === den || ::Complex === den\n      den = den.to_r\n    end\n\n    if den.equal?(1) && !(::Integer === num)\n      ::Opal.coerce_to!(num, ::Rational, :to_r)\n    elsif ::Numeric === num && ::Numeric === den\n      num / den\n    else\n      reduce(num, den)\n    end\n  end\n\n  def initialize(num, den)\n    @num = num\n    @den = den\n  end\n\n  def numerator\n    @num\n  end\n\n  def denominator\n    @den\n  end\n\n  def coerce(other)\n    case other\n    when ::Rational\n      [other, self]\n\n    when ::Integer\n      [other.to_r, self]\n\n    when ::Float\n      [other, to_f]\n    end\n  end\n\n  def ==(other)\n    case other\n    when ::Rational\n      @num == other.numerator && @den == other.denominator\n\n    when ::Integer\n      @num == other && @den == 1\n\n    when ::Float\n      to_f == other\n\n    else\n      other == self\n    end\n  end\n\n  def <=>(other)\n    case other\n    when ::Rational\n      @num * other.denominator - @den * other.numerator <=> 0\n\n    when ::Integer\n      @num - @den * other <=> 0\n\n    when ::Float\n      to_f <=> other\n\n    else\n      __coerced__ :<=>, other\n    end\n  end\n\n  def +(other)\n    case other\n    when ::Rational\n      num = @num * other.denominator + @den * other.numerator\n      den = @den * other.denominator\n\n      ::Kernel.Rational(num, den)\n\n    when ::Integer\n      ::Kernel.Rational(@num + other * @den, @den)\n\n    when ::Float\n      to_f + other\n\n    else\n      __coerced__ :+, other\n    end\n  end\n\n  def -(other)\n    case other\n    when ::Rational\n      num = @num * other.denominator - @den * other.numerator\n      den = @den * other.denominator\n\n      ::Kernel.Rational(num, den)\n\n    when ::Integer\n      ::Kernel.Rational(@num - other * @den, @den)\n\n    when ::Float\n      to_f - other\n\n    else\n      __coerced__ :-, other\n    end\n  end\n\n  def *(other)\n    case other\n    when ::Rational\n      num = @num * other.numerator\n      den = @den * other.denominator\n\n      ::Kernel.Rational(num, den)\n\n    when ::Integer\n      ::Kernel.Rational(@num * other, @den)\n\n    when ::Float\n      to_f * other\n\n    else\n      __coerced__ :*, other\n    end\n  end\n\n  def /(other)\n    case other\n    when ::Rational\n      num = @num * other.denominator\n      den = @den * other.numerator\n\n      ::Kernel.Rational(num, den)\n\n    when ::Integer\n      if other == 0\n        to_f / 0.0\n      else\n        ::Kernel.Rational(@num, @den * other)\n      end\n\n    when ::Float\n      to_f / other\n\n    else\n      __coerced__ :/, other\n    end\n  end\n\n  def **(other)\n    case other\n    when ::Integer\n      if self == 0 && other < 0\n        ::Float::INFINITY\n      elsif other > 0\n        ::Kernel.Rational(@num**other, @den**other)\n      elsif other < 0\n        ::Kernel.Rational(@den**-other, @num**-other)\n      else\n        ::Kernel.Rational(1, 1)\n      end\n\n    when ::Float\n      to_f**other\n\n    when ::Rational\n      if other == 0\n        ::Kernel.Rational(1, 1)\n      elsif other.denominator == 1\n        if other < 0\n          ::Kernel.Rational(@den**other.numerator.abs, @num**other.numerator.abs)\n        else\n          ::Kernel.Rational(@num**other.numerator, @den**other.numerator)\n        end\n      elsif self == 0 && other < 0\n        ::Kernel.raise ::ZeroDivisionError, 'divided by 0'\n      else\n        to_f**other\n      end\n\n    else\n      __coerced__ :**, other\n    end\n  end\n\n  def abs\n    ::Kernel.Rational(@num.abs, @den.abs)\n  end\n\n  def ceil(precision = 0)\n    if precision == 0\n      (-(-@num / @den)).ceil\n    else\n      with_precision(:ceil, precision)\n    end\n  end\n\n  def floor(precision = 0)\n    if precision == 0\n      (-(-@num / @den)).floor\n    else\n      with_precision(:floor, precision)\n    end\n  end\n\n  def hash\n    \"Rational:#{@num}:#{@den}\"\n  end\n\n  def inspect\n    \"(#{self})\"\n  end\n\n  def rationalize(eps = undefined)\n    %x{\n      if (arguments.length > 1) {\n        #{::Kernel.raise ::ArgumentError, \"wrong number of arguments (#{`arguments.length`} for 0..1)\"};\n      }\n\n      if (eps == null) {\n        return self;\n      }\n\n      var e = #{eps.abs},\n          a = #{self - `e`},\n          b = #{self + `e`};\n\n      var p0 = 0,\n          p1 = 1,\n          q0 = 1,\n          q1 = 0,\n          p2, q2;\n\n      var c, k, t;\n\n      while (true) {\n        c = #{`a`.ceil};\n\n        if (#{`c` <= `b`}) {\n          break;\n        }\n\n        k  = c - 1;\n        p2 = k * p1 + p0;\n        q2 = k * q1 + q0;\n        t  = #{1 / (`b` - `k`)};\n        b  = #{1 / (`a` - `k`)};\n        a  = t;\n\n        p0 = p1;\n        q0 = q1;\n        p1 = p2;\n        q1 = q2;\n      }\n\n      return #{::Kernel.Rational(`c * p1 + p0`, `c * q1 + q0`)};\n    }\n  end\n\n  def round(precision = 0)\n    return with_precision(:round, precision) unless precision == 0\n    return 0 if @num == 0\n    return @num if @den == 1\n\n    num = @num.abs * 2 + @den\n    den = @den * 2\n\n    approx = (num / den).truncate\n\n    if @num < 0\n      -approx\n    else\n      approx\n    end\n  end\n\n  def to_f\n    @num / @den\n  end\n\n  def to_i\n    truncate\n  end\n\n  def to_r\n    self\n  end\n\n  def to_s\n    \"#{@num}/#{@den}\"\n  end\n\n  def truncate(precision = 0)\n    if precision == 0\n      @num < 0 ? ceil : floor\n    else\n      with_precision(:truncate, precision)\n    end\n  end\n\n  def with_precision(method, precision)\n    ::Kernel.raise ::TypeError, 'not an Integer' unless ::Integer === precision\n\n    p = 10**precision\n    s = self * p\n\n    if precision < 1\n      (s.send(method) / p).to_i\n    else\n      ::Kernel.Rational(s.send(method), p)\n    end\n  end\n\n  def self.from_string(string)\n    %x{\n      var str = string.trimLeft(),\n          re = /^[+-]?[\\d_]+(\\.[\\d_]+)?/,\n          match = str.match(re),\n          numerator, denominator;\n\n      function isFloat() {\n        return re.test(str);\n      }\n\n      function cutFloat() {\n        var match = str.match(re);\n        var number = match[0];\n        str = str.slice(number.length);\n        return number.replace(/_/g, '');\n      }\n\n      if (isFloat()) {\n        numerator = parseFloat(cutFloat());\n\n        if (str[0] === '/') {\n          // rational real part\n          str = str.slice(1);\n\n          if (isFloat()) {\n            denominator = parseFloat(cutFloat());\n            return #{::Kernel.Rational(`numerator`, `denominator`)};\n          } else {\n            return #{::Kernel.Rational(`numerator`, 1)};\n          }\n        } else {\n          return #{::Kernel.Rational(`numerator`, 1)};\n        }\n      } else {\n        return #{::Kernel.Rational(0, 1)};\n      }\n    }\n  end\n\n  alias divide /\n  alias quo /\nend\n"],"names":["<top (required)>","self","require","<class:Rational>","reduce","num","den","to_i","0","Kernel","raise","ZeroDivisionError","<","-@","1","new","gcd","/","convert","nil?","TypeError","Integer","Float","String","Complex","to_r","equal?","===","Opal","coerce_to!","Rational","Numeric","initialize","@num","@den","numerator","denominator","coerce","other","$ret_or_1","to_f","==","$ret_or_2","<=>","-","*","__coerced__","+","**","Float::INFINITY",">","abs","ceil","precision","with_precision","floor","hash","inspect","rationalize","eps","ArgumentError","<=","round","2","approx","truncate","to_s","method","p","10","s","send","from_string","string"],"mappings":"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"}},{"offset":{"line":22311,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/time.rb"],"sourcesContent":["# helpers: slice\n\nrequire 'corelib/comparable'\n\nclass ::Time < `Date`\n  include ::Comparable\n\n  %x{\n    var days_of_week = #{%w[Sunday Monday Tuesday Wednesday Thursday Friday Saturday Sunday]},\n        short_days   = #{%w[Sun Mon Tue Wed Thu Fri Sat]},\n        short_months = #{%w[Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec]},\n        long_months  = #{%w[January February March April May June July August September October November December]};\n  }\n\n  def self.at(seconds, frac = undefined)\n    %x{\n      var result;\n\n      if (#{::Time === seconds}) {\n        if (frac !== undefined) {\n          #{::Kernel.raise ::TypeError, \"can't convert Time into an exact number\"}\n        }\n        result = new Date(seconds.getTime());\n        result.is_utc = seconds.is_utc;\n        return result;\n      }\n\n      if (!seconds.$$is_number) {\n        seconds = #{::Opal.coerce_to!(seconds, ::Integer, :to_int)};\n      }\n\n      if (frac === undefined) {\n        return new Date(seconds * 1000);\n      }\n\n      if (!frac.$$is_number) {\n        frac = #{::Opal.coerce_to!(frac, ::Integer, :to_int)};\n      }\n\n      return new Date(seconds * 1000 + (frac / 1000));\n    }\n  end\n\n  %x{\n    function time_params(year, month, day, hour, min, sec) {\n      if (year.$$is_string) {\n        year = parseInt(year, 10);\n      } else {\n        year = #{::Opal.coerce_to!(`year`, ::Integer, :to_int)};\n      }\n\n      if (month === nil) {\n        month = 1;\n      } else if (!month.$$is_number) {\n        if (#{`month`.respond_to?(:to_str)}) {\n          month = #{`month`.to_str};\n          switch (month.toLowerCase()) {\n          case 'jan': month =  1; break;\n          case 'feb': month =  2; break;\n          case 'mar': month =  3; break;\n          case 'apr': month =  4; break;\n          case 'may': month =  5; break;\n          case 'jun': month =  6; break;\n          case 'jul': month =  7; break;\n          case 'aug': month =  8; break;\n          case 'sep': month =  9; break;\n          case 'oct': month = 10; break;\n          case 'nov': month = 11; break;\n          case 'dec': month = 12; break;\n          default: month = #{`month`.to_i};\n          }\n        } else {\n          month = #{::Opal.coerce_to!(`month`, ::Integer, :to_int)};\n        }\n      }\n\n      if (month < 1 || month > 12) {\n        #{::Kernel.raise ::ArgumentError, \"month out of range: #{`month`}\"}\n      }\n      month = month - 1;\n\n      if (day === nil) {\n        day = 1;\n      } else if (day.$$is_string) {\n        day = parseInt(day, 10);\n      } else {\n        day = #{::Opal.coerce_to!(`day`, ::Integer, :to_int)};\n      }\n\n      if (day < 1 || day > 31) {\n        #{::Kernel.raise ::ArgumentError, \"day out of range: #{`day`}\"}\n      }\n\n      if (hour === nil) {\n        hour = 0;\n      } else if (hour.$$is_string) {\n        hour = parseInt(hour, 10);\n      } else {\n        hour = #{::Opal.coerce_to!(`hour`, ::Integer, :to_int)};\n      }\n\n      if (hour < 0 || hour > 24) {\n        #{::Kernel.raise ::ArgumentError, \"hour out of range: #{`hour`}\"}\n      }\n\n      if (min === nil) {\n        min = 0;\n      } else if (min.$$is_string) {\n        min = parseInt(min, 10);\n      } else {\n        min = #{::Opal.coerce_to!(`min`, ::Integer, :to_int)};\n      }\n\n      if (min < 0 || min > 59) {\n        #{::Kernel.raise ::ArgumentError, \"min out of range: #{`min`}\"}\n      }\n\n      if (sec === nil) {\n        sec = 0;\n      } else if (!sec.$$is_number) {\n        if (sec.$$is_string) {\n          sec = parseInt(sec, 10);\n        } else {\n          sec = #{::Opal.coerce_to!(`sec`, ::Integer, :to_int)};\n        }\n      }\n\n      if (sec < 0 || sec > 60) {\n        #{::Kernel.raise ::ArgumentError, \"sec out of range: #{`sec`}\"}\n      }\n\n      return [year, month, day, hour, min, sec];\n    }\n  }\n\n  def self.new(year = undefined, month = nil, day = nil, hour = nil, min = nil, sec = nil, utc_offset = nil)\n    %x{\n      var args, result;\n\n      if (year === undefined) {\n        return new Date();\n      }\n\n      if (utc_offset !== nil) {\n        #{::Kernel.raise ::ArgumentError, 'Opal does not support explicitly specifying UTC offset for Time'}\n      }\n\n      args  = time_params(year, month, day, hour, min, sec);\n      year  = args[0];\n      month = args[1];\n      day   = args[2];\n      hour  = args[3];\n      min   = args[4];\n      sec   = args[5];\n\n      result = new Date(year, month, day, hour, min, 0, sec * 1000);\n      if (year < 100) {\n        result.setFullYear(year);\n      }\n      return result;\n    }\n  end\n\n  def self.local(year, month = nil, day = nil, hour = nil, min = nil, sec = nil, millisecond = nil, _dummy1 = nil, _dummy2 = nil, _dummy3 = nil)\n    # The _dummy args are there only because the MRI version accepts up to 10 arguments\n    %x{\n      var args, result;\n\n      if (arguments.length === 10) {\n        args  = $slice.call(arguments);\n        year  = args[5];\n        month = args[4];\n        day   = args[3];\n        hour  = args[2];\n        min   = args[1];\n        sec   = args[0];\n      }\n\n      args  = time_params(year, month, day, hour, min, sec);\n      year  = args[0];\n      month = args[1];\n      day   = args[2];\n      hour  = args[3];\n      min   = args[4];\n      sec   = args[5];\n\n      result = new Date(year, month, day, hour, min, 0, sec * 1000);\n      if (year < 100) {\n        result.setFullYear(year);\n      }\n      return result;\n    }\n  end\n\n  def self.gm(year, month = nil, day = nil, hour = nil, min = nil, sec = nil, millisecond = nil, _dummy1 = nil, _dummy2 = nil, _dummy3 = nil)\n    # The _dummy args are there only because the MRI version accepts up to 10 arguments\n    %x{\n      var args, result;\n\n      if (arguments.length === 10) {\n        args  = $slice.call(arguments);\n        year  = args[5];\n        month = args[4];\n        day   = args[3];\n        hour  = args[2];\n        min   = args[1];\n        sec   = args[0];\n      }\n\n      args  = time_params(year, month, day, hour, min, sec);\n      year  = args[0];\n      month = args[1];\n      day   = args[2];\n      hour  = args[3];\n      min   = args[4];\n      sec   = args[5];\n\n      result = new Date(Date.UTC(year, month, day, hour, min, 0, sec * 1000));\n      if (year < 100) {\n        result.setUTCFullYear(year);\n      }\n      result.is_utc = true;\n      return result;\n    }\n  end\n\n  def self.now\n    new\n  end\n\n  def +(other)\n    if ::Time === other\n      ::Kernel.raise ::TypeError, 'time + time?'\n    end\n\n    %x{\n      if (!other.$$is_number) {\n        other = #{::Opal.coerce_to!(other, ::Integer, :to_int)};\n      }\n      var result = new Date(self.getTime() + (other * 1000));\n      result.is_utc = self.is_utc;\n      return result;\n    }\n  end\n\n  def -(other)\n    if ::Time === other\n      return `(self.getTime() - other.getTime()) / 1000`\n    end\n\n    %x{\n      if (!other.$$is_number) {\n        other = #{::Opal.coerce_to!(other, ::Integer, :to_int)};\n      }\n      var result = new Date(self.getTime() - (other * 1000));\n      result.is_utc = self.is_utc;\n      return result;\n    }\n  end\n\n  def <=>(other)\n    if ::Time === other\n      to_f <=> other.to_f\n    else\n      r = other <=> self\n      if r.nil?\n        nil\n      elsif r > 0\n        -1\n      elsif r < 0\n        1\n      else\n        0\n      end\n    end\n  end\n\n  def ==(other)\n    ::Time === other && `#{to_f} === #{other.to_f}`\n  end\n\n  def asctime\n    strftime '%a %b %e %H:%M:%S %Y'\n  end\n\n  def day\n    `self.is_utc ? self.getUTCDate() : self.getDate()`\n  end\n\n  def yday\n    # http://javascript.about.com/library/bldayyear.htm\n    # also see moment.js implementation: http://git.io/vCKNE\n\n    start_of_year = Time.new(year).to_i\n    start_of_day  = Time.new(year, month, day).to_i\n    one_day       = 86_400\n\n    ((start_of_day - start_of_year) / one_day).round + 1\n  end\n\n  def isdst\n    %x{\n      var jan = new Date(self.getFullYear(), 0, 1),\n          jul = new Date(self.getFullYear(), 6, 1);\n      return self.getTimezoneOffset() < Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());\n    }\n  end\n\n  def dup\n    copy = `new Date(self.getTime())`\n\n    copy.copy_instance_variables(self)\n    copy.initialize_dup(self)\n\n    copy\n  end\n\n  def eql?(other)\n    other.is_a?(::Time) && (self <=> other).zero?\n  end\n\n  def friday?\n    `#{wday} == 5`\n  end\n\n  def hash\n    `'Time:' + self.getTime()`\n  end\n\n  def hour\n    `self.is_utc ? self.getUTCHours() : self.getHours()`\n  end\n\n  def inspect\n    if utc?\n      strftime '%Y-%m-%d %H:%M:%S UTC'\n    else\n      strftime '%Y-%m-%d %H:%M:%S %z'\n    end\n  end\n\n  def min\n    `self.is_utc ? self.getUTCMinutes() : self.getMinutes()`\n  end\n\n  def mon\n    `(self.is_utc ? self.getUTCMonth() : self.getMonth()) + 1`\n  end\n\n  def monday?\n    `#{wday} == 1`\n  end\n\n  def saturday?\n    `#{wday} == 6`\n  end\n\n  def sec\n    `self.is_utc ? self.getUTCSeconds() : self.getSeconds()`\n  end\n\n  def succ\n    %x{\n      var result = new Date(self.getTime() + 1000);\n      result.is_utc = self.is_utc;\n      return result;\n    }\n  end\n\n  def usec\n    `self.getMilliseconds() * 1000`\n  end\n\n  def zone\n    %x{\n      var string = self.toString(),\n          result;\n\n      if (string.indexOf('(') == -1) {\n        result = string.match(/[A-Z]{3,4}/)[0];\n      }\n      else {\n        result = string.match(/\\((.+)\\)(?:\\s|$)/)[1]\n      }\n\n      if (result == \"GMT\" && /(GMT\\W*\\d{4})/.test(string)) {\n        return RegExp.$1;\n      }\n      else {\n        return result;\n      }\n    }\n  end\n\n  def getgm\n    %x{\n      var result = new Date(self.getTime());\n      result.is_utc = true;\n      return result;\n    }\n  end\n\n  def gmtime\n    %x{\n      self.is_utc = true;\n      return self;\n    }\n  end\n\n  def gmt?\n    `self.is_utc === true`\n  end\n\n  def gmt_offset\n    `self.is_utc ? 0 : -self.getTimezoneOffset() * 60`\n  end\n\n  def strftime(format)\n    %x{\n      return format.replace(/%([\\-_#^0]*:{0,2})(\\d+)?([EO]*)(.)/g, function(full, flags, width, _, conv) {\n        var result = \"\",\n            zero   = flags.indexOf('0') !== -1,\n            pad    = flags.indexOf('-') === -1,\n            blank  = flags.indexOf('_') !== -1,\n            upcase = flags.indexOf('^') !== -1,\n            invert = flags.indexOf('#') !== -1,\n            colons = (flags.match(':') || []).length;\n\n        width = parseInt(width, 10);\n\n        if (zero && blank) {\n          if (flags.indexOf('0') < flags.indexOf('_')) {\n            zero = false;\n          }\n          else {\n            blank = false;\n          }\n        }\n\n        switch (conv) {\n          case 'Y':\n            result += #{year};\n            break;\n\n          case 'C':\n            zero    = !blank;\n            result += Math.round(#{year} / 100);\n            break;\n\n          case 'y':\n            zero    = !blank;\n            result += (#{year} % 100);\n            break;\n\n          case 'm':\n            zero    = !blank;\n            result += #{mon};\n            break;\n\n          case 'B':\n            result += long_months[#{mon} - 1];\n            break;\n\n          case 'b':\n          case 'h':\n            blank   = !zero;\n            result += short_months[#{mon} - 1];\n            break;\n\n          case 'd':\n            zero    = !blank\n            result += #{day};\n            break;\n\n          case 'e':\n            blank   = !zero\n            result += #{day};\n            break;\n\n          case 'j':\n            zero    = !blank;\n            width   = isNaN(width) ? 3 : width;\n            result += #{yday};\n            break;\n\n          case 'H':\n            zero    = !blank;\n            result += #{hour};\n            break;\n\n          case 'k':\n            blank   = !zero;\n            result += #{hour};\n            break;\n\n          case 'I':\n            zero    = !blank;\n            result += (#{hour} % 12 || 12);\n            break;\n\n          case 'l':\n            blank   = !zero;\n            result += (#{hour} % 12 || 12);\n            break;\n\n          case 'P':\n            result += (#{hour} >= 12 ? \"pm\" : \"am\");\n            break;\n\n          case 'p':\n            result += (#{hour} >= 12 ? \"PM\" : \"AM\");\n            break;\n\n          case 'M':\n            zero    = !blank;\n            result += #{min};\n            break;\n\n          case 'S':\n            zero    = !blank;\n            result += #{sec}\n            break;\n\n          case 'L':\n            zero    = !blank;\n            width   = isNaN(width) ? 3 : width;\n            result += self.getMilliseconds();\n            break;\n\n          case 'N':\n            width   = isNaN(width) ? 9 : width;\n            result += #{`self.getMilliseconds().toString()`.rjust(3, '0')};\n            result  = #{`result`.ljust(`width`, '0')};\n            break;\n\n          case 'z':\n            var offset  = self.getTimezoneOffset(),\n                hours   = Math.floor(Math.abs(offset) / 60),\n                minutes = Math.abs(offset) % 60;\n\n            result += offset < 0 ? \"+\" : \"-\";\n            result += hours < 10 ? \"0\" : \"\";\n            result += hours;\n\n            if (colons > 0) {\n              result += \":\";\n            }\n\n            result += minutes < 10 ? \"0\" : \"\";\n            result += minutes;\n\n            if (colons > 1) {\n              result += \":00\";\n            }\n\n            break;\n\n          case 'Z':\n            result += #{zone};\n            break;\n\n          case 'A':\n            result += days_of_week[#{wday}];\n            break;\n\n          case 'a':\n            result += short_days[#{wday}];\n            break;\n\n          case 'u':\n            result += (#{wday} + 1);\n            break;\n\n          case 'w':\n            result += #{wday};\n            break;\n\n          case 'V':\n            result += #{cweek_cyear[0].to_s.rjust(2, '0')};\n            break;\n\n          case 'G':\n            result += #{cweek_cyear[1]};\n            break;\n\n          case 'g':\n            result += #{cweek_cyear[1][-2..-1]};\n            break;\n\n          case 's':\n            result += #{to_i};\n            break;\n\n          case 'n':\n            result += \"\\n\";\n            break;\n\n          case 't':\n            result += \"\\t\";\n            break;\n\n          case '%':\n            result += \"%\";\n            break;\n\n          case 'c':\n            result += #{strftime('%a %b %e %T %Y')};\n            break;\n\n          case 'D':\n          case 'x':\n            result += #{strftime('%m/%d/%y')};\n            break;\n\n          case 'F':\n            result += #{strftime('%Y-%m-%d')};\n            break;\n\n          case 'v':\n            result += #{strftime('%e-%^b-%4Y')};\n            break;\n\n          case 'r':\n            result += #{strftime('%I:%M:%S %p')};\n            break;\n\n          case 'R':\n            result += #{strftime('%H:%M')};\n            break;\n\n          case 'T':\n          case 'X':\n            result += #{strftime('%H:%M:%S')};\n            break;\n\n          default:\n            return full;\n        }\n\n        if (upcase) {\n          result = result.toUpperCase();\n        }\n\n        if (invert) {\n          result = result.replace(/[A-Z]/, function(c) { c.toLowerCase() }).\n                          replace(/[a-z]/, function(c) { c.toUpperCase() });\n        }\n\n        if (pad && (zero || blank)) {\n          result = #{`result`.rjust(`isNaN(width) ? 2 : width`, `blank ? \" \" : \"0\"`)};\n        }\n\n        return result;\n      });\n    }\n  end\n\n  def sunday?\n    `#{wday} == 0`\n  end\n\n  def thursday?\n    `#{wday} == 4`\n  end\n\n  def to_a\n    [sec, min, hour, day, month, year, wday, yday, isdst, zone]\n  end\n\n  def to_f\n    `self.getTime() / 1000`\n  end\n\n  def to_i\n    `parseInt(self.getTime() / 1000, 10)`\n  end\n\n  def tuesday?\n    `#{wday} == 2`\n  end\n\n  def wday\n    `self.is_utc ? self.getUTCDay() : self.getDay()`\n  end\n\n  def wednesday?\n    `#{wday} == 3`\n  end\n\n  def year\n    `self.is_utc ? self.getUTCFullYear() : self.getFullYear()`\n  end\n\n  def cweek_cyear\n    jan01 = ::Time.new(year, 1, 1)\n    jan01_wday = jan01.wday\n    first_monday = 0\n    year = self.year\n    if jan01_wday <= 4 && jan01_wday != 0\n      # Jan 01 is in the first week of the year\n      offset = jan01_wday - 1\n    else\n      # Jan 01 is in the last week of the previous year\n      offset = jan01_wday - 7 - 1\n      offset = -1 if offset == -8 # Adjust if Jan 01 is a Sunday\n    end\n\n    week = ((yday + offset) / 7.00).ceil\n\n    if week <= 0\n      # Get the last week of the previous year\n      return ::Time.new(self.year - 1, 12, 31).cweek_cyear\n    elsif week == 53\n      # Find out whether this is actually week 53 or already week 01 of the following year\n      dec31 = ::Time.new(self.year, 12, 31)\n      dec31_wday = dec31.wday\n      if dec31_wday <= 3 && dec31_wday != 0\n        week = 1\n        year += 1\n      end\n    end\n\n    [week, year]\n  end\n\n  class << self\n    alias mktime local\n    alias utc gm\n  end\n\n  alias ctime asctime\n  alias dst? isdst\n  alias getutc getgm\n  alias gmtoff gmt_offset\n  alias mday day\n  alias month mon\n  alias to_s inspect\n  alias tv_sec to_i\n  alias tv_usec usec\n  alias utc gmtime\n  alias utc? gmt?\n  alias utc_offset gmt_offset\nend\n"],"names":["<top (required)>","self","require","<class:Time>","include","Comparable","at","seconds","frac","Time","===","Kernel","raise","TypeError","Opal","coerce_to!","Integer","respond_to?","to_str","to_i","ArgumentError","new","year","month","day","hour","min","sec","utc_offset","local","millisecond","_dummy1","_dummy2","_dummy3","gm","now","+","other","-","<=>","to_f","r","nil?",">","0","-1","<","1","==","$ret_or_1","asctime","strftime","yday","start_of_year","start_of_day","one_day","86400","/","round","isdst","dup","copy","copy_instance_variables","initialize_dup","eql?","is_a?","zero?","friday?","wday","hash","inspect","utc?","mon","monday?","saturday?","succ","usec","zone","getgm","gmtime","gmt?","gmt_offset","format","rjust","3","ljust","cweek_cyear","[]","to_s","2","-2","sunday?","thursday?","to_a","tuesday?","wednesday?","jan01","jan01_wday","first_monday","<=","4","offset","7","-8","week","ceil","12","31","53","dec31","dec31_wday"],"mappings":"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"}},{"offset":{"line":23192,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/struct.rb"],"sourcesContent":["require 'corelib/enumerable'\n\nclass ::Struct\n  include ::Enumerable\n\n  def self.new(const_name, *args, keyword_init: false, &block)\n    if const_name\n      if const_name.class == ::String && const_name[0].upcase != const_name[0]\n        # Fast track so that we skip needlessly going thru exceptions\n        # in most cases.\n        args.unshift(const_name)\n        const_name = nil\n      else\n        begin\n          const_name = ::Opal.const_name!(const_name)\n        rescue ::TypeError, ::NameError\n          args.unshift(const_name)\n          const_name = nil\n        end\n      end\n    end\n\n    args.map do |arg|\n      ::Opal.coerce_to!(arg, ::String, :to_str)\n    end\n\n    klass = ::Class.new(self) do\n      args.each { |arg| define_struct_attribute(arg) }\n\n      class << self\n        def new(*args)\n          instance = allocate\n          `#{instance}.$$data = {}`\n          instance.initialize(*args)\n          instance\n        end\n\n        alias_method :[], :new\n      end\n    end\n\n    klass.module_eval(&block) if block\n    `klass.$$keyword_init = keyword_init`\n\n    if const_name\n      ::Struct.const_set(const_name, klass)\n    end\n\n    klass\n  end\n\n  def self.define_struct_attribute(name)\n    if self == ::Struct\n      ::Kernel.raise ::ArgumentError, 'you cannot define attributes to the Struct class'\n    end\n\n    members << name\n\n    define_method name do\n      `self.$$data[name]`\n    end\n\n    define_method \"#{name}=\" do |value|\n      `self.$$data[name] = value`\n    end\n  end\n\n  def self.members\n    if self == ::Struct\n      ::Kernel.raise ::ArgumentError, 'the Struct class has no members'\n    end\n\n    @members ||= []\n  end\n\n  def self.inherited(klass)\n    members = @members\n\n    klass.instance_eval do\n      @members = members\n    end\n  end\n\n  def initialize(*args)\n    if `#{self.class}.$$keyword_init`\n      kwargs = args.last || {}\n\n      if args.length > 1 || `(args.length === 1 && !kwargs.$$is_hash)`\n        ::Kernel.raise ::ArgumentError, \"wrong number of arguments (given #{args.length}, expected 0)\"\n      end\n\n      extra = kwargs.keys - self.class.members\n      if extra.any?\n        ::Kernel.raise ::ArgumentError, \"unknown keywords: #{extra.join(', ')}\"\n      end\n\n      self.class.members.each do |name|\n        self[name] = kwargs[name]\n      end\n    else\n      if args.length > self.class.members.length\n        ::Kernel.raise ::ArgumentError, 'struct size differs'\n      end\n\n      self.class.members.each_with_index do |name, index|\n        self[name] = args[index]\n      end\n    end\n  end\n\n  def initialize_copy(from)\n    %x{\n      self.$$data = {}\n      var keys = Object.keys(from.$$data), i, max, name;\n      for (i = 0, max = keys.length; i < max; i++) {\n        name = keys[i];\n        self.$$data[name] = from.$$data[name];\n      }\n    }\n  end\n\n  def self.keyword_init?\n    `self.$$keyword_init`\n  end\n\n  def members\n    self.class.members\n  end\n\n  def hash\n    Hash.new(`self.$$data`).hash\n  end\n\n  def [](name)\n    if ::Integer === name\n      ::Kernel.raise ::IndexError, \"offset #{name} too small for struct(size:#{self.class.members.size})\" if name < -self.class.members.size\n      ::Kernel.raise ::IndexError, \"offset #{name} too large for struct(size:#{self.class.members.size})\" if name >= self.class.members.size\n\n      name = self.class.members[name]\n    elsif ::String === name\n      %x{\n        if(!self.$$data.hasOwnProperty(name)) {\n          #{::Kernel.raise ::NameError.new(\"no member '#{name}' in struct\", name)}\n        }\n      }\n    else\n      ::Kernel.raise ::TypeError, \"no implicit conversion of #{name.class} into Integer\"\n    end\n\n    name = ::Opal.coerce_to!(name, ::String, :to_str)\n    `self.$$data[name]`\n  end\n\n  def []=(name, value)\n    if ::Integer === name\n      ::Kernel.raise ::IndexError, \"offset #{name} too small for struct(size:#{self.class.members.size})\" if name < -self.class.members.size\n      ::Kernel.raise ::IndexError, \"offset #{name} too large for struct(size:#{self.class.members.size})\" if name >= self.class.members.size\n\n      name = self.class.members[name]\n    elsif ::String === name\n      ::Kernel.raise ::NameError.new(\"no member '#{name}' in struct\", name) unless self.class.members.include?(name.to_sym)\n    else\n      ::Kernel.raise ::TypeError, \"no implicit conversion of #{name.class} into Integer\"\n    end\n\n    name = ::Opal.coerce_to!(name, ::String, :to_str)\n    `self.$$data[name] = value`\n  end\n\n  def ==(other)\n    return false unless other.instance_of?(self.class)\n\n    %x{\n      var recursed1 = {}, recursed2 = {};\n\n      function _eqeq(struct, other) {\n        var key, a, b;\n\n        recursed1[#{`struct`.__id__}] = true;\n        recursed2[#{`other`.__id__}] = true;\n\n        for (key in struct.$$data) {\n          a = struct.$$data[key];\n          b = other.$$data[key];\n\n          if (#{::Struct === `a`}) {\n            if (!recursed1.hasOwnProperty(#{`a`.__id__}) || !recursed2.hasOwnProperty(#{`b`.__id__})) {\n              if (!_eqeq(a, b)) {\n                return false;\n              }\n            }\n          } else {\n            if (!#{`a` == `b`}) {\n              return false;\n            }\n          }\n        }\n\n        return true;\n      }\n\n      return _eqeq(self, other);\n    }\n  end\n\n  def eql?(other)\n    return false unless other.instance_of?(self.class)\n\n    %x{\n      var recursed1 = {}, recursed2 = {};\n\n      function _eqeq(struct, other) {\n        var key, a, b;\n\n        recursed1[#{`struct`.__id__}] = true;\n        recursed2[#{`other`.__id__}] = true;\n\n        for (key in struct.$$data) {\n          a = struct.$$data[key];\n          b = other.$$data[key];\n\n          if (#{::Struct === `a`}) {\n            if (!recursed1.hasOwnProperty(#{`a`.__id__}) || !recursed2.hasOwnProperty(#{`b`.__id__})) {\n              if (!_eqeq(a, b)) {\n                return false;\n              }\n            }\n          } else {\n            if (!#{`a`.eql?(`b`)}) {\n              return false;\n            }\n          }\n        }\n\n        return true;\n      }\n\n      return _eqeq(self, other);\n    }\n  end\n\n  def each\n    return enum_for(:each) { size } unless block_given?\n\n    self.class.members.each { |name| yield self[name] }\n    self\n  end\n\n  def each_pair\n    return enum_for(:each_pair) { size } unless block_given?\n\n    self.class.members.each { |name| yield [name, self[name]] }\n    self\n  end\n\n  def length\n    self.class.members.length\n  end\n\n  def to_a\n    self.class.members.map { |name| self[name] }\n  end\n\n  `var inspect_stack = []`\n\n  def inspect\n    result = '#<struct '\n\n    if `inspect_stack`.include? __id__\n      result + ':...>'\n    else\n      `inspect_stack` << __id__\n      pushed = true\n\n      if ::Struct === self && self.class.name\n        result += \"#{self.class} \"\n      end\n\n      result += each_pair.map do |name, value|\n        \"#{name}=#{Opal.inspect(value)}\"\n      end.join ', '\n\n      result += '>'\n\n      result\n    end\n  ensure\n    `inspect_stack.pop()` if pushed\n  end\n\n  def to_h(&block)\n    return map(&block).to_h(*args) if block_given?\n\n    self.class.members.each_with_object({}) { |name, h| h[name] = self[name] }\n  end\n\n  def values_at(*args)\n    args = args.map { |arg| `arg.$$is_range ? #{arg.to_a} : arg` }.flatten\n    %x{\n      var result = [];\n      for (var i = 0, len = args.length; i < len; i++) {\n        if (!args[i].$$is_number) {\n          #{::Kernel.raise ::TypeError, \"no implicit conversion of #{`args[i]`.class} into Integer\"}\n        }\n        result.push(#{self[`args[i]`]});\n      }\n      return result;\n    }\n  end\n\n  def dig(key, *keys)\n    item = if `key.$$is_string && self.$$data.hasOwnProperty(key)`\n             `self.$$data[key] || nil`\n           end\n\n    %x{\n      if (item === nil || keys.length === 0) {\n        return item;\n      }\n    }\n\n    unless item.respond_to?(:dig)\n      ::Kernel.raise ::TypeError, \"#{item.class} does not have #dig method\"\n    end\n\n    item.dig(*keys)\n  end\n\n  alias size length\n  alias to_s inspect\n  alias values to_a\nend\n"],"names":["<top (required)>","self","require","<class:Struct>","include","Enumerable","new","const_name","class","String","[]","0","upcase","args","unshift","Opal","const_name!","TypeError","NameError","map","block in new","arg","block (2 levels) in new","coerce_to!","klass","Class","each","block (3 levels) in new","define_struct_attribute","instance","allocate","initialize","alias_method","block","module_eval","to_proc","Struct","const_set","name","Kernel","raise","ArgumentError","members","<<","define_method","block in define_struct_attribute","block (2 levels) in define_struct_attribute","value","@members","$ret_or_1","inherited","instance_eval","block in inherited","block (2 levels) in inherited","kwargs","last",">","length","1","extra","-","keys","any?","join","block in initialize","block (2 levels) in initialize","$writer","[]=","each_with_index","index","initialize_copy","from","keyword_init?","hash","Hash","Integer","<","size","-@","IndexError",">=","include?","to_sym","==","other","instance_of?","__id__","===","eql?","block_given?","enum_for","block in each","block (2 levels) in each","each_pair","block in each_pair","block (2 levels) in each_pair","to_a","block in to_a","block (2 levels) in to_a","inspect","result","+","pushed","block in inspect","block (2 levels) in inspect","to_h","each_with_object","block in to_h","h","block (2 levels) in to_h","values_at","block in values_at","block (2 levels) in values_at","flatten","dig","key","item","respond_to?"],"mappings":"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"}},{"offset":{"line":23688,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/dir.rb"],"sourcesContent":["class ::Dir\n  class << self\n    def chdir(dir)\n      prev_cwd = `Opal.current_dir`\n      `Opal.current_dir = #{dir}`\n      yield\n    ensure\n      `Opal.current_dir = #{prev_cwd}`\n    end\n\n    def pwd\n      `Opal.current_dir || '.'`\n    end\n\n    def home\n      ::ENV['HOME'] || '.'\n    end\n\n    alias getwd pwd\n  end\nend\n"],"names":["<top (required)>","<class:Dir>","chdir","dir","prev_cwd","pwd","home","$ret_or_1","ENV","[]","self"],"mappings":"AAAAA,8CAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAA;;;;AACEC,MAAAA,qBAAAA,iBAAUC,GAAVD;AAAAA,QAAAA;;QAAAA;QACEA,OAAA,cAAA;;QAAAE,WAAYF;QACXA,mBAAqBC;QACtB,OAAA,qBAAA,EAAA;QAFA;UAICD,mBAAqBE;QAJtB,CAAA;MADFF,CAAAA,GAAAA;;AAQAG,MAAAA,mBAAAA,eAAAA;AAAAA;QACEA,OAACA,uBAADA;MADFA,CAAAA,GAAAA;;AAIAC,MAAAA,oBAAAA,gBAAAA;AAAAA,QAAAA;;QACE,IAAA,QAAAC,CAAAA,YAAAC,UAAKC,OAAAA,CAACH,MAADG,CAALF,CAAA,CAAA;UAAAD,OAAA;QAAA;UAAiBA,OAAAA;QAAjB;MADFA,CAAAA,GAAAA;MAIA,OAAA,aAAM,OAAN,EAAY,KAAZ;IAjBF,4BAASI,IAAT;EADFT,GAAM,IAANA,EAAAA,IAAAA;AAAAD;"}},{"offset":{"line":23734,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/file.rb"],"sourcesContent":["# helpers: truthy\n\nclass ::File < ::IO\n  Separator = SEPARATOR = '/'\n  ALT_SEPARATOR = nil\n  PATH_SEPARATOR = ':'\n  # Assuming case insenstive filesystem\n  FNM_SYSCASE = 0\n  windows_root_rx = %r{^[a-zA-Z]:(?:\\\\|\\/)}\n\n  class << self\n    def absolute_path(path, basedir = nil)\n      sep = SEPARATOR\n      sep_chars = `$sep_chars()`\n      new_parts = []\n\n      path = path.respond_to?(:to_path) ? path.to_path : path\n      path = ::Opal.coerce_to!(`path`, ::String, :to_str)\n\n      basedir ||= ::Dir.pwd\n      path_abs    = `path.substr(0, sep.length) === sep || windows_root_rx.test(path)`\n      basedir_abs = `basedir.substr(0, sep.length) === sep || windows_root_rx.test(basedir)`\n\n      if path_abs\n        parts       = path.split(/[#{sep_chars}]/)\n        leading_sep = `windows_root_rx.test(path) ? '' : #{path.sub(/^([#{sep_chars}]+).*$/, '\\1')}`\n        abs         = true\n      else\n        parts       = basedir.split(/[#{sep_chars}]/) + path.split(/[#{sep_chars}]/)\n        leading_sep = `windows_root_rx.test(basedir) ? '' : #{basedir.sub(/^([#{sep_chars}]+).*$/, '\\1')}`\n        abs         = basedir_abs\n      end\n\n      %x{\n        var part;\n        for (var i = 0, ii = parts.length; i < ii; i++) {\n          part = parts[i];\n\n          if (\n            (part === nil) ||\n            (part === ''  && ((new_parts.length === 0) || abs)) ||\n            (part === '.' && ((new_parts.length === 0) || abs))\n          ) {\n            continue;\n          }\n          if (part === '..') {\n            new_parts.pop();\n          } else {\n            new_parts.push(part);\n          }\n        }\n\n        if (!abs && parts[0] !== '.') {\n          #{new_parts.unshift '.'}\n        }\n      }\n\n      new_path = new_parts.join(sep)\n      new_path = leading_sep + new_path if abs\n      new_path\n    end\n\n    def expand_path(path, basedir = nil)\n      sep = SEPARATOR\n      sep_chars = `$sep_chars()`\n      if `path[0] === '~' || (basedir && basedir[0] === '~')`\n        home = Dir.home\n        ::Kernel.raise(::ArgumentError, \"couldn't find HOME environment -- expanding `~'\") unless home\n        leading_sep = `windows_root_rx.test(home) ? '' : #{home.sub(/^([#{sep_chars}]+).*$/, '\\1')}`\n        ::Kernel.raise(::ArgumentError, 'non-absolute home') unless home.start_with?(leading_sep)\n\n        home            += sep\n        home_path_regexp = /^\\~(?:#{sep}|$)/\n        path             = path.sub(home_path_regexp, home)\n        basedir          = basedir.sub(home_path_regexp, home) if basedir\n      end\n      absolute_path(path, basedir)\n    end\n\n    %x{\n      // Coerce a given path to a path string using #to_path and #to_str\n      function $coerce_to_path(path) {\n        if ($truthy(#{`path`.respond_to?(:to_path)})) {\n          path = path.$to_path();\n        }\n\n        path = #{::Opal.coerce_to!(`path`, ::String, :to_str)};\n\n        return path;\n      }\n\n      // Return a RegExp compatible char class\n      function $sep_chars() {\n        if (#{ALT_SEPARATOR} === nil) {\n          return Opal.escape_regexp(#{SEPARATOR});\n        } else {\n          return Opal.escape_regexp(#{SEPARATOR + ALT_SEPARATOR});\n        }\n      }\n    }\n\n    def dirname(path, level = 1)\n      return path if level == 0\n      ::Kernel.raise ::ArgumentError, \"level can't be negative\" if level < 0\n\n      sep_chars = `$sep_chars()`\n      path = `$coerce_to_path(path)`\n      %x{\n        var absolute = path.match(new RegExp(#{\"^[#{sep_chars}]\"})), out;\n\n        path = path.replace(new RegExp(#{\"[#{sep_chars}]+$\"}), ''); // remove trailing separators\n        path = path.replace(new RegExp(#{\"[^#{sep_chars}]+$\"}), ''); // remove trailing basename\n        path = path.replace(new RegExp(#{\"[#{sep_chars}]+$\"}), ''); // remove final trailing separators\n\n        if (path === '') {\n          out = absolute ? '/' : '.';\n        }\n        else {\n          out = path;\n        }\n\n        if (level == 1) {\n          return out;\n        }\n        else {\n          return #{dirname(`out`, level - 1)}\n        }\n      }\n    end\n\n    def basename(name, suffix = nil)\n      sep_chars = `$sep_chars()`\n      name = `$coerce_to_path(name)`\n      %x{\n        if (name.length == 0) {\n          return name;\n        }\n\n        if (suffix !== nil) {\n          suffix = #{::Opal.coerce_to!(suffix, ::String, :to_str)}\n        } else {\n          suffix = null;\n        }\n\n        name = name.replace(new RegExp(#{\"(.)[#{sep_chars}]*$\"}), '$1');\n        name = name.replace(new RegExp(#{\"^(?:.*[#{sep_chars}])?([^#{sep_chars}]+)$\"}), '$1');\n\n        if (suffix === \".*\") {\n          name = name.replace(/\\.[^\\.]+$/, '');\n        } else if(suffix !== null) {\n          suffix = Opal.escape_regexp(suffix);\n          name = name.replace(new RegExp(#{\"#{suffix}$\"}), '');\n        }\n\n        return name;\n      }\n    end\n\n    def extname(path)\n      `path = $coerce_to_path(path)`\n      filename = basename(path)\n      return '' if filename.empty?\n      last_dot_idx = filename[1..-1].rindex('.')\n      # extension name must contains at least one character .(something)\n      last_dot_idx.nil? || last_dot_idx + 1 == filename.length - 1 ? '' : filename[(last_dot_idx + 1)..-1]\n    end\n\n    def exist?(path)\n      `Opal.modules[#{path}] != null`\n    end\n\n    def directory?(path)\n      files = []\n      %x{\n        for (var key in Opal.modules) {\n          #{files}.push(key)\n        }\n      }\n      path = path.gsub(/(^.#{SEPARATOR}+|#{SEPARATOR}+$)/)\n      file = files.find { |f| f =~ /^#{path}/ }\n      file\n    end\n\n    def join(*paths)\n      if paths.empty?\n        return ''\n      end\n      result = ''\n      paths = paths.flatten.each_with_index.map do |item, index|\n        if index == 0 && item.empty?\n          SEPARATOR\n        elsif paths.length == index + 1 && item.empty?\n          SEPARATOR\n        else\n          item\n        end\n      end\n      paths = paths.reject(&:empty?)\n      paths.each_with_index do |item, index|\n        next_item = paths[index + 1]\n        if next_item.nil?\n          result = \"#{result}#{item}\"\n        else\n          if item.end_with?(SEPARATOR) && next_item.start_with?(SEPARATOR)\n            item = item.sub(/#{SEPARATOR}+$/, '')\n          end\n          result = if item.end_with?(SEPARATOR) || next_item.start_with?(SEPARATOR)\n                     \"#{result}#{item}\"\n                   else\n                     \"#{result}#{item}#{SEPARATOR}\"\n                   end\n        end\n      end\n      result\n    end\n\n    def split(path)\n      path.split(SEPARATOR)\n    end\n\n    alias realpath expand_path\n    alias exists? exist?\n  end\nend\n"],"names":["<top (required)>","<class:File>","0","windows_root_rx","absolute_path","path","basedir","sep","SEPARATOR","sep_chars","new_parts","respond_to?","to_path","Opal","coerce_to!","String","$ret_or_1","Dir","pwd","path_abs","basedir_abs","parts","split","leading_sep","sub","abs","+","unshift","new_path","join","expand_path","home","Kernel","raise","ArgumentError","start_with?","home_path_regexp","self","ALT_SEPARATOR","dirname","level","1","<","-","basename","name","suffix","extname","filename","empty?","last_dot_idx","[]","-1","rindex","nil?","length","exist?","directory?","files","gsub","file","find","block in directory?","f","block (2 levels) in directory?","=~","paths","result","map","flatten","each_with_index","block in join","item","index","block (2 levels) in join","reject","to_proc","next_item","end_with?","IO"],"mappings":"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"}},{"offset":{"line":24025,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/process/base.rb"],"sourcesContent":["class ::Signal\n  def self.trap(*)\n  end\nend\n\nclass ::GC\n  def self.start\n  end\nend\n"],"names":["<top (required)>","<class:Signal>","trap","self","<class:GC>","start"],"mappings":"AAAAA,uDAAAA;EAAAA;;;EAAAC;EAAAA;;;IACEA,OAAAC,MAAIC,IAAJD,WAAAA,gBADF,EACEA;AAAAA,MAAAA;;;;MADF;;MACgB;MADhBA,OAAA;IACEA,CAAAA,IAAAA;EADFD,GAAM,IAANA,EAAAA,IAAAA;EAKAD,OAAAI;EAAAA;;;IACEA,OAAAC,MAAIF,IAAJE,YAAAA,iBAAAA;AAAAA;MANFA,OAAA;IAMEA,CAAAA,GAAAA;EADFD,GAAM,IAANA,EAAAA,IAAAA;AALAJ;"}},{"offset":{"line":24055,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/process.rb"],"sourcesContent":["module ::Process\n  @__clocks__ = []\n  def self.__register_clock__(name, func)\n    const_set name, @__clocks__.size\n    @__clocks__ << func\n  end\n\n  __register_clock__ :CLOCK_REALTIME, `function() { return Date.now() }`\n\n  monotonic = false\n\n  %x{\n    if (Opal.global.performance) {\n      monotonic = function() {\n        return performance.now()\n      };\n    }\n    else if (Opal.global.process && process.hrtime) {\n      // let now be the base to get smaller numbers\n      var hrtime_base = process.hrtime();\n\n      monotonic = function() {\n        var hrtime = process.hrtime(hrtime_base);\n        var us = (hrtime[1] / 1000) | 0; // cut below microsecs;\n        return ((hrtime[0] * 1000) + (us / 1000));\n      };\n    }\n  }\n\n  __register_clock__(:CLOCK_MONOTONIC, monotonic) if monotonic\n\n  def self.pid\n    0\n  end\n\n  def self.times\n    t = ::Time.now.to_f\n    ::Benchmark::Tms.new(t, t, t, t, t)\n  end\n\n  def self.clock_gettime(clock_id, unit = :float_second)\n    (clock = @__clocks__[clock_id]) || ::Kernel.raise(::Errno::EINVAL, \"clock_gettime(#{clock_id}) #{@__clocks__[clock_id]}\")\n    %x{\n      var ms = clock();\n      switch (unit) {\n        case 'float_second':      return  (ms / 1000);         // number of seconds as a float (default)\n        case 'float_millisecond': return  (ms / 1);            // number of milliseconds as a float\n        case 'float_microsecond': return  (ms * 1000);         // number of microseconds as a float\n        case 'second':            return ((ms / 1000)    | 0); // number of seconds as an integer\n        case 'millisecond':       return ((ms / 1)       | 0); // number of milliseconds as an integer\n        case 'microsecond':       return ((ms * 1000)    | 0); // number of microseconds as an integer\n        case 'nanosecond':        return ((ms * 1000000) | 0); // number of nanoseconds as an integer\n        default: #{::Kernel.raise ::ArgumentError, \"unexpected unit: #{unit}\"}\n      }\n    }\n  end\nend\n"],"names":["<top (required)>","<module:Process>","@__clocks__","__register_clock__","self","name","func","const_set","size","<<","monotonic","pid","0","times","t","Time","now","to_f","Benchmark::Tms","Benchmark","new","clock_gettime","clock_id","unit","$ret_or_1","clock","[]","Kernel","raise","Errno::EINVAL","Errno","ArgumentError"],"mappings":"AAAAA,kDAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;;IACEC,kBAAc;IACdC,MAAIC,IAAJD,yBAAAA,8BAA4BE,IAAD,EAAOC,IAAlCH;AAAAA,MAAAA;AAAAA;;;MACEC,IAAAG,WAAAA,CAAUF,IAAV,EAAgBH,eAAWM,MAAAA,CAAAA,CAA3BD;MACAJ,OAAAD,eAAYO,OAAAA,CAAGH,IAAHG;IAFdN,CAAAA,GAAAA;IAKAC,IAAAD,oBAAAA,CAAmB,gBAAnB,EAAqCF,gCAArCE;IAEAO,YAAY;;AAGdT;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;;AAEAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;IAEE,IAAA,QAAmDS,SAAnD,CAAA;MAAAN,IAAAD,oBAAAA,CAAmB,iBAAnB,EAAqCO,SAArCP;IAAA;IAEAQ,MAAIP,IAAJO,UAAAA,eAAAA;AAAAA;MACEA,OAAAC;IADFD,CAAAA,GAAAA;IAIAE,MAAIT,IAAJS,YAAAA,iBAAAA;AAAAA,MAAAA;;;MACEC,IAAIC,WAAMC,KAAAA,CAAAA,CAAIC,MAAAA,CAAAA;MACdJ,OAAAK,IAAAC,gBAAAD,QAAgBE,KAAAA,CAAKN,CAArB,EAAwBA,CAAxB,EAA2BA,CAA3B,EAA8BA,CAA9B,EAAiCA,CAAjBM;IAFlBP,CAAAA,GAAAA;IAKAZ,OAAAoB,MAAIjB,IAAJiB,oBAAAA,yBAAuBC,QAAD,EAAWC,IAAjCF;AAAAA,MAAAA;AAAAA;;;;MAAiC,yBAAO,cAAP;MAC/B,IAAA,QAAAG,CAAAA,YAACC,CAAAA,QAAQvB,eAAWwB,OAAAA,CAACJ,QAADI,CAAnBD,CAADD,CAAA,CAAA;QAAA;MAAA;QAAmCG,OAAQC,OAAAA,CAAOC,IAAAC,YAAAD,WAAf,EAAiCR,gBAAD,GAAA,CAAiBC,QAAjB,CAAA,GAA0BD,IAA1B,GAAA,CAA8BnB,eAAWwB,OAAAA,CAACJ,QAADI,CAAzC,CAAxBE;MAA3C;;AAEJP;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA,iBAAmBM,OAAQC,OAAAA,CAAOG,oBAAf,EAAiCV,mBAAD,GAAA,CAAoBE,IAApB,CAAxBK;AAC3BP;AACAA;IAdEA,CAAAA,IAAAA;EAxCFpB,GAAO,IAAPA;AAAAD;"}},{"offset":{"line":24136,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/random/formatter.rb"],"sourcesContent":["class ::Random\n  module self::Formatter\n    def hex(count = nil)\n      count = ::Random._verify_count(count)\n      %x{\n        var bytes = #{bytes(count)};\n        var out = \"\";\n        for (var i = 0; i < #{count}; i++) {\n          out += bytes.charCodeAt(i).toString(16).padStart(2, '0');\n        }\n        return #{`out`.encode('US-ASCII')};\n      }\n    end\n\n    def random_bytes(count = nil)\n      bytes(count)\n    end\n\n    def base64(count = nil)\n      ::Base64.strict_encode64(random_bytes(count)).encode('US-ASCII')\n    end\n\n    def urlsafe_base64(count = nil, padding = false)\n      ::Base64.urlsafe_encode64(random_bytes(count), padding).encode('US-ASCII')\n    end\n\n    def uuid\n      str = hex(16).split('')\n      str[12] = '4'\n      str[16] = `(parseInt(#{str[16]}, 16) & 3 | 8).toString(16)`\n      str = [str[0...8], str[8...12], str[12...16], str[16...20], str[20...32]]\n      str = str.map(&:join)\n      str.join('-')\n    end\n\n    # Implemented in terms of `#bytes` for SecureRandom, but Random overrides this\n    # method to implement `#bytes` in terms of `#random_float`. Not part of standard\n    # Ruby interface - use random_number for portability.\n    def random_float\n      bs = bytes(4)\n      num = 0\n      4.times do |i|\n        num <<= 8\n        num |= bs[i].ord\n      end\n      num.abs / 0x7fffffff\n    end\n\n    def random_number(limit = undefined)\n      %x{\n        function randomFloat() {\n          return #{random_float};\n        }\n\n        function randomInt(max) {\n          return Math.floor(randomFloat() * max);\n        }\n\n        function randomRange() {\n          var min = limit.begin,\n              max = limit.end;\n\n          if (min === nil || max === nil) {\n            return nil;\n          }\n\n          var length = max - min;\n\n          if (length < 0) {\n            return nil;\n          }\n\n          if (length === 0) {\n            return min;\n          }\n\n          if (max % 1 === 0 && min % 1 === 0 && !limit.excl) {\n            length++;\n          }\n\n          return randomInt(length) + min;\n        }\n\n        if (limit == null) {\n          return randomFloat();\n        } else if (limit.$$is_range) {\n          return randomRange();\n        } else if (limit.$$is_number) {\n          if (limit <= 0) {\n            #{::Kernel.raise ::ArgumentError, \"invalid argument - #{limit}\"}\n          }\n\n          if (limit % 1 === 0) {\n            // integer\n            return randomInt(limit);\n          } else {\n            return randomFloat() * limit;\n          }\n        } else {\n          limit = #{::Opal.coerce_to!(limit, ::Integer, :to_int)};\n\n          if (limit <= 0) {\n            #{::Kernel.raise ::ArgumentError, \"invalid argument - #{limit}\"}\n          }\n\n          return randomInt(limit);\n        }\n      }\n    end\n\n    def alphanumeric(count = nil)\n      count = Random._verify_count(count)\n      map = ['0'..'9', 'a'..'z', 'A'..'Z'].map(&:to_a).flatten\n      ::Array.new(count) do |i|\n        map[random_number(map.length)]\n      end.join\n    end\n  end\n\n  include ::Random::Formatter\n  extend ::Random::Formatter\nend\n"],"names":["<top (required)>","<class:Random>","<module:self::Formatter>","hex","count","Random","_verify_count","self","bytes","encode","random_bytes","base64","Base64","strict_encode64","urlsafe_base64","padding","urlsafe_encode64","uuid","str","16","split","$writer","12","[]=","-","1","[]","0","8","20","32","map","to_proc","join","random_float","bs","4","num","times","block in random_float","i","<<","block (2 levels) in random_float","|","ord","/","abs","2147483647","random_number","limit","Kernel","raise","ArgumentError","Opal","coerce_to!","Integer","alphanumeric","flatten","new","Array","block in alphanumeric","block (2 levels) in alphanumeric","length","include","Random::Formatter","extend"],"mappings":"AAAAA,2DAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;;IACEC;IAAAA;;MAAAA;;;;AACEC,MAAAA,mBAAAA,eAAQC,KAARD;AAAAA,QAAAA;;;;QAAQ,2BAAQ,GAAR;QACNC,QAAQC,aAAQC,eAAAA,CAAeF,KAAfE;;AAEtBH,oBAAsBI,IAAAC,OAAAA,CAAMJ,KAANI,CAAaL;AACnCA;AACAA,4BAA8BC,KAAMD;AACpCA;AACAA;AACAA,eAAiBA,CAACA,GAADA,CAAKM,QAAAA,CAAQN,UAARM,CAAoBN;AAC1CA;MATIA,CAAAA,IAAAA;;AAYAO,MAAAA,4BAAAA,wBAAiBN,KAAjBM;AAAAA,QAAAA;;;;QAAiB,2BAAQ,GAAR;QACfA,OAAAH,IAAAC,OAAAA,CAAMJ,KAANI;MADFE,CAAAA,IAAAA;;AAIAC,MAAAA,sBAAAA,kBAAWP,KAAXO;AAAAA,QAAAA;;;;QAAW,2BAAQ,GAAR;QACTA,OAAAC,aAAQC,iBAAAA,CAAiBN,IAAAG,cAAAA,CAAaN,KAAbM,CAAjBG,CAAqCJ,QAAAA,CAAQE,UAARF;MAD/CE,CAAAA,IAAAA;;AAIAG,MAAAA,8BAAAA,0BAAmBV,KAAD,EAAcW,OAAhCD;AAAAA,QAAAA;;;;QAAmB,2BAAQ,GAAR;;QAAa,+BAAU,KAAV;QAC9BA,OAAAF,aAAQI,kBAAAA,CAAkBT,IAAAG,cAAAA,CAAaN,KAAbM,CAA1B,EAA+CK,OAAvCC,CAA+CP,QAAAA,CAAQK,UAARL;MADzDK,CAAAA,IAAAA;;AAIAG,MAAAA,oBAAAA,gBAAAA;AAAAA,QAAAA;;;QACEC,MAAMX,IAAAJ,KAAAA,CAAIgB,EAAJhB,CAAOiB,OAAAA,CAAOH,EAAPG;;QA3BnBC,UAAA,CA4BUC,EA5BV,EA4BgBL,GA5BhB;QA4BSM,MAAHL,GAAGK,OAAAA,EA5BT,MAAAF,OAAA,CA4BSE;QA5BTF,OAAA,CAAAG,UAAAH,OAAA,CAAAJ,QAAA,CAAAO,EAAAC,CAAAD,CAAA;;QAAAH,UAAA,CA6BUF,EA7BV,EA6BiBF,UAAYC,GAAGQ,OAAAA,CAACP,EAADO,CAAKT,2BA7BrC;QA6BSM,MAAHL,GAAGK,OAAAA,EA7BT,MAAAF,OAAA,CA6BSE;QA7BTF,OAAA,CAAAG,UAAAH,OAAA,CAAAJ,QAAA,CAAAO,EAAAC,CAAAD,CAAA;QA8BMN,MAAM,CAACA,GAAGQ,OAAAA,CAAC,OAAAC,CAAA,EAAIC,CAAJ,OAADF,CAAJ,EAAaR,GAAGQ,OAAAA,CAAC,OAAAE,CAAA,EAAIN,EAAJ,OAADI,CAAhB,EAA0BR,GAAGQ,OAAAA,CAAC,OAAAJ,EAAA,EAAKH,EAAL,OAADO,CAA7B,EAAwCR,GAAGQ,OAAAA,CAAC,OAAAP,EAAA,EAAKU,EAAL,OAADH,CAA3C,EAAsDR,GAAGQ,OAAAA,CAAC,OAAAG,EAAA,EAAKC,EAAL,OAADJ,CAAzD;QACNR,MAASa,MAAHb,GAAGa,OAAAA,EAAAA,EAAAA,EAAM,MAADC,SAAAA,CAAAA,CAALD;QACTd,OAAAC,GAAGe,MAAAA,CAAMhB,GAANgB;MANLhB,CAAAA,GAAAA;;AAYAiB,MAAAA,4BAAAA,wBAAAA;AAAAA,QAAAA;;;QACEC,KAAK5B,IAAAC,OAAAA,CAAM4B,CAAN5B;QACL6B,MAAMV;QACLW,MAADF,CAAAA,CAAAA,CAACE,SAAAA,EAAAA,EAAAA,EAADC,aAAYC,CAAZD;;;UAAY;UACVF,MAAAA,GAAII,OAAAA,CAAIb,CAAJa;UACJC,OAAAL,CAAAA,MAAAA,GAAIM,MAAAA,CAAGR,EAAET,OAAAA,CAACc,CAADd,CAAGkB,KAAAA,CAAAA,CAARD,CAAJN,EAFFE,CAAAA,GAACD;QAIDJ,OAAQW,WAARR,GAAGS,KAAAA,CAAAA,CAAKD,EAAEE,UAAFF;MAPVX,CAAAA,GAAAA;;AAUAc,MAAAA,6BAAAA,yBAAkBC,KAAlBD;AAAAA,QAAAA;;;;;AAEJA;AACAA,iBAAmBzC,IAAA2B,cAAAA,CAAAA,CAAac;AAChCA;;AAEAA;AACAA;AACAA;;AAEAA;AACAA;AACAA;;AAEAA;AACAA;AACAA;;AAEAA;;AAEAA;AACAA;AACAA;;AAEAA;AACAA;AACAA;;AAEAA;AACAA;AACAA;;AAEAA;AACAA;;AAEAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA,YAAcE,OAAQC,OAAAA,CAAOC,oBAAf,EAAiCJ,qBAAD,GAAA,CAAsBC,KAAtB,CAAxBE;AACtBH;;AAEAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA,kBAAoBK,KAAMC,eAAAA,CAAYL,KAAlB,EAAyBM,cAAzB,EAAoC,QAA9BD,CAAuCN;;AAEjEA;AACAA,YAAcE,OAAQC,OAAAA,CAAOC,oBAAf,EAAiCJ,qBAAD,GAAA,CAAsBC,KAAtB,CAAxBE;AACtBH;;AAEAA;AACAA;AACAA;MA3DIA,CAAAA,IAAAA;MA8DA9C,OAAAsD,4BAAAA,wBAAiBpD,KAAjBoD;AAAAA,QAAAA;;;;QAAiB,2BAAQ,GAAR;QACfpD,QAAQC,YAAMC,eAAAA,CAAeF,KAAfE;QACdyB,MAAoCA,MAA9B,CAAC,OAAAyB,GAAA,EAAKA,GAAL,QAAD,EAAW,OAAAA,GAAA,EAAKA,GAAL,QAAX,EAAqB,OAAAA,GAAA,EAAKA,GAAL,QAArB,CAA8BzB,OAAAA,EAAAA,EAAAA,EAAM,MAADC,SAAAA,CAAAA,CAALD,CAAY0B,SAAAA,CAAAA;QAChDD,OAAOE,MAAPC,YAAOD,OAAAA,EAAAA,CAAKtD,KAALsD,CAAAA,EAAPE,aAAuBpB,CAAvBoB,EAAAC;;;;UAAuB;UACrBA,OAAA9B,GAAGL,OAAAA,CAACnB,IAAAyC,eAAAA,CAAcjB,GAAG+B,QAAAA,CAAAA,CAAjBd,CAADtB,EADLkC,CAAAA,GAAAA,qBAAAA,CAAOF,CAEJzB,MAAAA,CAAAA;MALLuB,CAAAA,IAAAA;IA7GFtD,GAAOK,IAAPL;IAsHAK,IAAAwD,SAAAA,CAAQC,IAAA3D,aAAA2D,cAARD;IACA9D,OAAAM,IAAA0D,QAAAA,CAAOD,IAAA3D,aAAA2D,cAAPC;EAxHFhE,GAAM,IAANA,EAAAA,IAAAA;AAAAD;"}},{"offset":{"line":24318,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/random/mersenne_twister.rb"],"sourcesContent":["# This is based on an adaptation of Makoto Matsumoto and Takuji Nishimura's code\n# done by Sean McCullough <banksean@gmail.com> and Dave Heitzman\n# <daveheitzman@yahoo.com>, subsequently readapted from an updated version of\n# ruby's random.c (rev c38a183032a7826df1adabd8aa0725c713d53e1c).\n#\n# The original copyright notice from random.c follows.\n#\n#   This is based on trimmed version of MT19937.  To get the original version,\n#   contact <http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html>.\n#\n#   The original copyright notice follows.\n#\n#      A C-program for MT19937, with initialization improved 2002/2/10.\n#      Coded by Takuji Nishimura and Makoto Matsumoto.\n#      This is a faster version by taking Shawn Cokus's optimization,\n#      Matthe Bellew's simplification, Isaku Wada's real version.\n#\n#      Before using, initialize the state by using init_genrand(mt, seed)\n#      or init_by_array(mt, init_key, key_length).\n#\n#      Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,\n#      All rights reserved.\n#\n#      Redistribution and use in source and binary forms, with or without\n#      modification, are permitted provided that the following conditions\n#      are met:\n#\n#        1. Redistributions of source code must retain the above copyright\n#           notice, this list of conditions and the following disclaimer.\n#\n#        2. Redistributions in binary form must reproduce the above copyright\n#           notice, this list of conditions and the following disclaimer in the\n#           documentation and/or other materials provided with the distribution.\n#\n#        3. The names of its contributors may not be used to endorse or promote\n#           products derived from this software without specific prior written\n#           permission.\n#\n#      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n#      \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n#      LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n#      A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n#      CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n#      EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n#      PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n#      PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n#      LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n#      NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n#      SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n#\n#\n#      Any feedback is very welcome.\n#      http://www.math.keio.ac.jp/matumoto/emt.html\n#      email: matumoto@math.keio.ac.jp\nmersenne_twister = %x{(function() {\n  /* Period parameters */\n  var N = 624;\n  var M = 397;\n  var MATRIX_A = 0x9908b0df;      /* constant vector a */\n  var UMASK = 0x80000000;         /* most significant w-r bits */\n  var LMASK = 0x7fffffff;         /* least significant r bits */\n  var MIXBITS = function(u,v) { return ( ((u) & UMASK) | ((v) & LMASK) ); };\n  var TWIST = function(u,v) { return (MIXBITS((u),(v)) >>> 1) ^ ((v & 0x1) ? MATRIX_A : 0x0); };\n\n  function init(s) {\n    var mt = {left: 0, next: N, state: new Array(N)};\n    init_genrand(mt, s);\n    return mt;\n  }\n\n  /* initializes mt[N] with a seed */\n  function init_genrand(mt, s) {\n    var j, i;\n    mt.state[0] = s >>> 0;\n    for (j=1; j<N; j++) {\n      mt.state[j] = (1812433253 * ((mt.state[j-1] ^ (mt.state[j-1] >> 30) >>> 0)) + j);\n      /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */\n      /* In the previous versions, MSBs of the seed affect   */\n      /* only MSBs of the array state[].                     */\n      /* 2002/01/09 modified by Makoto Matsumoto             */\n      mt.state[j] &= 0xffffffff;  /* for >32 bit machines */\n    }\n    mt.left = 1;\n    mt.next = N;\n  }\n\n  /* generate N words at one time */\n  function next_state(mt) {\n    var p = 0, _p = mt.state;\n    var j;\n\n    mt.left = N;\n    mt.next = 0;\n\n    for (j=N-M+1; --j; p++)\n      _p[p] = _p[p+(M)] ^ TWIST(_p[p+(0)], _p[p+(1)]);\n\n    for (j=M; --j; p++)\n      _p[p] = _p[p+(M-N)] ^ TWIST(_p[p+(0)], _p[p+(1)]);\n\n    _p[p] = _p[p+(M-N)] ^ TWIST(_p[p+(0)], _p[0]);\n  }\n\n  /* generates a random number on [0,0xffffffff]-interval */\n  function genrand_int32(mt) {\n    /* mt must be initialized */\n    var y;\n\n    if (--mt.left <= 0) next_state(mt);\n    y = mt.state[mt.next++];\n\n    /* Tempering */\n    y ^= (y >>> 11);\n    y ^= (y << 7) & 0x9d2c5680;\n    y ^= (y << 15) & 0xefc60000;\n    y ^= (y >>> 18);\n\n    return y >>> 0;\n  }\n\n  function int_pair_to_real_exclusive(a, b) {\n    a >>>= 5;\n    b >>>= 6;\n    return(a*67108864.0+b)*(1.0/9007199254740992.0);\n  }\n\n  // generates a random number on [0,1) with 53-bit resolution\n  function genrand_real(mt) {\n    /* mt must be initialized */\n    var a = genrand_int32(mt), b = genrand_int32(mt);\n    return int_pair_to_real_exclusive(a, b);\n  }\n\n  return { genrand_real: genrand_real, init: init };\n})()}\n\nclass ::Random\n  `var MAX_INT = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1`\n\n  self::MERSENNE_TWISTER_GENERATOR = `{\n    new_seed: function() { return Math.round(Math.random() * MAX_INT); },\n    reseed: function(seed) { return mersenne_twister.init(seed); },\n    rand: function(mt) { return mersenne_twister.genrand_real(mt); }\n  }`\n\n  self.generator = self::MERSENNE_TWISTER_GENERATOR\nend\n"],"names":["<top (required)>","mersenne_twister","<class:Random>","self","$writer","self::MERSENNE_TWISTER_GENERATOR","generator=","-","1"],"mappings":"AAAAA,kEAAAA;EAAAA;;EAAAA;;EAsDAC,mBAAsBD;AACtBA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;;AAEAA;AACAA;AACAA;AACAA;AACAA;;AAEAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;;AAEAA;AACAA;AACAA;AACAA;;AAEAA;AACAA;;AAEAA;AACAA;;AAEAA;AACAA;;AAEAA;AACAA;;AAEAA;AACAA;AACAA;AACAA;;AAEAA;AACAA;;AAEAA;AACAA;AACAA;AACAA;AACAA;;AAEAA;AACAA;;AAEAA;AACAA;AACAA;AACAA;AACAA;;AAEAA;AACAA;AACAA;AACAA;AACAA;AACAA;;AAEAA;AACAA;EAEAA,OAAAE;EAAAA;;IAAAA;;;IACGA;IAED,WAAAC,IAAA,gCAAoCD;AACtCA;AACAA;AACAA;AACAA,GAJE;;IA3IFE,UAAA,CAiJmBC,IAAAF,IAAAE,+BAjJnB;IAiJMC,MAAJH,IAAIG,cAAAA,EAjJN,MAAAF,OAAA,CAiJME;IAjJNJ,OAAAE,OAAA,CAAAG,UAAAH,OAAA,CAAAF,QAAA,CAAAK,EAAAC,CAAAD,CAAA;EAwIAL,GAAM,IAANA,EAAAA,IAAAA;AAxIAF;"}},{"offset":{"line":24423,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/random.rb"],"sourcesContent":["# helpers: truthy\n\nrequire 'corelib/random/formatter'\n\nclass ::Random\n  attr_reader :seed, :state\n\n  def self._verify_count(count)\n    %x{\n      if (!$truthy(count)) count = 16;\n      if (typeof count !== \"number\") count = #{`count`.to_int};\n      if (count < 0) #{::Kernel.raise ::ArgumentError, 'negative string size (or size too big)'};\n      count = Math.floor(count);\n      return count;\n    }\n  end\n\n  def initialize(seed = ::Random.new_seed)\n    seed = ::Opal.coerce_to!(seed, ::Integer, :to_int)\n    @state = seed\n    reseed(seed)\n  end\n\n  def reseed(seed)\n    @seed = seed\n    `self.$rng = Opal.$$rand.reseed(seed)`\n  end\n\n  def self.new_seed\n    `Opal.$$rand.new_seed()`\n  end\n\n  def self.rand(limit = undefined)\n    self::DEFAULT.rand(limit)\n  end\n\n  def self.srand(n = ::Random.new_seed)\n    n = ::Opal.coerce_to!(n, ::Integer, :to_int)\n\n    previous_seed = self::DEFAULT.seed\n    self::DEFAULT.reseed(n)\n    previous_seed\n  end\n\n  def self.urandom(size)\n    ::SecureRandom.bytes(size)\n  end\n\n  def ==(other)\n    return false unless ::Random === other\n\n    seed == other.seed && state == other.state\n  end\n\n  def bytes(length)\n    length = ::Random._verify_count(length)\n\n    ::Array.new(length) { rand(255).chr }.join.encode('ASCII-8BIT')\n  end\n\n  def self.bytes(length)\n    self::DEFAULT.bytes(length)\n  end\n\n  def rand(limit = undefined)\n    random_number(limit)\n  end\n\n  # Not part of the Ruby interface (use #random_number for portability), but\n  # used by Random::Formatter as a shortcut, as for Random interface the float\n  # RNG is primary.\n  def random_float\n    %x{\n      self.state++;\n      return Opal.$$rand.rand(self.$rng);\n    }\n  end\n\n  def self.random_float\n    self::DEFAULT.random_float\n  end\n\n  def self.generator=(generator)\n    `Opal.$$rand = #{generator}`\n\n    if const_defined? :DEFAULT\n      self::DEFAULT.reseed\n    else\n      const_set :DEFAULT, new(new_seed)\n    end\n  end\nend\n\nrequire 'corelib/random/mersenne_twister'\n"],"names":["<top (required)>","self","require","<class:Random>","attr_reader","_verify_count","count","to_int","Kernel","raise","ArgumentError","initialize","seed","Random","new_seed","Opal","coerce_to!","Integer","@state","reseed","@seed","rand","limit","self::DEFAULT","srand","n","previous_seed","urandom","size","SecureRandom","bytes","==","other","$ret_or_1","state","length","new","Array","block in bytes","block (2 levels) in bytes","255","chr","join","encode","random_number","random_float","generator=","generator","const_defined?","const_set"],"mappings":"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"}},{"offset":{"line":24556,"column":0},"map":{"version":3,"sourceRoot":"","sources":["corelib/unsupported.rb"],"sourcesContent":["%x{\n  var warnings = {};\n\n  function handle_unsupported_feature(message) {\n    switch (Opal.config.unsupported_features_severity) {\n    case 'error':\n      #{::Kernel.raise ::NotImplementedError, `message`}\n      break;\n    case 'warning':\n      warn(message)\n      break;\n    default: // ignore\n      // noop\n    }\n  }\n\n  function warn(string) {\n    if (warnings[string]) {\n      return;\n    }\n\n    warnings[string] = true;\n    #{warn(`string`)};\n  }\n}\n\nclass ::String\n  `var ERROR = \"String#%s not supported. Mutable String methods are not supported in Opal.\"`\n\n  %i[\n    << capitalize! chomp! chop! downcase! gsub! lstrip! next! reverse!\n    slice! squeeze! strip! sub! succ! swapcase! tr! tr_s! upcase! prepend\n    []= clear encode! unicode_normalize!\n  ].each do |method_name|\n    define_method method_name do |*|\n      ::Kernel.raise ::NotImplementedError, `ERROR` % method_name\n    end\n  end\nend\n\nmodule ::Kernel\n  `var ERROR = \"Object freezing is not supported by Opal\"`\n\n  def freeze\n    `handle_unsupported_feature(ERROR)`\n    self\n  end\n\n  def frozen?\n    `handle_unsupported_feature(ERROR)`\n    false\n  end\nend\n\nmodule ::Kernel\n  `var ERROR = \"Object tainting is not supported by Opal\"`\n\n  def taint\n    `handle_unsupported_feature(ERROR)`\n    self\n  end\n\n  def untaint\n    `handle_unsupported_feature(ERROR)`\n    self\n  end\n\n  def tainted?\n    `handle_unsupported_feature(ERROR)`\n    false\n  end\nend\n\nclass ::Module\n  def public(*methods)\n    %x{\n      if (methods.length === 0) {\n        self.$$module_function = false;\n        return nil;\n      }\n      return (methods.length === 1) ? methods[0] : methods;\n    }\n  end\n\n  def private_class_method(*methods)\n    `return (methods.length === 1) ? methods[0] : methods`\n  end\n\n  def private_method_defined?(obj)\n    false\n  end\n\n  def private_constant(*)\n  end\n\n  alias nesting public\n  alias private public\n  alias protected public\n  alias protected_method_defined? private_method_defined?\n  alias public_class_method private_class_method\n  alias public_instance_method instance_method\n  alias public_instance_methods instance_methods\n  alias public_method_defined? method_defined?\nend\n\nmodule ::Kernel\n  def private_methods(*methods)\n    []\n  end\n\n  alias private_instance_methods private_methods\nend\n\nmodule ::Kernel\n  def eval(*)\n    ::Kernel.raise ::NotImplementedError, \"To use Kernel#eval, you must first require 'opal-parser'. \"\\\n                                          \"See https://github.com/opal/opal/blob/#{RUBY_ENGINE_VERSION}/docs/opal_parser.md for details.\"\n  end\nend\n\ndef self.public(*methods)\n  `return (methods.length === 1) ? methods[0] : methods`\nend\n\ndef self.private(*methods)\n  `return (methods.length === 1) ? methods[0] : methods`\nend\n"],"names":["<top (required)>","Kernel","raise","NotImplementedError","self","warn","<class:String>","each","block in <class:String>","method_name","block (2 levels) in <class:String>","define_method","block (3 levels) in <class:String>","%","<module:Kernel>","freeze","frozen?","taint","untaint","tainted?","<class:Module>","public","private_class_method","private_method_defined?","obj","private_constant","private_methods","eval","RUBY_ENGINE_VERSION","private"],"mappings":"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"}},{"offset":{"line":24770,"column":0},"map":{"version":3,"sourceRoot":"","sources":["./opal.rb"],"sourcesContent":["::Object.require 'opal/base'\n::Object.require 'opal/mini'\n\n::Object.require 'corelib/kernel/format'\n::Object.require 'corelib/string/encoding'\n::Object.autoload :Math, 'corelib/math'\n::Object.require 'corelib/complex/base'\n::Object.autoload :Complex, 'corelib/complex'\n::Object.require 'corelib/rational/base'\n::Object.autoload :Rational, 'corelib/rational'\n::Object.require 'corelib/time'\n::Object.autoload :Struct, 'corelib/struct'\n::Object.require 'corelib/dir'\n::Object.autoload :File, 'corelib/file'\n\n::Object.require 'corelib/process/base'\n::Object.autoload :Process, 'corelib/process'\n::Object.autoload :Random, 'corelib/random'\n\n::Object.require 'corelib/unsupported'\n"],"names":["<top (required)>","Object","require","autoload"],"mappings":"AAAAA,uCAAAA;EAAAA;;EAAAA;;EAAAC,OAAQC,SAAAA,CAASF,WAATE;EACRD,OAAQC,SAAAA,CAASF,WAATE;EAERD,OAAQC,SAAAA,CAASF,uBAATE;EACRD,OAAQC,SAAAA,CAASF,yBAATE;EACRD,OAAQE,UAAAA,CAAU,MAAlB,EAAyBH,cAAjBG;EACRF,OAAQC,SAAAA,CAASF,sBAATE;EACRD,OAAQE,UAAAA,CAAU,SAAlB,EAA4BH,iBAApBG;EACRF,OAAQC,SAAAA,CAASF,uBAATE;EACRD,OAAQE,UAAAA,CAAU,UAAlB,EAA6BH,kBAArBG;EACRF,OAAQC,SAAAA,CAASF,cAATE;EACRD,OAAQE,UAAAA,CAAU,QAAlB,EAA2BH,gBAAnBG;EACRF,OAAQC,SAAAA,CAASF,aAATE;EACRD,OAAQE,UAAAA,CAAU,MAAlB,EAAyBH,cAAjBG;EAERF,OAAQC,SAAAA,CAASF,sBAATE;EACRD,OAAQE,UAAAA,CAAU,SAAlB,EAA4BH,iBAApBG;EACRF,OAAQE,UAAAA,CAAU,QAAlB,EAA2BH,gBAAnBG;EAERH,OAAAC,OAAQC,SAAAA,CAASF,qBAATE;AAnBRF;"}},{"offset":{"line":24794,"column":0},"map":{"version":3,"sourceRoot":"","sources":["./native.rb"],"sourcesContent":["# Provides a complete set of tools to wrap native JavaScript\n# into nice Ruby objects.\n#\n# @example\n#\n#   $$.document.querySelector('p').classList.add('blue')\n#   # => adds \"blue\" class to <p>\n#\n#   $$.location.href = 'https://google.com'\n#   # => changes page location\n#\n#   do_later = $$[:setTimeout] # Accessing the \"setTimeout\" property\n#   do_later.call(->{ puts :hello}, 500)\n#\n# `$$` and `$global` wrap `Opal.global`, which the Opal JS runtime\n# sets to the global `this` object.\n#\nmodule Native\n  def self.is_a?(object, klass)\n    %x{\n      try {\n        return #{object} instanceof #{try_convert(klass)};\n      }\n      catch (e) {\n        return false;\n      }\n    }\n  end\n\n  def self.try_convert(value, default = nil)\n    %x{\n      if (#{native?(value)}) {\n        return #{value};\n      }\n      else if (#{value.respond_to? :to_n}) {\n        return #{value.to_n};\n      }\n      else {\n        return #{default};\n      }\n    }\n  end\n\n  def self.convert(value)\n    %x{\n      if (#{native?(value)}) {\n        return #{value};\n      }\n      else if (#{value.respond_to? :to_n}) {\n        return #{value.to_n};\n      }\n      else {\n        #{raise ArgumentError, \"#{value.inspect} isn't native\"};\n      }\n    }\n  end\n\n  def self.call(obj, key, *args, &block)\n    %x{\n      var prop = #{obj}[#{key}];\n\n      if (prop instanceof Function) {\n        var converted = new Array(args.length);\n\n        for (var i = 0, l = args.length; i < l; i++) {\n          var item = args[i],\n              conv = #{try_convert(`item`)};\n\n          converted[i] = conv === nil ? item : conv;\n        }\n\n        if (block !== nil) {\n          converted.push(block);\n        }\n\n        return #{Native(`prop.apply(#{obj}, converted)`)};\n      }\n      else {\n        return #{Native(`prop`)};\n      }\n    }\n  end\n\n  def self.proc(&block)\n    raise LocalJumpError, 'no block given' unless block\n\n    ::Kernel.proc { |*args|\n      args.map! { |arg| Native(arg) }\n      instance = Native(`this`)\n\n      %x{\n        // if global is current scope, run the block in the scope it was defined\n        if (this === Opal.global) {\n          return block.apply(self, #{args});\n        }\n\n        var self_ = block.$$s;\n        block.$$s = null;\n\n        try {\n          return block.apply(#{instance}, #{args});\n        }\n        finally {\n          block.$$s = self_;\n        }\n      }\n    }\n  end\n\n  module Helpers\n    # Exposes a native JavaScript method to Ruby\n    #\n    #\n    # @param new [String]\n    #       The name of the newly created method.\n    #\n    # @param old [String]\n    #       The name of the native JavaScript method to be exposed.\n    #       If the name ends with \"=\" (e.g. `foo=`) it will be interpreted as\n    #       a property setter. (default: the value of \"new\")\n    #\n    # @param as [Class]\n    #       If provided the values returned by the original method will be\n    #       returned as instances of the passed class. The class passed to \"as\"\n    #       is expected to accept a native JavaScript value.\n    #\n    # @example\n    #\n    #   class Element\n    #     extend Native::Helpers\n    #\n    #     alias_native :add_class, :addClass\n    #     alias_native :show\n    #     alias_native :hide\n    #\n    #     def initialize(selector)\n    #       @native = `$(#{selector})`\n    #     end\n    #   end\n    #\n    #   titles = Element.new('h1')\n    #   titles.add_class :foo\n    #   titles.hide\n    #   titles.show\n    #\n    def alias_native(new, old = new, as: nil)\n      if old.end_with? '='\n        define_method new do |value|\n          `#{@native}[#{old[0..-2]}] = #{Native.convert(value)}`\n\n          value\n        end\n      elsif as\n        define_method new do |*args, &block|\n          value = Native.call(@native, old, *args, &block)\n          if value\n            as.new(value.to_n)\n          end\n        end\n      else\n        define_method new do |*args, &block|\n          Native.call(@native, old, *args, &block)\n        end\n      end\n    end\n\n    def native_reader(*names)\n      names.each do |name|\n        define_method name do\n          Native(`#{@native}[name]`)\n        end\n      end\n    end\n\n    def native_writer(*names)\n      names.each do |name|\n        define_method \"#{name}=\" do |value|\n          Native(`#{@native}[name] = value`)\n        end\n      end\n    end\n\n    def native_accessor(*names)\n      native_reader(*names)\n      native_writer(*names)\n    end\n  end\n\n  module Wrapper\n    def initialize(native)\n      unless ::Kernel.native?(native)\n        ::Kernel.raise ArgumentError, \"#{native.inspect} isn't native\"\n      end\n\n      @native = native\n    end\n\n    # Returns the internal native JavaScript value\n    def to_n\n      @native\n    end\n\n    def self.included(klass)\n      klass.extend Helpers\n    end\n  end\n\n  def self.included(base)\n    warn 'Including ::Native is deprecated. Please include Native::Wrapper instead.'\n    base.include Wrapper\n  end\nend\n\nmodule Kernel\n  def native?(value)\n    `value == null || !value.$$class`\n  end\n\n  # Wraps a native JavaScript with `Native::Object.new`\n  #\n  # @return [Native::Object] The wrapped object if it is native\n  # @return [nil] for `null` and `undefined`\n  # @return [obj] The object itself if it's not native\n  def Native(obj)\n    if `#{obj} == null`\n      nil\n    elsif native?(obj)\n      Native::Object.new(obj)\n    elsif obj.is_a?(Array)\n      obj.map do |o|\n        Native(o)\n      end\n    elsif obj.is_a?(Proc)\n      proc do |*args, &block|\n        Native(obj.call(*args, &block))\n      end\n    else\n      obj\n    end\n  end\n\n  alias _Array Array\n\n  # Wraps array-like JavaScript objects in Native::Array\n  def Array(object, *args, &block)\n    if native?(object)\n      return Native::Array.new(object, *args, &block).to_a\n    end\n    _Array(object)\n  end\nend\n\nclass Native::Object < BasicObject\n  include ::Native::Wrapper\n\n  def ==(other)\n    `#{@native} === #{::Native.try_convert(other)}`\n  end\n\n  def has_key?(name)\n    `Opal.hasOwnProperty.call(#{@native}, #{name})`\n  end\n\n  def each(*args)\n    if block_given?\n      %x{\n        for (var key in #{@native}) {\n          #{yield `key`, `#{@native}[key]`}\n        }\n      }\n\n      self\n    else\n      method_missing(:each, *args)\n    end\n  end\n\n  def [](key)\n    %x{\n      var prop = #{@native}[key];\n\n      if (prop instanceof Function) {\n        return prop;\n      }\n      else {\n        return #{::Native.call(@native, key)}\n      }\n    }\n  end\n\n  def []=(key, value)\n    native = ::Native.try_convert(value)\n\n    if `#{native} === nil`\n      `#{@native}[key] = #{value}`\n    else\n      `#{@native}[key] = #{native}`\n    end\n  end\n\n  def merge!(other)\n    %x{\n      other = #{::Native.convert(other)};\n\n      for (var prop in other) {\n        #{@native}[prop] = other[prop];\n      }\n    }\n\n    self\n  end\n\n  def respond_to?(name, include_all = false)\n    ::Kernel.instance_method(:respond_to?).bind(self).call(name, include_all)\n  end\n\n  def respond_to_missing?(name, include_all = false)\n    `Opal.hasOwnProperty.call(#{@native}, #{name})`\n  end\n\n  def method_missing(mid, *args, &block)\n    %x{\n      if (mid.charAt(mid.length - 1) === '=') {\n        return #{self[mid.slice(0, mid.length - 1)] = args[0]};\n      }\n      else {\n        return #{::Native.call(@native, mid, *args, &block)};\n      }\n    }\n  end\n\n  def nil?\n    false\n  end\n\n  def is_a?(klass)\n    `Opal.is_a(self, klass)`\n  end\n\n  def instance_of?(klass)\n    `self.$$class === klass`\n  end\n\n  def class\n    `self.$$class`\n  end\n\n  def to_a(options = {}, &block)\n    ::Native::Array.new(@native, options, &block).to_a\n  end\n\n  def inspect\n    \"#<Native:#{`String(#{@native})`}>\"\n  end\n\n  alias include? has_key?\n  alias key? has_key?\n  alias kind_of? is_a?\n  alias member? has_key?\nend\n\nclass Native::Array\n  include Native::Wrapper\n  include Enumerable\n\n  def initialize(native, options = {}, &block)\n    super(native)\n\n    @get    = options[:get] || options[:access]\n    @named  = options[:named]\n    @set    = options[:set] || options[:access]\n    @length = options[:length] || :length\n    @block  = block\n\n    if `#{length} == null`\n      raise ArgumentError, 'no length found on the array-like object'\n    end\n  end\n\n  def each(&block)\n    return enum_for :each unless block\n\n    %x{\n      for (var i = 0, length = #{length}; i < length; i++) {\n        Opal.yield1(block, #{self[`i`]});\n      }\n    }\n\n    self\n  end\n\n  def [](index)\n    result = case index\n             when String, Symbol\n               @named ? `#{@native}[#{@named}](#{index})` : `#{@native}[#{index}]`\n             when Integer\n               @get ? `#{@native}[#{@get}](#{index})` : `#{@native}[#{index}]`\n             end\n\n    if result\n      if @block\n        @block.call(result)\n      else\n        Native(result)\n      end\n    end\n  end\n\n  def []=(index, value)\n    if @set\n      `#{@native}[#{@set}](#{index}, #{Native.convert(value)})`\n    else\n      `#{@native}[#{index}] = #{Native.convert(value)}`\n    end\n  end\n\n  def last(count = nil)\n    if count\n      index  = length - 1\n      result = []\n\n      while index >= 0\n        result << self[index]\n        index  -= 1\n      end\n\n      result\n    else\n      self[length - 1]\n    end\n  end\n\n  def length\n    `#{@native}[#{@length}]`\n  end\n\n  def inspect\n    to_a.inspect\n  end\n\n  alias to_ary to_a\nend\n\nclass Numeric\n  # @return the internal JavaScript value (with `valueOf`).\n  def to_n\n    `self.valueOf()`\n  end\nend\n\nclass Proc\n  # @return itself (an instance of `Function`)\n  def to_n\n    self\n  end\nend\n\nclass String\n  # @return the internal JavaScript value (with `valueOf`).\n  def to_n\n    `self.valueOf()`\n  end\nend\n\nclass Regexp\n  # @return the internal JavaScript value (with `valueOf`).\n  def to_n\n    `self.valueOf()`\n  end\nend\n\nclass MatchData\n  # @return the array of matches\n  def to_n\n    @matches\n  end\nend\n\nclass Struct\n  # @return a JavaScript object with the members as keys and their\n  # values as values.\n  def to_n\n    result = `{}`\n\n    each_pair do |name, value|\n      `#{result}[#{name}] = #{Native.try_convert(value, value)}`\n    end\n\n    result\n  end\nend\n\nclass Array\n  # Retuns a copy of itself trying to call #to_n on each member.\n  def to_n\n    %x{\n      var result = [];\n\n      for (var i = 0, length = self.length; i < length; i++) {\n        var obj = self[i];\n\n        result.push(#{Native.try_convert(`obj`, `obj`)});\n      }\n\n      return result;\n    }\n  end\nend\n\nclass Boolean\n  # @return the internal JavaScript value (with `valueOf`).\n  def to_n\n    `self.valueOf()`\n  end\nend\n\nclass Time\n  # @return itself (an instance of `Date`).\n  def to_n\n    self\n  end\nend\n\nclass NilClass\n  # @return the corresponding JavaScript value (`null`).\n  def to_n\n    `null`\n  end\nend\n\n# Running this code twice results in an infinite loop. While it's true\n# that we shouldn't run this file twice, there are certain cases, like\n# for example live reload, when this may happen.\nunless Hash.method_defined? :_initialize\n  class Hash\n    alias _initialize initialize\n\n    def initialize(defaults = undefined, &block)\n      %x{\n        if (defaults != null &&\n             (defaults.constructor === undefined ||\n               defaults.constructor === Object)) {\n          var smap = self.$$smap,\n              keys = self.$$keys,\n              key, value;\n\n          for (key in defaults) {\n            value = defaults[key];\n\n            if (value &&\n                 (value.constructor === undefined ||\n                   value.constructor === Object)) {\n              smap[key] = #{Hash.new(`value`)};\n            } else if (value && value.$$is_array) {\n              value = value.map(function(item) {\n                if (item &&\n                     (item.constructor === undefined ||\n                       item.constructor === Object)) {\n                  return #{Hash.new(`item`)};\n                }\n\n                return #{Native(`item`)};\n              });\n              smap[key] = value\n            } else {\n              smap[key] = #{Native(`value`)};\n            }\n\n            keys.push(key);\n          }\n\n          return self;\n        }\n\n        return #{_initialize(defaults, &block)};\n      }\n    end\n\n    # @return a JavaScript object with the same keys but calling #to_n on\n    # all values.\n    def to_n\n      %x{\n        var result = {},\n            keys = self.$$keys,\n            smap = self.$$smap,\n            key, value;\n\n        for (var i = 0, length = keys.length; i < length; i++) {\n          key = keys[i];\n\n          if (key.$$is_string) {\n            value = smap[key];\n          } else {\n            key = key.key;\n            value = key.value;\n          }\n\n          result[key] = #{Native.try_convert(`value`, `value`)};\n        }\n\n        return result;\n      }\n    end\n  end\nend\n\nclass Module\n  # Exposes the current module as a property of\n  # the global object (e.g. `window`).\n  def native_module\n    `Opal.global[#{name}] = #{self}`\n  end\nend\n\nclass Class\n  def native_alias(new_jsid, existing_mid)\n    %x{\n      var aliased = #{self}.prototype['$' + #{existing_mid}];\n      if (!aliased) {\n        #{raise NameError.new(\"undefined method `#{existing_mid}' for class `#{inspect}'\", existing_mid)};\n      }\n      #{self}.prototype[#{new_jsid}] = aliased;\n    }\n  end\n\n  def native_class\n    native_module\n    `self[\"new\"] = self.$new`\n  end\nend\n\n# Exposes the global value (would be `window` inside a browser)\n$$ = $global = Native(`Opal.global`)\n"],"names":["<top (required)>","<module:Native>","is_a?","self","object","klass","try_convert","value","default$","native?","respond_to?","to_n","convert","raise","ArgumentError","inspect","call","obj","key","Native","proc","block","LocalJumpError","Kernel","block in proc","block (2 levels) in proc","map!","args","arg","block (3 levels) in proc","instance","<module:Helpers>","alias_native","new$","old","end_with?","define_method","block in alias_native","block (2 levels) in alias_native","@native","[]","0","-2","as","to_proc","new","native_reader","each","names","block in native_reader","name","block (2 levels) in native_reader","block (3 levels) in native_reader","native_writer","block in native_writer","block (2 levels) in native_writer","block (3 levels) in native_writer","native_accessor","<module:Wrapper>","initialize","native$","included","extend","Helpers","base","warn","include","Wrapper","<module:Kernel>","Native::Object","Array","map","block in Native","o","block (2 levels) in Native","Proc","Native::Array","to_a","_Array","<class:Native::Object>","Native::Wrapper","==","other","has_key?","block_given?","method_missing","[]=","merge!","include_all","instance_method","bind","respond_to_missing?","mid","$writer","slice","-","length","1","nil?","instance_of?","class","options","BasicObject","<class:Native::Array>","Enumerable","@get","$ret_or_1","@named","@set","@length","@block","enum_for","index","result","String","Symbol","Integer","last","count",">=","<<","<class:Numeric>","<class:Proc>","<class:String>","<class:Regexp>","<class:MatchData>","@matches","<class:Struct>","each_pair","block in to_n","block (2 levels) in to_n","<class:Array>","<class:Boolean>","<class:Time>","<class:NilClass>","Hash","method_defined?","<class:Hash>","defaults","_initialize","<class:Module>","native_module","<class:Class>","native_alias","new_jsid","existing_mid","NameError","native_class","$$","$global"],"mappings":"AAAAA,yCAAAA;EAAAA;;EAAAA;;EAiBAC;EAAAA;;IAAAA;;;IACEC,MAAIC,IAAJD,YAAAA,6BAAeE,MAAD,EAASC,KAAvBH;AAAAA,MAAAA;;;AAEFA;AACAA,eAAiBE,MAAOF,YAAcC,IAAAG,aAAAA,CAAYD,KAAZC,CAAmBJ;AACzDA;AACAA;AACAA;AACAA;AACAA;IAREA,CAAAA,GAAAA;IAWAI,MAAIH,IAAJG,kBAAAA,uBAAqBC,KAAD,EAAQC,QAA5BF;AAAAA,MAAAA;;;;MAA4B,iCAAU,GAAV;;AAE9BA,UAAYH,IAAAM,YAAAA,CAAQF,KAARE,CAAeH;AAC3BA,eAAiBC,KAAMD;AACvBA;AACAA,eAAiBC,KAAKG,gBAAAA,CAAa,MAAbA,CAAmBJ;AACzCA,eAAiBC,KAAKI,MAAAA,CAAAA,CAAML;AAC5BA;AACAA;AACAA,eAAiBE,QAAQF;AACzBA;AACAA;IAXEA,CAAAA,IAAAA;IAcAM,MAAIT,IAAJS,cAAAA,mBAAiBL,KAAjBK;AAAAA,MAAAA;;;AAEFA,UAAYT,IAAAM,YAAAA,CAAQF,KAARE,CAAeG;AAC3BA,eAAiBL,KAAMK;AACvBA;AACAA,eAAiBL,KAAKG,gBAAAA,CAAa,MAAbA,CAAmBE;AACzCA,eAAiBL,KAAKI,MAAAA,CAAAA,CAAMC;AAC5BA;AACAA;AACAA,QAAUT,IAAAU,OAAAA,CAAMC,mBAAN,EAAqB,EAAA,GAAA,CAAGP,KAAKQ,SAAAA,CAAAA,CAAR,CAAA,GAAiBH,eAAtCC,CAAqDD;AAC/DA;AACAA;IAXEA,CAAAA,GAAAA;IAcAI,MAAIb,IAAJa,WAAAA,gBAAcC,GAAD,EAAMC,GAAN,EAzDf,EAyDEF;AAAAA,MAAAA;;MAAAA;;;;MAzDF;;MAyD0B;;AAE1BA,iBAAmBC,GAAID,CAAGE,GAAIF;;AAE9BA;AACAA;;AAEAA;AACAA;AACAA,qBAAuBb,IAAAG,aAAAA,CAAaU,IAAbV,CAAoBU;;AAE3CA;AACAA;;AAEAA;AACAA;AACAA;;AAEAA,eAAiBb,IAAAgB,QAAAA,CAAQH,WAAaC,GAAID,YAAzBG,CAAwCH;AACzDA;AACAA;AACAA,eAAiBb,IAAAgB,QAAAA,CAAQH,IAARG,CAAeH;AAChCA;AACAA;IAvBEA,CAAAA,IAAAA;IA0BAI,MAAIjB,IAAJiB,WAAAA,gBAAAA;AAAAA,MAAAA;;MAAAA;;;MACE,KAAA,QAA8CC,KAA9C,CAAA;QAAAlB,IAAAU,OAAAA,CAAMS,oBAAN,EAAsBF,gBAAtBP;MAAA;MAEAO,OAAQA,MAARG,OAAQH,QAAAA,EAAAA,EAAAA,EAARI,aAtFJ,EAsFIA,EAAAC;;;;QAtFJ;;QAsFqB;QACXC,MAAJC,IAAID,QAAAA,EAAAA,EAAAA,EAAJD,aAAaG,GAAbH,EAAAI;;;;UAAa;UAAKA,OAAA1B,IAAAgB,QAAAA,CAAOS,GAAPT,EAAlBM,CAAAA,GAAAA,qBAAAA,CAAIC;QACJI,WAAW3B,IAAAgB,QAAAA,CAAQM,IAARN;;AAGjBM;AACAA;AACAA,mCAAqCE,IAAKF;AAC1CA;;AAEAA;AACAA;;AAEAA;AACAA,6BAA+BK,QAASL,EAAIE,IAAKF;AACjDA;AACAA;AACAA;AACAA;AACAA,OAnBID,CAAAA,GAAAA,sBAAAA,CAAQJ;IAHVA,CAAAA,GAAAA;IA0BAW;IAAAA;;MAAAA;;;;AAoCEC,MAAAA,4BAAAA,wBAAiBC,IAAD,EAjJpB,EAiJoB,EAjJpB,EAiJID;AAAAA,QAAAA;;QAAAA;;;QAjJJ;;QAAA;;QAAA;QAAA;QAAA;QAAA;QAAA;;QAiJ0B;QAAA,uBAAMC,IAAN;;QAAW;QAAA,qBAAI;QACnC,IAAA,QAAGC,GAAGC,cAAAA,CAAWH,GAAXG,CAAN,CAAA;UACEH,OAAAI,MAAAjC,IAAAiC,iBAAAA,EAAAA,CAAcH,IAAdG,CAAAA,EAAAC,aAAsB9B,KAAtB8B,EAAAC;AAAAA;;;;YAAsB;YACjBC,cAAQD,CAAGJ,GAAGM,OAAAA,CAAC,OAAAC,CAAA,EAAGC,EAAH,QAADF,CAAQF,IAAMnB,YAAMP,SAAAA,CAASL,KAATK;YAErC0B,OAAA/B,MAHF8B,CAAAA,GAAAA,qBAAAA,CAAAD;QADF,OAMA,IAAA,QAAMO,EAAN,CAAA;UACEX,OAAAI,MAAAjC,IAAAiC,iBAAAA,EAAAA,CAAcH,IAAdG,CAAAA,EAAAC,aAzJR,EAyJQA,EAAAC;AAAAA;;YAAAA;;;;YAzJR;;YAyJ8B;YACpB/B,QAAcS,MAANG,YAAMH,QAAAA,EAAN,CAAYuB,cAAZ,EAAqBL,GAArB,CAAA,QAA0B,MAACP,IAAD,CAA1B,CAAMX,EAA4BK,KAADuB,SAAAA,CAAAA,CAA3B5B;YACd,IAAA,QAAGT,KAAH,CAAA;cACE+B,OAAAK,EAAEE,KAAAA,CAAKtC,KAAKI,MAAAA,CAAAA,CAAVkC;YADJ;cA3JVP,OAAA;YA2JU,EAFFD,CAAAA,GAAAA,sBAAAA,CAAAD;QADF;UAQEJ,OAAAI,MAAAjC,IAAAiC,iBAAAA,EAAAA,CAAcH,IAAdG,CAAAA,EAAAC,aAhKR,EAgKQA,EAAAC;AAAAA;;YAAAA;;;;YAhKR;;YAgK8B;YACpBA,OAAMtB,MAANG,YAAMH,QAAAA,EAAN,CAAYuB,cAAZ,EAAqBL,GAArB,CAAA,QAA0B,MAACP,IAAD,CAA1B,CAAMX,EAA4BK,KAADuB,SAAAA,CAAAA,CAA3B5B,EADRqB,CAAAA,GAAAA,sBAAAA,CAAAD;QARF;MAPFJ,CAAAA,IAAAA;;AAqBAc,MAAAA,6BAAAA,yBAtKJ,EAsKIA;AAAAA,QAAAA;;;;QAtKJ;;QAsKsB;QAChBA,OAAKC,MAALC,KAAKD,QAAAA,EAAAA,EAAAA,EAALE,aAAeC,IAAfD,EAAAE;;;;UAAe;UACbA,OAAAf,MAAAjC,IAAAiC,iBAAAA,EAAAA,CAAcc,IAAdd,CAAAA,EAAAe,aAAAA,EAAAC;AAAAA;;YACEA,OAAAjD,IAAAgB,QAAAA,CAAUoB,cAAQa,MAAlBjC,CADFgC,CAAAA,GAAAA,qBAAAA,CAAAf,EADFa,CAAAA,GAAAA,qBAAAA,CAAKF;MADPD,CAAAA,IAAAA;;AAQAO,MAAAA,6BAAAA,yBA9KJ,EA8KIA;AAAAA,QAAAA;;;;QA9KJ;;QA8KsB;QAChBA,OAAKN,MAALC,KAAKD,QAAAA,EAAAA,EAAAA,EAALO,aAAeJ,IAAfI,EAAAC;;;;UAAe;UACbA,OAAAnB,MAAAjC,IAAAiC,iBAAAA,EAAAA,CAAc,EAAA,GAAA,CAAGc,IAAH,CAAA,GAAQK,GAAtBnB,CAAAA,EAAAmB,cAA6BhD,KAA7BgD,EAAAC;AAAAA;;;;YAA6B;YAC3BA,OAAArD,IAAAgB,QAAAA,CAAUoB,cAAQiB,cAAlBrC,EADFoC,CAAAA,GAAAA,qBAAAA,CAAAnB,EADFkB,CAAAA,GAAAA,qBAAAA,CAAKP;MADPM,CAAAA,IAAAA;MAQAtB,OAAA0B,+BAAAA,2BAtLJ,EAsLIA;AAAAA,QAAAA;;;;QAtLJ;;QAsLwB;QAClBX,MAAA3C,IAAA2C,iBAAAA,EAAc,MAACE,KAAD,CAAdF;QACAW,OAAAJ,MAAAlD,IAAAkD,iBAAAA,EAAc,MAACL,KAAD,CAAdK;MAFFI,CAAAA,IAAAA;IAzEF1B,GAAAA,WAAAA;IA+EA2B;IAAAA;;MAAAA;;;;AACEC,MAAAA,0BAAAA,sBAAeC,OAAfD;AAAAA,QAAAA;;;QACE,KAAA,QAAOpC,OAAQd,YAAAA,CAASmD,OAATnD,CAAf,CAAA;UACEc,OAAQV,OAAAA,CAAOC,mBAAf,EAA8B,EAAA,GAAA,CAAG8C,OAAM7C,SAAAA,CAAAA,CAAT,CAAA,GAAkB4C,eAAxC9C;QADV;QAIA8C,OAAApB,CAAAA,iBAAUqB,OAAVrB;MALFoB,CAAAA,GAAAA;;AASAhD,MAAAA,oBAAAA,gBAAAA;AAAAA,QAAAA;AAAAA;;QACEA,OAAA4B;MADF5B,CAAAA,GAAAA;MAIA+C,OAAAG,MAAI1D,IAAJ0D,eAAAA,oBAAkBxD,KAAlBwD;AAAAA;QACEA,OAAAxD,KAAKyD,QAAAA,CAAQC,aAARD;MADPD,CAAAA,GAAAA;IAdFH,GAAAA,WAAAA;IAmBAzD,OAAA4D,MAAI1D,IAAJ0D,eAAAA,oBAAkBG,IAAlBH;AAAAA,MAAAA;;;MACE1D,IAAA8D,MAAAA,CAAKJ,2EAALI;MACAJ,OAAAG,IAAIE,SAAAA,CAASC,aAATD;IAFNL,CAAAA,GAAAA;EA9LF5D,GAAAA,WAAAA;EAoMAmE;EAAAA;;IAAAA;;;;AACE3D,IAAAA,uBAAAA,gCAAYF,KAAZE;AAAAA;MACEA,OAACA,+BAADA;IADFA,CAAAA,GAAAA;;AASAU,IAAAA,sBAAAA,kBAAWF,GAAXE;AAAAA,MAAAA;;MAAAA;MACE,IAAA,QAAMF,GAAIE,QAAV,CAAA;QACEA,OAAA;MADF,OAEA,IAAA,QAAMhB,IAAAM,YAAAA,CAAQQ,GAARR,CAAN,CAAA;QACEU,OAAAkD,IAAAlD,YAAAkD,WAAcxB,KAAAA,CAAK5B,GAAL4B;MADhB,OAEA,IAAA,QAAM5B,GAAGf,UAAAA,CAAOoE,WAAPpE,CAAT,CAAA;QACEiB,OAAGoD,MAAHtD,GAAGsD,OAAAA,EAAAA,EAAAA,EAAHC,cAAYC,CAAZD,EAAAE;;;;UAAY;UACVA,OAAAvE,IAAAgB,QAAAA,CAAOsD,CAAPtD,EADFqD,CAAAA,GAAAA,qBAAAA,CAAGD;MADL,OAIA,IAAA,QAAMtD,GAAGf,UAAAA,CAAOyE,UAAPzE,CAAT,CAAA;QACEiB,OAAAC,MAAAjB,IAAAiB,QAAAA,EAAAA,EAAAA,EAAAoD,cAzON,EAyOMA,EAAAE;;UAAAA;;;;UAzON;;UAyOe;UACPA,OAAAvE,IAAAgB,QAAAA,CAAUH,MAAHC,GAAGD,QAAAA,EAAM,MAACW,IAAD,CAANX,EAAcK,KAADuB,SAAAA,CAAAA,CAAb5B,CAAVG,EADFqD,CAAAA,GAAAA,sBAAAA,CAAApD;MADF;QAKED,OAAAF;MALF;IATFE,CAAAA,GAAAA;IAkBA,aAAM,QAAN,EAAa,OAAb;IAGAiD,OAAAE,qBAAAA,iBAAUlE,MAAD,EApPX,EAoPEkE;AAAAA,MAAAA;;MAAAA;;;;MApPF;;MAoPoB;MAChB,IAAA,QAAGnE,IAAAM,YAAAA,CAAQL,MAARK,CAAH,CAAA;QACE,OAAoBoC,MAAb+B,IAAAzD,YAAAyD,UAAa/B,OAAAA,EAAb,CAAkBzC,MAAlB,CAAA,QAA0B,MAACuB,IAAD,CAA1B,CAAakB,EAAqBxB,KAADuB,SAAAA,CAAAA,CAApBC,CAA2BgC,MAAAA,CAAAA;MADjD;MAGAP,OAAAnE,IAAA2E,QAAAA,CAAO1E,MAAP0E;IAJFR,CAAAA,IAAAA;EA/BFF,GAAAA,WAAAA;EAuCAW;EAAAA;;IAAAA;;AAAAA;;IACE5E,IAAA+D,SAAAA,CAAQc,IAAA7D,aAAA6D,YAARd;;AAEAe,IAAAA,kBAAAA,2BAAOC,KAAPD;AAAAA,MAAAA;;MACEA,OAAG1C,cAAQ0C,KAAO9D,aAAQb,aAAAA,CAAa4E,KAAb5E;IAD5B2E,CAAAA,GAAAA;;AAIAE,IAAAA,wBAAAA,iCAAajC,IAAbiC;AAAAA,MAAAA;;MACEA,OAACA,yBAA2B5C,cAAQ4C,EAAIjC,IAAKiC;IAD/CA,CAAAA,GAAAA;;AAIApC,IAAAA,oBAAAA,gBAvQF,EAuQEA;AAAAA,MAAAA;;MAAAA;;;MAvQF;;MAuQW;MACP,IAAGqC,gBAAH;;;AAEJrC,wBAA0BR,cAAQQ;AAClCA,UAAY,qBAAOA,GAAP,EAAgBR,cAAQQ,KAAxB;AACZA;AACAA;QAEMA,OAAA5C;MAPF;QASE4C,OAAAsC,MAAAlF,IAAAkF,kBAAAA,EAAA,CAAe,MAAf,CAAA,QAAsB,MAAC1D,IAAD,CAAtB,CAAA0D;MATF;IADFtC,CAAAA,IAAAA;;AAcAP,IAAAA,kBAAAA,uBAAOtB,GAAPsB;AAAAA,MAAAA;;;AAEFA,iBAAmBD,cAAQC;;AAE3BA;AACAA;AACAA;AACAA;AACAA,eAAiBrB,aAAQH,MAAAA,CAAMuB,cAAd,EAAuBrB,GAAfF;AACzBwB;AACAA;IAVEA,CAAAA,GAAAA;;AAaA8C,IAAAA,mBAAAA,0BAAQpE,GAAD,EAAMX,KAAb+E;AAAAA,MAAAA;;;MACE1B,UAASzC,aAAQb,aAAAA,CAAaC,KAAbD;MAEjB,IAAA,QAAMsD,OAAO0B,QAAb,CAAA;QACEA,OAAG/C,cAAQ+C,QAAU/E;MADvB;QAGE+E,OAAG/C,cAAQ+C,QAAU1B;MAHvB;IAHF0B,CAAAA,GAAAA;;AAUAC,IAAAA,sBAAAA,+BAAWL,KAAXK;AAAAA,MAAAA;;;;AAEFA,cAAgBpE,aAAQP,SAAAA,CAASsE,KAATtE,CAAgB2E;;AAExCA;AACAA,QAAUhD,cAAQgD;AAClBA;AACAA;MAEIA,OAAApF;IATFoF,CAAAA,GAAAA;;AAYA7E,IAAAA,2BAAAA,oCAAgBwC,IAAD,EAAOsC,WAAtB9E;AAAAA,MAAAA;;;;MAAsB,uCAAc,KAAd;MACpBA,OAAAa,OAAQkE,iBAAAA,CAAiB,aAAjBA,CAA8BC,MAAAA,CAAMvF,IAANuF,CAAW1E,MAAAA,CAAMkC,IAAvD,EAA6DsC,WAAZxE;IADnDN,CAAAA,IAAAA;;AAIAiF,IAAAA,mCAAAA,4CAAwBzC,IAAD,EAAOsC,WAA9BG;AAAAA,MAAAA;;;;MAA8B,uCAAc,KAAd;MAC5BA,OAACA,yBAA2BpD,cAAQoD,EAAIzC,IAAKyC;IAD/CA,CAAAA,IAAAA;;AAIAN,IAAAA,8BAAAA,0BAAmBO,GAAD,EAhUpB,EAgUEP;AAAAA,MAAAA;;MAAAA;;;;MAhUF;;MAgU0B;;AAE1BA;AACAA,eAnUAA,CAAAQ,CAAAA,UAAA,CAmUsBD,GAAGE,OAAAA,CAAOrD,CAAV,EAAwBsD,UAAXH,GAAGI,QAAAA,CAAAA,CAAQD,EAAEE,CAAFF,CAArBD,CAnUzB,EAmUsDnE,IAAIa,OAAAA,CAACC,CAADD,CAnU1D,CAAAqD,GAmUqBP,MAAJnF,IAAImF,OAAAA,EAnUrB,MAAAO,OAAA,CAmUqBP,GAnUrBO,OAAA,CAAAE,UAAAF,OAAA,CAAAR,QAAA,CAAAU,EAAAE,CAAAF,CAAA,CAAAV,CAmU8DA;AAC9DA;AACAA;AACAA,eAAyBrE,MAARG,aAAQH,QAAAA,EAAR,CAAcuB,cAAd,EAAuBqD,GAAvB,CAAA,QAA4B,MAACjE,IAAD,CAA5B,CAAQX,EAA4BK,KAADuB,SAAAA,CAAAA,CAA3B5B,CAAmCqE;AAC5DA;AACAA;IAREA,CAAAA,IAAAA;;AAWAa,IAAAA,oBAAAA,6BAAAA;AAAAA;MACEA,OAAA;IADFA,CAAAA,GAAAA;;AAIAhG,IAAAA,qBAAAA,8BAAUG,KAAVH;AAAAA,MAAAA;;MACEA,OAACA,sBAADA;IADFA,CAAAA,GAAAA;;AAIAiG,IAAAA,4BAAAA,qCAAiB9F,KAAjB8F;AAAAA,MAAAA;;MACEA,OAACA,sBAADA;IADFA,CAAAA,GAAAA;;AAIAC,IAAAA,qBAAAA,0BAAAA;AAAAA,MAAAA;;MACEA,OAACA,YAADA;IADFA,CAAAA,GAAAA;;AAIAvB,IAAAA,oBAAAA,gBAASwB,OAATxB;AAAAA,MAAAA;;MAAAA;;;;MAAS,+BAAU,YAAA,EAAV;MACPA,OAAehC,MAAf+B,IAAAzD,aAAAyD,UAAe/B,OAAAA,EAAAA,CAAKN,cAApB,EAA6B8D,OAAdxD,CAAAA,EAAwBxB,KAADuB,SAAAA,CAAAA,CAAvBC,CAA8BgC,MAAAA,CAAAA;IAD/CA,CAAAA,IAAAA;;AAIA9D,IAAAA,uBAAAA,mBAAAA;AAAAA,MAAAA;;MACEA,OAACA,WAAD,GAAA,CAAaA,OAASwB,cAAQxB,CAA9B,CAAA,GAAiCA;IADnCA,CAAAA,GAAAA;IAIA,aAAM,UAAN,EAAe,UAAf;IACA,aAAM,MAAN,EAAW,UAAX;IACA,aAAM,UAAN,EAAe,OAAf;IACAgE,OAAA,aAAM,SAAN,EAAc,UAAd;EA1GFA,GAAM5D,YAAN4D,EAAuBuB,iBAAvBvB;EA6GAwB;EAAAA;;IAAAA;;AAAAA;;IACEpG,IAAA+D,SAAAA,CAAQc,IAAA7D,YAAA6D,YAARd;IACA/D,IAAA+D,SAAAA,CAAQsC,gBAARtC;;AAEAP,IAAAA,0BAAAA,sBAAeC,OAAD,EAASyC,OAAvB1C;AAAAA,MAAAA;;MAAAA;;;;MAAuB,+BAAU,YAAA,EAAV;MACrB,OAAAxD,IAAA,EAAA,0DAAA,cAAA,EAAA,CAAMyD,OAAN,CAAA,EAAA,IAAA;MAEA6C,WAAU,CAAA,QAAAC,CAAAA,YAAAL,OAAO7D,OAAAA,CAAC,KAADA,CAAPkE,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAAiBL,OAAO7D,OAAAA,CAAC,QAADA,CAAxB,CAAA;MACVmE,aAAUN,OAAO7D,OAAAA,CAAC,OAADA;MACjBoE,WAAU,CAAA,QAAAF,CAAAA,YAAAL,OAAO7D,OAAAA,CAAC,KAADA,CAAPkE,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAAiBL,OAAO7D,OAAAA,CAAC,QAADA,CAAxB,CAAA;MACVqE,cAAU,CAAA,QAAAH,CAAAA,YAAAL,OAAO7D,OAAAA,CAAC,QAADA,CAAPkE,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAAoB,QAApB,CAAA;MACVI,aAAUzF;MAEV,IAAA,QAAMlB,IAAA6F,QAAAA,CAAAA,CAAOrC,QAAb,CAAA;QACEA,OAAAxD,IAAAU,OAAAA,CAAMC,mBAAN,EAAqB6C,0CAArB9C;MADF;QAtXJ8C,OAAA;MAsXI;IATFA,CAAAA,IAAAA;;AAcAZ,IAAAA,oBAAAA,gBAAAA;AAAAA,MAAAA;;MAAAA;;;MACE,KAAA,QAA6B1B,KAA7B,CAAA;QAAA,OAAOlB,IAAA4G,UAAAA,CAAS,MAATA;MAAP;;AAGJhE,+BAAiC5C,IAAA6F,QAAAA,CAAAA,CAAOjD;AACxCA,2BAA6B5C,IAAIqC,OAAAA,CAAEO,CAAFP,CAAMO;AACvCA;AACAA;MAEIA,OAAA5C;IATF4C,CAAAA,GAAAA;;AAYAP,IAAAA,kBAAAA,sBAAOwE,KAAPxE;AAAAA,MAAAA;;;MACEyE,SACS,CAzYb,CAAA,QAyYkBC,YAzYlB,EAwYaR,CAAAA,YAAKM,KAALN,CAxYb,CAAA,IAAA,CAAA,QAyY0BS,YAzY1B,EAAA,SAAA,CAAA,CAAA,CAyYa,GAAA,CACE,CAAA,QAAAR,UAAA,CAAA,GAAA,CAAYpE,cAAQC,CAAGmE,UAAOnE,EAAIwE,KAAMxE,CAAxC,IAAA,CAAgDD,cAAQC,CAAGwE,KAAMxE,CAAjE,CAAA,CADF,IAEA,CAAA,QAAK4E,aAAL,EA3Yb,SA2Ya,CAAA,GAAA,CACE,CAAA,QAAAX,QAAA,CAAA,GAAA,CAAUlE,cAAQC,CAAGiE,QAAKjE,EAAIwE,KAAMxE,CAApC,IAAA,CAA4CD,cAAQC,CAAGwE,KAAMxE,CAA7D,CAAA,CADF,IAAA,CAHA,GAGA,CAAA,CAFA;MAMT,IAAA,QAAGyE,MAAH,CAAA;QACE,IAAA,QAAGH,UAAH,CAAA;UACEtE,OAAAsE,UAAM9F,MAAAA,CAAMiG,MAANjG;QADR;UAGEwB,OAAArC,IAAAgB,QAAAA,CAAO8F,MAAP9F;QAHF;MADF;QA/YJqB,OAAA;MA+YI;IARFA,CAAAA,GAAAA;;AAiBA8C,IAAAA,mBAAAA,yBAAQ0B,KAAD,EAAQzG,KAAf+E;AAAAA,MAAAA;;MACE,IAAA,QAAGsB,QAAH,CAAA;QACEtB,OAAG/C,cAAQ+C,CAAGsB,QAAKtB,EAAI0B,KAAM1B,EAAInE,YAAMP,SAAAA,CAASL,KAATK,CAAgB0E;MADzD;QAGEA,OAAG/C,cAAQ+C,CAAG0B,KAAM1B,IAAMnE,YAAMP,SAAAA,CAASL,KAATK;MAHlC;IADF0E,CAAAA,GAAAA;;AAQA+B,IAAAA,oBAAAA,gBAASC,KAATD;AAAAA,MAAAA;;;;MAAS,2BAAQ,GAAR;MACP,IAAA,QAAGC,KAAH,CAAA;;QACEN,QAAgBjB,UAAP5F,IAAA6F,QAAAA,CAAAA,CAAOD,EAAEE,CAAFF;QAChBkB,SAAS;QAET,OAAA,QAAYM,OAANP,KAAMO,EAAG9E,CAAH8E,CAAZ,CAAA;;UACEN,MAAOO,OAAAA,CAAGrH,IAAIqC,OAAAA,CAACwE,KAADxE,CAAPgF;UACPR,QAAOjB,UAAPiB,KAAOjB,EAAGE,CAAHF;QAFT;QAKAsB,OAAAJ;MATF;QAWEI,OAAAlH,IAAIqC,OAAAA,CAAQuD,UAAP5F,IAAA6F,QAAAA,CAAAA,CAAOD,EAAEE,CAAFF,CAARvD;MAXN;IADF6E,CAAAA,IAAAA;;AAgBArB,IAAAA,sBAAAA,kBAAAA;AAAAA,MAAAA;;MACEA,OAAGzD,cAAQyD,CAAGa,WAAQb;IADxBA,CAAAA,GAAAA;;AAIAjF,IAAAA,uBAAAA,mBAAAA;AAAAA,MAAAA;;MACEA,OAAAZ,IAAA0E,MAAAA,CAAAA,CAAI9D,SAAAA,CAAAA;IADNA,CAAAA,GAAAA;IAIAwF,OAAA,aAAM,QAAN,EAAa,MAAb;EA/EFA,GAAMpF,YAANoF,EAAAA,IAAAA;EAkFAkB;EAAAA;;;IAEEA,OAAA9G,oBAAAA,gBAAAA;AAAAA,MAAAA;;MACEA,OAACA,cAADA;IADFA,CAAAA,GAAAA;EAFF8G,GAAAA,WAAAA,EAAAA,IAAAA;EAOAC;EAAAA;;;IAEEA,OAAA/G,oBAAAA,gBAAAA;AAAAA,MAAAA;;MACEA,OAAAR;IADFQ,CAAAA,GAAAA;EAFF+G,GAAAA,WAAAA,EAAAA,IAAAA;EAOAC;EAAAA;;;IAEEA,OAAAhH,oBAAAA,gBAAAA;AAAAA,MAAAA;;MACEA,OAACA,cAADA;IADFA,CAAAA,GAAAA;EAFFgH,GAAAA,WAAAA,EAAAA,IAAAA;EAOAC;EAAAA;;;IAEEA,OAAAjH,oBAAAA,gBAAAA;AAAAA,MAAAA;;MACEA,OAACA,cAADA;IADFA,CAAAA,GAAAA;EAFFiH,GAAAA,WAAAA,EAAAA,IAAAA;EAOAC;EAAAA;;IAAAA;;AAAAA;IAEEA,OAAAlH,oBAAAA,gBAAAA;AAAAA,MAAAA;;MACEA,OAAAmH;IADFnH,CAAAA,GAAAA;EAFFkH,GAAAA,WAAAA,EAAAA,IAAAA;EAOAE;EAAAA;;IAAAA;;IAGEA,OAAApH,oBAAAA,gBAAAA;AAAAA,MAAAA;;;MACEsG,SAAUtG;MAEVqH,MAAA7H,IAAA6H,aAAAA,EAAAA,EAAAA,EAAAC,cAAc/E,IAAD,EAAO3C,KAApB0H;;;QAAc;;QAAM;QAClBC,OAAGjB,MAAOiB,CAAGhF,IAAKgF,IAAM/G,YAAMb,aAAAA,CAAaC,KAAnB,EAA0BA,KAApBD,EADhC2H,CAAAA,GAAAD;MAIArH,OAAAsG;IAPFtG,CAAAA,GAAAA;EAHFoH,GAAAA,WAAAA,EAAAA,IAAAA;EAcAI;EAAAA;;IAAAA;;IAEEA,OAAAxH,oBAAAA,gBAAAA;AAAAA,MAAAA;;;AAEFA;;AAEAA;AACAA;;AAEAA,oBAAsBQ,YAAMb,aAAAA,CAAcK,GAApB,EAA2BA,GAArBL,CAA2BK;AACvDA;;AAEAA;AACAA;IAXEA,CAAAA,GAAAA;EAFFwH,GAAAA,WAAAA,EAAAA,IAAAA;EAiBAC;EAAAA;;;IAEEA,OAAAzH,oBAAAA,gBAAAA;AAAAA,MAAAA;;MACEA,OAACA,cAADA;IADFA,CAAAA,GAAAA;EAFFyH,GAAAA,WAAAA,EAAAA,IAAAA;EAOAC;EAAAA;;;IAEEA,OAAA1H,oBAAAA,gBAAAA;AAAAA,MAAAA;;MACEA,OAAAR;IADFQ,CAAAA,GAAAA;EAFF0H,GAAAA,WAAAA,EAAAA,IAAAA;EAOAC;EAAAA;;;IAEEA,OAAA3H,oBAAAA,gBAAAA;AAAAA;MACEA,OAACA,IAADA;IADFA,CAAAA,GAAAA;EAFF2H,GAAAA,WAAAA,EAAAA,IAAAA;EAUA,KAAA,QAAOC,UAAIC,oBAAAA,CAAiB,aAAjBA,CAAX,CAAA;IACEC;IAAAA;;MAAAA;;;MACE,aAAM,aAAN,EAAkB,YAAlB;;AAEA9E,MAAAA,0BAAAA,sBAAe+E,QAAf/E;AAAAA,QAAAA;;QAAAA;;;;;AAEJA;AACAA;AACAA;AACAA;AACAA;AACAA;;AAEAA;AACAA;;AAEAA;AACAA;AACAA;AACAA,0BAA4B4E,UAAI1F,KAAAA,CAAMc,KAANd,CAAcc;AAC9CA;AACAA;AACAA;AACAA;AACAA;AACAA,yBAA2B4E,UAAI1F,KAAAA,CAAMc,IAANd,CAAac;AAC5CA;;AAEAA,uBAAyBxD,IAAAgB,QAAAA,CAAQwC,IAARxC,CAAewC;AACxCA;AACAA;AACAA;AACAA,0BAA4BxD,IAAAgB,QAAAA,CAAQwC,KAARxC,CAAgBwC;AAC5CA;;AAEAA;AACAA;;AAEAA;AACAA;;AAEAA,eAAiBgF,MAAAxI,IAAAwI,eAAAA,EAAAA,CAAYD,QAAZC,CAAAA,EAAuBtH,KAADuB,SAAAA,CAAAA,CAAtB+F,CAA8BhF;AAC/CA;MAtCIA,CAAAA,IAAAA;MA2CA8E,OAAA9H,oBAAAA,gBAAAA;AAAAA,QAAAA;;;AAEJA;AACAA;AACAA;AACAA;;AAEAA;AACAA;;AAEAA;AACAA;AACAA;AACAA;AACAA;AACAA;;AAEAA,wBAA0BQ,YAAMb,aAAAA,CAAcK,KAApB,EAA6BA,KAAvBL,CAA+BK;AAC/DA;;AAEAA;AACAA;MArBIA,CAAAA,GAAAA;IA9CF8H,GAAAA,WAAAA,EAAAA,IAAAA;EADF;EAyEAG;EAAAA;;;IAGEA,OAAAC,6BAAAA,yBAAAA;AAAAA,MAAAA;;MACEA,OAACA,YAAc1I,IAAA+C,MAAAA,CAAAA,CAAK2F,IAAM1I;IAD5B0I,CAAAA,GAAAA;EAHFD,GAAAA,WAAAA,EAAAA,IAAAA;EAQAE;EAAAA;;IAAAA;;;;AACEC,IAAAA,4BAAAA,wBAAiBC,QAAD,EAAWC,YAA3BF;AAAAA,MAAAA;;;AAEFA,oBAAsB5I,IAAK4I,iBAAmBE,YAAaF;AAC3DA;AACAA,QAAU5I,IAAAU,OAAAA,CAAMqI,eAASrG,KAAAA,CAAMkG,oBAAD,GAAA,CAAqBE,YAArB,CAAA,GAAkCF,eAAlC,GAAA,CAAiD5I,IAAAY,SAAAA,CAAAA,CAAjD,CAAA,GAAyDgI,GAAvE,EAA2EE,YAAlEpG,CAAfhC,CAA+FkI;AACzGA;AACAA,MAAQ5I,IAAK4I,WAAaC,QAASD;AACnCA;IAPEA,CAAAA,GAAAA;IAUAD,OAAAK,4BAAAA,wBAAAA;AAAAA,MAAAA;;;MACEhJ,IAAA0I,eAAAA,CAAAA;MACAM,OAACA,uBAADA;IAFFA,CAAAA,GAAAA;EAXFL,GAAAA,WAAAA,EAAAA,IAAAA;EAkBA9I,OAAAoJ,CAAAA,WAAKC,CAAAA,gBAAUlJ,IAAAgB,QAAAA,CAAQnB,WAARmB,CAAVkI,CAALD;AAxnBApJ;"}},{"offset":{"line":25657,"column":0},"map":{"version":3,"sourceRoot":"","sources":["./promise.rb"],"sourcesContent":["# {Promise} is used to help structure asynchronous code.\n#\n# It is available in the Opal standard library, and can be required in any Opal\n# application:\n#\n#     require 'promise'\n#\n# ## Basic Usage\n#\n# Promises are created and returned as objects with the assumption that they\n# will eventually be resolved or rejected, but never both. A {Promise} has\n# a {#then} and {#fail} method (or one of their aliases) that can be used to\n# register a block that gets called once resolved or rejected.\n#\n#     promise = Promise.new\n#\n#     promise.then {\n#       puts \"resolved!\"\n#     }.fail {\n#       puts \"rejected!\"\n#     }\n#\n#     # some time later\n#     promise.resolve\n#\n#     # => \"resolved!\"\n#\n# It is important to remember that a promise can only be resolved or rejected\n# once, so the block will only ever be called once (or not at all).\n#\n# ## Resolving Promises\n#\n# To resolve a promise, means to inform the {Promise} that it has succeeded\n# or evaluated to a useful value. {#resolve} can be passed a value which is\n# then passed into the block handler:\n#\n#     def get_json\n#       promise = Promise.new\n#\n#       HTTP.get(\"some_url\") do |req|\n#         promise.resolve req.json\n#       end\n#\n#       promise\n#     end\n#\n#     get_json.then do |json|\n#       puts \"got some JSON from server\"\n#     end\n#\n# ## Rejecting Promises\n#\n# Promises are also designed to handle error cases, or situations where an\n# outcome is not as expected. Taking the previous example, we can also pass\n# a value to a {#reject} call, which passes that object to the registered\n# {#fail} handler:\n#\n#     def get_json\n#       promise = Promise.new\n#\n#       HTTP.get(\"some_url\") do |req|\n#         if req.ok?\n#           promise.resolve req.json\n#         else\n#           promise.reject req\n#         end\n#\n#       promise\n#     end\n#\n#     get_json.then {\n#       # ...\n#     }.fail { |req|\n#       puts \"it went wrong: #{req.message}\"\n#     }\n#\n# ## Chaining Promises\n#\n# Promises become even more useful when chained together. Each {#then} or\n# {#fail} call returns a new {Promise} which can be used to chain more and more\n# handlers together.\n#\n#     promise.then { wait_for_something }.then { do_something_else }\n#\n# Rejections are propagated through the entire chain, so a \"catch all\" handler\n# can be attached at the end of the tail:\n#\n#     promise.then { ... }.then { ... }.fail { ... }\n#\n# ## Composing Promises\n#\n# {Promise.when} can be used to wait for more than one promise to resolve (or\n# reject). Using the previous example, we could request two different json\n# requests and wait for both to finish:\n#\n#     Promise.when(get_json, get_json2).then |first, second|\n#       puts \"got two json payloads: #{first}, #{second}\"\n#     end\n#\nclass Promise\n  def self.value(value)\n    new.resolve(value)\n  end\n\n  def self.error(value)\n    new.reject(value)\n  end\n\n  def self.when(*promises)\n    When.new(promises)\n  end\n\n  attr_reader :error, :prev, :next\n\n  def initialize(action = {})\n    @action = action\n\n    @realized  = false\n    @exception = false\n    @value     = nil\n    @error     = nil\n    @delayed   = false\n\n    @prev = nil\n    @next = []\n  end\n\n  def value\n    if Promise === @value\n      @value.value\n    else\n      @value\n    end\n  end\n\n  def act?\n    @action.key?(:success) || @action.key?(:always)\n  end\n\n  def action\n    @action.keys\n  end\n\n  def exception?\n    @exception\n  end\n\n  def realized?\n    @realized != false\n  end\n\n  def resolved?\n    @realized == :resolve\n  end\n\n  def rejected?\n    @realized == :reject\n  end\n\n  def ^(promise)\n    promise << self\n    self >> promise\n\n    promise\n  end\n\n  def <<(promise)\n    @prev = promise\n\n    self\n  end\n\n  def >>(promise)\n    @next << promise\n\n    if exception?\n      promise.reject(@delayed[0])\n    elsif resolved?\n      promise.resolve(@delayed ? @delayed[0] : value)\n    elsif rejected?\n      if !@action.key?(:failure) || Promise === (@delayed ? @delayed[0] : @error)\n        promise.reject(@delayed ? @delayed[0] : error)\n      elsif promise.action.include?(:always)\n        promise.reject(@delayed ? @delayed[0] : error)\n      end\n    end\n\n    self\n  end\n\n  def resolve(value = nil)\n    if realized?\n      raise ArgumentError, 'the promise has already been realized'\n    end\n\n    if Promise === value\n      return (value << @prev) ^ self\n    end\n\n    begin\n      block = @action[:success] || @action[:always]\n      if block\n        value = block.call(value)\n      end\n\n      resolve!(value)\n    rescue Exception => e\n      exception!(e)\n    end\n\n    self\n  end\n\n  def resolve!(value)\n    @realized = :resolve\n    @value    = value\n\n    if @next.any?\n      @next.each { |p| p.resolve(value) }\n    else\n      @delayed = [value]\n    end\n  end\n\n  def reject(value = nil)\n    if realized?\n      raise ArgumentError, 'the promise has already been realized'\n    end\n\n    if Promise === value\n      return (value << @prev) ^ self\n    end\n\n    begin\n      block = @action[:failure] || @action[:always]\n      if block\n        value = block.call(value)\n      end\n\n      if @action.key?(:always)\n        resolve!(value)\n      else\n        reject!(value)\n      end\n    rescue Exception => e\n      exception!(e)\n    end\n\n    self\n  end\n\n  def reject!(value)\n    @realized = :reject\n    @error    = value\n\n    if @next.any?\n      @next.each { |p| p.reject(value) }\n    else\n      @delayed = [value]\n    end\n  end\n\n  def exception!(error)\n    @exception = true\n\n    reject!(error)\n  end\n\n  def then(&block)\n    self ^ Promise.new(success: block)\n  end\n\n  def then!(&block)\n    there_can_be_only_one!\n    self.then(&block)\n  end\n\n  def fail(&block)\n    self ^ Promise.new(failure: block)\n  end\n\n  def fail!(&block)\n    there_can_be_only_one!\n    fail(&block)\n  end\n\n  def always(&block)\n    self ^ Promise.new(always: block)\n  end\n\n  def always!(&block)\n    there_can_be_only_one!\n    always(&block)\n  end\n\n  def trace(depth = nil, &block)\n    self ^ Trace.new(depth, block)\n  end\n\n  def trace!(*args, &block)\n    there_can_be_only_one!\n    trace(*args, &block)\n  end\n\n  def there_can_be_only_one!\n    if @next.any?\n      raise ArgumentError, 'a promise has already been chained'\n    end\n  end\n\n  def inspect\n    result = \"#<#{self.class}(#{object_id})\"\n\n    if @next.any?\n      result += \" >> #{@next.inspect}\"\n    end\n\n    result += if realized?\n                \": #{(@value || @error).inspect}>\"\n              else\n                '>'\n              end\n\n    result\n  end\n\n  def to_v2\n    v2 = PromiseV2.new\n\n    self.then { |i| v2.resolve(i) }.rescue { |i| v2.reject(i) }\n\n    v2\n  end\n\n  alias catch fail\n  alias catch! fail!\n  alias do then\n  alias do! then!\n  alias ensure always\n  alias ensure! always!\n  alias finally always\n  alias finally! always!\n  alias rescue fail\n  alias rescue! fail!\n  alias to_n to_v2\n  alias to_v1 itself\n\n  class Trace < self\n    def self.it(promise)\n      current = []\n\n      if promise.act? || promise.prev.nil?\n        current.push(promise.value)\n      end\n\n      prev = promise.prev\n      if prev\n        current.concat(it(prev))\n      else\n        current\n      end\n    end\n\n    def initialize(depth, block)\n      @depth = depth\n\n      super success: proc {\n        trace = Trace.it(self).reverse\n        trace.pop\n\n        if depth && depth <= trace.length\n          trace.shift(trace.length - depth)\n        end\n\n        block.call(*trace)\n      }\n    end\n  end\n\n  class When < self\n    def initialize(promises = [])\n      super()\n\n      @wait = []\n\n      promises.each do |promise|\n        wait promise\n      end\n    end\n\n    def each(&block)\n      raise ArgumentError, 'no block given' unless block\n\n      self.then do |values|\n        values.each(&block)\n      end\n    end\n\n    def collect(&block)\n      raise ArgumentError, 'no block given' unless block\n\n      self.then do |values|\n        When.new(values.map(&block))\n      end\n    end\n\n    def inject(*args, &block)\n      self.then do |values|\n        values.reduce(*args, &block)\n      end\n    end\n\n    def wait(promise)\n      unless Promise === promise\n        promise = Promise.value(promise)\n      end\n\n      if promise.act?\n        promise = promise.then\n      end\n\n      @wait << promise\n\n      promise.always do\n        try if @next.any?\n      end\n\n      self\n    end\n\n    def >>(*)\n      super.tap do\n        try\n      end\n    end\n\n    def try\n      if @wait.all?(&:realized?)\n        promise = @wait.find(&:rejected?)\n        if promise\n          reject(promise.error)\n        else\n          resolve(@wait.map(&:value))\n        end\n      end\n    end\n\n    alias map collect\n    alias reduce inject\n    alias and wait\n  end\nend\n\nPromiseV1 = Promise\n"],"names":["<top (required)>","<class:Promise>","value","self","new","resolve","error","reject","when","When","promises","attr_reader","initialize","action","@action","@realized","@exception","@value","@error","@delayed","@prev","@next","Promise","act?","$ret_or_1","key?","keys","exception?","realized?","!=","resolved?","==","rejected?","^","promise","<<",">>","[]","0","include?","raise","ArgumentError","block","call","resolve!","Exception","e","exception!","any?","each","block in resolve!","p","block (2 levels) in resolve!","reject!","block in reject!","block (2 levels) in reject!","then","then!","there_can_be_only_one!","to_proc","fail","fail!","always","always!","trace","depth","Trace","trace!","args","inspect","result","class","object_id","+","to_v2","v2","PromiseV2","rescue","block in to_v2","i","block (2 levels) in to_v2","<class:Trace>","it","current","prev","nil?","push","concat","@depth","proc","block in initialize","block (2 levels) in initialize","reverse","pop","<=","length","shift","-","<class:When>","@wait","wait","block in each","values","block (2 levels) in each","collect","block in collect","block (2 levels) in collect","map","inject","block in inject","block (2 levels) in inject","reduce","block in wait","block (2 levels) in wait","try","tap","block in >>","block (2 levels) in >>","all?","find"],"mappings":"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"}},{"offset":{"line":26202,"column":0},"map":{"version":3,"sourceRoot":"","sources":["paggio/utils.rb"],"sourcesContent":["#--\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#                    Version 2, December 2004\n#\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n#\n#  0. You just DO WHAT THE FUCK YOU WANT TO.\n#++\n\nclass Paggio\n\nmodule Utils\n  def self.heredoc(string)\n    indent = string.scan(/^[ \\t]*(?=\\S)/).min.size rescue 0\n\n    string.gsub(/^[ \\t]{#{indent}}/, '')\n  end\n\n  def self.deep_merge(a, b)\n    merger = proc {|key, v1, v2|\n      if Hash === v1 && Hash === v2\n        v1.merge(v2, &merger)\n      else\n        v2\n      end\n    }\n\n    a.merge(b, &merger)\n  end\n\n  def self.deep_merge!(a, b)\n    merger = proc {|key, v1, v2|\n      if Hash === v1 && Hash === v2\n        v1.merge!(v2, &merger)\n        v1\n      else\n        v2\n      end\n    }\n\n    a.merge!(b, &merger)\n  end\nend\n\nend\n"],"names":["<top (required)>","<class:Paggio>","<module:Utils>","heredoc","self","string","indent","scan","min","size","StandardError","0","gsub","deep_merge","a","b","merger","proc","block in deep_merge","key","v1","v2","Hash","block (2 levels) in deep_merge","merge","to_proc","deep_merge!","block in deep_merge!","merge!","block (2 levels) in deep_merge!"],"mappings":"AAAAA,+CAAAA;EAAAA;;EAAAA;EAUAA,OAAAC;EAAAA;;IAAAA;;IAEAA,OAAAC;IAAAA;;MAAAA;;;MACEC,MAAIC,IAAJD,cAAAA,mBAAiBE,MAAjBF;AAAAA,QAAAA;;;QACEG,SAAS,cAAA;UAAAH,OAAAE,MAAME,MAAAA,CAAM,eAANA,CAAsBC,KAAAA,CAAAA,CAAIC,MAAAA,CAAAA;QAAhC;UAAsC,sBAAA,CAAAC,mBAAA,CAAA;YAAA;cAAOP,OAAAQ;YAAP;UAAA,CAAtC;QAAA,CAAA;QAETR,OAAAE,MAAMO,MAAAA,CAAM,SAACT,UAAD,EAAUG,MAAV,EAAiBH,GAAjB,CAAA,CAAZ,EAAiCA,EAA3BS;MAHRT,CAAAA,GAAAA;MAMAU,MAAIT,IAAJS,iBAAAA,sBAAoBC,CAAD,EAAIC,CAAvBF;AAAAA,QAAAA;;;QACEG,SAASC,MAAAb,IAAAa,QAAAA,EAAAA,EAAAA,EAAAC,aAAOC,GAAD,EAAMC,EAAN,EAAUC,EAAhBH;;;UAAO;;UAAK;;UAAI;UACvB,IAAG,CAAA,QAAAI,UAAA,EAASF,EAAT,CAAA,IAAA,CAAA,QAAeE,UAAf,EAAwBD,EAAxB,CAAA,CAAA,CAAH;YACEE,OAAEC,MAAFJ,EAAEI,SAAAA,EAAAA,CAAOH,EAAPG,CAAAA,EAAYR,MAADS,SAAAA,CAAAA,CAAXD;UADJ;YAGED,OAAAF;UAHF,EADOH,CAAAA,GAAAD;QAQTJ,OAACW,MAADV,CAACU,SAAAA,EAAAA,CAAOT,CAAPS,CAAAA,EAAWR,MAADS,SAAAA,CAAAA,CAAVD;MATHX,CAAAA,GAAAA;MAYAX,OAAAwB,MAAItB,IAAJsB,kBAAAA,kCAAqBZ,CAAD,EAAIC,CAAxBW;AAAAA,QAAAA;;;QACEV,SAASC,MAAAb,IAAAa,QAAAA,EAAAA,EAAAA,EAAAU,aAAOR,GAAD,EAAMC,EAAN,EAAUC,EAAhBM;;;UAAO;;UAAK;;UAAI;UACvB,IAAG,CAAA,QAAAL,UAAA,EAASF,EAAT,CAAA,IAAA,CAAA,QAAeE,UAAf,EAAwBD,EAAxB,CAAA,CAAA,CAAH;;YACIO,MAAFR,EAAEQ,UAAAA,EAAAA,CAAQP,EAARO,CAAAA,EAAaZ,MAADS,SAAAA,CAAAA,CAAZG;YACFC,OAAAT;UAFF;YAIES,OAAAR;UAJF,EADOM,CAAAA,GAAAV;QASTS,OAACE,MAADd,CAACc,UAAAA,EAAAA,CAAQb,CAARa,CAAAA,EAAYZ,MAADS,SAAAA,CAAAA,CAAXG;MAVHF,CAAAA,GAAAA;IAnBFxB,GAAAA,WAAAA;EAFAD,GAAAA,WAAAA,EAAAA,IAAAA;AAVAD;"}},{"offset":{"line":26276,"column":0},"map":{"version":3,"sourceRoot":"","sources":["paggio/html/helpers.rb"],"sourcesContent":["#--\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#                    Version 2, December 2004\n#\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n#\n#  0. You just DO WHAT THE FUCK YOU WANT TO.\n#++\n\nclass Paggio; class HTML < BasicObject\n\nclass Element < BasicObject\n  def self.defhelper(name, &block)\n    define_method name do |*args, &body|\n      instance_exec(*args, &block)\n\n      self.do(&body) if body\n      self\n    end\n  end\n\n  def self.defhelper!(name, attribute = name)\n    defhelper \"#{name}!\" do\n      @attributes[attribute] = true\n    end\n  end\nend\n\nend; end\n"],"names":["<top (required)>","<class:Paggio>","<class:HTML>","<class:Element>","defhelper","self","name","define_method","block in defhelper","block (2 levels) in defhelper","instance_exec","args","block","to_proc","body","do","defhelper!","attribute","block in defhelper!","block (2 levels) in defhelper!","$writer","[]=","@attributes","-","1","BasicObject"],"mappings":"AAAAA,sDAAAA;EAAAA;;EAAAA;EAUAA,OAAAC;EAAAA;;IAAAA;;IAAcA,OAAAC;IAAAA;;MAAAA;;MAEdA,OAAAC;MAAAA;;;;QACEC,MAAIC,IAAJD,gBAAAA,qBAAmBE,IAAnBF;AAAAA,UAAAA;;UAAAA;;;UACEA,OAAAG,MAAAF,IAAAE,iBAAAA,EAAAA,CAAcD,IAAdC,CAAAA,EAAAC,aAdJ,EAcIA,EAAAC;;YAAAA;;;;YAdJ;;YAc2B;YACrBC,MAAAL,IAAAK,iBAAAA,EAAc,MAACC,IAAD,CAAdD,EAAsBE,KAADC,SAAAA,CAAAA,CAArBH;YAEA,IAAA,QAAkBI,IAAlB,CAAA;cAAIC,MAAJV,IAAIU,MAAAA,EAAAA,EAAAA,EAAKD,IAADD,SAAAA,CAAAA,CAAJE;YAAJ;YACAN,OAAAJ,KAJFG,CAAAA,GAAAA,sBAAAA,CAAAD;QADFH,CAAAA,GAAAA;QASAD,OAAAa,MAAIX,IAAJW,iBAAAA,mCAAoBV,IAAD,EAAOW,SAA1BD;AAAAA,UAAAA;;;;UAA0B,mCAAYV,IAAZ;UACxBU,OAAAZ,MAAAC,IAAAD,aAAAA,EAAAA,CAAU,EAAA,GAAA,CAAGE,IAAH,CAAA,GAAQU,GAAlBZ,CAAAA,EAAAc,aAAAA,EAAAC;AAAAA;;;YAvBJC,UAAA,CAwBkBH,SAxBlB,EAwB+B,IAxB/B;YAwBiBI,MAAXC,eAAWD,OAAAA,EAxBjB,MAAAD,OAAA,CAwBiBC;YAxBjBF,OAAAC,OAAA,CAAAG,UAAAH,OAAA,CAAAD,QAAA,CAAAI,EAAAC,CAAAD,CAAA,EAuBIL,CAAAA,GAAAA,qBAAAA,CAAAd;QADFY,CAAAA,IAAAA;MAVFb,GAAAA,WAAAA,EAAgBsB,iBAAhBtB;IAFcD,GAAAA,WAAAA,EAAauB,iBAAbvB;EAAdD,GAAAA,WAAAA,EAAAA,IAAAA;AAVAD;"}},{"offset":{"line":26335,"column":0},"map":{"version":3,"sourceRoot":"","sources":["paggio/html/element/a.rb"],"sourcesContent":["#--\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#                    Version 2, December 2004\n#\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n#\n#  0. You just DO WHAT THE FUCK YOU WANT TO.\n#++\n\nclass Paggio; class HTML < BasicObject; class Element < BasicObject\n\nclass A < self\n  { href: :href,\n    url:  :href,\n\n    rel:      :rel,\n    relative: :rel,\n\n    target: :target,\n\n    type: :type,\n\n    lang:     :hreflang,\n    language: :hreflang,\n\n    media: :media,\n  }.each {|name, attribute|\n    defhelper name do |value|\n      @attributes[name] = value.to_s\n    end\n  }\n\n  defhelper! :download\n  defhelper! :ping\n\n  defhelper :text do |string|\n    self << string\n  end\nend\n\nend; end; end\n"],"names":["<top (required)>","<class:Paggio>","<class:HTML>","<class:Element>","<class:A>","each","block in <class:A>","name","attribute","block (2 levels) in <class:A>","defhelper","self","value","block (3 levels) in <class:A>","$writer","to_s","[]=","@attributes","-","1","defhelper!","string","<<","BasicObject"],"mappings":"AAAAA,wDAAAA;EAAAA;;EAAAA;EAUAA,OAAAC;EAAAA;;IAAAA;;IAAcA,OAAAC;IAAAA;;MAAAA;;MAA0BA,OAAAC;MAAAA;;QAAAA;;QAExCA,OAAAC;QAAAA;;;;UAeGC,MAdD,2FAAA,QAAQ,MAAR,EAAA,OACQ,MADR,EAAA,OAGY,KAHZ,EAAA,YAIY,KAJZ,EAAA,UAMU,QANV,EAAA,QAQQ,MARR,EAAA,QAUY,UAVZ,EAAA,YAWY,UAXZ,EAAA,SAaS,OAbT,EAcCA,QAAAA,EAAAA,EAAAA,EAdDC,cAcSC,IAAD,EAAOC,SAdfF,EAAAG;;;;YAcS;;YAAM;YACbA,OAAAC,MAAAC,IAAAD,aAAAA,EAAAA,CAAUH,IAAVG,CAAAA,EAAAD,aAAmBG,KAAnBH,EAAAI;AAAAA;;;;cAAmB;cA5BvBC,UAAA,CA6BkBP,IA7BlB,EA6B0BK,KAAKG,MAAAA,CAAAA,CA7B/B;cA6BiBC,MAAXC,eAAWD,OAAAA,EA7BjB,MAAAF,OAAA,CA6BiBE;cA7BjBH,OAAAC,OAAA,CAAAI,UAAAJ,OAAA,CAAAD,QAAA,CAAAK,EAAAC,CAAAD,CAAA,EA4BIT,CAAAA,GAAAA,qBAAAA,CAAAC,EAfFJ,CAAAA,GAAAA,qBAAAA,CAcCD;UAMDM,IAAAS,eAAAA,CAAW,UAAXA;UACAT,IAAAS,eAAAA,CAAW,MAAXA;UAEAhB,OAAAM,MAAAC,IAAAD,aAAAA,EAAAA,CAAU,MAAVA,CAAAA,EAAAJ,cAAoBe,MAApBf,EAAAG;;;;YAAoB;YAClBA,OAAAE,IAAKW,OAAAA,CAAGD,MAAHC,EADPhB,CAAAA,GAAAA,qBAAAA,CAAAI;QAxBFN,GAAAA,WAAAA,EAAUO,IAAVP;MAFwCD,GAAAA,WAAAA,EAAgBoB,iBAAhBpB;IAA1BD,GAAAA,WAAAA,EAAaqB,iBAAbrB;EAAdD,GAAAA,WAAAA,EAAAA,IAAAA;AAVAD;"}},{"offset":{"line":26389,"column":0},"map":{"version":3,"sourceRoot":"","sources":["paggio/html/element/base.rb"],"sourcesContent":["#--\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#                    Version 2, December 2004\n#\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n#\n#  0. You just DO WHAT THE FUCK YOU WANT TO.\n#++\n\nclass Paggio; class HTML < BasicObject; class Element < BasicObject\n\nclass Base < self\n  { href: :href,\n    url:  :href,\n\n    target: :target,\n  }.each {|name, attribute|\n    defhelper name do |value|\n      @attributes[name] = value.to_s\n    end\n  }\nend\n\nend; end; end\n"],"names":["<top (required)>","<class:Paggio>","<class:HTML>","<class:Element>","<class:Base>","each","block in <class:Base>","name","attribute","block (2 levels) in <class:Base>","defhelper","self","value","block (3 levels) in <class:Base>","$writer","to_s","[]=","@attributes","-","1","BasicObject"],"mappings":"AAAAA,2DAAAA;EAAAA;;EAAAA;EAUAA,OAAAC;EAAAA;;IAAAA;;IAAcA,OAAAC;IAAAA;;MAAAA;;MAA0BA,OAAAC;MAAAA;;QAAAA;;QAExCA,OAAAC;QAAAA;;;UACEA,OAICC,MAJD,mCAAA,QAAQ,MAAR,EAAA,OACQ,MADR,EAAA,UAGU,QAHV,EAICA,QAAAA,EAAAA,EAAAA,EAJDC,iBAISC,IAAD,EAAOC,SAJfF,EAAAG;;;;YAIS;;YAAM;YACbA,OAAAC,MAAAC,IAAAD,aAAAA,EAAAA,CAAUH,IAAVG,CAAAA,EAAAD,aAAmBG,KAAnBH,EAAAI;AAAAA;;;;cAAmB;cAlBvBC,UAAA,CAmBkBP,IAnBlB,EAmB0BK,KAAKG,MAAAA,CAAAA,CAnB/B;cAmBiBC,MAAXC,eAAWD,OAAAA,EAnBjB,MAAAF,OAAA,CAmBiBE;cAnBjBH,OAAAC,OAAA,CAAAI,UAAAJ,OAAA,CAAAD,QAAA,CAAAK,EAAAC,CAAAD,CAAA,EAkBIT,CAAAA,GAAAA,qBAAAA,CAAAC,EALFJ,CAAAA,GAAAA,qBAAAA,CAICD;QALHD,GAAAA,WAAAA,EAAaO,IAAbP;MAFwCD,GAAAA,WAAAA,EAAgBiB,iBAAhBjB;IAA1BD,GAAAA,WAAAA,EAAakB,iBAAblB;EAAdD,GAAAA,WAAAA,EAAAA,IAAAA;AAVAD;"}},{"offset":{"line":26434,"column":0},"map":{"version":3,"sourceRoot":"","sources":["paggio/html/element/blockquote.rb"],"sourcesContent":["#--\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#                    Version 2, December 2004\n#\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n#\n#  0. You just DO WHAT THE FUCK YOU WANT TO.\n#++\n\nclass Paggio; class HTML < BasicObject; class Element < BasicObject\n\nclass Blockquote < self\n  defhelper :cite do |value|\n    @attributes[:cite] = value.to_s\n  end\nend\n\nend; end; end\n"],"names":["<top (required)>","<class:Paggio>","<class:HTML>","<class:Element>","<class:Blockquote>","defhelper","self","block in <class:Blockquote>","value","block (2 levels) in <class:Blockquote>","$writer","to_s","[]=","@attributes","-","1","BasicObject"],"mappings":"AAAAA,iEAAAA;EAAAA;;EAAAA;EAUAA,OAAAC;EAAAA;;IAAAA;;IAAcA,OAAAC;IAAAA;;MAAAA;;MAA0BA,OAAAC;MAAAA;;QAAAA;;QAExCA,OAAAC;QAAAA;;;UACEA,OAAAC,MAAAC,IAAAD,aAAAA,EAAAA,CAAU,MAAVA,CAAAA,EAAAE,uBAAoBC,KAApBD,EAAAE;AAAAA;;;;YAAoB;YAbtBC,UAAA,CAcgB,MAdhB,EAcyBF,KAAKG,MAAAA,CAAAA,CAd9B;YAceC,MAAXC,eAAWD,OAAAA,EAdf,MAAAF,OAAA,CAceE;YAdfH,OAAAC,OAAA,CAAAI,UAAAJ,OAAA,CAAAD,QAAA,CAAAK,EAAAC,CAAAD,CAAA,EAaEP,CAAAA,GAAAA,qBAAAA,CAAAF;QADFD,GAAAA,WAAAA,EAAmBE,IAAnBF;MAFwCD,GAAAA,WAAAA,EAAgBa,iBAAhBb;IAA1BD,GAAAA,WAAAA,EAAac,iBAAbd;EAAdD,GAAAA,WAAAA,EAAAA,IAAAA;AAVAD;"}},{"offset":{"line":26472,"column":0},"map":{"version":3,"sourceRoot":"","sources":["paggio/html/element/button.rb"],"sourcesContent":["#--\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#                    Version 2, December 2004\n#\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n#\n#  0. You just DO WHAT THE FUCK YOU WANT TO.\n#++\n\nclass Paggio; class HTML < BasicObject; class Element < BasicObject\n\nclass Button < self\n  { form:  :form,\n    name:  :name,\n    type:  :type,\n    value: :value,\n\n    action:   :formaction,\n    encoding: :formenctype,\n    method:   :formmethod,\n    target:   :formtarget,\n  }.each {|name, attributes|\n    defhelper name do |value|\n      @attributes[name] = value.to_s\n    end\n  }\n\n  defhelper! :autofocus\n  defhelper! :disabled\nend\n\nend; end; end\n"],"names":["<top (required)>","<class:Paggio>","<class:HTML>","<class:Element>","<class:Button>","each","block in <class:Button>","name","attributes","block (2 levels) in <class:Button>","defhelper","self","value","block (3 levels) in <class:Button>","$writer","to_s","[]=","@attributes","-","1","defhelper!","BasicObject"],"mappings":"AAAAA,6DAAAA;EAAAA;;EAAAA;EAUAA,OAAAC;EAAAA;;IAAAA;;IAAcA,OAAAC;IAAAA;;MAAAA;;MAA0BA,OAAAC;MAAAA;;QAAAA;;QAExCA,OAAAC;QAAAA;;;;UAUGC,MATD,qFAAA,QAAS,MAAT,EAAA,QACS,MADT,EAAA,QAES,MAFT,EAAA,SAGS,OAHT,EAAA,UAKY,YALZ,EAAA,YAMY,aANZ,EAAA,UAOY,YAPZ,EAAA,UAQY,YARZ,EASCA,QAAAA,EAAAA,EAAAA,EATDC,mBASSC,IAAD,EAAOC,UATfF,EAAAG;;;;YASS;;YAAM;YACbA,OAAAC,MAAAC,IAAAD,aAAAA,EAAAA,CAAUH,IAAVG,CAAAA,EAAAD,aAAmBG,KAAnBH,EAAAI;AAAAA;;;;cAAmB;cAvBvBC,UAAA,CAwBkBP,IAxBlB,EAwB0BK,KAAKG,MAAAA,CAAAA,CAxB/B;cAwBiBC,MAAXC,eAAWD,OAAAA,EAxBjB,MAAAF,OAAA,CAwBiBE;cAxBjBH,OAAAC,OAAA,CAAAI,UAAAJ,OAAA,CAAAD,QAAA,CAAAK,EAAAC,CAAAD,CAAA,EAuBIT,CAAAA,GAAAA,qBAAAA,CAAAC,EAVFJ,CAAAA,GAAAA,qBAAAA,CASCD;UAMDM,IAAAS,eAAAA,CAAW,WAAXA;UACAhB,OAAAO,IAAAS,eAAAA,CAAW,UAAXA;QAjBFhB,GAAAA,WAAAA,EAAeO,IAAfP;MAFwCD,GAAAA,WAAAA,EAAgBkB,iBAAhBlB;IAA1BD,GAAAA,WAAAA,EAAamB,iBAAbnB;EAAdD,GAAAA,WAAAA,EAAAA,IAAAA;AAVAD;"}},{"offset":{"line":26520,"column":0},"map":{"version":3,"sourceRoot":"","sources":["paggio/html/element/canvas.rb"],"sourcesContent":["#--\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#                    Version 2, December 2004\n#\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n#\n#  0. You just DO WHAT THE FUCK YOU WANT TO.\n#++\n\nclass Paggio; class HTML < BasicObject; class Element < BasicObject\n\nclass Canvas < self\n  { width:  :width,\n    height: :height\n  }.each {|name, attribute|\n    defhelper name do |value|\n      @attributes[name] = value.to_s\n    end\n  }\nend\n\nend; end; end\n"],"names":["<top (required)>","<class:Paggio>","<class:HTML>","<class:Element>","<class:Canvas>","each","block in <class:Canvas>","name","attribute","block (2 levels) in <class:Canvas>","defhelper","self","value","block (3 levels) in <class:Canvas>","$writer","to_s","[]=","@attributes","-","1","BasicObject"],"mappings":"AAAAA,6DAAAA;EAAAA;;EAAAA;EAUAA,OAAAC;EAAAA;;IAAAA;;IAAcA,OAAAC;IAAAA;;MAAAA;;MAA0BA,OAAAC;MAAAA;;QAAAA;;QAExCA,OAAAC;QAAAA;;;UACEA,OAECC,MAFD,6BAAA,SAAU,OAAV,EAAA,UACU,QADV,EAECA,QAAAA,EAAAA,EAAAA,EAFDC,mBAESC,IAAD,EAAOC,SAFfF,EAAAG;;;;YAES;;YAAM;YACbA,OAAAC,MAAAC,IAAAD,aAAAA,EAAAA,CAAUH,IAAVG,CAAAA,EAAAD,aAAmBG,KAAnBH,EAAAI;AAAAA;;;;cAAmB;cAhBvBC,UAAA,CAiBkBP,IAjBlB,EAiB0BK,KAAKG,MAAAA,CAAAA,CAjB/B;cAiBiBC,MAAXC,eAAWD,OAAAA,EAjBjB,MAAAF,OAAA,CAiBiBE;cAjBjBH,OAAAC,OAAA,CAAAI,UAAAJ,OAAA,CAAAD,QAAA,CAAAK,EAAAC,CAAAD,CAAA,EAgBIT,CAAAA,GAAAA,qBAAAA,CAAAC,EAHFJ,CAAAA,GAAAA,qBAAAA,CAECD;QAHHD,GAAAA,WAAAA,EAAeO,IAAfP;MAFwCD,GAAAA,WAAAA,EAAgBiB,iBAAhBjB;IAA1BD,GAAAA,WAAAA,EAAakB,iBAAblB;EAAdD,GAAAA,WAAAA,EAAAA,IAAAA;AAVAD;"}},{"offset":{"line":26565,"column":0},"map":{"version":3,"sourceRoot":"","sources":["paggio/html/element/embed.rb"],"sourcesContent":["#--\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#                    Version 2, December 2004\n#\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n#\n#  0. You just DO WHAT THE FUCK YOU WANT TO.\n#++\n\nclass Paggio; class HTML < BasicObject; class Element < BasicObject\n\nclass Embed < self\n  { type:   :type,\n    height: :height,\n    width:  :width\n  }.each {|name, attribute|\n    defhelper name do |value|\n      @attributes[name] = value\n    end\n  }\nend\n\nend; end; end\n"],"names":["<top (required)>","<class:Paggio>","<class:HTML>","<class:Element>","<class:Embed>","each","block in <class:Embed>","name","attribute","block (2 levels) in <class:Embed>","defhelper","self","value","block (3 levels) in <class:Embed>","$writer","[]=","@attributes","-","1","BasicObject"],"mappings":"AAAAA,4DAAAA;EAAAA;;EAAAA;EAUAA,OAAAC;EAAAA;;IAAAA;;IAAcA,OAAAC;IAAAA;;MAAAA;;MAA0BA,OAAAC;MAAAA;;QAAAA;;QAExCA,OAAAC;QAAAA;;;UACEA,OAGCC,MAHD,qCAAA,QAAU,MAAV,EAAA,UACU,QADV,EAAA,SAEU,OAFV,EAGCA,QAAAA,EAAAA,EAAAA,EAHDC,kBAGSC,IAAD,EAAOC,SAHfF,EAAAG;;;;YAGS;;YAAM;YACbA,OAAAC,MAAAC,IAAAD,aAAAA,EAAAA,CAAUH,IAAVG,CAAAA,EAAAD,aAAmBG,KAAnBH,EAAAI;AAAAA;;;;cAAmB;cAjBvBC,UAAA,CAkBkBP,IAlBlB,EAkB0BK,KAlB1B;cAkBiBG,MAAXC,eAAWD,OAAAA,EAlBjB,MAAAD,OAAA,CAkBiBC;cAlBjBF,OAAAC,OAAA,CAAAG,UAAAH,OAAA,CAAAD,QAAA,CAAAI,EAAAC,CAAAD,CAAA,EAiBIR,CAAAA,GAAAA,qBAAAA,CAAAC,EAJFJ,CAAAA,GAAAA,qBAAAA,CAGCD;QAJHD,GAAAA,WAAAA,EAAcO,IAAdP;MAFwCD,GAAAA,WAAAA,EAAgBgB,iBAAhBhB;IAA1BD,GAAAA,WAAAA,EAAaiB,iBAAbjB;EAAdD,GAAAA,WAAAA,EAAAA,IAAAA;AAVAD;"}},{"offset":{"line":26610,"column":0},"map":{"version":3,"sourceRoot":"","sources":["paggio/html/element/img.rb"],"sourcesContent":["#--\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#                    Version 2, December 2004\n#\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n#\n#  0. You just DO WHAT THE FUCK YOU WANT TO.\n#++\n\nclass Paggio; class HTML < BasicObject; class Element < BasicObject\n\nclass Img < self\n  { src: :src,\n    url: :src,\n\n    alt:         :alt,\n    description: :alt,\n\n    height: :height,\n    width:  :width,\n\n    map: :usemap,\n  }.each {|name, attribute|\n    defhelper name do |value|\n      @attributes[name] = value.to_s\n    end\n  }\n\n  defhelper :map! do\n    @attributes[:ismap] = true\n  end\nend\n\nend; end; end\n"],"names":["<top (required)>","<class:Paggio>","<class:HTML>","<class:Element>","<class:Img>","each","block in <class:Img>","name","attribute","block (2 levels) in <class:Img>","defhelper","self","value","block (3 levels) in <class:Img>","$writer","to_s","[]=","@attributes","-","1","BasicObject"],"mappings":"AAAAA,0DAAAA;EAAAA;;EAAAA;EAUAA,OAAAC;EAAAA;;IAAAA;;IAAcA,OAAAC;IAAAA;;MAAAA;;MAA0BA,OAAAC;MAAAA;;QAAAA;;QAExCA,OAAAC;QAAAA;;;;UAWGC,MAVD,wEAAA,OAAO,KAAP,EAAA,OACO,KADP,EAAA,OAGe,KAHf,EAAA,eAIe,KAJf,EAAA,UAMU,QANV,EAAA,SAOU,OAPV,EAAA,OASO,QATP,EAUCA,QAAAA,EAAAA,EAAAA,EAVDC,gBAUSC,IAAD,EAAOC,SAVfF,EAAAG;;;;YAUS;;YAAM;YACbA,OAAAC,MAAAC,IAAAD,aAAAA,EAAAA,CAAUH,IAAVG,CAAAA,EAAAD,aAAmBG,KAAnBH,EAAAI;AAAAA;;;;cAAmB;cAxBvBC,UAAA,CAyBkBP,IAzBlB,EAyB0BK,KAAKG,MAAAA,CAAAA,CAzB/B;cAyBiBC,MAAXC,eAAWD,OAAAA,EAzBjB,MAAAF,OAAA,CAyBiBE;cAzBjBH,OAAAC,OAAA,CAAAI,UAAAJ,OAAA,CAAAD,QAAA,CAAAK,EAAAC,CAAAD,CAAA,EAwBIT,CAAAA,GAAAA,qBAAAA,CAAAC,EAXFJ,CAAAA,GAAAA,qBAAAA,CAUCD;UAMDD,OAAAM,MAAAC,IAAAD,aAAAA,EAAAA,CAAU,MAAVA,CAAAA,EAAAJ,gBAAAA,EAAAG;AAAAA;;;YA7BFK,UAAA,CA8BgB,OA9BhB,EA8B0B,IA9B1B;YA8BeE,MAAXC,eAAWD,OAAAA,EA9Bf,MAAAF,OAAA,CA8BeE;YA9BfP,OAAAK,OAAA,CAAAI,UAAAJ,OAAA,CAAAL,QAAA,CAAAS,EAAAC,CAAAD,CAAA,EA6BEZ,CAAAA,GAAAA,qBAAAA,CAAAI;QAjBFN,GAAAA,WAAAA,EAAYO,IAAZP;MAFwCD,GAAAA,WAAAA,EAAgBiB,iBAAhBjB;IAA1BD,GAAAA,WAAAA,EAAakB,iBAAblB;EAAdD,GAAAA,WAAAA,EAAAA,IAAAA;AAVAD;"}},{"offset":{"line":26663,"column":0},"map":{"version":3,"sourceRoot":"","sources":["paggio/html/element/input.rb"],"sourcesContent":["#--\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#                    Version 2, December 2004\n#\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n#\n#  0. You just DO WHAT THE FUCK YOU WANT TO.\n#++\n\nclass Paggio; class HTML < BasicObject; class Element < BasicObject\n\nclass Input < self\n  { type:         :type,\n    name:         :name,\n    value:        :value,\n    size:         :size,\n    place_holder: :placeholder,\n    read_only:    :readonly,\n    required:     :required,\n    limit:        :maxlength\n  }.each {|name, attribute|\n    defhelper name do |value|\n      @attributes[name] = value\n    end\n  }\nend\n\nend; end; end\n"],"names":["<top (required)>","<class:Paggio>","<class:HTML>","<class:Element>","<class:Input>","each","block in <class:Input>","name","attribute","block (2 levels) in <class:Input>","defhelper","self","value","block (3 levels) in <class:Input>","$writer","[]=","@attributes","-","1","BasicObject"],"mappings":"AAAAA,4DAAAA;EAAAA;;EAAAA;EAUAA,OAAAC;EAAAA;;IAAAA;;IAAcA,OAAAC;IAAAA;;MAAAA;;MAA0BA,OAAAC;MAAAA;;QAAAA;;QAExCA,OAAAC;QAAAA;;;UACEA,OAQCC,MARD,6FAAA,QAAgB,MAAhB,EAAA,QACgB,MADhB,EAAA,SAEgB,OAFhB,EAAA,QAGgB,MAHhB,EAAA,gBAIgB,aAJhB,EAAA,aAKgB,UALhB,EAAA,YAMgB,UANhB,EAAA,SAOgB,WAPhB,EAQCA,QAAAA,EAAAA,EAAAA,EARDC,kBAQSC,IAAD,EAAOC,SARfF,EAAAG;;;;YAQS;;YAAM;YACbA,OAAAC,MAAAC,IAAAD,aAAAA,EAAAA,CAAUH,IAAVG,CAAAA,EAAAD,aAAmBG,KAAnBH,EAAAI;AAAAA;;;;cAAmB;cAtBvBC,UAAA,CAuBkBP,IAvBlB,EAuB0BK,KAvB1B;cAuBiBG,MAAXC,eAAWD,OAAAA,EAvBjB,MAAAD,OAAA,CAuBiBC;cAvBjBF,OAAAC,OAAA,CAAAG,UAAAH,OAAA,CAAAD,QAAA,CAAAI,EAAAC,CAAAD,CAAA,EAsBIR,CAAAA,GAAAA,qBAAAA,CAAAC,EATFJ,CAAAA,GAAAA,qBAAAA,CAQCD;QATHD,GAAAA,WAAAA,EAAcO,IAAdP;MAFwCD,GAAAA,WAAAA,EAAgBgB,iBAAhBhB;IAA1BD,GAAAA,WAAAA,EAAaiB,iBAAbjB;EAAdD,GAAAA,WAAAA,EAAAA,IAAAA;AAVAD;"}},{"offset":{"line":26708,"column":0},"map":{"version":3,"sourceRoot":"","sources":["paggio/html/element/link.rb"],"sourcesContent":["class Paggio; class HTML < BasicObject; class Element < BasicObject\n\nclass Link < self\n  { cross_origin: :crossorigin,\n\n    href:      :href,\n    href_lang: :hreflang,\n\n    media: :media,\n    rel:   :rel,\n    sizes: :sizes,\n    type:  :type,\n  }.each {|name, attribute|\n    defhelper name do |value|\n      @attributes[name] = value.to_s\n    end\n  }\nend\n\nend; end; end\n"],"names":["<top (required)>","<class:Paggio>","<class:HTML>","<class:Element>","<class:Link>","each","block in <class:Link>","name","attribute","block (2 levels) in <class:Link>","defhelper","self","value","block (3 levels) in <class:Link>","$writer","to_s","[]=","@attributes","-","1","BasicObject"],"mappings":"AAAAA,2DAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAcA,OAAAC;IAAAA;;MAAAA;;MAA0BA,OAAAC;MAAAA;;QAAAA;;QAExCA,OAAAC;QAAAA;;;UACEA,OASCC,MATD,gFAAA,gBAAgB,aAAhB,EAAA,QAEa,MAFb,EAAA,aAGa,UAHb,EAAA,SAKS,OALT,EAAA,OAMS,KANT,EAAA,SAOS,OAPT,EAAA,QAQS,MART,EASCA,QAAAA,EAAAA,EAAAA,EATDC,iBASSC,IAAD,EAAOC,SATfF,EAAAG;;;;YASS;;YAAM;YACbA,OAAAC,MAAAC,IAAAD,aAAAA,EAAAA,CAAUH,IAAVG,CAAAA,EAAAD,aAAmBG,KAAnBH,EAAAI;AAAAA;;;;cAAmB;cAbvBC,UAAA,CAckBP,IAdlB,EAc0BK,KAAKG,MAAAA,CAAAA,CAd/B;cAciBC,MAAXC,eAAWD,OAAAA,EAdjB,MAAAF,OAAA,CAciBE;cAdjBH,OAAAC,OAAA,CAAAI,UAAAJ,OAAA,CAAAD,QAAA,CAAAK,EAAAC,CAAAD,CAAA,EAaIT,CAAAA,GAAAA,qBAAAA,CAAAC,EAVFJ,CAAAA,GAAAA,qBAAAA,CASCD;QAVHD,GAAAA,WAAAA,EAAaO,IAAbP;MAFwCD,GAAAA,WAAAA,EAAgBiB,iBAAhBjB;IAA1BD,GAAAA,WAAAA,EAAakB,iBAAblB;EAAdD,GAAAA,WAAAA,EAAAA,IAAAA;AAAAD;"}},{"offset":{"line":26753,"column":0},"map":{"version":3,"sourceRoot":"","sources":["paggio/html/element/object.rb"],"sourcesContent":["#--\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#                    Version 2, December 2004\n#\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n#\n#  0. You just DO WHAT THE FUCK YOU WANT TO.\n#++\n\nclass Paggio; class HTML < BasicObject; class Element < BasicObject\n\nclass Object < self\n  { type: :type,\n    data: :data,\n    name: :name,\n\n    height: :height,\n    width:  :width\n  }.each {|name, attribute|\n    defhelper name do |value|\n      @attributes[name] = value\n    end\n  }\nend\n\nend; end; end\n"],"names":["<top (required)>","<class:Paggio>","<class:HTML>","<class:Element>","<class:Object>","each","block in <class:Object>","name","attribute","block (2 levels) in <class:Object>","defhelper","self","value","block (3 levels) in <class:Object>","$writer","[]=","@attributes","-","1","BasicObject"],"mappings":"AAAAA,6DAAAA;EAAAA;;EAAAA;EAUAA,OAAAC;EAAAA;;IAAAA;;IAAcA,OAAAC;IAAAA;;MAAAA;;MAA0BA,OAAAC;MAAAA;;QAAAA;;QAExCA,OAAAC;QAAAA;;;UACEA,OAMCC,MAND,qDAAA,QAAQ,MAAR,EAAA,QACQ,MADR,EAAA,QAEQ,MAFR,EAAA,UAIU,QAJV,EAAA,SAKU,OALV,EAMCA,QAAAA,EAAAA,EAAAA,EANDC,mBAMSC,IAAD,EAAOC,SANfF,EAAAG;;;;YAMS;;YAAM;YACbA,OAAAC,MAAAC,IAAAD,aAAAA,EAAAA,CAAUH,IAAVG,CAAAA,EAAAD,aAAmBG,KAAnBH,EAAAI;AAAAA;;;;cAAmB;cApBvBC,UAAA,CAqBkBP,IArBlB,EAqB0BK,KArB1B;cAqBiBG,MAAXC,eAAWD,OAAAA,EArBjB,MAAAD,OAAA,CAqBiBC;cArBjBF,OAAAC,OAAA,CAAAG,UAAAH,OAAA,CAAAD,QAAA,CAAAI,EAAAC,CAAAD,CAAA,EAoBIR,CAAAA,GAAAA,qBAAAA,CAAAC,EAPFJ,CAAAA,GAAAA,qBAAAA,CAMCD;QAPHD,GAAAA,WAAAA,EAAeO,IAAfP;MAFwCD,GAAAA,WAAAA,EAAgBgB,iBAAhBhB;IAA1BD,GAAAA,WAAAA,EAAaiB,iBAAbjB;EAAdD,GAAAA,WAAAA,EAAAA,IAAAA;AAVAD;"}},{"offset":{"line":26798,"column":0},"map":{"version":3,"sourceRoot":"","sources":["paggio/html/element/option.rb"],"sourcesContent":["#--\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#                    Version 2, December 2004\n#\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n#\n#  0. You just DO WHAT THE FUCK YOU WANT TO.\n#++\n\nclass Paggio; class HTML < BasicObject; class Element < BasicObject\n\nclass Option < self\n  %w[label value].each {|name|\n    defhelper name do |value|\n      @attributes[name] = value\n    end\n  }\n\n  defhelper! :disabled\n  defhelper! :selected\nend\n\nend; end; end\n"],"names":["<top (required)>","<class:Paggio>","<class:HTML>","<class:Element>","<class:Option>","each","block in <class:Option>","name","block (2 levels) in <class:Option>","defhelper","self","value","block (3 levels) in <class:Option>","$writer","[]=","@attributes","-","1","defhelper!","BasicObject"],"mappings":"AAAAA,6DAAAA;EAAAA;;EAAAA;EAUAA,OAAAC;EAAAA;;IAAAA;;IAAcA,OAAAC;IAAAA;;MAAAA;;MAA0BA,OAAAC;MAAAA;;QAAAA;;QAExCA,OAAAC;QAAAA;;;;UACiBC,MAAf,CAAGD,OAAH,EAASA,OAAT,CAAeC,QAAAA,EAAAA,EAAAA,EAAfC,mBAAuBC,IAAvBD,EAAAE;;;;YAAuB;YACrBA,OAAAC,MAAAC,IAAAD,aAAAA,EAAAA,CAAUF,IAAVE,CAAAA,EAAAD,aAAmBG,KAAnBH,EAAAI;AAAAA;;;;cAAmB;cAdvBC,UAAA,CAekBN,IAflB,EAe0BI,KAf1B;cAeiBG,MAAXC,eAAWD,OAAAA,EAfjB,MAAAD,OAAA,CAeiBC;cAfjBF,OAAAC,OAAA,CAAAG,UAAAH,OAAA,CAAAD,QAAA,CAAAI,EAAAC,CAAAD,CAAA,EAcIR,CAAAA,GAAAA,qBAAAA,CAAAC,EADFH,CAAAA,GAAAA,qBAAAA,CAAeD;UAMfK,IAAAQ,eAAAA,CAAW,UAAXA;UACAd,OAAAM,IAAAQ,eAAAA,CAAW,UAAXA;QARFd,GAAAA,WAAAA,EAAeM,IAAfN;MAFwCD,GAAAA,WAAAA,EAAgBgB,iBAAhBhB;IAA1BD,GAAAA,WAAAA,EAAaiB,iBAAbjB;EAAdD,GAAAA,WAAAA,EAAAA,IAAAA;AAVAD;"}},{"offset":{"line":26844,"column":0},"map":{"version":3,"sourceRoot":"","sources":["paggio/html/element/optgroup.rb"],"sourcesContent":["#--\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#                    Version 2, December 2004\n#\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n#\n#  0. You just DO WHAT THE FUCK YOU WANT TO.\n#++\n\nclass Paggio; class HTML < BasicObject; class Element < BasicObject\n\nclass Optgroup < self\n  %w[label value].each {|name|\n    defhelper name do |value|\n      @attributes[name] = value\n    end\n  }\n\n  defhelper! :disabled\n  defhelper! :selected\nend\n\nend; end; end\n"],"names":["<top (required)>","<class:Paggio>","<class:HTML>","<class:Element>","<class:Optgroup>","each","block in <class:Optgroup>","name","block (2 levels) in <class:Optgroup>","defhelper","self","value","block (3 levels) in <class:Optgroup>","$writer","[]=","@attributes","-","1","defhelper!","BasicObject"],"mappings":"AAAAA,+DAAAA;EAAAA;;EAAAA;EAUAA,OAAAC;EAAAA;;IAAAA;;IAAcA,OAAAC;IAAAA;;MAAAA;;MAA0BA,OAAAC;MAAAA;;QAAAA;;QAExCA,OAAAC;QAAAA;;;;UACiBC,MAAf,CAAGD,OAAH,EAASA,OAAT,CAAeC,QAAAA,EAAAA,EAAAA,EAAfC,qBAAuBC,IAAvBD,EAAAE;;;;YAAuB;YACrBA,OAAAC,MAAAC,IAAAD,aAAAA,EAAAA,CAAUF,IAAVE,CAAAA,EAAAD,aAAmBG,KAAnBH,EAAAI;AAAAA;;;;cAAmB;cAdvBC,UAAA,CAekBN,IAflB,EAe0BI,KAf1B;cAeiBG,MAAXC,eAAWD,OAAAA,EAfjB,MAAAD,OAAA,CAeiBC;cAfjBF,OAAAC,OAAA,CAAAG,UAAAH,OAAA,CAAAD,QAAA,CAAAI,EAAAC,CAAAD,CAAA,EAcIR,CAAAA,GAAAA,qBAAAA,CAAAC,EADFH,CAAAA,GAAAA,qBAAAA,CAAeD;UAMfK,IAAAQ,eAAAA,CAAW,UAAXA;UACAd,OAAAM,IAAAQ,eAAAA,CAAW,UAAXA;QARFd,GAAAA,WAAAA,EAAiBM,IAAjBN;MAFwCD,GAAAA,WAAAA,EAAgBgB,iBAAhBhB;IAA1BD,GAAAA,WAAAA,EAAaiB,iBAAbjB;EAAdD,GAAAA,WAAAA,EAAAA,IAAAA;AAVAD;"}},{"offset":{"line":26890,"column":0},"map":{"version":3,"sourceRoot":"","sources":["paggio/html/element/select.rb"],"sourcesContent":["#--\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#                    Version 2, December 2004\n#\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n#\n#  0. You just DO WHAT THE FUCK YOU WANT TO.\n#++\n\nclass Paggio; class HTML < BasicObject; class Element < BasicObject\n\nclass Select < self\n  %w[form name size].each {|name|\n    defhelper name do |value|\n      @attributes[name] = value\n    end\n  }\n\n  defhelper! :auto_focus, :autofocus\n  defhelper! :disabled\n  defhelper! :required\nend\n\nend; end; end\n"],"names":["<top (required)>","<class:Paggio>","<class:HTML>","<class:Element>","<class:Select>","each","block in <class:Select>","name","block (2 levels) in <class:Select>","defhelper","self","value","block (3 levels) in <class:Select>","$writer","[]=","@attributes","-","1","defhelper!","BasicObject"],"mappings":"AAAAA,6DAAAA;EAAAA;;EAAAA;EAUAA,OAAAC;EAAAA;;IAAAA;;IAAcA,OAAAC;IAAAA;;MAAAA;;MAA0BA,OAAAC;MAAAA;;QAAAA;;QAExCA,OAAAC;QAAAA;;;;UACoBC,MAAlB,CAAGD,MAAH,EAAQA,MAAR,EAAaA,MAAb,CAAkBC,QAAAA,EAAAA,EAAAA,EAAlBC,mBAA0BC,IAA1BD,EAAAE;;;;YAA0B;YACxBA,OAAAC,MAAAC,IAAAD,aAAAA,EAAAA,CAAUF,IAAVE,CAAAA,EAAAD,aAAmBG,KAAnBH,EAAAI;AAAAA;;;;cAAmB;cAdvBC,UAAA,CAekBN,IAflB,EAe0BI,KAf1B;cAeiBG,MAAXC,eAAWD,OAAAA,EAfjB,MAAAD,OAAA,CAeiBC;cAfjBF,OAAAC,OAAA,CAAAG,UAAAH,OAAA,CAAAD,QAAA,CAAAI,EAAAC,CAAAD,CAAA,EAcIR,CAAAA,GAAAA,qBAAAA,CAAAC,EADFH,CAAAA,GAAAA,qBAAAA,CAAkBD;UAMlBK,IAAAQ,eAAAA,CAAW,YAAX,EAAwB,WAAxBA;UACAR,IAAAQ,eAAAA,CAAW,UAAXA;UACAd,OAAAM,IAAAQ,eAAAA,CAAW,UAAXA;QATFd,GAAAA,WAAAA,EAAeM,IAAfN;MAFwCD,GAAAA,WAAAA,EAAgBgB,iBAAhBhB;IAA1BD,GAAAA,WAAAA,EAAaiB,iBAAbjB;EAAdD,GAAAA,WAAAA,EAAAA,IAAAA;AAVAD;"}},{"offset":{"line":26937,"column":0},"map":{"version":3,"sourceRoot":"","sources":["paggio/html/element/td.rb"],"sourcesContent":["#--\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#                    Version 2, December 2004\n#\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n#\n#  0. You just DO WHAT THE FUCK YOU WANT TO.\n#++\n\nclass Paggio; class HTML < BasicObject; class Element < BasicObject\n\nclass Td < self\n  defhelper :columns do |value|\n    @attributes[:colspan] = value.to_s\n  end\n\n  defhelper :rows do |value|\n    @attributes[:rowspan] = value.to_s\n  end\n\n  defhelper :headers do |*args|\n    @attributes[:headers] = args.join(' ')\n  end\nend\n\nend; end; end\n"],"names":["<top (required)>","<class:Paggio>","<class:HTML>","<class:Element>","<class:Td>","defhelper","self","block in <class:Td>","value","block (2 levels) in <class:Td>","$writer","to_s","[]=","@attributes","-","1","args","join","BasicObject"],"mappings":"AAAAA,yDAAAA;EAAAA;;EAAAA;EAUAA,OAAAC;EAAAA;;IAAAA;;IAAcA,OAAAC;IAAAA;;MAAAA;;MAA0BA,OAAAC;MAAAA;;QAAAA;;QAExCA,OAAAC;QAAAA;;;;UACEC,MAAAC,IAAAD,aAAAA,EAAAA,CAAU,SAAVA,CAAAA,EAAAE,eAAuBC,KAAvBD,EAAAE;AAAAA;;;;YAAuB;YAbzBC,UAAA,CAcgB,SAdhB,EAc4BF,KAAKG,MAAAA,CAAAA,CAdjC;YAceC,MAAXC,eAAWD,OAAAA,EAdf,MAAAF,OAAA,CAceE;YAdfH,OAAAC,OAAA,CAAAI,UAAAJ,OAAA,CAAAD,QAAA,CAAAK,EAAAC,CAAAD,CAAA,EAaEP,CAAAA,GAAAA,qBAAAA,CAAAF;UAIAA,MAAAC,IAAAD,aAAAA,EAAAA,CAAU,MAAVA,CAAAA,EAAAE,eAAoBC,KAApBD,EAAAE;AAAAA;;;;YAAoB;YAjBtBC,UAAA,CAkBgB,SAlBhB,EAkB4BF,KAAKG,MAAAA,CAAAA,CAlBjC;YAkBeC,MAAXC,eAAWD,OAAAA,EAlBf,MAAAF,OAAA,CAkBeE;YAlBfH,OAAAC,OAAA,CAAAI,UAAAJ,OAAA,CAAAD,QAAA,CAAAK,EAAAC,CAAAD,CAAA,EAiBEP,CAAAA,GAAAA,qBAAAA,CAAAF;UAIAD,OAAAC,MAAAC,IAAAD,aAAAA,EAAAA,CAAU,SAAVA,CAAAA,EAAAE,eArBF,EAqBEA,EAAAE;AAAAA;;;;YArBF;;YAqByB;YArBzBC,UAAA,CAsBgB,SAtBhB,EAsB4BM,IAAIC,MAAAA,CAAMR,GAANQ,CAtBhC;YAsBeL,MAAXC,eAAWD,OAAAA,EAtBf,MAAAF,OAAA,CAsBeE;YAtBfH,OAAAC,OAAA,CAAAI,UAAAJ,OAAA,CAAAD,QAAA,CAAAK,EAAAC,CAAAD,CAAA,EAqBEP,CAAAA,GAAAA,sBAAAA,CAAAF;QATFD,GAAAA,WAAAA,EAAWE,IAAXF;MAFwCD,GAAAA,WAAAA,EAAgBe,iBAAhBf;IAA1BD,GAAAA,WAAAA,EAAagB,iBAAbhB;EAAdD,GAAAA,WAAAA,EAAAA,IAAAA;AAVAD;"}},{"offset":{"line":26996,"column":0},"map":{"version":3,"sourceRoot":"","sources":["paggio/html/element.rb"],"sourcesContent":["#--\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#                    Version 2, December 2004\n#\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n#\n#  0. You just DO WHAT THE FUCK YOU WANT TO.\n#++\n\nrequire 'paggio/html/element/a'\nrequire 'paggio/html/element/base'\nrequire 'paggio/html/element/blockquote'\nrequire 'paggio/html/element/button'\nrequire 'paggio/html/element/canvas'\nrequire 'paggio/html/element/embed'\nrequire 'paggio/html/element/img'\nrequire 'paggio/html/element/input'\nrequire 'paggio/html/element/link'\nrequire 'paggio/html/element/object'\nrequire 'paggio/html/element/option'\nrequire 'paggio/html/element/optgroup'\nrequire 'paggio/html/element/select'\nrequire 'paggio/html/element/td'\n\nclass Paggio; class HTML < BasicObject\n\nclass Element < BasicObject\n  def self.new(owner, name, attributes = {})\n    return super unless self == Element\n\n    const = name.capitalize\n\n    if !const.to_s.include?('-') && const_defined?(const)\n      const_get(const).new(owner, name, attributes)\n    else\n      super\n    end\n  end\n\n  def initialize(owner, name, attributes = {})\n    @owner       = owner\n    @name        = name\n    @attributes  = attributes\n    @children    = []\n    @class_names = []\n  end\n\n  def each(&block)\n    @children.each(&block)\n  end\n\n  def <<(what)\n    @children << what\n\n    self\n  end\n\n  def method_missing(name, content = nil, &block)\n    if name.to_s.end_with? ?!\n      @attributes[:id] = name[0 .. -2]\n    else\n      @class_names << name\n    end\n\n    if ::Hash === content\n      if content.has_key?(:class) || content.has_key?(:classes)\n        @class_names.unshift(*(content.delete(:class).to_s.split | content.delete(:classes).to_a))\n      end\n\n      ::Paggio::Utils.deep_merge!(@attributes, content)\n    elsif content\n      self >> content\n    end\n\n    @owner.extend!(self, &block) if block\n\n    self\n  end\n\n  def [](*names)\n    if last = @class_names.pop\n      @class_names << [last, *names].join('-')\n    end\n\n    self\n  end\n\n  def do(&block)\n    @owner.extend!(self, &block)\n\n    self\n  end\n\n  def >>(content)\n    self << ::Paggio::Utils.heredoc(content.to_s)\n    self\n  end\n\n  defhelper :style do |hash|\n    @attributes[:style] = hash.map {|name, value|\n      \"#{name}: #{value}\"\n    }.join(';')\n  end\n\n  defhelper :data do |hash|\n    hash.each {|name, value|\n      @attributes[\"data-#{name}\"] = value.to_s\n    }\n  end\n\n  def inspect\n    if @children.empty?\n      \"#<HTML::Element(#{@name.upcase})>\"\n    else\n      \"#<HTML::Element(#{@name.upcase}): #{@children.inspect[1 .. -2]}>\"\n    end\n  end\nend\n\nend; end\n"],"names":["<top (required)>","self","require","<class:Paggio>","<class:HTML>","<class:Element>","new","owner","name","attributes","Element","const$","capitalize","to_s","include?","const_defined?","const_get","initialize","@owner","@name","@attributes","@children","@class_names","each","block","to_proc","<<","what","method_missing","content","end_with?","$writer","[]","0","-2","[]=","-","1","Hash","has_key?","unshift","delete","split","|","to_a","Paggio::Utils","Paggio","deep_merge!",">>","extend!","last","pop","names","join","do","heredoc","defhelper","block in <class:Element>","hash","block (2 levels) in <class:Element>","map","value","block (3 levels) in <class:Element>","inspect","empty?","upcase","BasicObject"],"mappings":"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"}},{"offset":{"line":27187,"column":0},"map":{"version":3,"sourceRoot":"","sources":["paggio/html.rb"],"sourcesContent":["#--\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#                    Version 2, December 2004\n#\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n#\n#  0. You just DO WHAT THE FUCK YOU WANT TO.\n#++\n\nrequire 'paggio/html/helpers'\nrequire 'paggio/html/element'\n\nclass Paggio\n\nclass HTML < BasicObject\n  attr_reader :version\n\n  def initialize(version = 5, defer: false, &block)\n    ::Kernel.raise ::ArgumentError, 'no block given' unless block\n\n    @version = version\n    @roots   = []\n    @current = nil\n\n    @block = block\n\n    build! unless defer\n  end\n\n  def <<(what)\n    (@current || @roots) << what\n  end\n\n  def build!(force_call: false)\n    if !force_call && @block.arity == 0\n      instance_exec(&@block)\n    else\n      @block.call(self)\n    end\n    @block = nil\n  end\n\n  def root!\n    @roots.first\n  end\n\n  def roots!\n    @roots\n  end\n\n  def element!\n    @current\n  end\n\n  def extend!(element = nil, &block)\n    old, @current = @current, element\n\n    result = block.call(self)\n\n    if ::String === result\n      @current.instance_eval { @inner_html = result }\n    end\n\n    @current = old\n\n    self\n  end\n\n  def each(&block)\n    @roots.each(&block)\n  end\n\n  def text(*fragments, &block)\n    fragments << yield if block\n    fragments.each { |fragment| self << fragment }\n  end\n\n  def method_missing(name, *args, &block)\n    if name.to_s.end_with? ?!\n      return super\n    end\n\n    unless args.empty? || ::Hash === args.first\n      content = ::Paggio::Utils.heredoc(args.shift.to_s)\n    end\n\n    element = Element.new(self, name, *args)\n    element << content if content\n\n    if block\n      parent   = @current\n      @current = element\n      result   = block.call(self)\n      @current = parent\n\n      if ::String === result\n        element.instance_eval { @inner_html = result }\n      end\n    end\n\n    self << element\n\n    element\n  end\n\n  # Support for custom elements\n  alias e method_missing\n\n  def inspect\n    if @roots.empty?\n      \"#<HTML(#@version)>\"\n    else\n      \"#<HTML(#@version): #{@roots.inspect[1 .. -2]}>\"\n    end\n  end\nend\n\nend\n"],"names":["<top (required)>","self","require","<class:Paggio>","<class:HTML>","attr_reader","initialize","5","block","Kernel","raise","ArgumentError","@version","version","@roots","@current","@block","defer","build!","<<","what","$ret_or_1","$kwargs","force_call","arity","0","instance_exec","to_proc","call","root!","first","roots!","element!","extend!","element","old","result","String","instance_eval","block in extend!","block (2 levels) in extend!","@inner_html","each","text","fragments","block in text","fragment","block (2 levels) in text","method_missing","name","to_s","end_with?","args","empty?","Hash","content","Paggio::Utils","Paggio","heredoc","shift","new","Element","parent","block in method_missing","block (2 levels) in method_missing","inspect","[]","1","-2","BasicObject"],"mappings":"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"}},{"offset":{"line":27387,"column":0},"map":{"version":3,"sourceRoot":"","sources":["paggio/css/unit.rb"],"sourcesContent":["#--\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#                    Version 2, December 2004\n#\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n#\n#  0. You just DO WHAT THE FUCK YOU WANT TO.\n#++\n\nclass Paggio; class CSS < BasicObject\n\nclass Unit\n  TYPES      = %w[em ex ch rem vh vw vmin vmax px mm cm in pt pc s deg].map(&:to_sym)\n  COMPATIBLE = %w[in pt mm cm px pc].map(&:to_sym)\n\n  attr_reader :type, :number\n\n  def initialize(number, type)\n    @number = number\n    @type   = type\n  end\n\n  def coerce(other)\n    return self, other\n  end\n\n  def ==(other)\n    unless Unit === other\n      unless other.respond_to? :to_u\n        raise TypeError, \"no implicit conversion of #{other.class} into Unit\"\n      end\n\n      other = other.to_u\n    end\n\n    unless Unit === other\n      other = Unit.new(other, @type)\n    end\n\n    @number == convert(other, @type)\n  end\n\n  def ===(other)\n    @type == other.type && @number == other.number\n  end\n\n  alias eql? ==\n\n  def hash\n    [@number, @type].hash\n  end\n\n  TYPES.each {|name|\n    define_method name do\n      Unit.new(convert(self, name), name)\n    end\n  }\n\n  def +(other)\n    return Unit.new(@number + other, @type) unless Unit === other\n\n    if @type == other.type\n      Unit.new(@number + other.number, @type)\n    elsif compatible?(self) and compatible?(other)\n      Unit.new(@number + convert(other, @type), @type)\n    else\n      raise ArgumentError, \"#{other.type} isn't compatible with #{@type}\"\n    end\n  end\n\n  def -(other)\n    return Unit.new(@number - other, @type) unless Unit === other\n\n    if @type == other.type\n      Unit.new(@number - other.number, @type)\n    elsif compatible?(self) and compatible?(other)\n      Unit.new(@number - convert(other, @type), @type)\n    else\n      raise ArgumentError, \"#{other.type} isn't compatible with #{@type}\"\n    end\n  end\n\n  def *(other)\n    return Unit.new(@number * other, @type) unless Unit === other\n\n    if @type == other.type\n      Unit.new(@number * other.number, @type)\n    elsif compatible?(self) and compatible?(other)\n      Unit.new(@number * convert(other, @type), @type)\n    else\n      raise ArgumentError, \"#{other.type} isn't compatible with #{@type}\"\n    end\n  end\n\n  def /(other)\n    return Unit.new(@number / other, @type) unless Unit === other\n\n    if @type == other.type\n      Unit.new(@number / other.number, @type)\n    elsif compatible?(self) and compatible?(other)\n      Unit.new(@number / convert(other, @type), @type)\n    else\n      raise ArgumentError, \"#{other.type} isn't compatible with #{@type}\"\n    end\n  end\n\n  def -@\n    Unit.new(@number * -1, @type)\n  end\n\n  def +@\n    Unit.new(@number, @type)\n  end\n\n  def to_i\n    @number.to_i\n  end\n\n  def to_f\n    @number.to_f\n  end\n\n  def to_u\n    self\n  end\n\n  def to_s\n    \"#@number#@type\"\n  end\n\n  alias to_str to_s\n  alias inspect to_s\n\nprivate\n  def compatible?(unit)\n    COMPATIBLE.include?(unit.type)\n  end\n\n  def convert(unit, type)\n    value = unit.number\n\n    return value if unit.type == type\n\n    px = case unit.type\n    when :in then value * 96\n    when :pt then value * 4.0 / 3.0\n    when :pc then value / 12 * 4.0 / 3.0\n    when :mm then value * 3.77953\n    when :cm then value * 10 * 3.77953\n    when :px then value\n    end\n\n    case type\n    when :in then px / 96.0\n    when :pt then px / 4.0 / 3.0\n    when :pc then px * 12 / 4.0 / 3.0\n    when :mm then px / 3.77953\n    when :cm then px / 10 / 3.77953\n    when :px then px\n    end\n  end\nend\n\nend; end\n\nclass Numeric\n  Paggio::CSS::Unit::TYPES.each {|name|\n    define_method name do\n      Paggio::CSS::Unit.new(self, name)\n    end\n  }\n\n  def to_u\n    self\n  end\nend\n\n[Fixnum, Float].each {|klass|\n  klass.class_eval {\n    alias old_percent %\n\n    def %(other = nil)\n      if other\n        old_percent(other)\n      else\n        Paggio::CSS::Unit.new(self, :%)\n      end\n    end\n  }\n}\n\nclass String\n  def to_u\n    if matches = match(/^([\\d+.]+)(.+)?$/)\n      value = matches[1].to_f\n\n      if unit = matches[2]\n        value.__send__(unit.downcase)\n      else\n        value\n      end\n    else\n      0\n    end\n  end\nend\n\nclass NilClass\n  def to_u\n    0\n  end\nend\n"],"names":["<top (required)>","<class:Paggio>","<class:CSS>","<class:Unit>","map","to_proc","self","attr_reader","initialize","number","type","@number","@type","coerce","other","==","Unit","respond_to?","raise","TypeError","class","to_u","new","convert","===","$ret_or_1","hash","each","TYPES","block in <class:Unit>","name","block (2 levels) in <class:Unit>","define_method","block (3 levels) in <class:Unit>","+","compatible?","ArgumentError","-","*","/","-@","-1","+@","to_i","to_f","to_s","private","unit","COMPATIBLE","include?","value","px","96","12","10","BasicObject","<class:Numeric>","Paggio::CSS::Unit::TYPES","Paggio::CSS::Unit","Paggio::CSS","Paggio","block in <class:Numeric>","block (2 levels) in <class:Numeric>","block (3 levels) in <class:Numeric>","Fixnum","Float","block in <top (required)>","klass","block (2 levels) in <top (required)>","class_eval","block (3 levels) in <top (required)>","%","old_percent","<class:String>","matches","match","[]","1","2","__send__","downcase","0","<class:NilClass>"],"mappings":"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"}},{"offset":{"line":27676,"column":0},"map":{"version":3,"sourceRoot":"","sources":["paggio/css/color.rb"],"sourcesContent":["#--\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#                    Version 2, December 2004\n#\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n#\n#  0. You just DO WHAT THE FUCK YOU WANT TO.\n#++\n\nclass Paggio; class CSS < BasicObject\n\nclass Color\n  def initialize(value, type)\n    @internal = value\n    @type     = type\n  end\nend\n\nend; end\n\nclass String\n  %w[rgb rgba hsl hsla].map(&:to_sym).each {|name|\n    define_method name do\n      Paggio::CSS::Color.new(self, name)\n    end\n  }\nend\n\nclass Array\n  %w[rgb rgba hsl hsla].map(&:to_sym).each {|name|\n    define_method name do\n      Paggio::CSS::Color.new(self, name)\n    end\n  }\nend\n"],"names":["<top (required)>","<class:Paggio>","<class:CSS>","<class:Color>","initialize","value","type","@internal","@type","BasicObject","<class:String>","each","map","to_proc","block in <class:String>","name","block (2 levels) in <class:String>","define_method","self","block (3 levels) in <class:String>","Paggio::CSS::Color","Paggio::CSS","Paggio","new","<class:Array>","block in <class:Array>","block (2 levels) in <class:Array>","block (3 levels) in <class:Array>"],"mappings":"AAAAA,mDAAAA;EAAAA;;EAAAA;;EAUAC;EAAAA;;IAAAA;;IAAcA,OAAAC;IAAAA;;MAAAA;;MAEdA,OAAAC;MAAAA;;;QACEA,OAAAC,0BAAAA,sBAAeC,KAAD,EAAQC,IAAtBF;AAAAA,UAAAA;;;UACEG,gBAAYF;UACZD,OAAAI,CAAAA,YAAYF,IAAZE;QAFFJ,CAAAA,GAAAA;MADFD,GAAAA,WAAAA,EAAAA,IAAAA;IAFcD,GAAAA,WAAAA,EAAYO,iBAAZP;EAAdD,GAAAA,WAAAA,EAAAA,IAAAA;EAWAS;EAAAA;;IAAAA;;IACEA,OAAmCC,MAAdC,MAArB,CAAGF,KAAH,EAAOA,MAAP,EAAYA,KAAZ,EAAgBA,MAAhB,CAAqBE,OAAAA,EAAAA,EAAAA,EAAM,QAADC,SAAAA,CAAAA,CAALD,CAAcD,QAAAA,EAAAA,EAAAA,EAAnCG,mBAA2CC,IAA3CD,EAAAE;;;;MAA2C;MACzCA,OAAAC,MAAAC,IAAAD,iBAAAA,EAAAA,CAAcF,IAAdE,CAAAA,EAAAD,aAAAA,EAAAG;;QACEA,OAAAC,IAAAC,IAAAC,YAAAD,QAAAD,UAAkBG,KAAAA,CAAKL,IAAvB,EAA6BH,IAAXQ,CADpBP,CAAAA,GAAAA,qBAAAA,CAAAC,EADFH,CAAAA,GAAAA,qBAAAA,CAAmCH;EADrCD,GAAAA,WAAAA,EAAAA,IAAAA;EAQAV,OAAAwB;EAAAA;;IAAAA;;IACEA,OAAmCb,MAAdC,MAArB,CAAGY,KAAH,EAAOA,MAAP,EAAYA,KAAZ,EAAgBA,MAAhB,CAAqBZ,OAAAA,EAAAA,EAAAA,EAAM,QAADC,SAAAA,CAAAA,CAALD,CAAcD,QAAAA,EAAAA,EAAAA,EAAnCc,kBAA2CV,IAA3CU,EAAAC;;;;MAA2C;MACzCA,OAAAT,MAAAC,IAAAD,iBAAAA,EAAAA,CAAcF,IAAdE,CAAAA,EAAAS,aAAAA,EAAAC;;QACEA,OAAAP,IAAAC,IAAAC,YAAAD,QAAAD,UAAkBG,KAAAA,CAAKL,IAAvB,EAA6BH,IAAXQ,CADpBG,CAAAA,GAAAA,qBAAAA,CAAAT,EADFQ,CAAAA,GAAAA,qBAAAA,CAAmCd;EADrCa,GAAAA,WAAAA,EAAAA,IAAAA;AA7BAxB;"}},{"offset":{"line":27735,"column":0},"map":{"version":3,"sourceRoot":"","sources":["paggio/css/definition.rb"],"sourcesContent":["#--\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#                    Version 2, December 2004\n#\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n#\n#  0. You just DO WHAT THE FUCK YOU WANT TO.\n#++\n\nclass Paggio; class CSS < BasicObject\n\nclass Definition < BasicObject\n  Style = ::Struct.new(:name, :value, :important)\n\n  def initialize(&block)\n    @style = []\n\n    if block.arity == 0\n      instance_exec(&block)\n    else\n      block.call(self)\n    end if block\n  end\n\n  def empty?\n    @style.empty?\n  end\n\n  def each(&block)\n    @style.each(&block)\n  end\n\n  def gradient(*args)\n    Gradient.new(*args)\n  end\n\n  def url(value)\n    \"url(#{value.to_s.inspect})\"\n  end\n\n  %w[blur brightness rotate contrast grayscale invert opacity saturate sepia].each {|name|\n    define_method name do |value|\n      \"#{name}(#{value})\"\n    end\n  }\n\n  def rgb(r, g, b)\n    \"rgb(#{r}, #{g}, #{b}, #{a})\"\n  end\n\n  def rgba(r, g, b, a)\n    \"rgba(#{r}, #{g}, #{b}, #{a})\"\n  end\n\n  %w[scale skew translate].each {|name|\n    define_method name do |a, b = nil|\n      if b\n        \"#{name}(#{a}, #{b})\"\n      else\n        \"#{name}(#{a})\"\n      end\n    end\n  }\n\n  %w[translateX translateY translateZ rotateX rotateY rotateZ skewX skewY scaleX scaleY].each {|name|\n    define_method name do |value|\n      \"#{name}(#{value})\"\n    end\n  }\n\n  def background(*args)\n    if Gradient === args.first\n      if args.length > 1\n        raise NotImplementedError, \"multiple gradients not implemented yet\"\n      end\n\n      args.first.each {|s|\n        style s.name || 'background-image', s.value\n      }\n    else\n      if ::Hash === args.first\n        args.first.each {|sub, value|\n          style \"background-#{sub}\", value\n        }\n      else\n        style :background, args\n      end\n    end\n  end\n\n  def border(*args)\n    if ::Hash === args.first\n      if args.length == 1\n        options = args.first\n      end\n\n      options.each {|name, value|\n        case name\n        when :top, :bottom, :left, :right\n          if ::Hash === value\n            value.each {|n, v|\n              style \"border-#{name}-#{n}\", v\n            }\n          else\n            style \"border-#{name}\", value\n          end\n\n        when :radius\n          if ::Hash === value\n            value.each {|horizontal, value|\n              value.each {|vertical, value|\n                style \"-moz-border-radius-#{horizontal}#{vertical}\", value\n                style \"-webkit-border-#{horizontal}-#{vertical}-radius\", value\n                style \"border-#{horizontal}-#{vertical}-radius\", value\n              }\n            }\n          else\n            style '-moz-border-radius', value\n            style '-webkit-border-radius', value\n            style 'border-radius', value\n          end\n\n        when :color\n          if ::Hash === value\n            value.each {|name, value|\n              style \"border-#{name}-color\", value\n            }\n          else\n            style 'border-color', value\n          end\n\n        else\n          style \"border-#{name}\", value\n        end\n      }\n    else\n      style :border, args\n    end\n  end\n\n  def box(options)\n    if ::Hash === options\n      options.each {|name, value|\n        case name\n        when :shadow\n          if ::Array === value\n            if ::Array === value[0]\n              value = value.map { |v| v.join ' ' }.join(', ')\n            else\n              value = value.join ' '\n            end\n          end\n\n          style '-moz-box-shadow', value\n          style '-webkit-box-shadow', value\n          style 'box-shadow', value\n\n        else\n          style \"box-#{name}\", value\n        end\n      }\n    else\n      style :box, options\n    end\n  end\n\n  def opacity(value)\n    style 'opacity', value\n    style '-moz-opacity', value\n\n    style '-ms-filter', %Q{\"progid:DXImageTransform.Microsoft.Alpha(Opacity=#{(value * 100).to_i})\"}\n    style 'filter', \"alpha(opacity=#{(value * 100).to_i})\"\n  end\n\n  def animation(*args)\n    if Hash === args.first\n      if args.length == 1\n        options = args.first\n      end\n\n      options.each {|name, value|\n        style \"-webkit-animation-#{name}\", value\n        style \"animation-#{name}\", value\n      }\n    else\n      style 'animation', args\n      style '-webkit-animation', args\n    end\n  end\n\n  def transition(*args)\n    style 'transition', args\n    style '-webkit-transition', args\n    style '-moz-transition', args\n  end\n\n  def user_select(*args)\n    style 'user-select', args\n    style '-webkit-user-select', args\n    style '-moz-user-select', args\n    style '-ms-user-select', args\n  end\n\n  def transform(*args)\n    style 'transform', args\n    style '-webkit-transform', args\n    style '-moz-transform', args\n    style '-ms-transform', args\n    style '-o-transform', args\n  end\n\n  def filter(*args)\n    style 'filter', args\n    style '-webkit-filter', args\n    style '-moz-filter', args\n    style '-ms-filter', args\n    style '-o-filter', args\n  end\n\n  def method_missing(name, *args, &block)\n    name = name.to_s\n\n    if name.end_with? ?!\n      name = name[0 .. -2]\n\n      @important = true\n      __send__ name, *args, &block\n      @important = false\n\n      return\n    end\n\n    if args.length == 1\n      argument = args.first\n\n      if ::Hash === argument\n        argument.each {|sub, value|\n          style \"#{name}-#{sub}\", value\n        }\n      else\n        style name, argument\n      end\n    else\n      style name, args.join(' ')\n    end\n\n    @important = false\n\n    self\n  end\n\n  def style(name, value = nil, important = @important)\n    if ::Array === value\n      value = value.join ' '\n    end\n\n    if Style === name\n      @style << name\n    else\n      @style << Style.new(name, value, important)\n    end\n  end\n\n  def style!(name, value = nil)\n    style(name, value, true)\n  end\n\n  class Gradient\n    # TODO: all of it, seriously\n    def initialize(*args)\n      options = ::Hash === args.last ? args.pop : {}\n\n      @to   = options[:to]\n      @from = options[:from]\n\n      if @to && !@from\n        @from = other(@to)\n      elsif @from && !@to\n        @to = other(@from)\n      end\n\n      @start = args.shift\n      @end   = args.shift\n    end\n\n    def each(&block)\n      block.call style(\"-moz-linear-gradient(#@to, #@start 0%, #@end 100%)\")\n\n      if horizontal?\n        block.call style(\"-webkit-gradient(linear, #@from top, #@to top, color-stop(0%, #@start), color-stop(100%, #@end))\")\n      else\n        block.call style(\"-webkit-gradient(linear, left #@from, left #@to, color-stop(0%, #@start), color-stop(100%, #@end))\")\n      end\n\n      block.call style(\"-webkit-linear-gradient(#@to, #@start 0%, #@end 100%)\")\n      block.call style(\"-o-linear-gradient(#@to, #@start 0%, #@end 100%)\")\n      block.call style(\"-ms-linear-gradient(#@to, #@start 0%, #@end 100%)\")\n      block.call style(\"linear-gradient(to #@to, #@start 0%, #@end 100%)\")\n    end\n\n    def horizontal?\n      @to == :left || @to == :right\n    end\n\n    def vertical?\n      @to == :top || @to == :bottom\n    end\n\n  private\n    def other(side)\n      case side\n      when :left   then :right\n      when :right  then :left\n      when :top    then :bottom\n      when :bottom then :top\n      end\n    end\n\n    # FIXME: use default args\n    def style(*args)\n      if args.length == 1\n        Style.new(nil, args.first)\n      else\n        Style.new(*args)\n      end\n    end\n  end\nend\n\nend; end\n"],"names":["<top (required)>","<class:Paggio>","<class:CSS>","<class:Definition>","Struct","new","initialize","@style","block","arity","0","instance_exec","self","to_proc","call","empty?","each","gradient","Gradient","args","url","value","to_s","inspect","block in <class:Definition>","name","block (2 levels) in <class:Definition>","define_method","block (3 levels) in <class:Definition>","rgb","r","g","b","a","rgba","background","first",">","length","1","raise","NotImplementedError","block in background","s","block (2 levels) in background","style","$ret_or_1","Hash","sub","border","options","block in border","block (2 levels) in border","n","v","block (3 levels) in border","horizontal","vertical","block (4 levels) in border","box","block in box","block (2 levels) in box","Array","[]","map","block (3 levels) in box","join","opacity","*","100","to_i","animation","block in animation","block (2 levels) in animation","transition","user_select","transform","filter","method_missing","end_with?","-2","@important","__send__","argument","block in method_missing","block (2 levels) in method_missing","important","Style","<<","style!","<class:Gradient>","last","pop","@to","@from","other","@start","shift","@end","horizontal?","==","vertical?","private","side","BasicObject"],"mappings":"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"}},{"offset":{"line":28266,"column":0},"map":{"version":3,"sourceRoot":"","sources":["paggio/css/rule.rb"],"sourcesContent":["#--\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#                    Version 2, December 2004\n#\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n#\n#  0. You just DO WHAT THE FUCK YOU WANT TO.\n#++\n\nclass Paggio; class CSS < BasicObject\n\nclass Rule < BasicObject\n  attr_reader :selector, :media\n\n  def initialize(selector, media)\n    @selector   = selector\n    @media      = media\n    @definition = Definition.new\n  end\n\n  def method_missing(*args, &block)\n    @definition.__send__(*args, &block)\n  end\nend\n\nend; end\n"],"names":["<top (required)>","<class:Paggio>","<class:CSS>","<class:Rule>","self","attr_reader","initialize","selector","media","@selector","@media","@definition","Definition","new","method_missing","__send__","args","block","to_proc","BasicObject"],"mappings":"AAAAA,kDAAAA;EAAAA;;EAAAA;EAUAA,OAAAC;EAAAA;;IAAAA;;IAAcA,OAAAC;IAAAA;;MAAAA;;MAEdA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QACEC,IAAAC,aAAAA,CAAY,UAAZ,EAAuB,OAAvBA;;AAEAC,QAAAA,0BAAAA,sBAAeC,QAAD,EAAWC,KAAzBF;AAAAA,UAAAA;;;UACEG,gBAAcF;UACdG,aAAcF;UACdF,OAAAK,CAAAA,kBAAcC,gBAAUC,KAAAA,CAAAA,CAAxBF;QAHFL,CAAAA,GAAAA;QAMAH,OAAAW,8BAAAA,0BArBF,EAqBEA;AAAAA,UAAAA;;UAAAA;;;;UArBF;;UAqBqB;UACjBA,OAAWC,MAAXJ,eAAWI,YAAAA,EAAU,MAACC,IAAD,CAAVD,EAAkBE,KAADC,SAAAA,CAAAA,CAAjBH;QADbD,CAAAA,IAAAA;MATFX,GAAAA,WAAAA,EAAagB,iBAAbhB;IAFcD,GAAAA,WAAAA,EAAYiB,iBAAZjB;EAAdD,GAAAA,WAAAA,EAAAA,IAAAA;AAVAD;"}},{"offset":{"line":28314,"column":0},"map":{"version":3,"sourceRoot":"","sources":["paggio/css/font.rb"],"sourcesContent":["#--\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#                    Version 2, December 2004\n#\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n#\n#  0. You just DO WHAT THE FUCK YOU WANT TO.\n#++\n\nclass Paggio; class CSS < BasicObject\n\nclass Font < BasicObject\n  attr_reader :name\n\n  def initialize(name)\n    @name       = name\n    @definition = Definition.new\n\n    font family: name\n  end\n\n  def method_missing(*args, &block)\n    @definition.__send__(*args, &block)\n  end\nend\n\nend; end\n"],"names":["<top (required)>","<class:Paggio>","<class:CSS>","<class:Font>","self","attr_reader","initialize","name","@name","@definition","Definition","new","font","method_missing","__send__","args","block","to_proc","BasicObject"],"mappings":"AAAAA,kDAAAA;EAAAA;;EAAAA;EAUAA,OAAAC;EAAAA;;IAAAA;;IAAcA,OAAAC;IAAAA;;MAAAA;;MAEdA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QACEC,IAAAC,aAAAA,CAAY,MAAZA;;AAEAC,QAAAA,0BAAAA,sBAAeC,IAAfD;AAAAA,UAAAA;;;UACEE,YAAcD;UACdE,kBAAcC,gBAAUC,KAAAA,CAAAA;UAExBL,OAAAF,IAAAQ,MAAAA,CAAK,oBAAA,UAAQL,IAAR,EAALK;QAJFN,CAAAA,GAAAA;QAOAH,OAAAU,8BAAAA,0BAtBF,EAsBEA;AAAAA,UAAAA;;UAAAA;;;;UAtBF;;UAsBqB;UACjBA,OAAWC,MAAXL,eAAWK,YAAAA,EAAU,MAACC,IAAD,CAAVD,EAAkBE,KAADC,SAAAA,CAAAA,CAAjBH;QADbD,CAAAA,IAAAA;MAVFV,GAAAA,WAAAA,EAAae,iBAAbf;IAFcD,GAAAA,WAAAA,EAAYgB,iBAAZhB;EAAdD,GAAAA,WAAAA,EAAAA,IAAAA;AAVAD;"}},{"offset":{"line":28362,"column":0},"map":{"version":3,"sourceRoot":"","sources":["paggio/css/animation.rb"],"sourcesContent":["#--\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#                    Version 2, December 2004\n#\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n#\n#  0. You just DO WHAT THE FUCK YOU WANT TO.\n#++\n\nclass Paggio; class CSS < BasicObject\n\nclass Animation < BasicObject\n  class Step < BasicObject\n    attr_reader :value\n\n    def initialize(value)\n      @value      = value\n      @definition = Definition.new\n    end\n\n    def method_missing(*args, &block)\n      @definition.__send__(*args, &block)\n    end\n  end\n\n  attr_reader :name, :steps\n\n  def initialize(name)\n    @name  = name\n    @steps = []\n  end\n\n  def step(value, &block)\n    @steps << Step.new(value)\n    block.call\n  end\n\n  def from(value, &block)\n    @steps << Step.new(0.%)\n    block.call\n  end\n\n  def to(value, &block)\n    @steps << Step.new(100.%)\n    block.call\n  end\n\n  def method_missing(*args, &block)\n    @steps.last.__send__(*args, &block)\n  end\nend\n\nend; end\n"],"names":["<top (required)>","<class:Paggio>","<class:CSS>","<class:Animation>","<class:Step>","self","attr_reader","initialize","value","@value","@definition","Definition","new","method_missing","__send__","args","block","to_proc","BasicObject","name","@name","@steps","step","<<","Step","call","from","0","%","to","100","last"],"mappings":"AAAAA,uDAAAA;EAAAA;;EAAAA;EAUAA,OAAAC;EAAAA;;IAAAA;;IAAcA,OAAAC;IAAAA;;MAAAA;;MAEdA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QACEC;QAAAA;;UAAAA;;AAAAA;;UACEC,IAAAC,aAAAA,CAAY,OAAZA;;AAEAC,UAAAA,0BAAAA,sBAAeC,KAAfD;AAAAA,YAAAA;;;YACEE,aAAcD;YACdD,OAAAG,CAAAA,kBAAcC,gBAAUC,KAAAA,CAAAA,CAAxBF;UAFFH,CAAAA,GAAAA;UAKAH,OAAAS,8BAAAA,0BArBJ,EAqBIA;AAAAA,YAAAA;;YAAAA;;;;YArBJ;;YAqBuB;YACjBA,OAAWC,MAAXJ,eAAWI,YAAAA,EAAU,MAACC,IAAD,CAAVD,EAAkBE,KAADC,SAAAA,CAAAA,CAAjBH;UADbD,CAAAA,IAAAA;QARFT,GAAAA,WAAAA,EAAac,iBAAbd;QAaAC,IAAAC,aAAAA,CAAY,MAAZ,EAAmB,OAAnBA;;AAEAC,QAAAA,0BAAAA,sBAAeY,IAAfZ;AAAAA,UAAAA;;;UACEa,YAASD;UACTZ,OAAAc,CAAAA,aAAS,EAATA;QAFFd,CAAAA,GAAAA;;AAKAe,QAAAA,oBAAAA,gBAASd,KAATc;AAAAA,UAAAA;;UAAAA;;;UACED,UAAOE,OAAAA,CAAGC,UAAIZ,KAAAA,CAAKJ,KAALI,CAAPW;UACPD,OAAAN,KAAKS,MAAAA,CAAAA;QAFPH,CAAAA,GAAAA;;AAKAI,QAAAA,oBAAAA,gBAASlB,KAATkB;AAAAA,UAAAA;;UAAAA;;;UACEL,UAAOE,OAAAA,CAAGC,UAAIZ,KAAAA,CAAKe,CAAAA,CAAAA,CAACC,MAAAA,CAAAA,CAANhB,CAAPW;UACPG,OAAAV,KAAKS,MAAAA,CAAAA;QAFPC,CAAAA,GAAAA;;AAKAG,QAAAA,kBAAAA,cAAOrB,KAAPqB;AAAAA,UAAAA;;UAAAA;;;UACER,UAAOE,OAAAA,CAAGC,UAAIZ,KAAAA,CAAKkB,CAAAA,GAAAA,CAAGF,MAAAA,CAAAA,CAARhB,CAAPW;UACPM,OAAAb,KAAKS,MAAAA,CAAAA;QAFPI,CAAAA,GAAAA;QAKA1B,OAAAU,8BAAAA,0BAhDF,EAgDEA;AAAAA,UAAAA;;UAAAA;;;;UAhDF;;UAgDqB;UACjBA,OAAWC,MAAXO,UAAMU,MAAAA,CAAAA,CAAKjB,YAAAA,EAAU,MAACC,IAAD,CAAVD,EAAkBE,KAADC,SAAAA,CAAAA,CAAjBH;QADbD,CAAAA,IAAAA;MApCFV,GAAAA,WAAAA,EAAkBe,iBAAlBf;IAFcD,GAAAA,WAAAA,EAAYgB,iBAAZhB;EAAdD,GAAAA,WAAAA,EAAAA,IAAAA;AAVAD;"}},{"offset":{"line":28468,"column":0},"map":{"version":3,"sourceRoot":"","sources":["paggio/css.rb"],"sourcesContent":["#--\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#                    Version 2, December 2004\n#\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n#\n#  0. You just DO WHAT THE FUCK YOU WANT TO.\n#++\n\nrequire 'paggio/css/unit'\nrequire 'paggio/css/color'\nrequire 'paggio/css/definition'\nrequire 'paggio/css/rule'\nrequire 'paggio/css/font'\nrequire 'paggio/css/animation'\n\nclass Paggio\n\nclass CSS < BasicObject\n  def self.selector(list)\n    result = ''\n\n    list.each {|part|\n      if part.start_with?('&')\n        result += part[1 .. -1]\n      else\n        result += \" \" + part\n      end\n    }\n\n    if result[0] == \" \"\n      result[1 .. -1]\n    else\n      result\n    end\n  end\n\n  attr_reader :rules, :media, :fonts, :animations\n\n  def initialize(defer: false, &block)\n    ::Kernel.raise ::ArgumentError, 'no block given' unless block\n\n    @selector   = []\n    @current    = []\n    @rules      = []\n    @fonts      = []\n    @animations = []\n    \n    @block      = block\n\n    build! unless defer\n  end\n\n  def build!(force_call: false)\n    if !force_call && @block.arity == 0\n      instance_exec(&@block)\n    else\n      @block.call(self)\n    end\n    @block = nil\n  end\n\n  def rule(*names, &block)\n    return unless block\n\n    if names.any? { |n| n.include? ',' }\n      ::Kernel.raise ::ArgumentError, 'selectors cannot contain commas'\n    end\n\n    names.each {|name|\n      @selector << name\n      @current  << Rule.new(CSS.selector(@selector), @media)\n\n      block.call\n\n      @selector.pop\n      @rules << @current.pop\n    }\n  end\n\n  def media(query, *args, &block)\n    if block\n      old, @media = @media, query\n      block.call\n      @media = old\n    else\n      method_missing(:media, query, *args)\n    end\n  end\n\n  def font(name, *args, &block)\n    if block\n      @current << Font.new(name)\n      block.call\n      @fonts << @current.pop\n    else\n      method_missing(:font, name, *args)\n    end\n  end\n\n  def animation(name, *args, &block)\n    if block\n      @current << Animation.new(name)\n      block.call\n      @animations << @current.pop\n    else\n      method_missing(:animation, name, *args)\n    end\n  end\n\n  # this is needed because the methods inside the rule blocks are actually\n  # called on the CSS object\n  def method_missing(*args, &block)\n    @current.last.__send__(*args, &block)\n  end\nend\n\nclass HTML < BasicObject\n  def style(&block)\n    (@current || @roots) << CSS.new(&block)\n  end\nend\n\nend\n"],"names":["<top (required)>","self","require","<class:Paggio>","<class:CSS>","selector","list","result","each","block in selector","part","start_with?","block (2 levels) in selector","+","[]","1","-1","0","attr_reader","initialize","$kwargs","block","Kernel","raise","ArgumentError","@selector","@current","@rules","@fonts","@animations","@block","defer","build!","force_call","arity","instance_exec","to_proc","call","rule","any?","names","block in rule","n","block (2 levels) in rule","include?","name","<<","Rule","new","CSS","@media","pop","media","query","old","method_missing","args","font","Font","animation","Animation","__send__","last","BasicObject","<class:HTML>","style","$ret_or_1","@roots"],"mappings":"AAAAA,6CAAAA;EAAAA;;EAAAA;;EAUAC,IAAAC,SAAAA,CAAQF,iBAARE;EACAD,IAAAC,SAAAA,CAAQF,kBAARE;EACAD,IAAAC,SAAAA,CAAQF,uBAARE;EACAD,IAAAC,SAAAA,CAAQF,iBAARE;EACAD,IAAAC,SAAAA,CAAQF,iBAARE;EACAD,IAAAC,SAAAA,CAAQF,sBAARE;EAEAF,OAAAG;EAAAA;;IAAAA;;;IAEAC;IAAAA;;MAAAA;;AAAAA;;MACEC,MAAIJ,IAAJI,eAAAA,oBAAkBC,IAAlBD;AAAAA,QAAAA;;;QACEE,SAASF;QAELG,MAAJF,IAAIE,QAAAA,EAAAA,EAAAA,EAAJC,aAAYC,IAAZD;;;UAAY;UACV,IAAA,QAAGC,IAAIC,gBAAAA,CAAaC,GAAbD,CAAP,CAAA;YACEC,OAAAL,CAAAA,SAAOM,SAAPN,MAAOM,EAAGH,IAAII,OAAAA,CAAC,OAAAC,CAAA,EAAKC,EAAL,QAADF,CAAPD,CAAPN;UADF;YAGEK,OAAAL,CAAAA,SAAOM,SAAPN,MAAOM,EAAOA,SAAJD,GAAIC,EAAEH,IAAFG,CAAPA,CAAPN;UAHF,EADFE,CAAAA,GAAID;QAQJ,IAAA,MAAGD,MAAMO,OAAAA,CAACG,CAADH,CAAT,EAAgBT,GAAhB,CAAA;UACEA,OAAAE,MAAMO,OAAAA,CAAC,OAAAC,CAAA,EAAKC,EAAL,QAADF;QADR;UAGET,OAAAE;QAHF;MAXFF,CAAAA,GAAAA;MAkBAJ,IAAAiB,aAAAA,CAAY,OAAZ,EAAoB,OAApB,EAA4B,OAA5B,EAAoC,YAApCA;;AAEAC,MAAAA,0BAAAA,sBAxCFC,OAwCED;AAAAA,QAAAA;;QAAAA;;;;QAxCF;QAAA;QAAA;QAAA;QAAA;;QAwCiB;QAAA,2BAAO;QACpB,KAAA,QAAwDE,KAAxD,CAAA;UAAAC,OAAQC,OAAAA,CAAOC,oBAAf,EAAgCL,gBAAxBI;QAAR;QAEAE,gBAAc;QACdC,eAAc;QACdC,aAAc;QACdC,aAAc;QACdC,kBAAc;QAEdC,aAAcT;QAEd,IAAA,QAAcU,KAAd,CAAA;UAnDJZ,OAAA;QAmDI;UAAAA,OAAAlB,IAAA+B,WAAAA,CAAAA;QAAA;MAXFb,CAAAA,IAAAA;;AAcAa,MAAAA,sBAAAA,2BAtDFZ,OAsDEY;AAAAA,QAAAA;;;;QAtDF;QAAA;QAAA;QAAA;QAAA;;QAsDa;QAAA,qCAAY;QACrB,IAAG,CAAA,KAACC,UAAD,CAAA,IAAA,CAAA,MAAeH,UAAMI,OAAAA,CAAAA,CAArB,EAA+BjB,CAA/B,CAAA,CAAA,CAAH;UACEkB,MAAAlC,IAAAkC,iBAAAA,EAAAA,EAAAA,EAAeL,UAADM,SAAAA,CAAAA,CAAdD;QADF;UAGEL,UAAMO,MAAAA,CAAMpC,IAANoC;QAHR;QAKAL,OAAAF,CAAAA,aAAS,GAATA;MANFE,CAAAA,IAAAA;;AASAM,MAAAA,oBAAAA,gBA/DF,EA+DEA;AAAAA,QAAAA;;QAAAA;;;;QA/DF;;QA+DW;QACP,KAAA,QAAcjB,KAAd,CAAA;UAAA,OAAA;QAAA;QAEA,IAAA,QAAQkB,MAALC,KAAKD,QAAAA,EAAAA,EAAAA,EAALE,aAAcC,CAAdD;;;UAAc;UAAGE,OAAAD,CAACE,aAAAA,CAAUD,GAAVC,EAAlBH,CAAAA,GAAKF,CAAR,CAAA;UACEjB,OAAQC,OAAAA,CAAOC,oBAAf,EAAgCc,iCAAxBf;QADV;QAIAe,OAAK9B,MAALgC,KAAKhC,QAAAA,EAAAA,EAAAA,EAALiC,aAAaI,IAAbJ,EAAAE;AAAAA;AAAAA;AAAAA;AAAAA;;;;UAAa;UACXlB,aAAUqB,OAAAA,CAAGD,IAAHC;UACVpB,YAAUoB,OAAAA,CAAGC,UAAIC,KAAAA,CAAKC,SAAG5C,UAAAA,CAAUoB,aAAVpB,CAAZ,EAAkC6C,UAA9BF,CAAPF;UAEVzB,KAAKgB,MAAAA,CAAAA;UAELZ,aAAS0B,KAAAA,CAAAA;UACTR,OAAAhB,UAAOmB,OAAAA,CAAGpB,YAAQyB,KAAAA,CAAAA,CAAXL,EAPTL,CAAAA,GAAAA,qBAAAA,CAAKjC;MAPP8B,CAAAA,IAAAA;;AAkBAc,MAAAA,qBAAAA,iBAAUC,KAAD,EAjFX,EAiFED;AAAAA,QAAAA;;QAAAA;;;;QAjFF;;QAiFmB;QACf,IAAA,QAAG/B,KAAH,CAAA;;UACE,KAAc,CAAA6B,UAAA,EAAQG,KAAR,CAAd,EAAAC,CAAAA,MAAA,KAAAA,CAAA,EAAKJ,CAAAA,aAAL,KAAKA,CAAL;UACA7B,KAAKgB,MAAAA,CAAAA;UACLe,OAAAF,CAAAA,aAASI,GAATJ;QAHF;UAKEE,OAAAG,MAAAtD,IAAAsD,kBAAAA,EAAA,CAAe,OAAf,EAAuBF,KAAvB,CAAA,QAA8B,MAACG,IAAD,CAA9B,CAAAD;QALF;MADFH,CAAAA,IAAAA;;AAUAK,MAAAA,oBAAAA,gBAASZ,IAAD,EA3FV,EA2FEY;AAAAA,QAAAA;;QAAAA;;;;QA3FF;;QA2FiB;QACb,IAAA,QAAGpC,KAAH,CAAA;;UACEK,YAASoB,OAAAA,CAAGY,UAAIV,KAAAA,CAAKH,IAALG,CAAPF;UACTzB,KAAKgB,MAAAA,CAAAA;UACLoB,OAAA7B,UAAOkB,OAAAA,CAAGpB,YAAQyB,KAAAA,CAAAA,CAAXL;QAHT;UAKEW,OAAAF,MAAAtD,IAAAsD,kBAAAA,EAAA,CAAe,MAAf,EAAsBV,IAAtB,CAAA,QAA4B,MAACW,IAAD,CAA5B,CAAAD;QALF;MADFE,CAAAA,IAAAA;;AAUAE,MAAAA,yBAAAA,qBAAcd,IAAD,EArGf,EAqGEc;AAAAA,QAAAA;;QAAAA;;;;QArGF;;QAqGsB;QAClB,IAAA,QAAGtC,KAAH,CAAA;;UACEK,YAASoB,OAAAA,CAAGc,eAASZ,KAAAA,CAAKH,IAALG,CAAZF;UACTzB,KAAKgB,MAAAA,CAAAA;UACLsB,OAAA9B,eAAYiB,OAAAA,CAAGpB,YAAQyB,KAAAA,CAAAA,CAAXL;QAHd;UAKEa,OAAAJ,MAAAtD,IAAAsD,kBAAAA,EAAA,CAAe,WAAf,EAA2BV,IAA3B,CAAA,QAAiC,MAACW,IAAD,CAAjC,CAAAD;QALF;MADFI,CAAAA,IAAAA;MAYAvD,OAAAmD,8BAAAA,0BAjHF,EAiHEA;AAAAA,QAAAA;;QAAAA;;;;QAjHF;;QAiHqB;QACjBA,OAAaM,MAAbnC,YAAQoC,MAAAA,CAAAA,CAAKD,YAAAA,EAAU,MAACL,IAAD,CAAVK,EAAkBxC,KAADe,SAAAA,CAAAA,CAAjByB;MADfN,CAAAA,IAAAA;IA9FFnD,GAAAA,WAAAA,EAAY2D,iBAAZ3D;IAmGAD,OAAA6D;IAAAA;;MAAAA;;AAAAA;MACEA,OAAAC,qBAAAA,iBAAAA;AAAAA,QAAAA;;QAAAA;;;QACEA,OAAC,CAAA,QAAAC,CAAAA,YAAAxC,YAAAwC,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAAYC,UAAZ,CAAA,CAAoBrB,OAAAA,CAAME,MAAHC,SAAGD,OAAAA,EAAAA,EAAAA,EAAM3B,KAADe,SAAAA,CAAAA,CAALY,CAANF;MADvBmB,CAAAA,GAAAA;IADFD,GAAAA,WAAAA,EAAaD,iBAAbC;EArGA7D,GAAAA,WAAAA,EAAAA,IAAAA;AAjBAH;"}},{"offset":{"line":28692,"column":0},"map":{"version":3,"sourceRoot":"","sources":["./stringio.rb"],"sourcesContent":["class StringIO < IO\n  def self.open(string = \"\", mode = nil, &block)\n    io  = new(string, mode)\n    res = block.call(io)\n    io.close\n\n    res\n  end\n\n  attr_accessor :string\n\n  def initialize(string = \"\", mode = 'rw')\n    @string   = string\n    @position = 0\n\n    super(nil, mode)\n  end\n\n  def eof?\n    check_readable\n\n    @position == @string.length\n  end\n\n  def seek(pos, whence = IO::SEEK_SET)\n    # Let's reset the read buffer, because it will be most likely wrong\n    @read_buffer = ''\n\n    case whence\n    when IO::SEEK_SET\n      raise Errno::EINVAL unless pos >= 0\n\n      @position = pos\n\n    when IO::SEEK_CUR\n      if @position + pos > @string.length\n        @position = @string.length\n      else\n        @position += pos\n      end\n\n    when IO::SEEK_END\n      if pos > @string.length\n        @position = 0\n      else\n        @position -= pos\n      end\n    end\n\n    0\n  end\n\n  def tell\n    @position\n  end\n\n  def rewind\n    seek 0\n  end\n\n  def write(string)\n    check_writable\n\n    # Let's reset the read buffer, because it will be most likely wrong\n    @read_buffer = ''\n\n    string = String(string)\n\n    if @string.length == @position\n      @string   += string\n      @position += string.length\n    else\n      before = @string[0 .. @position - 1]\n      after  = @string[@position + string.length .. -1]\n\n      @string   = before + string + after\n      @position += string.length\n    end\n  end\n\n  def read(length = nil, outbuf = nil)\n    check_readable\n\n    return if eof?\n\n    string = if length\n      str = @string[@position, length]\n      @position += length\n      @position = @string.length if @position > @string.length\n      str\n    else\n      str = @string[@position .. -1]\n      @position = @string.length\n      str\n    end\n\n    if outbuf\n      outbuf.write(string)\n    else\n      string\n    end\n  end\n\n  def sysread(length)\n    check_readable\n\n    read(length)\n  end\n\n  alias eof eof?\n  alias pos tell\n  alias pos= seek\n  alias readpartial read\nend\n"],"names":["<top (required)>","<class:StringIO>","open","self","string","mode","io","new","res","block","call","close","attr_accessor","initialize","@string","@position","0","eof?","check_readable","==","length","seek","pos","whence","IO::SEEK_SET","IO","@read_buffer","$ret_or_1",">=","raise","Errno::EINVAL","Errno","IO::SEEK_CUR",">","+","IO::SEEK_END","-","tell","rewind","write","check_writable","String","before","[]","1","after","-1","read","outbuf","str","sysread"],"mappings":"AAAAA,2CAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;AAAAA;;IACEC,MAAIC,IAAJD,WAAAA,gBAAcE,MAAD,EAAcC,IAA3BH;AAAAA,MAAAA;;MAAAA;;;;MAAc,6BAASA,EAAT;;MAAa,yBAAO,GAAP;MACzBI,KAAMH,IAAAI,KAAAA,CAAIH,MAAJ,EAAYC,IAAZE;MACNC,MAAMC,KAAKC,MAAAA,CAAMJ,EAANI;MACXJ,EAAEK,OAAAA,CAAAA;MAEFT,OAAAM;IALFN,CAAAA,IAAAA;IAQAC,IAAAS,eAAAA,CAAc,QAAdA;;AAEAC,IAAAA,0BAAAA,sBAAeT,MAAD,EAAcC,IAA5BQ;AAAAA,MAAAA;;MAAAA;;;MAAe,6BAASA,EAAT;;MAAa,yBAAOA,IAAP;MAC1BC,cAAYV;MACZW,gBAAYC;MAEZH,OAAA,OAAAV,IAAA,EAAA,0DAAA,cAAA,EAAA,CAAM,GAAN,EAAWE,IAAX,CAAA,EAAA,IAAA;IAJFQ,CAAAA,IAAAA;;AAOAI,IAAAA,oBAAAA,8BAAAA;AAAAA,MAAAA;;;MACEd,IAAAe,gBAAAA,CAAAA;MAEAD,OAAAF,aAAUI,OAAAA,CAAGL,WAAOM,QAAAA,CAAAA,CAAVD;IAHZF,CAAAA,GAAAA;;AAMAI,IAAAA,oBAAAA,gBAASC,GAAD,EAAMC,MAAdF;AAAAA,MAAAA;;;;MAAc,6BAASG,IAAAC,QAAAD,aAAT;MAEZE,mBAAeL;MAGf,IAAA,QAAKG,IAAAC,QAAAD,aAAL,EADAG,CAAAA,YAAKJ,MAALI,CACA,CAAA;;QACE,KAAA,QAA+BC,OAAJN,GAAIM,EAAGZ,CAAHY,CAA/B,CAAA;UAAAzB,IAAA0B,OAAAA,CAAMC,IAAAC,WAAAD,WAAND;QAAA;QAEAd,gBAAYO;MAHd,OAKA,IAAA,QAAKU,IAAAP,QAAAO,aAAL,EAlCJ,SAkCI,CAAA;QACE,IAAA,QAAmBC,OAANC,SAAVnB,aAAUmB,EAAEZ,GAAFY,CAAMD,EAAEnB,WAAOM,QAAAA,CAAAA,CAATa,CAAnB,CAAA;UACElB,gBAAYD,WAAOM,QAAAA,CAAAA;QADrB;UAGEL,gBAAUmB,SAAVnB,aAAUmB,EAAGZ,GAAHY;QAHZ;MADF,OAOA,IAAA,QAAKC,IAAAV,QAAAU,aAAL,EAzCJ,SAyCI,CAAA;QACE,IAAA,QAAOF,OAAJX,GAAIW,EAAEnB,WAAOM,QAAAA,CAAAA,CAATa,CAAP,CAAA;UACElB,gBAAYC;QADd;UAGED,gBAAUqB,UAAVrB,aAAUqB,EAAGd,GAAHc;QAHZ;MADF;QAbA;MAaA;MAQAf,OAAAL;IAzBFK,CAAAA,IAAAA;;AA4BAgB,IAAAA,oBAAAA,gBAAAA;AAAAA,MAAAA;;MACEA,OAAAtB;IADFsB,CAAAA,GAAAA;;AAIAC,IAAAA,sBAAAA,kBAAAA;AAAAA,MAAAA;;MACEA,OAAAnC,IAAAkB,MAAAA,CAAKL,CAALK;IADFiB,CAAAA,GAAAA;;AAIAC,IAAAA,qBAAAA,iBAAUnC,MAAVmC;AAAAA,MAAAA;;;MACEpC,IAAAqC,gBAAAA,CAAAA;MAGAd,mBAAea;MAEfnC,SAASD,IAAAsC,QAAAA,CAAOrC,MAAPqC;MAET,IAAA,MAAG3B,WAAOM,QAAAA,CAAAA,CAAV,EAAqBL,aAArB,CAAA;;QACED,cAAUoB,SAAVpB,WAAUoB,EAAG9B,MAAH8B;QACVK,OAAAxB,CAAAA,gBAAUmB,SAAVnB,aAAUmB,EAAG9B,MAAMgB,QAAAA,CAAAA,CAATc,CAAVnB;MAFF;;QAIE2B,SAAS5B,WAAO6B,OAAAA,CAAC,gBAAA3B,CAAA,EAAeoB,UAAVrB,aAAUqB,EAAEQ,CAAFR,CAAf,QAADO;QAChBE,QAAS/B,WAAO6B,OAAAA,CAAC,gBAAUT,SAAVnB,aAAUmB,EAAE9B,MAAMgB,QAAAA,CAAAA,CAARc,CAAV,EAA6BY,EAA7B,QAADH;QAEhB7B,cAA4BoB,SAATA,SAAPQ,MAAOR,EAAE9B,MAAF8B,CAASA,EAAEW,KAAFX;QAC5BK,OAAAxB,CAAAA,gBAAUmB,SAAVnB,aAAUmB,EAAG9B,MAAMgB,QAAAA,CAAAA,CAATc,CAAVnB;MARF;IARFwB,CAAAA,GAAAA;;AAoBAQ,IAAAA,oBAAAA,gBAAS3B,MAAD,EAAe4B,MAAvBD;AAAAA,MAAAA;;;;MAAS,6BAAS,GAAT;;MAAc,6BAAS,GAAT;MACrB5C,IAAAe,gBAAAA,CAAAA;MAEA,IAAA,QAAUf,IAAAc,SAAAA,CAAAA,CAAV,CAAA;QAAA,OAAA;MAAA;MAEAb,SAAS,CAAA,QAAGgB,MAAH,CAAA,GAAA,CACP2B,CAAAE,CAAAA,MAAMnC,WAAO6B,OAAAA,CAAC5B,aAAR,EAAmBK,MAAZuB,CAAbM,GACAlC,CAAAA,gBAAUmB,SAAVnB,aAAUmB,EAAGd,MAAHc,CAAVnB,GACA,CAAA,QAAwCkB,OAAVlB,aAAUkB,EAAEnB,WAAOM,QAAAA,CAAAA,CAATa,CAAxC,CAAA,GAAA,CAAAlB,CAAAA,gBAAYD,WAAOM,QAAAA,CAAAA,CAAnBL,CAAA,IAAA,GAAA,GACAkC,GAHAF,CADO,IAAA,CAMPA,CAAAE,CAAAA,MAAMnC,WAAO6B,OAAAA,CAAC,gBAAA5B,aAAA,EAAa+B,EAAb,QAADH,CAAbM,GACAlC,CAAAA,gBAAYD,WAAOM,QAAAA,CAAAA,CAAnBL,GACAkC,GAFAF,CANO,CAAA;MAWT,IAAA,QAAGC,MAAH,CAAA;QACED,OAAAC,MAAMT,OAAAA,CAAOnC,MAAPmC;MADR;QAGEQ,OAAA3C;MAHF;IAhBF2C,CAAAA,IAAAA;;AAuBAG,IAAAA,uBAAAA,mBAAY9B,MAAZ8B;AAAAA,MAAAA;;;MACE/C,IAAAe,gBAAAA,CAAAA;MAEAgC,OAAA/C,IAAA4C,MAAAA,CAAK3B,MAAL2B;IAHFG,CAAAA,GAAAA;IAMA,aAAM,KAAN,EAAU,MAAV;IACA,aAAM,KAAN,EAAU,MAAV;IACA,aAAM,MAAN,EAAW,MAAX;IACAjD,OAAA,aAAM,aAAN,EAAkB,MAAlB;EAhHFA,GAAAA,WAAAA,EAAiBwB,QAAjBxB;AAAAD;"}},{"offset":{"line":28839,"column":0},"map":{"version":3,"sourceRoot":"","sources":["paggio/formatter.rb"],"sourcesContent":["#--\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#                    Version 2, December 2004\n#\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n#\n#  0. You just DO WHAT THE FUCK YOU WANT TO.\n#++\n\nrequire 'stringio'\n\nclass Paggio\n\nclass Formatter\n  def self.to_h\n    @formatters ||= {}\n  end\n\n  def self.for(klass, &block)\n    if block\n      to_h[klass] = block\n    else\n      to_h[klass]\n    end\n  end\n\n  def self.options(options, &block)\n    old = OPTIONS.dup\n    Utils.deep_merge!(OPTIONS, options)\n\n    result = block.call\n\n    OPTIONS.replace(old)\n\n    result\n  end\n\n  OPTIONS = {\n    indent: {\n      level: 0,\n      with:  \"\\t\"\n    }\n  }\n\n  def initialize(io = nil, options = {})\n    if Hash === io\n      @io      = StringIO.new\n      @options = io\n    else\n      @io      = io || StringIO.new\n      @options = options\n    end\n\n    @options = OPTIONS.merge(@options)\n  end\n\n  def format(item)\n    Formatter.to_h.each {|klass, block|\n      if klass === item\n        block.call(self, item)\n        break\n      end\n    }\n\n    self\n  end\n\n  def to_s\n    @io.string\n  end\n\n  def indent?(&block)\n    @options[:indent][:level]\n  rescue\n    false\n  end\n\n  def indent(&block)\n    if indent?\n      if block\n        @options[:indent][:level] += 1\n        block.call\n        @options[:indent][:level] -= 1\n      else\n        @options[:indent][:level] += 1\n      end\n    else\n      block.call if block\n    end\n  end\n\n  def deindent\n    if indent?\n      @options[:indent][:level] -= 1\n    end\n  end\n\n  def print(text)\n    if level = indent?\n      text.lines.each {|line|\n        @io.puts \"#{@options[:indent][:with] * level}#{line.chomp}\"\n      }\n    else\n      @io.print text\n    end\n  end\n\n  def escape(string)\n    string.to_s.gsub(/[\"><']|&(?!([a-zA-Z]+|(#\\d+));)/, {\n      '&' => '&amp;',\n      '>' => '&gt;',\n      '<' => '&lt;',\n      '\"' => '&quot;',\n      \"'\" => '&#39;' })\n  end\nend\n\nFormatter.for HTML do |f, item|\n  case item.version\n  when 5\n    f.print '<!DOCTYPE html>'\n  end\n\n  f.print '<html>'\n  f.indent {\n    item.each {|root|\n      f.format(root)\n    }\n  }\n  f.print '</html>'\nend\n\nFormatter.for HTML::Element do |f, item|\n  name, attributes, class_names = item.instance_eval {\n    [@name, @attributes, @class_names]\n  }\n\n  if attributes.empty? && class_names.empty?\n    f.print \"<#{name}>\"\n  else\n    attrs = attributes.map {|key, value|\n      %Q{#{f.escape(key)}=\"#{f.escape(value)}\"}\n    }\n\n    unless class_names.empty?\n      attrs << %Q{class=\"#{f.escape(class_names.join(' '))}\"}\n    end\n\n    f.print \"<#{name} #{attrs.join(' ')}>\"\n  end\n\n  next if %w[\n    area base br col embed hr img input keygen link\n    menuitem meta param source track wbr\n  ].include?(name.to_s.downcase)\n\n  f.indent {\n    if inner = item.instance_eval { @inner_html }\n      f.print inner\n    else\n      item.each {|child|\n        case child\n        when String\n          f.print f.escape(child)\n\n        when CSS\n          f.print '<style>'\n          f.indent {\n            f.format(child)\n          }\n          f.print '</style>'\n\n        else\n          f.format(child)\n        end\n      }\n    end\n  }\n\n  f.print \"</#{name}>\"\nend\n\nFormatter.for CSS::Definition::Style do |f, style|\n  f.print \"#{style.name}: #{style.value}#{' !important' if style.important};\"\nend\n\nFormatter.for CSS do |f, item|\n  item.fonts.each {|font|\n    f.print '@font-face {'\n    f.indent {\n      font.each {|style|\n        f.format style\n      }\n    }\n    f.print '}'\n  }\n\n  item.animations.each {|animation|\n    ['', '-webkit-', '-moz-', '-o-'].each {|platform|\n      f.print \"@#{platform}keyframes #{animation.name} {\"\n      animation.steps.each {|step|\n        f.print \"#{step.value} {\"\n        step.each {|style|\n          f.format style\n        }\n        f.print '}'\n      }\n      f.print '}'\n    }\n  }\n\n  item.rules.reverse.each {|rule|\n    next if rule.empty?\n\n    if m = rule.media\n      f.print \"@media #{m} {\"\n      f.indent\n    end\n\n    f.print \"#{rule.selector} {\"\n    f.indent {\n      rule.each {|style|\n        f.format style\n      }\n    }\n    f.print '}'\n\n    if rule.media\n      f.print '}'\n      f.deindent\n    end\n  }\nend\n\nend\n"],"names":["<top (required)>","self","require","<class:Paggio>","<class:Formatter>","to_h","@formatters","$ret_or_1","for","klass","block","$writer","[]=","-","1","[]","options","old","OPTIONS","dup","Utils","deep_merge!","result","call","replace","0","initialize","io","Hash","@io","StringIO","new","@options","merge","format","item","each","Formatter","block in format","block (2 levels) in format","to_s","string","indent?","StandardError","indent","$binary_op_recvr_tmp_1","+","$binary_op_recvr_tmp_2","$binary_op_recvr_tmp_3","deindent","$binary_op_recvr_tmp_4","print","text","level","lines","block in print","line","block (2 levels) in print","puts","*","chomp","escape","gsub","HTML","block in <class:Paggio>","f","block (2 levels) in <class:Paggio>","5","version","block (3 levels) in <class:Paggio>","root","block (4 levels) in <class:Paggio>","HTML::Element","instance_eval","@name","@attributes","@class_names","name","attributes","class_names","empty?","attrs","map","key","value","<<","join","include?","downcase","inner","@inner_html","child","String","CSS","block (5 levels) in <class:Paggio>","CSS::Definition::Style","CSS::Definition","style","important","fonts","font","animations","animation","platform","steps","step","block (6 levels) in <class:Paggio>","rules","reverse","rule","m","media","selector"],"mappings":"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"}},{"offset":{"line":29187,"column":0},"map":{"version":3,"sourceRoot":"","sources":["./paggio.rb"],"sourcesContent":["#--\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#                    Version 2, December 2004\n#\n#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n#   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n#\n#  0. You just DO WHAT THE FUCK YOU WANT TO.\n#++\n\nrequire 'paggio/utils'\nrequire 'paggio/html'\nrequire 'paggio/css'\nrequire 'paggio/formatter'\n\nclass Paggio\n  def self.options(options, &block)\n    Formatter.options(options, &block)\n  end\n\n  def self.indent(options, &block)\n    options(indent: options, &block)\n  end\n\n  def self.css(*args, &block)\n    Formatter.new.format(CSS.new(*args, &block)).to_s\n  end\n\n  def self.html(*args, &block)\n    Formatter.new.format(HTML.new(*args, &block)).to_s\n  end\n\n  def self.html!(&block)\n    Formatter.new.tap {|f|\n      HTML.new(&block).each {|root|\n        f.format root\n      }\n    }.to_s\n  end\nend\n"],"names":["<top (required)>","self","require","<class:Paggio>","options","Formatter","block","to_proc","indent","css","new","format","CSS","args","to_s","html","HTML","html!","tap","block in html!","f","block (2 levels) in html!","each","root","block (3 levels) in html!"],"mappings":"AAAAA,yCAAAA;EAAAA;;EAAAA;;EAUAC,IAAAC,SAAAA,CAAQF,cAARE;EACAD,IAAAC,SAAAA,CAAQF,aAARE;EACAD,IAAAC,SAAAA,CAAQF,YAARE;EACAD,IAAAC,SAAAA,CAAQF,kBAARE;EAEAF,OAAAG;EAAAA;;IAAAA;;;IACEC,MAAIH,IAAJG,cAAAA,mBAAiBA,OAAjBA;AAAAA,MAAAA;;MAAAA;;;MACEA,OAASA,MAATC,eAASD,WAAAA,EAAAA,CAASA,OAATA,CAAAA,EAAmBE,KAADC,SAAAA,CAAAA,CAAlBH;IADXA,CAAAA,GAAAA;IAIAI,MAAIP,IAAJO,aAAAA,kBAAgBJ,OAAhBI;AAAAA,MAAAA;;MAAAA;;;MACEA,OAAAJ,MAAAH,IAAAG,WAAAA,EAAAA,CAAQ,oBAAA,UAAQA,OAAR,EAARA,CAAAA,EAA0BE,KAADC,SAAAA,CAAAA,CAAzBH;IADFI,CAAAA,GAAAA;IAIAC,MAAIR,IAAJQ,UAAAA,eAxBF,EAwBEA;AAAAA,MAAAA;;MAAAA;;;;MAxBF;;MAwBe;MACXA,OAAAJ,eAASK,KAAAA,CAAAA,CAAIC,QAAAA,CAAWD,MAAHE,SAAGF,OAAAA,EAAK,MAACG,IAAD,CAALH,EAAaJ,KAADC,SAAAA,CAAAA,CAAZG,CAAXC,CAA+BG,MAAAA,CAAAA;IAD9CL,CAAAA,IAAAA;IAIAM,MAAId,IAAJc,WAAAA,gBA5BF,EA4BEA;AAAAA,MAAAA;;MAAAA;;;;MA5BF;;MA4BgB;MACZA,OAAAV,eAASK,KAAAA,CAAAA,CAAIC,QAAAA,CAAYD,MAAJM,UAAIN,OAAAA,EAAK,MAACG,IAAD,CAALH,EAAaJ,KAADC,SAAAA,CAAAA,CAAZG,CAAZC,CAAgCG,MAAAA,CAAAA;IAD/CC,CAAAA,IAAAA;IAIAZ,OAAAc,MAAIhB,IAAJgB,YAAAA,6BAAAA;AAAAA,MAAAA;;MAAAA;;;MACEA,OAAaC,MAAbb,eAASK,KAAAA,CAAAA,CAAIQ,OAAAA,EAAAA,EAAAA,EAAbC,aAAoBC,CAApBD;;;QAAoB;QAClBE,OAAgBC,MAAZZ,MAAJM,UAAIN,OAAAA,EAAAA,EAAAA,EAAMJ,KAADC,SAAAA,CAAAA,CAALG,CAAYY,QAAAA,EAAAA,EAAAA,EAAhBD,aAAwBE,IAAxBF;;;UAAwB;UACtBG,OAAAJ,CAACT,QAAAA,CAAQY,IAARZ,EADHU,CAAAA,GAAgBC,EADlBH,CAAAA,GAAaD,CAIZJ,MAAAA,CAAAA;IALHG,CAAAA,GAAAA;EAjBFd,GAAAA,WAAAA,EAAAA,IAAAA;AAfAH;"}},{"offset":{"line":29261,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/version.rb"],"sourcesContent":["module Browser\n  VERSION = '0.3.3'\nend\n"],"names":["<top (required)>","<module:Browser>"],"mappings":"AAAAA,kDAAAA;EAAAA;;EAAAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAA,mCAAUA,OAAV;EADFA,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":29273,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/utils.rb"],"sourcesContent":["module Browser\n  Promise = defined?(PromiseV2) ? PromiseV2 : ::Promise\n\n  Size     = Struct.new(:width, :height)\n  Position = Struct.new(:x, :y)\n\n  # {Browser::NativeCachedWrapper} is a special case of {Native::Wrapper}.\n  #\n  # What this module does is it makes sure that your Ruby objects\n  # are mapped 1:1 to your Javascript objects. So that for instance\n  # your `$document.at_css('body')` is always the same Ruby object.\n  #\n  # You can only use it if your final `.new` is of the signature\n  # `.new(native)` and your native (probably DOM) object persists and\n  # doesn't mind arbitrary properties.\n  #\n  # The rule of thumb is: if it does overload `#initialize`'s signature\n  # and not `.new`'s - it won't work. Use {Native::Wrapper} in this case.\n  module NativeCachedWrapper\n    def self.included(klass)\n      klass.include Native::Wrapper\n      klass.extend NativeCachedWrapperClassMethods\n    end\n\n    def restricted?\n      !!@restricted\n    end\n\n    # Change a native reference and make sure the change is reflected on JS\n    # side as well. This method is used by Node#initialize_copy. Please don't\n    # use this method outside of the cloning semantic.\n    def set_native_reference(native)\n      `#{native}.$$opal_native_cached = #{self}`\n      @native = native\n    end\n  end\n\n  module NativeCachedWrapperClassMethods\n    # Check if we don't have access to arbitrary properties of a (presumably)\n    # native object.\n    private def restricted?(native)\n      %x{\n        try {\n          typeof(#{native}.$$try_restricted_access);\n        } catch (e) {\n          if (e.name == 'SecurityError') return true;\n        }\n        return false;\n      }\n    end\n\n    def new(native)\n      # We can't access arbitrary properties if an element is restricted\n      # i.e. the DOM element is an item we can't fully access due to CORS.\n      if restricted?(native)\n        # Let's try to bypass any further initializers... may be ugly, but\n        # works.\n        obj = allocate\n        obj.instance_variable_set :@native, native\n        obj.instance_variable_set :@restricted, true\n        return obj\n      end\n\n      # It's not a native element? Weird, better throw an exception.\n      raise ArgumentError if !native?(native)\n\n      if defined? `#{native}.$$opal_native_cached`\n        `#{native}.$$opal_native_cached`\n      else\n        `#{native}.$$opal_native_cached = #{super(native)}`\n      end\n    end\n  end\nend\n\nclass Object\n  # Encode as URI.\n  #\n  # @deprecated Please use FormData.encode_uri\n  # @return [String] the {Object#to_s} encoded for usage as URI\n  def encode_uri\n    warn \"opal-browser: Object#encode_uri is deprecated. Please use FormData.encode_uri\"\n    FormData.encode_uri(to_s)\n  end\n\n  # Encode as URI component.\n  #\n  # @deprecated Please use FormData.encode\n  # @return [String] the {Object#to_s} encoded for usage as URI component\n  def encode_uri_component\n    warn \"opal-browser: Object#encode_uri_component is deprecated. Please use FormData.encode\"\n    FormData.encode(to_s)\n  end\nend\n\nclass String\n  # Encode as URI component.\n  #\n  # @deprecated Please use FormData.encode\n  # @return [String] the string encoded for usage as URI component\n  def encode_uri_component\n    warn \"opal-browser: String#encode_uri_component is deprecated. Please use FormData.encode\"\n    FormData.encode(self)\n  end\n\n  # Encode as URI.\n  #\n  # @deprecated Please use FormData.encode_uri\n  # @return [String] the string encoded as URI\n  def encode_uri\n    warn \"opal-browser: String#encode_uri is deprecated. Please use FormData.encode_uri\"\n    FormData.encode_uri(self)\n  end\n\n  # Decode as URI component.\n  #\n  # @deprecated Please use FormData.decode\n  # @return [String] the string decoded as URI component\n  def decode_uri_component\n    warn \"opal-browser: String#decode_uri_component is deprecated. Please use FormData.decode\"\n    FormData.decode(self)\n  end\n\n  # Decode as URI.\n  #\n  # @deprecated Please use FormData.decode_uri\n  # @return [String] the string decoded as URI\n  def decode_uri\n    warn \"opal-browser: String#decode_uri is deprecated. Please use FormData.decode_uri\"\n    FormData.decode_uri(self)\n  end\nend\n\nclass Hash\n  # Decode an URL encoded form to a {Hash}.\n  #\n  # @param string [String] the URL encoded form\n  #\n  # @deprecated Please use FormData.parse_query\n  # @return [Hash]\n  def self.decode_uri(string)\n    warn \"opal-browser: Hash.decode_uri is deprecated. Please use FormData.parse_query\"\n    FormData.parse_query(string)\n  end\n\n  # Encode the Hash to an URL form.\n  #\n  # @deprecated Please use FormData.build_query\n  # @return [String] the URL encoded form\n  def encode_uri\n    warn \"opal-browser: Hash#encode_uri is deprecated. Please use FormData.build_query\"\n    FormData.build_query(self)\n  end\nend\n"],"names":["<top (required)>","<module:Browser>","PromiseV2","Promise","Struct","new","<module:NativeCachedWrapper>","included","self","klass","include","Native::Wrapper","Native","extend","NativeCachedWrapperClassMethods","restricted?","@restricted","!","set_native_reference","native$","@native","<module:NativeCachedWrapperClassMethods>","private","obj","allocate","instance_variable_set","native?","raise","ArgumentError","<class:Object>","encode_uri","warn","FormData","to_s","encode_uri_component","encode","<class:String>","decode_uri_component","decode","decode_uri","<class:Hash>","string","parse_query","build_query"],"mappings":"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"}},{"offset":{"line":29437,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/form_data.rb"],"sourcesContent":["module Browser\n\nclass FormData\n  include NativeCachedWrapper\n\n  module Converter\n    # Encode as URI component.\n    #\n    # @return [String] the string encoded for usage as URI component\n    def encode(string)\n      `encodeURIComponent(#{string})`\n    end\n\n    # Decode as URI component.\n    #\n    # @return [String] the string decoded as URI component\n    def decode(string)\n      `decodeURIComponent(#{string})`\n    end\n\n    # Encode as URI.\n    #\n    # @return [String] the string encoded as URI\n    def encode_uri(string)\n      `encodeURI(#{string})`\n    end\n\n    # Decode as URI.\n    #\n    # @return [String] the string decoded as URI\n    def decode_uri(string)\n      `decodeURI(#{string})`\n    end\n\n    # Flattens a hash to build a flat array, later to be formatted to\n    # produce a nested query.\n    #\n    # This code should be compatible with what Rack::Utils#build_nested_query [1]\n    # does.\n    #\n    # [1] https://github.com/rack/rack/blob/master/lib/rack/utils.rb\n    def flatten(value, key=\"\")\n      case value\n      when Hash\n        out = []\n        value.each do |k,v|\n          k = \"#{key}[#{k}]\" if key != ''\n          out += flatten(v,k)\n        end\n        out\n      when Array\n        out = []\n        value.each do |v|\n          k = \"#{key}[]\"\n          out += flatten(v,k)\n        end\n        out\n      else\n        [[key,value]]\n      end\n    end\n\n    # Converts a flat array to a Hash.\n    #\n    # This code should be compatible with what Rack::Utils#parse_nested_query [1]\n    # does.\n    #\n    # [1] https://github.com/rack/rack/blob/master/lib/rack/utils.rb\n    def unflatten(array)\n      out = {}\n      array.each do |k,v|\n        path = [k.split(\"[\").first] + k.scan(/\\[(.*?)\\]/).flatten\n        c = out\n\n        set = proc { |v,weak| } # Do nothing for the first level\n\n        path.each do |i|\n          case i\n          when \"\" # Array\n            set.([], true)\n            set = proc do |v,weak|\n              c << v\n              c = c.last\n            end\n          else # Hash\n            set.({}, true)\n            set = proc do |v,weak|\n              c[i] ||= v\n              c[i] = v if !weak\n              c = c[i]\n            end\n          end\n        end\n        set.(v, false)\n\n      end\n      out\n    end\n\n    # Checks if a query Hash contains any files.\n    def contain_files?(hash)\n      flatten(hash).any? { |k,v| [File, Blob].include?(v.class) }\n    end\n\n    # Convert a query Hash to a query string\n    #\n    # @return [String] the string encoded as URI\n    def build_query(hash, sep=?&)\n      flatten(hash).map { |k,v| encode(k) + ?= + encode(v.to_s) }.join(sep)\n    end\n\n    # Convert a query Hash to a FormData instance\n    #\n    # @return [FormData] the instance of FormData\n    def build_form_data(hash)\n      fd = FormData.create\n      flatten(hash).each { |k,v| fd << [k,v] }\n      fd\n    end\n\n    # Convert a query string to a query Hash\n    #\n    # @return [Hash] the query hash\n    def parse_query(string, sep=?&)\n      unflatten(string.split(sep).map { |s| s.split(?=).map(&method(:decode)) })\n    end\n\n    # Converts a JS native value to a wrapped one if possible.\n    #\n    # @return [String, File, Blob]\n    def from_native(n)\n      %x{\n        var c = #{n}.constructor;\n        if (c === File) {\n          #{n = File.new(n)}\n        }\n        else if (c === Blob) {\n          #{n = Blob.new(n)}\n        }\n      }\n      n\n    end\n  end\n\n  extend Converter\n  include Enumerable\n\n  # Create a new FormData instance\n  def self.create(hash=nil)\n    if Hash === hash\n      FormData.build_form_data(hash)\n    elsif DOM::Element::Form === hash\n      new(`new FormData(#{hash.to_n})`)\n    else\n      new(`new FormData()`)\n    end\n  end\n\n  # Append a tuple to this FormData instance\n  #\n  # @param tuple [Array(String, String), Array(String, Blob), Array(String, File),\n  #               Array(String, Blob, String), Array(String, File, String)]\n  #        a tuple of a key, value and possibly a filename\n  def <<(tuple)\n    key, value, filename = tuple\n\n    unless filename\n      `#@native.append(#{key}, #{Native.convert(value)})`\n    else\n      `#@native.append(#{key}, #{Native.convert(value)}, #{filename})`\n    end\n  end\n\n  # Get a field from this FormData instance with a given name\n  def [](key)\n    FormData.from_native(`#@native.get(#{key})`)\n  end\n\n  # Set a field in this FormData instance with a given name\n  def set(key, value, filename = nil)\n    unless filename\n      `#@native.set(#{key}, #{Native.convert(value)})`\n    else\n      `#@native.set(#{key}, #{Native.convert(value)}, #{filename})`\n    end\n  end\n  alias []= set\n\n  # Convert to hash\n  def to_h\n    hash = {}\n    %x{\n      var pair, v, e = #@native.entries();\n      while (true) {\n        v = e.next();\n        if (v.done) break;\n        pair = v.value;\n        #{hash[`pair[0]`] = FormData.from_native(`pair[1]`)}\n      }\n    }\n    hash\n  end\n\n  # Convert to array\n  def to_a\n    to_h.to_a\n  end\n\n  # Iterate over all elements of this FormData\n  def each(&block)\n    to_h.each(&block)\n  end\n\n  # Checks if a field of this name exists in this FormData instance\n  def include?(key)\n    `#@native.has(#{key})`\n  end\n\n  # Delete a field from this FormData instance\n  def delete(key)\n    `#@native.delete(#{key})`\n  end\nend\n\nend\n"],"names":["<top (required)>","<module:Browser>","<class:FormData>","self","include","NativeCachedWrapper","<module:Converter>","encode","string","decode","encode_uri","decode_uri","flatten","value","key","Hash","$ret_or_1","out","each","block in flatten","k","v","block (2 levels) in flatten","+","Array","unflatten","array","block in unflatten","block (2 levels) in unflatten","path","split","first","scan","c","set","proc","weak","block (3 levels) in unflatten","i","call","<<","block (4 levels) in unflatten","last","$ret_or_2","[]","$writer","[]=","-","1","contain_files?","hash","any?","block in contain_files?","block (2 levels) in contain_files?","File","Blob","include?","class","build_query","sep","map","block in build_query","block (2 levels) in build_query","to_s","join","build_form_data","fd","FormData","create","block in build_form_data","block (2 levels) in build_form_data","parse_query","block in parse_query","s","block (2 levels) in parse_query","method","to_proc","from_native","n","new","extend","Converter","Enumerable","DOM::Element::Form","DOM::Element","DOM","to_n","tuple","filename","@native","Native","convert","to_h","to_a","block","delete"],"mappings":"AAAAA,oDAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAEAA,OAAAC;IAAAA;;MAAAA;;AAAAA;;MACEC,IAAAC,SAAAA,CAAQC,yBAARD;MAEAE;MAAAA;;QAAAA;;;;AAIEC,QAAAA,sBAAAA,kBAAWC,MAAXD;AAAAA;UACEA,OAACA,mBAAqBC,MAAOD;QAD/BA,CAAAA,GAAAA;;AAOAE,QAAAA,sBAAAA,kBAAWD,MAAXC;AAAAA;UACEA,OAACA,mBAAqBD,MAAOC;QAD/BA,CAAAA,GAAAA;;AAOAC,QAAAA,0BAAAA,sBAAeF,MAAfE;AAAAA;UACEA,OAACA,UAAYF,MAAOE;QADtBA,CAAAA,GAAAA;;AAOAC,QAAAA,0BAAAA,sBAAeH,MAAfG;AAAAA;UACEA,OAACA,UAAYH,MAAOG;QADtBA,CAAAA,GAAAA;;AAWAC,QAAAA,uBAAAA,mBAAYC,KAAD,EAAQC,GAAnBF;AAAAA,UAAAA;;;;UAAmB,uBAAIA,EAAJ;UAEjB,IAAA,QAAKG,UAAL,EADAC,CAAAA,YAAKH,KAALG,CACA,CAAA;;YACEC,MAAM;YACDC,MAALL,KAAKK,QAAAA,EAAAA,EAAAA,EAALC,aAAeC,CAAD,EAAGC,CAAjBF,EAAAG;;;;cAAe;;cAAE;cACf,IAAA,OAAsBR,GAAtB,EAA6BQ,EAA7B,CAAA;gBAAAF,IAAI,EAAA,GAAA,CAAGN,GAAH,CAAA,GAAOQ,GAAP,GAAA,CAAUF,CAAV,CAAA,GAAYE;cAAhB;cACAA,OAAAL,CAAAA,MAAIM,SAAJN,GAAIM,EAAGpB,IAAAS,SAAAA,CAAQS,CAAR,EAAUD,CAAVR,CAAHW,CAAJN,EAFFE,CAAAA,GAAAA,qBAAAA,CAAKD;YAILN,OAAAK;UANF,OAOA,IAAA,QAAKO,WAAL,EAlDN,SAkDM,CAAA;;YACEP,MAAM;YACDC,MAALL,KAAKK,QAAAA,EAAAA,EAAAA,EAALC,aAAeE,CAAfF,EAAAG;;;;cAAe;cACbF,IAAI,EAAA,GAAA,CAAGN,GAAH,CAAA,GAAOQ;cACXA,OAAAL,CAAAA,MAAIM,SAAJN,GAAIM,EAAGpB,IAAAS,SAAAA,CAAQS,CAAR,EAAUD,CAAVR,CAAHW,CAAJN,EAFFE,CAAAA,GAAAA,qBAAAA,CAAKD;YAILN,OAAAK;UANF;YAQEL,OAAA,CAAC,CAACE,GAAD,EAAKD,KAAL,CAAD;UARF;QATFD,CAAAA,IAAAA;;AA2BAa,QAAAA,yBAAAA,qBAAcC,KAAdD;AAAAA,UAAAA;;;UACER,MAAM,YAAA;UACDC,MAALQ,KAAKR,QAAAA,EAAAA,EAAAA,EAALS,aAAeP,CAAD,EAAGC,CAAjBM,EAAAC;;;;YAAe;;YAAE;YACfC,OAA4BN,SAArB,CAACH,CAACU,OAAAA,CAAOF,GAAPE,CAAWC,OAAAA,CAAAA,CAAb,CAAqBR,EAAEH,CAACY,MAAAA,CAAM,WAANA,CAAkBpB,SAAAA,CAAAA,CAArBW;YAC5BU,IAAIhB;YAEJiB,MAAMC,MAAAhC,IAAAgC,QAAAA,EAAAA,EAAAA,EAAAP,aAAQP,CAAD,EAAGe,IAAVR;;;cAAQ;;cAAE;cA1ExBS,OAAA,IA0EcT,CAAAA,GAAAO;YAEFjB,MAAJW,IAAIX,QAAAA,EAAAA,EAAAA,EAAJU,aAAcU,CAAdV,EAAAS;;;;cAAc;cAEZ,IAAA,QAAKA,EAAL,EADArB,CAAAA,YAAKsB,CAALtB,CACA,CAAA;;gBACEkB,GAAGK,MAAAA,CAAE,EAAL,EAAS,IAANA;gBACHF,OAAAH,CAAAA,MAAMC,MAAAhC,IAAAgC,QAAAA,EAAAA,EAAAA,EAAAE,aAAShB,CAAD,EAAGe,IAAXC;;;kBAAS;;kBAAE;kBACfJ,CAAEO,OAAAA,CAAGnB,CAAHmB;kBACFC,OAAAR,CAAAA,IAAIA,CAACS,MAAAA,CAAAA,CAALT,EAFII,CAAAA,GAAAF,CAAND;cAFF;;gBAOEA,GAAGK,MAAAA,CAAE,YAAA,EAAL,EAAS,IAANA;gBACHF,OAAAH,CAAAA,MAAMC,MAAAhC,IAAAgC,QAAAA,EAAAA,EAAAA,EAAAE,aAAShB,CAAD,EAAGe,IAAXC,EAAAI;;;;kBAAS;;kBAAE;kBAtF7B,IAAA,QAAAE,CAAAA,YAuFcV,CAACW,OAAAA,CAACN,CAADM,CAvFfD,CAAA,CAAA;oBAAA;kBAAA;;oBAAAE,UAAA,CAuFgBP,CAvFhB,EAuFuBjB,CAvFvB;oBAuFeyB,MAADb,CAACa,OAAAA,EAvFf,MAAAD,OAAA,CAuFeC;oBAvFfD,OAAA,CAAAE,UAAAF,OAAA,CAAAJ,QAAA,CAAAM,EAAAC,CAAAD,CAAA;kBAAA;kBAwFc,IAAA,KAAaX,IAAb,CAAA;;oBAxFdS,UAAA,CAwFgBP,CAxFhB,EAwFqBjB,CAxFrB;oBAwFeyB,MAADb,CAACa,OAAAA,EAxFf,MAAAD,OAAA,CAwFeC;oBAxFfD,OAAA,CAAAE,UAAAF,OAAA,CAAAJ,QAAA,CAAAM,EAAAC,CAAAD,CAAA;kBAwFc;kBACAN,OAAAR,CAAAA,IAAIA,CAACW,OAAAA,CAACN,CAADM,CAALX,EAHII,CAAAA,GAAAF,CAAND;cARF,EAFFN,CAAAA,GAAAA,qBAAAA,CAAIV;YAiBJU,OAAAM,GAAGK,MAAAA,CAAElB,CAAL,EAAQ,KAALkB,EAvBLZ,CAAAA,GAAAA,qBAAAA,CAAKT;UA0BLO,OAAAR;QA5BFQ,CAAAA,GAAAA;;AAgCAwB,QAAAA,8BAAAA,yCAAmBC,IAAnBD;AAAAA,UAAAA;;UACEA,OAAaE,MAAbhD,IAAAS,SAAAA,CAAQsC,IAARtC,CAAauC,QAAAA,EAAAA,EAAAA,EAAbC,aAAsBhC,CAAD,EAAGC,CAAxB+B;;;YAAsB;;YAAE;YAAGC,OAAA,CAACC,UAAD,EAAOC,UAAP,CAAYC,aAAAA,CAAUnC,CAACoC,OAAAA,CAAAA,CAAXD,EAAvCJ,CAAAA,GAAaD;QADfF,CAAAA,GAAAA;;AAOAS,QAAAA,2BAAAA,uBAAgBR,IAAD,EAAOS,GAAtBD;AAAAA,UAAAA;;;;UAAsB,uBAAIA,GAAJ;UACpBA,OAAaE,MAAbzD,IAAAS,SAAAA,CAAQsC,IAARtC,CAAagD,OAAAA,EAAAA,EAAAA,EAAbC,cAAqBzC,CAAD,EAAGC,CAAvBwC,EAAAC;;;;YAAqB;;YAAE;YAAGA,OAAevC,SAALA,SAAVpB,IAAAI,QAAAA,CAAOa,CAAPb,CAAUgB,EAAEuC,GAAFvC,CAAKA,EAAEpB,IAAAI,QAAAA,CAAOc,CAAC0C,MAAAA,CAAAA,CAARxD,CAAFgB,EAAzCsC,CAAAA,GAAAA,qBAAAA,CAAaD,CAA8CI,MAAAA,CAAML,GAANK;QAD7DN,CAAAA,IAAAA;;AAOAO,QAAAA,+BAAAA,2BAAoBf,IAApBe;AAAAA,UAAAA;;;UACEC,KAAKC,cAAQC,QAAAA,CAAAA;UACAlD,MAAbf,IAAAS,SAAAA,CAAQsC,IAARtC,CAAaM,QAAAA,EAAAA,EAAAA,EAAbmD,cAAsBjD,CAAD,EAAGC,CAAxBgD;;;YAAsB;;YAAE;YAAGC,OAAAJ,EAAG1B,OAAAA,CAAG,CAACpB,CAAD,EAAGC,CAAH,CAAHmB,EAA9B6B,CAAAA,GAAanD;UACb+C,OAAAC;QAHFD,CAAAA,GAAAA;;AASAM,QAAAA,2BAAAA,uBAAgB/D,MAAD,EAASmD,GAAxBY;AAAAA,UAAAA;;;;UAAwB,uBAAIA,GAAJ;UACtBA,OAAApE,IAAAsB,WAAAA,CAA2BmC,MAAjBpD,MAAMsB,OAAAA,CAAO6B,GAAP7B,CAAW8B,OAAAA,EAAAA,EAAAA,EAAjBY,cAAyBC,CAAzBD,EAAAE;;;;YAAyB;YAAGA,OAAWd,MAAXa,CAAC3C,OAAAA,CAAO4C,GAAP5C,CAAU8B,OAAAA,EAAAA,EAAAA,EAAMzD,IAAAwE,QAAAA,CAAO,QAAPA,CAADC,SAAAA,CAAAA,CAALhB,EAAvCY,CAAAA,GAAAA,qBAAAA,CAAiBZ,CAA3BnC;QADF8C,CAAAA,IAAAA;QAOAjE,OAAAuE,2BAAAA,uBAAgBC,CAAhBD;AAAAA;;;AAEJA,gBAAkBC,CAAED;AACpBA;AACAA,UAAYC,CAAAA,IAAIxB,UAAIyB,KAAAA,CAAKD,CAALC,CAARD;AACZD;AACAA;AACAA,UAAYC,CAAAA,IAAIvB,UAAIwB,KAAAA,CAAKD,CAALC,CAARD;AACZD;AACAA;UACMA,OAAAC;QAVFD,CAAAA,GAAAA;MA7HFvE,GAAAA,WAAAA;MA2IAH,IAAA6E,QAAAA,CAAOC,eAAPD;MACA7E,IAAAC,SAAAA,CAAQ8E,gBAAR9E;MAGAgE,MAAIjE,IAAJiE,aAAAA,kBAAgBlB,IAAhBkB;AAAAA,QAAAA;;;;QAAgB,yBAAK,GAAL;QACd,IAAA,QAAGrD,UAAH,EAAYmC,IAAZ,CAAA;UACEkB,OAAAD,cAAQF,iBAAAA,CAAiBf,IAAjBe;QADV,OAEA,IAAA,QAAMkB,IAAAC,IAAAC,SAAAD,YAAAD,SAAN,EAA6BjC,IAA7B,CAAA;UACEkB,OAAAjE,IAAA4E,KAAAA,CAAKX,aAAelB,IAAIoC,MAAAA,CAAAA,CAAMlB,CAA9BW;QADF;UAGEX,OAAAjE,IAAA4E,KAAAA,CAAKX,cAALW;QAHF;MAHFX,CAAAA,IAAAA;;AAeA5B,MAAAA,kBAAAA,6BAAO+C,KAAP/C;AAAAA,QAAAA;;;QACE,KAAuB+C,KAAvB,kBAAA,EAAAzE,CAAAA,MAAA,6BAAAA,CAAA,EAAKD,CAAAA,QAAL,6BAAKA,CAAL,EAAY2E,CAAAA,WAAZ,6BAAYA,CAAZ;QAEA,IAAA,QAAOA,QAAP,CAAA;UAGEhD,OAAEiD,cAAOjD,QAAU1B,GAAI0B,EAAIkD,YAAMC,SAAAA,CAAS9E,KAAT8E,CAAgBnD,EAAIgD,QAAShD;QAHhE;UACEA,OAAEiD,cAAOjD,QAAU1B,GAAI0B,EAAIkD,YAAMC,SAAAA,CAAS9E,KAAT8E,CAAgBnD;QADnD;MAHFA,CAAAA,GAAAA;;AAWAI,MAAAA,kBAAAA,yBAAO9B,GAAP8B;AAAAA,QAAAA;;QACEA,OAAAuB,cAAQU,aAAAA,CAAeY,cAAO7C,KAAO9B,GAAI8B,CAAjCiC;MADVjC,CAAAA,GAAAA;;AAKAV,MAAAA,mBAAAA,eAAQpB,GAAD,EAAMD,KAAN,EAAa2E,QAApBtD;AAAAA,QAAAA;;;;QAAoB,iCAAW,GAAX;QAClB,IAAA,QAAOsD,QAAP,CAAA;UAGEtD,OAAEuD,cAAOvD,KAAOpB,GAAIoB,EAAIwD,YAAMC,SAAAA,CAAS9E,KAAT8E,CAAgBzD,EAAIsD,QAAStD;QAH7D;UACEA,OAAEuD,cAAOvD,KAAOpB,GAAIoB,EAAIwD,YAAMC,SAAAA,CAAS9E,KAAT8E,CAAgBzD;QADhD;MADFA,CAAAA,IAAAA;MAOA,aAAM,KAAN,EAAU,KAAV;;AAGA0D,MAAAA,oBAAAA,gBAAAA;AAAAA,QAAAA;;;QACE1C,OAAO,YAAA;;AAEX0C,uBAAwBH,cAAOG;AAC/BA;AACAA;AACAA;AACAA;AACAA,QArMAA,CAAA/C,CAAAA,UAAA,CAqMgB+C,OArMhB,EAqM4BzB,cAAQU,aAAAA,CAAce,OAAdf,CArMpC,CAAAhC,GAqMcC,MAAJI,IAAIJ,OAAAA,EArMd,MAAAD,OAAA,CAqMcC,GArMdD,OAAA,CAAAE,UAAAF,OAAA,CAAA+C,QAAA,CAAA7C,EAAAC,CAAAD,CAAA,CAAA6C;AAsMAA;AACAA;QACIA,OAAA1C;MAXF0C,CAAAA,GAAAA;;AAeAC,MAAAA,oBAAAA,gBAAAA;AAAAA,QAAAA;;QACEA,OAAA1F,IAAAyF,MAAAA,CAAAA,CAAIC,MAAAA,CAAAA;MADNA,CAAAA,GAAAA;;AAKA3E,MAAAA,oBAAAA,gBAAAA;AAAAA,QAAAA;;QAAAA;;;QACEA,OAAIA,MAAJf,IAAAyF,MAAAA,CAAAA,CAAI1E,QAAAA,EAAAA,EAAAA,EAAO4E,KAADlB,SAAAA,CAAAA,CAAN1D;MADNA,CAAAA,GAAAA;;AAKAsC,MAAAA,wBAAAA,mCAAa1C,GAAb0C;AAAAA,QAAAA;;QACEA,OAAEiC,cAAOjC,KAAO1C,GAAI0C;MADtBA,CAAAA,GAAAA;MAKAtD,OAAA6F,sBAAAA,6BAAWjF,GAAXiF;AAAAA,QAAAA;;QACEA,OAAEN,cAAOM,QAAUjF,GAAIiF;MADzBA,CAAAA,GAAAA;IAzNF7F,GAAAA,WAAAA,EAAAA,IAAAA;EAFAD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":29751,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/support.rb"],"sourcesContent":["# The engine the browser is running on.\n#\n# Keep in mind it uses the user agent to know, so it's not reliable in case of\n# spoofing.\nBROWSER_ENGINE = `/MSIE|WebKit|Presto|Gecko/.exec(navigator.userAgent)[0]`.downcase rescue :unknown\n\nmodule Browser\n  # @private\n  @support = `{}`\n\n  # Check if the browser supports the given feature.\n  def self.supports?(feature)\n    if defined?(`#@support[#{feature}]`)\n      return `#@support[#{feature}]`\n    end\n\n    support = case feature\n      when 'MutationObserver'\n        defined?(`window.MutationObserver`)\n\n      when 'WebSocket'\n        defined?(`window.WebSocket`)\n\n      when 'EventSource'\n        defined?(`window.EventSource`)\n\n      when 'XHR'\n        defined?(`window.XMLHttpRequest`)\n\n      when 'ActiveX'\n        defined?(`window.ActiveXObject`)\n\n      when 'WebSQL'\n        defined?(`window.openDatabase`)\n\n      when 'Query.css'\n        defined?(`document.querySelectorAll`)\n\n      when 'Query.xpath'\n        defined?(`document.evaluate`)\n\n      when 'Storage.local'\n        defined?(`window.localStorage`)\n\n      when 'Storage.global'\n        defined?(`window.globalStorage`)\n\n      when 'Storage.session'\n        defined?(`window.sessionStorage`)\n\n      when 'Immediate'\n        defined?(`window.setImmediate`)\n\n      when 'Immediate (Internet Explorer)'\n        defined?(`window.msSetImmediate`)\n\n      when 'Immediate (Firefox)'\n        defined?(`window.mozSetImmediate`)\n\n      when 'Immediate (Opera)'\n        defined?(`window.oSetImmediate`)\n\n      when 'Immediate (Chrome)', 'setImmediate (Safari)'\n        defined?(`window.webkitSetImmediate`)\n\n      when 'CSS.computed'\n        defined?(`window.getComputedStyle`)\n\n      when 'CSS.current'\n        defined?(`document.documentElement.currentStyle`)\n\n      when 'Window.send'\n        defined?(`window.postMessage`)\n\n      when 'Window.send (Asynchronous)'\n        if defined?(`window.postMessage`) && !defined?(`window.importScripts`)\n          %x{\n            (function() {\n              var ok  = true,\n                  old = window.onmessage;\n\n              window.onmessage = function() { ok = false; };\n              window.postMessage(\"\", \"*\")\n              window.onmessage = old;\n\n              return ok;\n            })()\n          }\n        end\n\n      when 'Window.send (Synchronous)'\n        !supports?('Window.send (Asynchronous)')\n\n      when 'Window.innerSize'\n        defined?(`window.innerHeight`)\n\n      when 'Window.outerSize'\n        defined?(`window.outerHeight`)\n\n      when 'Window.scroll'\n        defined?(`document.documentElement.scrollLeft`)\n\n      when 'Window.scrollBy'\n        defined?(`document.documentElement.scrollBy`)\n\n      when 'Window.pageOffset'\n        defined?(`window.pageXOffset`)\n\n      when 'Attr.isId'\n        %x{\n          (function() {\n            var div = document.createElement('div');\n                div.setAttribute('id', 'xxxxxxxxxxxxx');\n\n            return typeof(div.attributes['id'].isId) !== \"undefined\";\n          })()\n        }\n\n      when 'Element.addBehavior'\n        defined?(`document.documentElement.addBehavior`)\n\n      when 'Element.className'\n        %x{\n          (function() {\n            var div = document.createElement(\"div\");\n                div.setAttribute('className', 'x');\n\n            return div.className === 'x';\n          })()\n        }\n\n      when 'Element.class'\n        %x{\n          (function() {\n            var div = document.createElement(\"div\");\n                div.setAttribute('class', 'x');\n\n            return div.className === 'x';\n          })()\n        }\n\n      when 'Element.for'\n        %x{\n          (function() {\n            var label = document.createElement(\"label\");\n                label.setAttribute('for', 'x');\n\n            return label.htmlFor === 'x';\n          })()\n        }\n\n      when 'Element.htmlFor'\n        %x{\n          (function() {\n            var label = document.createElement(\"label\");\n                label.setAttribute('htmlFor', 'x');\n\n            return label.htmlFor === 'x';\n          })()\n        }\n\n      when 'Element.clientSize'\n        defined?(`document.documentElement.clientHeight`)\n\n      when 'Element.scroll'\n        defined?(`document.documentElement.scrollLeft`)\n\n      when 'Element.textContent'\n        defined?(`document.documentElement.textContent`)\n\n      when 'Element.innerText'\n        defined?(`document.documentElement.innerText`)\n\n      when 'Element.matches'\n        defined?(`document.documentElement.matches`)\n\n      when 'Element.matches (Internet Explorer)'\n        defined?(`document.documentElement.msMatchesSelector`)\n\n      when 'Element.matches (Firefox)'\n        defined?(`document.documentElement.mozMatchesSelector`)\n\n      when 'Element.matches (Opera)'\n        defined?(`document.documentElement.oMatchesSelector`)\n\n      when 'Element.matches (Chrome)', 'Element.matches (Safari)'\n        defined?(`document.documentElement.webkitMatchesSelector`)\n\n      when 'Element.getBoundingClientRect'\n        defined?(`document.documentElement.getBoundingClientRect`)\n\n      when 'Event.readystatechange'\n        `\"onreadystatechange\" in window.document.createElement(\"script\")`\n\n      when 'Event.constructor'\n        begin\n          `new MouseEvent(\"click\")`\n\n          true\n        rescue StandardError, JS::Error\n          false\n        end\n\n      when 'Event.create'\n        defined?(`document.createEvent`)\n\n      when 'Event.createObject'\n        defined?(`document.createEventObject`)\n\n      when 'Event.addListener'\n        defined?(`document.addEventListener`)\n\n      when 'Event.attach'\n        defined?(`document.attachEvent`)\n\n      when 'Event.removeListener'\n        defined?(`document.removeEventListener`)\n\n      when 'Event.detach'\n        defined?(`document.detachEvent`)\n\n      when 'Event.dispatch'\n        defined?(`document.dispatchEvent`)\n\n      when 'Event.fire'\n        defined?(`document.fireEvent`)\n\n      when /^Event\\.([A-Z].*?)$/\n        `(#{$1} + \"Event\") in window`\n\n      when 'Document.view'\n        defined?(`document.defaultView`)\n\n      when 'Document.window'\n        defined?(`document.parentWindow`)\n\n      when 'History'\n        defined?(`window.history.pushState`)\n\n      when 'History.state'\n        defined?(`window.history.state`)\n\n      when 'Animation.request'\n        defined?(`window.requestAnimationFrame`)\n\n      when 'Animation.request (Internet Explorer)'\n        defined?(`window.msRequestAnimationFrame`)\n\n      when 'Animation.request (Firefox)'\n        defined?(`window.mozRequestAnimationFrame`)\n\n      when 'Animation.request (Opera)'\n        defined?(`window.oRequestAnimationFrame`)\n\n      when 'Animation.request (Chrome)', 'Animation.request (Safari)'\n        defined?(`window.webkitRequestAnimationFrame`)\n\n      when 'Animation.cancel'\n        defined?(`window.cancelAnimationFrame`)\n\n      when 'Animation.cancel (Internet Explorer)'\n        defined?(`window.msCancelAnimationFrame`)\n\n      when 'Animation.cancel (Firefox)'\n        defined?(`window.mozCancelAnimationFrame`)\n\n      when 'Animation.cancel (Opera)'\n        defined?(`window.oCancelAnimationFrame`)\n\n      when 'Animation.cancel (Chrome)', 'Animation.cancel (Safari)'\n        defined?(`window.webkitCancelAnimationFrame`)\n\n      when 'Animation.cancelRequest'\n        defined?(`window.cancelRequestAnimationFrame`)\n\n      when 'Animation.cancelRequest (Internet Explorer)'\n        defined?(`window.msCancelRequestAnimationFrame`)\n\n      when 'Animation.cancelRequest (Firefox)'\n        defined?(`window.mozCancelRequestAnimationFrame`)\n\n      when 'Animation.cancelRequest (Opera)'\n        defined?(`window.oCancelRequestAnimationFrame`)\n\n      when 'Animation.cancelRequest (Chrome)', 'Animation.cancelRequest (Safari)'\n        defined?(`window.webkitCancelRequestAnimationFrame`)\n\n      when 'Audio'\n        defined?(`window.AudioContext`)\n\n      when 'Audio (Safari)', 'Audio (Chrome)'\n        defined?(`window.webkitAudioContext`)\n      \n      when 'Custom Elements'\n        defined?(`window.customElements`)\n    end\n\n    `#@support[#{feature}] = #{support}`\n  end\n\n  # Check if the given polyfill is loaded.\n  def self.loaded?(name)\n    case name\n    when 'Sizzle'\n      defined?(`window.Sizzle`)\n\n    when 'wicked-good-xpath'\n      defined?(`window.wgxpath`)\n    end\n  end\nend\n"],"names":["<top (required)>","downcase","StandardError","<module:Browser>","@support","supports?","self","feature","support","$ret_or_1","!","JS::Error","JS","loaded?","name"],"mappings":"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"}},{"offset":{"line":30010,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/setup/base.rb"],"sourcesContent":["# browser/setup/base: Setup only the base requires\n\nrequire 'browser/version'\nrequire 'browser/utils'\nrequire 'browser/form_data'\nrequire 'browser/support'\n"],"names":["<top (required)>","self","require"],"mappings":"AAAAA,qDAAAA;EAAAA;;EAAAA;;EAEAC,IAAAC,SAAAA,CAAQF,iBAARE;EACAD,IAAAC,SAAAA,CAAQF,eAARE;EACAD,IAAAC,SAAAA,CAAQF,mBAARE;EACAF,OAAAC,IAAAC,SAAAA,CAAQF,iBAARE;AALAF;"}},{"offset":{"line":30021,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/event/base.rb"],"sourcesContent":["module Browser\n\nclass Event\n  include Native::Wrapper\n\n  # @see https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events\n  class Definition\n    include Native::Wrapper\n\n    # @private\n    def self.new(&block)\n      data = super(`{ bubbles: true, cancelable: true }`)\n      block.call(data) if block\n\n      data.to_n\n    end\n\n    # Set the event as bubbling.\n    def bubbles=(value)\n      `#@native.bubbles = #{value}`\n    end\n\n    # Set the event as cancelable.\n    def cancelable=(value)\n      `#@native.cancelable = #{value}`\n    end\n  end\n\n  module Target\n    # @private\n    def self.converters\n      @converters ||= []\n    end\n\n    # @private\n    def self.register(&block)\n      converters << block\n    end\n\n    # @private\n    def self.convert(value)\n      return value unless native?(value)\n\n      converters.each {|block|\n        if result = block.call(value)\n          return result\n        end\n      }\n\n      nil\n    end\n\n    def self.included(klass)\n      klass.instance_eval {\n        def self.target(&block)\n          Event::Target.register(&block)\n        end\n      }\n    end\n\n    class Callback\n      attr_reader :target, :name, :selector\n\n      # @private\n      def initialize(target, name, selector = nil, &block)\n        @target   = target\n        @name     = name\n        @selector = selector\n        @block    = block\n      end\n\n      # Call the callback with the given event.\n      #\n      # @param event [native] the native event object\n      def call(event)\n        to_proc.call(event)\n      end\n\n      # Get the native function linked to the callback.\n      def to_proc\n        @proc ||= -> event {\n          %x{\n            if (!event.currentTarget) {\n              event.currentTarget = self.target.native;\n            }\n          }\n\n          event = Event.new(event, self)\n\n          unless event.stopped?\n            @block.call(event, *event.arguments)\n          end\n\n          !event.prevented?\n        }\n      end\n\n      # @!attribute [r] event\n      # @return [Class] the class for the event\n      def event\n        Event.class_for(@name)\n      end\n\n      # Stop listening for the event linked to the callback.\n      def off\n        target.off(self)\n      end\n    end\n\n    class Delegate\n      def initialize(target, name, pair)\n        @target = target\n        @name   = name\n        @pair   = pair\n      end\n\n      # Stop listening for the event linked to the delegate.\n      def off\n        delegate = @target.delegated[@name]\n        delegate.last.delete(@pair)\n\n        if delegate.last.empty?\n          delegate.first.off\n          delegate.delete(@name)\n        end\n      end\n    end\n\n    Delegates = Struct.new(:callback, :handlers)\n\n    # @overload on(name, &block)\n    #\n    #   Start listening for an event on the target.\n    #\n    #   @param name [String] the event name\n    #\n    #   @yieldparam event [Event] the event\n    #\n    #   @return [Callback]\n    #\n    # @overload on(name, selector, &block)\n    #\n    #   Start listening for an event on the target children.\n    #\n    #   @param name [String] the event name\n    #   @param selector [String] the CSS selector to trigger the event on\n    #\n    #   @yieldparam event [Event] the event\n    #\n    #   @return [Delegate]\n    def on(name, selector = nil, &block)\n      raise ArgumentError, 'no block has been given' unless block\n\n      name = Event.name_for(name)\n\n      if selector\n        unless delegate = delegated[name]\n          delegate = delegated[name] = Delegates.new\n\n          if %w[blur focus].include?(name)\n            delegate.callback = on! name do |e|\n              delegate(delegate, e)\n            end\n          else\n            delegate.callback = on name do |e|\n              delegate(delegate, e)\n            end\n          end\n\n          pair = [selector, block]\n          delegate.handlers = [pair]\n\n          Delegate.new(self, name, pair)\n        else\n          pair = [selector, block]\n          delegate.handlers << pair\n\n          Delegate.new(self, name, pair)\n        end\n      else\n        callback = Callback.new(self, name, selector, &block)\n        callbacks.push(callback)\n\n        attach(callback)\n      end\n    end\n\n    # Start listening for an event in the capturing phase.\n    #\n    # @param name [String] the event name\n    #\n    # @yieldparam event [Event] the event\n    #\n    # @return [Callback]\n    def on!(name, &block)\n      raise ArgumentError, 'no block has been given' unless block\n\n      name     = Event.name_for(name)\n      callback = Callback.new(self, name, &block)\n      callbacks.push(callback)\n\n      attach!(callback)\n    end\n\n    if Browser.supports? 'Event.addListener'\n      def attach(callback)\n        `#@native.addEventListener(#{callback.name}, #{callback.to_proc})`\n\n        callback\n      end\n\n      def attach!(callback)\n        `#@native.addEventListener(#{callback.name}, #{callback.to_proc}, true)`\n\n        callback\n      end\n    elsif Browser.supports? 'Event.attach'\n      def attach(callback)\n        if callback.event == Custom\n          %x{\n            if (!#@native.$custom) {\n              #@native.$custom = function(event) {\n                for (var i = 0, length = #@native.$callbacks.length; i < length; i++) {\n                  var callback = #@native.$callbacks[i];\n\n                  if (#{`callback`.event == Custom}) {\n                    event.type = callback.name;\n\n                    #{`callback`.call(`event`)};\n                  }\n                }\n              };\n\n              #@native.attachEvent(\"ondataavailable\", #@native.$custom);\n            }\n          }\n        else\n          `#@native.attachEvent(\"on\" + #{callback.name}, #{callback.to_proc})`\n        end\n\n        callback\n      end\n\n      def attach!(callback)\n        case callback.name\n        when :blur\n          `#@native.attachEvent(\"onfocusout\", #{callback.to_proc})`\n\n        when :focus\n          `#@native.attachEvent(\"onfocusin\", #{callback.to_proc})`\n\n        else\n          warn \"attach: capture doesn't work on this browser\"\n          attach(callback)\n        end\n\n        callback\n      end\n    else\n      # @todo implement polyfill\n      # @private\n      def attach(*)\n        raise NotImplementedError\n      end\n\n      # @todo implement polyfill\n      # @private\n      def attach!(*)\n        raise NotImplementedError\n      end\n    end\n\n    # @overload one(name, &block)\n    #\n    #   Start listening for an event on the target. Remove the event after firing\n    #   so that it is fired at most once.\n    #\n    #   @param name [String] the event name\n    #\n    #   @yieldparam event [Event] the event\n    #\n    #   @return [Callback]\n    #\n    # @overload one(name, selector, &block)\n    #\n    #   Start listening for an event on the target children. Remove the event after\n    #   firing so that it is fired at most once.\n    #\n    #   @param name [String] the event name\n    #   @param selector [String] the CSS selector to trigger the event on\n    #\n    #   @yieldparam event [Event] the event\n    #\n    #   @return [Delegate]\n    def one (name, selector = nil, &block)\n      raise ArgumentError, 'no block has been given' unless block\n\n      cb = on name, selector do |*args|\n        out = block.call(*args)\n        cb.off\n        out\n      end\n    end\n    # @overload off()\n    #   Stop listening for any event.\n    #\n    # @overload off(what)\n    #   Stop listening for an event.\n    #\n    #   @param what [Callback, String, Regexp] what to stop listening for\n    def off(what = nil)\n      case what\n      when Callback\n        callbacks.delete(what)\n        detach(what)\n\n      when String\n        if what.include?(?*) or what.include?(??)\n          off(Regexp.new(what.gsub(/\\*/, '.*?').gsub(/\\?/, ?.)))\n        else\n          what = Event.name_for(what)\n\n          callbacks.delete_if {|callback|\n            if callback.name == what\n              detach(callback)\n\n              true\n            end\n          }\n        end\n\n      when Regexp\n        callbacks.delete_if {|callback|\n          if callback.name =~ what\n            detach(callback)\n\n            true\n          end\n        }\n\n      else\n        callbacks.each {|callback|\n          detach(callback)\n        }\n\n        callbacks.clear\n      end\n    end\n\n    if Browser.supports? 'Event.removeListener'\n      def detach(callback)\n        `#@native.removeEventListener(#{callback.name}, #{callback.to_proc}, false)`\n      end\n    elsif Browser.supports? 'Event.detach'\n      def detach(callback)\n        if callback.event == Custom\n          if callbacks.none? { |c| c.event == Custom }\n            %x{\n              #@native.detachEvent(\"ondataavailable\", #@native.$custom);\n\n              delete #@native.$custom;\n            }\n          end\n        else\n          `#@native.detachEvent(\"on\" + #{callback.name}, #{callback.to_proc})`\n        end\n      end\n    else\n      # @todo implement internal handler thing\n      # @private\n      def detach(callback)\n        raise NotImplementedError\n      end\n    end\n\n    # Trigger an event on the target.\n    #\n    # @param event [String] the event name\n    # @param args [Array] optional arguments to the event callback\n    #\n    # @yieldparam definition [Definition] definition to customize the event\n    def trigger(event, *args, &block)\n      if event.is_a? String\n        event = Event.create(event, *args, &block)\n      end\n\n      dispatch(event)\n    end\n\n    # Trigger an event on the target without bubbling.\n    #\n    # @param event [String] the event name\n    # @param args [Array] optional arguments to the event callback\n    #\n    # @yieldparam definition [Definition] definition to customize the event\n    def trigger!(event, *args, &block)\n      trigger event, *args do |e|\n        block.call(e) if block\n        e.bubbles = false\n      end\n    end\n\n    if Browser.supports? 'Event.dispatch'\n      def dispatch(event)\n        `#@native.dispatchEvent(#{event.to_n})`\n      end\n    elsif Browser.supports? 'Event.fire'\n      def dispatch(event)\n        if Custom === event\n          `#@native.fireEvent(\"ondataavailable\", #{event.to_n})`\n        else\n          `#@native.fireEvent(\"on\" + #{event.name}, #{event.to_n})`\n        end\n      end\n    else\n      # @todo implement polyfill\n      # @private\n      def dispatch(*)\n        raise NotImplementedError\n      end\n    end\n\n  private\n    def callbacks\n      %x{\n        if (!#@native.$callbacks) {\n          #@native.$callbacks = [];\n        }\n\n        return #@native.$callbacks;\n      }\n    end\n\n    def delegated\n      %x{\n        if (!#@native.$delegated) {\n          #@native.$delegated = #{{}};\n        }\n\n        return #@native.$delegated;\n      }\n    end\n\n    def delegate(delegates, event, element = event.target)\n      return if element.nil? || element == event.on\n\n      delegates.handlers.each {|selector, block|\n        if element =~ selector\n          new    = event.dup\n          new.on = element\n\n          block.call new, *new.arguments\n        end\n      }\n\n      delegate(delegates, event, element.parent)\n    end\n  end\nend\n\nend\n"],"names":["<top (required)>","<module:Browser>","<class:Event>","self","include","Native::Wrapper","Native","<class:Definition>","new","data","block","call","to_n","bubbles=","value","@native","cancelable=","<module:Target>","converters","@converters","$ret_or_1","register","<<","convert","native?","each","block in convert","block (2 levels) in convert","result","included","klass","instance_eval","block in included","block (2 levels) in included","target","Event::Target","Event","to_proc","<class:Callback>","attr_reader","initialize","name","selector","@target","@name","@selector","@block","event","@proc","block in to_proc","block (2 levels) in to_proc","stopped?","arguments","prevented?","!","class_for","off","<class:Delegate>","pair","@pair","delegate","delegated","[]","last","delete","empty?","first","Struct","on","raise","ArgumentError","name_for","handlers","Delegate","$writer","Delegates","[]=","-","1","include?","on!","block in on","e","block (2 levels) in on","callback=","handlers=","callback","Callback","callbacks","push","attach","attach!","Browser","supports?","Custom","==","warn","NotImplementedError","one","cb","block in one","block (2 levels) in one","out","args","what","detach","String","Regexp","gsub","delete_if","block in off","block (2 levels) in off","=~","clear","none?","block in detach","c","block (2 levels) in detach","trigger","is_a?","create","dispatch","trigger!","block in trigger!","block (2 levels) in trigger!","private","delegates","element","nil?","block in delegate","block (2 levels) in delegate","new$","dup","on=","parent"],"mappings":"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"}},{"offset":{"line":30637,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/event/ui.rb"],"sourcesContent":["module Browser; class Event\n\nclass UI < Event\n  def self.supported?\n    Browser.supports? 'Event.UI'\n  end\n\n  class Definition < Definition\n    def detail=(value)\n      `#@native.detail = #{value}`\n    end\n\n    def view=(value)\n      `#@native.view = #{value}`\n    end\n  end\n\n  if Browser.supports? 'Event.constructor'\n    def self.construct(name, desc)\n      `new UIEvent(#{name}, #{desc})`\n    end\n  elsif Browser.supports? 'Event.create'\n    def self.construct(name, desc)\n      %x{\n        var event = document.createEvent(\"UIEvent\");\n            event.initUIEvent(name, desc.bubbles, desc.cancelable,\n              desc.view || window, desc.detail || 0);\n\n        return event;\n      }\n    end\n  end if supported?\n\n  alias_native :detail\n  alias_native :view\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<class:Event>","<class:UI>","supported?","self","Browser","supports?","<class:Definition>","detail=","value","@native","view=","Definition","construct","name","desc","alias_native","Event"],"mappings":"AAAAA,mDAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAEhBA,OAAAC;MAAAA;;QAAAA;;;QACEC,MAAIC,IAAJD,iBAAAA,8BAAAA;AAAAA;UACEA,OAAAE,aAAOC,cAAAA,CAAWH,UAAXG;QADTH,CAAAA,GAAAA;QAIAI;QAAAA;;UAAAA;;AAAAA;;;AACEC,UAAAA,uBAAAA,iCAAYC,KAAZD;AAAAA,YAAAA;;YACEA,OAAEE,cAAOF,UAAYC;UADvBD,CAAAA,GAAAA;UAIAD,OAAAI,qBAAAA,+BAAUF,KAAVE;AAAAA,YAAAA;;YACEA,OAAED,cAAOC,QAAUF;UADrBE,CAAAA,GAAAA;QALFJ,GAAAA,WAAAA,EAAmBK,gBAAnBL;QAUA,IAAA,QAcOH,IAAAD,eAAAA,CAAAA,CAdP,CAAA;UAAA,IAAA,QAAGE,aAAOC,cAAAA,CAAWJ,mBAAXI,CAAV,CAAA;YACEO,MAAIT,IAAJS,gBAAAA,qBAAmBC,IAAD,EAAOC,IAAzBF;AAAAA;cACEA,OAACA,YAAcC,IAAKD,EAAIE,IAAKF;YAD/BA,CAAAA,GAAAA;UADF,OAIA,IAAA,QAAMR,aAAOC,cAAAA,CAAWJ,cAAXI,CAAb,CAAA;YACEO,MAAIT,IAAJS,gBAAAA,qBAAmBC,IAAD,EAAOC,IAAzBF;AAAAA;;AAEJA;AACAA;AACAA;;AAEAA;AACAA;YAPIA,CAAAA,GAAAA;UADF;QAJA;QAgBAT,IAAAY,cAAAA,CAAa,QAAbA;QACAd,OAAAE,IAAAY,cAAAA,CAAa,MAAbA;MAhCFd,GAAAA,WAAAA,EAAWe,WAAXf;IAFgBD,GAAAA,WAAAA,EAAAA,IAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":30706,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/event/mouse.rb"],"sourcesContent":["module Browser; class Event\n\nclass Mouse < UI\n  handles 'click', 'contextmenu', 'dblclick', 'mousedown', 'mouseenter',\n          'mouseleave', 'mousemove', 'mouseout', 'mouseover', 'mouseup',\n          'show'\n\n  def self.supported?\n    not $$[:MouseEvent].nil?\n  end\n\n  class Definition < UI::Definition\n    class Client\n      include Native::Wrapper\n\n      def x=(value)\n        `#@native.clientX = #{value}`\n      end\n\n      def y=(value)\n        `#@native.clientY = #{value}`\n      end\n    end\n\n    class Layer\n      include Native::Wrapper\n\n      def x=(value)\n        `#@native.layerX = #{value}`\n      end\n\n      def y=(value)\n        `#@native.layerY = #{value}`\n      end\n    end\n\n    class Offset\n      include Native::Wrapper\n\n      def x=(value)\n        `#@native.offsetX = #{value}`\n      end\n\n      def y=(value)\n        `#@native.offsetY= #{value}`\n      end\n    end\n\n    class Page\n      include Native::Wrapper\n\n      def x=(value)\n        `#@native.pageX = #{value}`\n      end\n\n      def y=(value)\n        `#@native.pageY = #{value}`\n      end\n    end\n\n    class Screen\n      include Native::Wrapper\n\n      def x=(value)\n        `#@native.screenX = #{value}`\n      end\n\n      def y=(value)\n        `#@native.screenY = #{value}`\n      end\n    end\n\n    class Ancestor\n      include Native::Wrapper\n\n      def x=(value)\n        `#@native.x = #{value}`\n      end\n\n      def y=(value)\n        `#@native.y = #{value}`\n      end\n    end\n\n    def x=(value)\n      `#@native.screenX = #{value}`\n    end\n\n    def y=(value)\n      `#@native.screenY = #{value}`\n    end\n\n    def alt!\n      `#@native.altKey = true`\n    end\n\n    def ctrl!\n      `#@native.ctrlKey = true`\n    end\n\n    def meta!\n      `#@native.metaKey = true`\n    end\n\n    def button=(value)\n      `#@native.button = #{value}`\n    end\n\n    def client\n      Client.new(@native)\n    end\n\n    def layer\n      Layer.new(@native)\n    end\n\n    def offset\n      Offset.new(@native)\n    end\n\n    def page\n      Page.new(@native)\n    end\n\n    def screen\n      Screen.new(@native)\n    end\n\n    def ancestor\n      Ancestor.new(@native)\n    end\n\n    def related=(elem)\n      `#@native.relatedTarget = #{Native.try_convert(elem)}`\n    end\n\n    def from=(elem)\n      `#@native.fromElement = #{Native.try_convert(elem)}`\n    end\n\n    def to=(elem)\n      `#@native.toElement = #{Native.try_convert(elem)}`\n    end\n  end\n\n  if Browser.supports? 'Event.constructor'\n    def self.construct(name, desc)\n      `new MouseEvent(#{name}, #{desc})`\n    end\n  elsif Browser.supports? 'Event.create'\n    def self.construct(name, desc)\n      %x{\n        var event = document.createEvent(\"MouseEvent\");\n            event.initMouseEvent(name, desc.bubbles, desc.cancelable,\n              desc.view || window, desc.detail || 0,\n              desc.screenX || 0, desc.screenY || 0,\n              desc.clientX || 0, desc.clientY || 0,\n              desc.ctrlKey || false, desc.altKey || false,\n              desc.shiftKey || false, desc.metaKey || false,\n              desc.button || 0, desc.relatedTarget || null);\n\n        return event;\n      }\n    end\n  end if supported?\n\n  alias_native :alt?, :altKey\n  alias_native :ctrl?, :ctrlKey\n  alias_native :meta?, :metaKey\n  alias_native :shift?, :shiftKey\n  alias_native :button\n\n  def client\n    Position.new(`#@native.clientX`, `#@native.clientY`)\n  end\n\n  def layer\n    Position.new(`#@native.layerX`, `#@native.layerY`) unless `#@native.layerX == null`\n  end\n\n  def offset\n    Position.new(`#@native.offsetX`, `#@native.offsetY`) unless `#@native.offsetX == null`\n  end\n\n  def page\n    Position.new(`#@native.pageX`, `#@native.pageY`) unless `#@native.pageX == null`\n  end\n\n  def screen\n    Position.new(`#@native.screenX`, `#@native.screenY`) unless `#@native.screenX == null`\n  end\n\n  def ancestor\n    Position.new(`#@native.x`, `#@native.y`) unless `#@native.x == null`\n  end\n\n  def x\n    screen.x\n  end\n\n  def y\n    screen.y\n  end\n\n  def related\n    DOM(`#@native.relatedTarget`) unless `#@native.relatedTarget == null`\n  end\n\n  def from\n    DOM(`#@native.fromElement`) unless `#@native.fromElement == null`\n  end\n\n  def to\n    DOM(`#@native.toElement`) unless `#@native.toElement == null`\n  end\n\n  def click?\n    name.downcase == 'click'\n  end\n\n  def double_click?\n    name.downcase == 'dblclick'\n  end\n\n  def down?\n    name.downcase == 'mousedown'\n  end\n\n  def enter?\n    name.downcase == 'mouseenter'\n  end\n\n  def leave?\n    name.downcase == 'mouseleave'\n  end\n\n  def move?\n    name.downcase == 'mousemove'\n  end\n\n  def out?\n    name.downcase == 'mouseout'\n  end\n\n  def over?\n    name.downcase == 'mouseover'\n  end\n\n  def up?\n    name.downcase == 'mouseup'\n  end\n\n  def show?\n    name.downcase == 'show'\n  end\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<class:Event>","<class:Mouse>","self","handles","supported?","$$","[]","nil?","!","<class:Definition>","<class:Client>","include","Native::Wrapper","Native","x=","value","@native","y=","<class:Layer>","<class:Offset>","<class:Page>","<class:Screen>","<class:Ancestor>","alt!","ctrl!","meta!","button=","client","Client","new","layer","Layer","offset","Offset","page","Page","screen","Screen","ancestor","Ancestor","related=","elem","try_convert","from=","to=","UI::Definition","UI","Browser","supports?","construct","name","desc","alias_native","Position","x","y","related","DOM","from","to","click?","downcase","==","double_click?","down?","enter?","leave?","move?","out?","over?","up?","show?"],"mappings":"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"}},{"offset":{"line":31141,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/event/keyboard.rb"],"sourcesContent":["module Browser; class Event\n\nclass Keyboard < UI\n  handles 'keydown', 'keypress', 'keyup'\n\n  def self.supported?\n    Browser.supports? 'Event.Keyboard'\n  end\n\n  class Definition < UI::Definition\n    def alt!\n      `#@native.altKey = true`\n    end\n\n    def ctrl!\n      `#@native.ctrlKey = true`\n    end\n\n    def meta!\n      `#@native.metaKey = true`\n    end\n\n    def shift!\n      `#@native.shiftKey = true`\n    end\n\n    def code=(code)\n      `#@native.keyCode = #@native.which = #{code}`\n    end\n\n    def key=(key)\n      `#@native.key = #{key}`\n    end\n\n    def char=(char)\n      `#@native.char = #@native.charCode = #{char}`\n    end\n\n    def repeat!\n      `#@native.repeat = true`\n    end\n\n    def locale=(value)\n      `#@native.locale = value`\n    end\n  end\n\n  if Browser.supports? 'Event.constructor'\n    def self.construct(name, desc)\n      `new KeyboardEvent(#{name}, #{desc})`\n    end\n  elsif Browser.supports? 'Event.create'\n    def self.construct(name, desc)\n      %x{\n        var modifiers = \"\";\n\n        if (desc.altKey) {\n          modifiers += \"Alt \";\n        }\n\n        if (desc.ctrlKey) {\n          modifiers += \"Ctrl \";\n        }\n\n        if (desc.shiftKey) {\n          modifiers += \"Shift\" ;\n        }\n\n        if (desc.metaKey) {\n          modifiers += \"Meta \";\n        }\n\n        var event = document.createEvent(\"KeyboardEvent\");\n            event.initKeyboardEvent(name, desc.bubbles, desc.cancelable,\n              desc.view || window, desc.which, 0,\n              modifiers, desc.repeat, desc.locale);\n\n        return event;\n      }\n    end\n  end if supported?\n\n  alias_native :alt?, :altKey\n  alias_native :ctrl?, :ctrlKey\n  alias_native :meta?, :metaKey\n  alias_native :shift?, :shiftKey\n  alias_native :locale\n  alias_native :repeat?, :repeat\n\n  # IE 11 at least has different names for those keys.\n  IE_MAP = {\n    'Down' => 'ArrowDown',\n    'Up' => 'ArrowUp',\n    'Left' => 'ArrowLeft',\n    'Right' => 'ArrowRight',\n    'Esc' => 'Escape',\n    'Del' => 'Delete'\n  }\n\n  def key\n    key = `#@native.key || #@native.keyIdentifier || nil`\n    IE_MAP[key] || key\n  end\n\n  def code\n    `#@native.keyCode || #@native.which || nil`\n  end\n\n  def char\n    `#@native.char || #@native.charCode || #{code ? code.chr : nil}`\n  end\n\n  alias to_i key\n\n  def down?\n    name.downcase == 'keydown'\n  end\n\n  def press?\n    name.downcase == 'keypress'\n  end\n\n  def up?\n    name.downcase == 'keyup'\n  end\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<class:Event>","<class:Keyboard>","self","handles","supported?","Browser","supports?","<class:Definition>","alt!","@native","ctrl!","meta!","shift!","code=","code","key=","key","char=","char$","repeat!","locale=","value","UI::Definition","UI","construct","name","desc","alias_native","$ret_or_1","IE_MAP","[]","char","chr","down?","downcase","==","press?","up?"],"mappings":"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"}},{"offset":{"line":31320,"column":0},"map":{"version":3,"sourceRoot":"","sources":["./ostruct.rb"],"sourcesContent":["class OpenStruct\n  def initialize(hash = nil)\n    @table = {}\n\n    if hash\n      hash.each_pair do |key, value|\n        @table[new_ostruct_member(key)] = value\n      end\n    end\n  end\n\n  def [](name)\n    @table[name.to_sym]\n  end\n\n  def []=(name, value)\n    @table[new_ostruct_member(name)] = value\n  end\n\n  def method_missing(name, *args)\n    if args.length > 2\n      raise NoMethodError.new(\"undefined method `#{name}' for #<OpenStruct>\", name)\n    end\n    if name.end_with? '='\n      if args.length != 1\n        raise ArgumentError, 'wrong number of arguments (0 for 1)'\n      end\n      @table[new_ostruct_member(name[0..-2])] = args[0]\n    else\n      @table[name.to_sym]\n    end\n  end\n\n  def respond_to_missing?(mid, include_private = false) # :nodoc:\n    mname = mid.to_s.chomp('=').to_sym\n    @table&.key?(mname) || super\n  end\n\n  def each_pair\n    return enum_for :each_pair unless block_given?\n\n    @table.each_pair do |pair|\n      yield pair\n    end\n  end\n\n  def ==(other)\n    return false unless other.is_a?(OpenStruct)\n\n    @table == other.instance_variable_get(:@table)\n  end\n\n  def ===(other)\n    return false unless other.is_a?(OpenStruct)\n\n    @table === other.instance_variable_get(:@table)\n  end\n\n  def eql?(other)\n    return false unless other.is_a?(OpenStruct)\n\n    @table.eql? other.instance_variable_get(:@table)\n  end\n\n  def to_h\n    @table.dup\n  end\n\n  def to_n\n    @table.to_n\n  end\n\n  def hash\n    @table.hash\n  end\n\n  attr_reader :table\n\n  def delete_field(name)\n    sym = name.to_sym\n    begin\n      singleton_class.__send__(:remove_method, sym, \"#{sym}=\")\n    rescue NameError\n    end\n    @table.delete sym\n  end\n\n  def new_ostruct_member(name)\n    name = name.to_sym\n    unless respond_to?(name)\n      define_singleton_method(name) { @table[name] }\n      define_singleton_method(\"#{name}=\") { |x| @table[name] = x }\n    end\n    name\n  end\n\n  `var ostruct_ids;`\n\n  def inspect\n    %x{\n      var top = (ostruct_ids === undefined),\n          ostruct_id = #{__id__};\n    }\n    begin\n      result = \"#<#{self.class}\"\n      %x{\n        if (top) {\n          ostruct_ids = {};\n        }\n        if (ostruct_ids.hasOwnProperty(ostruct_id)) {\n          return result + ' ...>';\n        }\n        ostruct_ids[ostruct_id] = true;\n      }\n\n      result += ' ' if @table.any?\n\n      result += each_pair.map do |name, value|\n        \"#{name}=#{value.inspect}\"\n      end.join ', '\n\n      result += '>'\n\n      result\n    ensure\n      %x{\n        if (top) {\n          ostruct_ids = undefined;\n        }\n      }\n    end\n  end\n\n  alias to_s inspect\nend\n"],"names":["<top (required)>","<class:OpenStruct>","initialize","hash","@table","each_pair","block in initialize","key","value","block (2 levels) in initialize","$writer","self","new_ostruct_member","[]=","-","1","[]","name","to_sym","method_missing",">","args","length","2","raise","NoMethodError","new","end_with?","ArgumentError","0","-2","respond_to_missing?","mid","include_private","mname","to_s","chomp","$ret_or_1","block_given?","enum_for","block in each_pair","pair","==","other","is_a?","OpenStruct","instance_variable_get","===","eql?","to_h","dup","to_n","attr_reader","delete_field","sym","singleton_class","__send__","NameError","delete","respond_to?","define_singleton_method","block in new_ostruct_member","block (2 levels) in new_ostruct_member","x","inspect","__id__","result","class","any?","+","map","block in inspect","block (2 levels) in inspect","join"],"mappings":"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"}},{"offset":{"line":31563,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/event/custom.rb"],"sourcesContent":["require 'ostruct'\n\nmodule Browser; class Event\n\nclass Custom < Event\n  def self.supported?\n    Browser.supports? 'Event.Custom'\n  end\n\n  class Definition < Definition\n    def method_missing(name, value)\n      if name.end_with? ?=\n        `#@native[#{name[0 .. -2]}] = value`\n      end\n    end\n  end\n\n  if Browser.supports? 'Event.constructor'\n    def self.construct(name, desc)\n      `return new CustomEvent(name, {\n        bubbles:    desc.bubbles,\n        cancelable: desc.cancelable,\n        detail:     desc })`\n    end\n  elsif Browser.supports? 'Event.create'\n    def self.construct(name, desc)\n      %x{\n        var event = document.createEvent(\"CustomEvent\");\n            event.initCustomEvent(name, desc.bubbles, desc.cancelable, desc);\n\n        return event;\n      }\n    end\n  elsif Browser.supports? 'Event.createObject'\n    def self.construct(name, desc)\n      Native(`document.createEventObject()`).merge!(`{\n        type:       name,\n        bubbles:    desc.bubbles,\n        cancelable: desc.cancelable,\n        detail:     desc }`).to_n\n    end\n  else\n    def self.construct(name, desc)\n      Native(desc).merge!(`{\n        type:       name,\n        bubbles:    desc.bubbles,\n        cancelable: desc.cancelable,\n        detail:     desc }`).to_n\n    end\n  end\n\n  def initialize(event, callback = nil)\n    super(event, callback)\n\n    @detail = Hash.new(`#{event}.detail`)\n  end\n\n  def method_missing(id, *)\n    return @detail[id] if @detail.has_key?(id)\n\n    super\n  end\nend\n\nend; end\n"],"names":["<top (required)>","self","require","<module:Browser>","<class:Event>","<class:Custom>","supported?","Browser","supports?","<class:Definition>","method_missing","name","value","end_with?","@native","[]","0","-2","Definition","construct","desc","Native","merge!","to_n","initialize","event","callback","@detail","Hash","new","id","has_key?","Event"],"mappings":"AAAAA,uDAAAA;EAAAA;;EAAAA;;EAAAC,IAAAC,SAAAA,CAAQF,SAARE;EAEAF,OAAAG;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAEhBA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QACEC,MAAIL,IAAJK,iBAAAA,kCAAAA;AAAAA;UACEA,OAAAC,aAAOC,cAAAA,CAAWF,cAAXE;QADTF,CAAAA,GAAAA;QAIAG;QAAAA;;UAAAA;;AAAAA;UACEA,OAAAC,8BAAAA,0BAAmBC,IAAD,EAAOC,KAAzBF;AAAAA,YAAAA;;YACE,IAAA,QAAGC,IAAIE,cAAAA,CAAWH,GAAXG,CAAP,CAAA;cACEH,OAAEI,cAAOJ,CAAGC,IAAII,OAAAA,CAAC,OAAAC,CAAA,EAAKC,EAAL,QAADF,CAAUL;YAD5B;cAXNA,OAAA;YAWM;UADFA,CAAAA,GAAAA;QADFD,GAAAA,WAAAA,EAAmBS,gBAAnBT;QAQA,IAAA,QAAGF,aAAOC,cAAAA,CAAWH,mBAAXG,CAAV,CAAA;UACEW,MAAIlB,IAAJkB,gBAAAA,qBAAmBR,IAAD,EAAOS,IAAzBD;AAAAA;YACGA;AACPA;AACAA;AACAA;UAJIA,CAAAA,GAAAA;QADF,OAOA,IAAA,QAAMZ,aAAOC,cAAAA,CAAWH,cAAXG,CAAb,CAAA;UACEW,MAAIlB,IAAJkB,gBAAAA,qBAAmBR,IAAD,EAAOS,IAAzBD;AAAAA;;AAEJA;AACAA;;AAEAA;AACAA;UANIA,CAAAA,GAAAA;QADF,OASA,IAAA,QAAMZ,aAAOC,cAAAA,CAAWH,oBAAXG,CAAb,CAAA;UACEW,MAAIlB,IAAJkB,gBAAAA,qBAAmBR,IAAD,EAAOS,IAAzBD;AAAAA,YAAAA;;YACEA,OAAAlB,IAAAoB,QAAAA,CAAQF,4BAARE,CAAsCC,WAAAA,CAASH;AACrDA;AACAA;AACAA;AACAA,0BAJ4CG,CAIhBC,MAAAA,CAAAA;UALxBJ,CAAAA,GAAAA;QADF;UASEA,MAAIlB,IAAJkB,gBAAAA,qBAAmBR,IAAD,EAAOS,IAAzBD;AAAAA,YAAAA;;YACEA,OAAAlB,IAAAoB,QAAAA,CAAOD,IAAPC,CAAYC,WAAAA,CAASH;AAC3BA;AACAA;AACAA;AACAA,0BAJkBG,CAIUC,MAAAA,CAAAA;UALxBJ,CAAAA,GAAAA;QATF;;AAkBAK,QAAAA,0BAAAA,sBAAeC,KAAD,EAAQC,QAAtBF;AAAAA,UAAAA;;UAAAA;;;UAAsB,iCAAW,GAAX;UACpB,OAAAvB,IAAA,EAAA,0DAAA,cAAA,EAAA,CAAMwB,KAAN,EAAaC,QAAb,CAAA,EAAA,IAAA;UAEAF,OAAAG,CAAAA,cAAUC,UAAIC,KAAAA,CAAQJ,KAAMD,OAAdK,CAAdF;QAHFH,CAAAA,IAAAA;QAMAnB,OAAAK,8BAAAA,0BAAmBoB,EAAD,EAzDpB,EAyDEpB;AAAAA,UAAAA;;UAAAA;;;UAzDF;;UAyDyB;UACrB,IAAA,QAAsBiB,WAAOI,aAAAA,CAAUD,EAAVC,CAA7B,CAAA;YAAA,OAAOJ,WAAOZ,OAAAA,CAACe,EAADf;UAAd;UAEAL,OAAA,OAAAT,IAAA,EAAA,kEAAA,kBAAA,EAAA,CAAA6B,EAAA,CAAA,QAAA,MAAA,SAAA,CAAA,CAAA,EAAA,MAAA;QAHFpB,CAAAA,IAAAA;MArDFL,GAAAA,WAAAA,EAAe2B,WAAf3B;IAFgBD,GAAAA,WAAAA,EAAAA,IAAAA;EAAhBD,GAAAA,WAAAA;AAFAH;"}},{"offset":{"line":31675,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/event.rb"],"sourcesContent":["require 'browser/event/base'\n\nmodule Browser\n\nclass Event\n  def self.aliases\n    @aliases ||= {\n      'dom:load' => 'DOMContentLoaded',\n      'hover'    => 'mouse:over'\n    }\n  end\n\n  def self.name_for(name)\n    (aliases[name] || name).gsub(?:, '')\n  end\n\n  def self.handlers\n    @handlers ||= {}\n  end\n\n  def self.handles(*events)\n    events.each { |event| Event.handlers[event] = self }\n  end\n\n  # Those events don't have interesting properties to warrant a custom class\n  # or are not currently implemented.\n  handles 'abort', 'afterprint', 'beforeprint', 'cached', 'canplay',\n          'canplaythrough', 'change', 'chargingchange', 'chargingtimechange',\n          'checking', 'close', 'dischargingtimechange', 'DOMContentLoaded',\n          'downloading', 'durationchange', 'emptied', 'ended', 'error',\n          'fullscreenchange', 'fullscreenerror', 'input', 'invalid',\n          'levelchange', 'loadeddata', 'loadedmetadata', 'noupdate', 'obsolete',\n          'offline', 'online', 'open', 'orientationchange', 'pause',\n          'pointerlockchange', 'pointerlockerror', 'play', 'playing',\n          'ratechange', 'readystatechange', 'reset', 'seeked', 'seeking',\n          'stalled', 'submit', 'success', 'suspend', 'timeupdate', 'updateready',\n          'visibilitychange', 'volumechange', 'waiting'\n\n  def self.class_for(name)\n    @handlers[name_for(name)] || Custom\n  end\n\n  def self.supported?\n    true\n  end\n\n  def self.create(name, *args, &block)\n    name  = name_for(name)\n    klass = class_for(name)\n\n    event = klass.new(klass.construct(name, klass.const_get(:Definition).new(&block)))\n    event.arguments = args\n\n    event\n  end\n\n  if Browser.supports? 'Event.constructor'\n    def self.construct(name, desc)\n      `new Event(#{name}, #{desc})`\n    end\n  elsif Browser.supports? 'Event.create'\n    def self.construct(name, desc)\n      %x{\n        var event = document.createEvent(\"HTMLEvents\");\n            event.initEvent(name, desc.bubbles, desc.cancelable);\n\n        #{return Native(`event`).merge!(desc)};\n      }\n    end\n  elsif Browser.supports? 'Event.createObject'\n    def self.construct(name, desc)\n      Native(`document.createEventObject()`) \\\n        .merge!(desc) \\\n        .merge!(`{ type: name }`) \\\n        .to_n\n    end\n  else\n    def self.construct(name, desc)\n      Native(desc).merge!(`{ type: name }`).to_n\n    end\n  end\n\n  def self.new(value, callback = nil)\n    return super unless self == Event\n\n    klass = class_for(callback ? callback.name : `value.type`)\n\n    if klass == Event\n      super\n    else\n      klass.new(value, callback)\n    end\n  end\n\n  attr_reader :callback\n  attr_writer :on\n\n  def initialize(event, callback = nil)\n    super(event)\n\n    @callback = callback\n  end\n\n  def name\n    `#@native.type`\n  end\n\n  def on\n    @on || Target.convert(`#@native.currentTarget`)\n  end\n\n  def target\n    Target.convert(`#@native.srcElement || #@native.target`)\n  end\n\n  def arguments\n    `#@native.arguments || []`\n  end\n\n  def arguments=(args)\n    `#@native.arguments = #{args}`\n  end\n\n  alias_native :bubbles?, :bubbles\n  alias_native :cancelable?, :cancelable\n  alias_native :data\n  alias_native :phase, :eventPhase\n  alias_native :at, :timeStamp\n\n  def off\n    @callback.off if @callback\n  end\n\n  def stopped?\n    `!!#@native.stopped`\n  end\n\n  def stop\n    `#@native.stopPropagation()` if defined?(`#@native.stopPropagation`)\n    `#@native.stopped = true`\n  end\n\n  def prevent\n    `#@native.preventDefault()` if defined?(`#@native.preventDefault`)\n    `#@native.prevented = true`\n  end\n\n  def prevented?\n    `!!#@native.prevented`\n  end\n\n  def stop!\n    prevent\n    stop\n  end\nend\n\nend\n\nrequire 'browser/event/ui'\nrequire 'browser/event/mouse'\nrequire 'browser/event/keyboard'\nrequire 'browser/event/custom'\n"],"names":["<top (required)>","self","require","<module:Browser>","<class:Event>","aliases","@aliases","$ret_or_1","name_for","name","[]","gsub","handlers","@handlers","handles","each","events","block in handles","event","block (2 levels) in handles","$writer","[]=","Event","-","1","class_for","Custom","supported?","create","klass","new","construct","const_get","block","to_proc","args","arguments=","Browser","supports?","desc","Native","merge!","to_n","value","callback","attr_reader","attr_writer","initialize","@callback","@native","on","@on","Target","convert","target","arguments","alias_native","off","stopped?","stop","prevent","prevented?","stop!"],"mappings":"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"}},{"offset":{"line":31918,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/window/view.rb"],"sourcesContent":["module Browser; class Window\n\nclass View\n  def initialize(window)\n    @window = window\n    @native = window.to_n\n  end\n\n  if Browser.supports? 'Window.innerSize'\n    def width\n      `#@native.innerWidth`\n    end\n\n    def height\n      `#@native.innerHeight`\n    end\n  elsif Browser.supports? 'Element.clientSize'\n    def height\n      `#@native.document.documentElement.clientHeight`\n    end\n\n    def width\n      `#@native.document.documentElement.clientWidth`\n    end\n  else\n    def width\n      raise NotImplementedError, 'window size unsupported'\n    end\n\n    def height\n      raise NotImplementedError, 'window size unsupported'\n    end\n  end\n\n  # Get a device pixel ratio. Can be used to handle desktop browser\n  # zoom, retina devices and custom screen scale for mobile devices.\n  # Use $window.visual_viewport.scale to handle mobile zoom.\n  def zoom\n    `#@native.devicePixelRatio`\n  end\n\n  # Handle #pixel_ratio changes. This will trigger a block on zoom.\n  def on_zoom &block\n    %x{\n      var mqString = \"(resolution: \" + #@native.devicePixelRatio + \"dppx)\";\n      #@native.matchMedia(mqString).addListener(#{block.to_n});\n    }\n  end\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<class:Window>","<class:View>","initialize","window","@window","@native","to_n","Browser","supports?","width","height","self","raise","NotImplementedError","zoom","on_zoom","block"],"mappings":"AAAAA,sDAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAEhBA,OAAAC;MAAAA;;QAAAA;;AAAAA;;;AACEC,QAAAA,0BAAAA,sBAAeC,MAAfD;AAAAA,UAAAA;;;UACEE,cAAUD;UACVD,OAAAG,CAAAA,iBAAUF,MAAMG,MAAAA,CAAAA,CAAhBD;QAFFH,CAAAA,GAAAA;QAKA,IAAA,QAAGK,aAAOC,cAAAA,CAAWP,kBAAXO,CAAV,CAAA;;;AACEC,UAAAA,qBAAAA,iBAAAA;AAAAA,YAAAA;;YACEA,OAAEJ,cAAOI;UADXA,CAAAA,GAAAA;;AAIAC,UAAAA,sBAAAA,kBAAAA;AAAAA,YAAAA;;YACEA,OAAEL,cAAOK;UADXA,CAAAA,GAAAA;QALF,OAQA,IAAA,QAAMH,aAAOC,cAAAA,CAAWP,oBAAXO,CAAb,CAAA;;;AACEE,UAAAA,sBAAAA,kBAAAA;AAAAA,YAAAA;;YACEA,OAAEL,cAAOK;UADXA,CAAAA,GAAAA;;AAIAD,UAAAA,qBAAAA,iBAAAA;AAAAA,YAAAA;;YACEA,OAAEJ,cAAOI;UADXA,CAAAA,GAAAA;QALF;;;AASEA,UAAAA,qBAAAA,iBAAAA;AAAAA,YAAAA;;YACEA,OAAAE,IAAAC,OAAAA,CAAMC,yBAAN,EAA2BJ,yBAA3BG;UADFH,CAAAA,GAAAA;;AAIAC,UAAAA,sBAAAA,kBAAAA;AAAAA,YAAAA;;YACEA,OAAAC,IAAAC,OAAAA,CAAMC,yBAAN,EAA2BH,yBAA3BE;UADFF,CAAAA,GAAAA;QAbF;;AAqBAI,QAAAA,oBAAAA,gBAAAA;AAAAA,UAAAA;;UACEA,OAAET,cAAOS;QADXA,CAAAA,GAAAA;QAKAb,OAAAc,uBAAAA,mBAAAA;AAAAA,UAAAA;;UAAAA;;;;AAEFA,uCAAwCV,cAAOU;AAC/CA,MAAOV,cAAOU,kCAAoCC,KAAKV,MAAAA,CAAAA,CAAMS;AAC7DA;QAJEA,CAAAA,GAAAA;MAxCFd,GAAAA,WAAAA,EAAAA,IAAAA;IAFgBD,GAAAA,WAAAA,EAAAA,IAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":32012,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/window/size.rb"],"sourcesContent":["module Browser; class Window\n\n# Allows access and manipulation of the {Window} size.\nclass Size\n  # @private\n  def initialize(window)\n    @window = window\n    @native = window.to_n\n  end\n\n  def set(*args)\n    if Hash === args.first\n      width, height = args.first.values_at(:width, :height)\n    else\n      width, height = args\n    end\n\n    width  ||= self.width\n    height ||= self.height\n\n    `#@native.resizeTo(#{width}, #{height})`\n\n    self\n  end\n\n  # @!attribute width\n  # @return [Integer] the width of the window\n\n  # @!attribute height\n  # @return [Integer] the height of the window\n\n  if Browser.supports? 'Window.outerSize'\n    def width\n      `#@native.outerWidth`\n    end\n\n    def height\n      `#@native.outerHeight`\n    end\n  else\n    def width\n      raise NotImplementedError, 'window outer size not supported'\n    end\n\n    def height\n      raise NotImplementedError, 'window outer size not supported'\n    end\n  end\n\n  def width=(value)\n    set(width: value)\n  end\n\n  def height=(value)\n    set(height: value)\n  end\n\n  # @!attribute inner_width\n  # @return [Integer] the inner width of the window\n\n  def inner_width\n    `#@native.innerWidth`\n  end\n\n  # @!attribute inner_height\n  # @return [Integer] the inner height of the window\n\n  def inner_height\n    `#@native.innerHeight`\n  end\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<class:Window>","<class:Size>","initialize","window","@window","@native","to_n","set","Hash","args","first","values_at","width","height","$ret_or_1","self","Browser","supports?","raise","NotImplementedError","width=","value","height=","inner_width","inner_height"],"mappings":"AAAAA,sDAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAGhBA,OAAAC;MAAAA;;QAAAA;;AAAAA;;;AAEEC,QAAAA,0BAAAA,sBAAeC,MAAfD;AAAAA,UAAAA;;;UACEE,cAAUD;UACVD,OAAAG,CAAAA,iBAAUF,MAAMG,MAAAA,CAAAA,CAAhBD;QAFFH,CAAAA,GAAAA;;AAKAK,QAAAA,mBAAAA,eAVF,EAUEA;AAAAA,UAAAA;;;;UAVF;;UAUU;UACN,IAAA,QAAGC,UAAH,EAAYC,IAAIC,OAAAA,CAAAA,CAAhB,CAAA;YACE,KAAgBD,IAAIC,OAAAA,CAAAA,CAAMC,WAAAA,CAAW,OAArB,EAA6B,QAAnBA,CAA1B,kBAAA,EAAAC,CAAAA,QAAA,6BAAAA,CAAA,EAAOC,CAAAA,SAAP,6BAAOA,CAAP;UADF;YAGE,KAAgBJ,IAAhB,kBAAA,EAAAG,CAAAA,QAAA,6BAAAA,CAAA,EAAOC,CAAAA,SAAP,6BAAOA,CAAP;UAHF;UAMAD,QAjBJ,CAAA,QAAAE,CAAAA,YAiBIF,KAjBJE,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAiBeC,IAAIH,OAAAA,CAAAA,CAjBnB,CAAA;UAkBIC,SAlBJ,CAAA,QAAAC,CAAAA,YAkBID,MAlBJC,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAkBeC,IAAIF,QAAAA,CAAAA,CAlBnB,CAAA;UAoBMR,cAAOE,UAAYK,KAAML,EAAIM,MAAON;UAEtCA,OAAAQ;QAZFR,CAAAA,IAAAA;QAqBA,IAAA,QAAGS,aAAOC,cAAAA,CAAWhB,kBAAXgB,CAAV,CAAA;;;AACEL,UAAAA,qBAAAA,iBAAAA;AAAAA,YAAAA;;YACEA,OAAEP,cAAOO;UADXA,CAAAA,GAAAA;;AAIAC,UAAAA,sBAAAA,kBAAAA;AAAAA,YAAAA;;YACEA,OAAER,cAAOQ;UADXA,CAAAA,GAAAA;QALF;;;AASED,UAAAA,qBAAAA,iBAAAA;AAAAA,YAAAA;;YACEA,OAAAG,IAAAG,OAAAA,CAAMC,yBAAN,EAA2BP,iCAA3BM;UADFN,CAAAA,GAAAA;;AAIAC,UAAAA,sBAAAA,kBAAAA;AAAAA,YAAAA;;YACEA,OAAAE,IAAAG,OAAAA,CAAMC,yBAAN,EAA2BN,iCAA3BK;UADFL,CAAAA,GAAAA;QAbF;;AAkBAO,QAAAA,sBAAAA,0BAAWC,KAAXD;AAAAA,UAAAA;;UACEA,OAAAL,IAAAR,KAAAA,CAAI,mBAAA,SAAOc,KAAP,EAAJd;QADFa,CAAAA,GAAAA;;AAIAE,QAAAA,uBAAAA,2BAAYD,KAAZC;AAAAA,UAAAA;;UACEA,OAAAP,IAAAR,KAAAA,CAAI,oBAAA,UAAQc,KAAR,EAAJd;QADFe,CAAAA,GAAAA;;AAOAC,QAAAA,2BAAAA,uBAAAA;AAAAA,UAAAA;;UACEA,OAAElB,cAAOkB;QADXA,CAAAA,GAAAA;QAOAtB,OAAAuB,4BAAAA,wBAAAA;AAAAA,UAAAA;;UACEA,OAAEnB,cAAOmB;QADXA,CAAAA,GAAAA;MAhEFvB,GAAAA,WAAAA,EAAAA,IAAAA;IAHgBD,GAAAA,WAAAA,EAAAA,IAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":32117,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/window.rb"],"sourcesContent":["require 'browser/window/view'\nrequire 'browser/window/size'\n\nmodule Browser\n\n# Wrapper class for the `window` object, an instance of it gets\n# set to `$window`.\nclass Window\n  def self.open(url, options)\n    name     = options.delete(:name)\n    features = options.map {|key, value|\n      value = case value\n              when true  then :yes\n              when false then :no\n              else            value\n              end\n\n      \"#{key}=#{value}\"\n    }.join(?,)\n\n    %x{\n      var win = window.open(#{url}, #{name}, #{features});\n\n      if (win == null) {\n        return nil;\n      }\n\n      return #{new(`win`)};\n    }\n  end\n\n  include Browser::NativeCachedWrapper\n  include Event::Target\n\n  target {|value|\n    $window if `#{value} == window`\n  }\n\n  # Alert the passed string.\n  def alert(value)\n    `#@native.alert(value)`\n\n    value\n  end\n\n  # Display a prompt dialog with the passed string as text.\n  def prompt(value, default=nil)\n    `#@native.prompt(value, #{default || \"\"}) || nil`\n  end\n\n  # Display a confirmation dialog with the passed string as text.\n  def confirm(value)\n    `#@native.confirm(value) || false`\n  end\n\n  # @!attribute [r] parent\n  # @return [Window] parent of the current window or subframe\n  def parent\n    @parent ||= Browser::Window.new(`#@native.parent`)\n  end\n\n  # @!attribute [r] top\n  # @return [Window] reference to the topmost window in the window hierarchy\n  def top\n    @top ||= Browser::Window.new(`#@native.top`)\n  end\n\n  # @!attribute [r] opener\n  # @return [Window] reference to the window that opened the window using `open`\n  def opener\n    @opener ||= Browser::Window.new(`#@native.opener`)\n  end\n\n  # Get the {View} for the window.\n  #\n  # @return [View]\n  def view\n    @view ||= View.new(self)\n  end\n\n  # Get the {Size} for this window.\n  #\n  # @return [Size]\n  def size\n    @size ||= Size.new(self)\n  end\n\n  # Get the {DOM::Element::Scroll} for this window.\n  #\n  # @return [DOM::Element::Scroll]\n  def scroll\n    @scroll ||= DOM::Element::Scroll.new(self)\n  end\n\n  if Browser.supports? 'Window.send'\n    def send(message, options = {})\n      `#@native.postMessage(#{message}, #{options[:to] || '*'})`\n    end\n  else\n    # Send a message to the window.\n    #\n    # @param message [String] the message\n    # @param options [Hash] optional `to: target`\n    def send(message, options = {})\n      raise NotImplementedError, 'message sending unsupported'\n    end\n  end\n\n  def close\n    `#{@native}.close()`\n  end\nend\n\nend\n\n$window = Browser::Window.new(`window`)\n\nmodule Kernel\n  # (see Browser::Window#alert)\n  def alert(value)\n    $window.alert(value)\n  end\n\n  # (see Browser::Window#prompt)\n  def prompt(value, default=nil)\n    $window.prompt(value, default)\n  end\n\n  # (see Browser::Window#confirm)\n  def confirm(value)\n    $window.confirm(value)\n  end\nend\n"],"names":["<top (required)>","self","require","<module:Browser>","<class:Window>","open","url","options","name","delete","features","map","block in open","key","value","block (2 levels) in open","$ret_or_1","join","new","include","Browser::NativeCachedWrapper","Browser","Event::Target","Event","target","block in <class:Window>","block (2 levels) in <class:Window>","$window","alert","@native","prompt","default$","confirm","parent","@parent","Browser::Window","top","@top","opener","@opener","view","@view","View","size","@size","Size","scroll","@scroll","DOM::Element::Scroll","DOM::Element","DOM","supports?","send","message","[]","raise","NotImplementedError","close","<module:Kernel>"],"mappings":"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"}},{"offset":{"line":32288,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/dom/node_set.rb"],"sourcesContent":["module Browser; module DOM\n\n# Allows manipulation of a set of {Node}s.\nclass NodeSet\n  # Create a new {NodeSet} from the given nodes.\n  #\n  # Note that the nodes are flattened and converted with DOM automatically,\n  # this means you can pass {NodeSet}s and {Native::Array}s as well.\n  def self.[](*nodes)\n    new(nodes.flatten.map { |x| DOM(Native.convert(x)) }.uniq)\n  end\n\n  def initialize(literal)\n    @literal = literal\n  end\n\n  # Any other method will be called on every node in the set.\n  def method_missing(name, *args, &block)\n    unless @literal.respond_to? name\n      each {|el|\n        el.__send__(name, *args, &block)\n      }\n\n      return self\n    end\n\n    result = @literal.__send__ name, *args, &block\n\n    if `result === #@literal`\n      self\n    elsif Array === result\n      NodeSet.new(result)\n    else\n      result\n    end\n  end\n\n  def respond_to_missing?(name, *)\n    @literal.respond_to?(name)\n  end\n\n  # Get the first node matching the given CSS selectors.\n  #\n  # @param rules [Array<String>] the CSS selectors to match with\n  #\n  # @return [Node?]\n  def at_css(*rules)\n    each {|node|\n      if node = node.at_css(*rules)\n        return node\n      end\n    }\n\n    nil\n  end\n\n  # Get the first node matching the given XPath.\n  #\n  # @param paths [Array<String>] the XPath to match with\n  #\n  # @return [Node?]\n  def at_xpath(*paths)\n    each {|node|\n      if node = node.at_xpath(*paths)\n        return node\n      end\n    }\n\n    nil\n  end\n\n  # Query for children matching the given CSS selector.\n  #\n  # @param path [String] the CSS selector\n  #\n  # @return [NodeSet]\n  def css(path)\n    NodeSet[@literal.map {|node|\n      node.css(path)\n    }]\n  end\n\n  # Create another {NodeSet} with all the nodes that match the given\n  # expression.\n  #\n  # @param expression [String] a CSS selector\n  #\n  # @return [NodeSet] the new {NodeSet} with the matching nodes\n  def filter(expression)\n    NodeSet[@literal.select { |node| node =~ expression }]\n  end\n\n  # Search for multiple selectors\n  def search(*what)\n    NodeSet[@literal.map { |node| node.search(*what) }]\n  end\n\n  # Outer HTML of the entire nodeset\n  def outer_html\n    @literal.map(&:outer_html).join\n  end\n\n  # Query for children matching the given XPath.\n  #\n  # @param path [String] the XPath\n  #\n  # @return [NodeSet]\n  def xpath(path)\n    NodeSet[@literal.map {|node|\n      node.xpath(path)\n    }]\n  end\n\n  def to_ary\n    @literal\n  end\n\n  alias to_a to_ary\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<module:DOM>","<class:NodeSet>","[]","self","new","map","nodes","flatten","block in []","x","block (2 levels) in []","DOM","Native","convert","uniq","initialize","literal","@literal","method_missing","name","respond_to?","each","block in method_missing","el","block (2 levels) in method_missing","__send__","args","block","to_proc","result","Array","NodeSet","respond_to_missing?","at_css","block in at_css","node","rules","block (2 levels) in at_css","at_xpath","block in at_xpath","paths","block (2 levels) in at_xpath","css","path","block in css","block (2 levels) in css","filter","expression","select","block in filter","block (2 levels) in filter","=~","search","block in search","block (2 levels) in search","what","outer_html","join","xpath","block in xpath","block (2 levels) in xpath","to_ary"],"mappings":"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"}},{"offset":{"line":32477,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/dom/node.rb"],"sourcesContent":["module Browser; module DOM\n\n# Abstract class for all DOM node types.\n#\n# @see https://developer.mozilla.org/en-US/docs/Web/API/Node\nclass Node\n  include Browser::NativeCachedWrapper\n\n  ELEMENT_NODE                = 1\n  ATTRIBUTE_NODE              = 2\n  TEXT_NODE                   = 3\n  CDATA_SECTION_NODE          = 4\n  ENTITY_REFERENCE_NOCE       = 5\n  ENTITY_NODE                 = 6\n  PROCESSING_INSTRUCTION_NODE = 7\n  COMMENT_NODE                = 8\n  DOCUMENT_NODE               = 9\n  DOCUMENT_TYPE_NODE          = 10\n  DOCUMENT_FRAGMENT_NODE      = 11\n  NOTATION_NODE               = 12\n\n  # Wrap a native DOM node.\n  #\n  # @param value [native] the native DOM node\n  #\n  # @return [Node]\n  def self.new(value)\n    if self == Node\n      @classes ||= [nil, Element, Attribute, Text, CDATA, nil, nil, nil, Comment, Document, nil, DocumentFragment]\n\n      if klass = @classes[`value.nodeType`]\n        klass.new(value)\n      else\n        raise ArgumentError, 'cannot instantiate a non derived Node object'\n      end\n    else\n      super\n    end\n  end\n\n  def initialize(node)\n    raise ArgumentError, \"Please ensure that #initialize of #{self.class} accepts one argument\" unless node\n    super\n  end\n\n  # Return true of the other element is the same underlying DOM node.\n  #\n  # @return [Boolean]\n  def ==(other)\n    `#@native === #{Native.convert(other)}`\n  end\n\n  # Initialize a new node after `#dup` or `#clone`.\n  #\n  # This method is not to be called directly. Use `Node#dup` or\n  # `Node#clone`.\n  #\n  # This method creates a deep detached clone of a DOM subtree to be used\n  # in the same document. The new node will have all events detached.\n  def initialize_copy(old)\n    set_native_reference `#{old.to_n}.cloneNode(true)`\n  end\n\n  # Append a child to the node.\n  #\n  # When passing a {String} a text node will be created.\n  #\n  # When passing an Object that responds to #each, every yielded element\n  # will be added following the same logic.\n  #\n  # @param node [String, Node, #each, #to_n] the node to append\n  #\n  # @return [self]\n  def <<(node)\n    if Opal.respond_to? node, :each\n      node.each { |n| self << n }\n      return self\n    elsif Opal.respond_to? node, :to_dom\n      node = node.to_dom(document)\n    end\n\n    unless native?(node)\n      if String === node\n        node = `#@native.ownerDocument.createTextNode(node)`\n      else\n        node = Native.convert(node)\n      end\n    end\n\n    `#@native.appendChild(node)`\n\n    self\n  end\n\n  def >>(node)\n    if Opal.respond_to? node, :each\n      node.each { |n| self >> n }\n      return self\n    elsif Opal.respond_to? node, :to_dom\n      node = node.to_dom(document)\n    end\n\n    unless native?(node)\n      if String === node\n        node = `#@native.ownerDocument.createTextNode(node)`\n      else\n        node = Native.convert(node)\n      end\n    end\n\n    if `#@native.firstChild == null`\n      `#@native.appendChild(node)`\n    else\n      `#@native.insertBefore(node, #@native.firstChild)`\n    end\n\n    self\n  end\n\n  def add_child(node = nil, &block)\n    unless node\n      node = DOM(&block)\n    end\n\n    self << node\n  end\n\n  # Add the passed node after this one.\n  #\n  # When passing a {String} a text node will be created.\n  #\n  # @param node [String, Node, #to_n] the node to add\n  def add_next_sibling(node = nil, &block)\n    unless node\n      node = DOM(&block)\n    end\n    node = node.to_dom(document) if Opal.respond_to? node, :to_dom\n\n    unless native?(node)\n      if String === node\n        node = `#@native.ownerDocument.createTextNode(node)`\n      else\n        node = Native.convert(node)\n      end\n    end\n\n    `#@native.parentNode.insertBefore(node, #@native.nextSibling)`\n  end\n\n  # Add the passed node before this one.\n  #\n  # When passing a {String} a text node will be created.\n  #\n  # @param node [String, Node, #to_n] the node to add\n  def add_previous_sibling(node = nil, &block)\n    unless node\n      node = DOM(&block)\n    end\n    node = node.to_dom(document) if Opal.respond_to? node, :to_dom\n\n    unless native?(node)\n      if String === node\n        node = `#@native.ownerDocument.createTextNode(node)`\n      else\n        node = Native.convert(node)\n      end\n    end\n\n    `#@native.parentNode.insertBefore(node, #@native)`\n  end\n\n  alias after add_next_sibling\n\n  # Append the node to the passed one.\n  #\n  # @param node [Node] the node to append to\n  def append_to(node)\n    node << self\n    self\n  end\n\n  # Get an array of ancestors.\n  #\n  # Passing a selector will select the ancestors matching it.\n  #\n  # @param expression [String] the selector to use as filter\n  #\n  # @return [NodeSet]\n  def ancestors(expression = nil)\n    return NodeSet[] unless parent\n\n    parents = [parent]\n\n    while parent = parents.last.parent\n      parents << parent\n    end\n\n    if Document === parents.last\n      parents.pop\n    end\n\n    if expression\n      parents.select! { |p| p =~ expression }\n    end\n\n    NodeSet.new(parents)\n  end\n\n  def attached?\n    `#@native.isConnected`\n  end\n\n  alias before add_previous_sibling\n\n  # Remove the node from its parent.\n  def remove\n    parent.remove_child(self) if parent\n    self\n  end\n\n  # Remove all the children of the node.\n  def clear\n    children.remove\n  end\n\n  # @!attribute content\n  # @return [String] the inner text content of the node\n  if Browser.supports? 'Element.textContent'\n    def content\n      `#@native.textContent`\n    end\n\n    def content=(value)\n      `#@native.textContent = #{value}`\n    end\n  elsif Browser.supports? 'Element.innerText'\n    def content\n      `#@native.innerText`\n    end\n\n    def content=(value)\n      `#@native.innerText = #{value}`\n    end\n  else\n    def content\n      raise NotImplementedError, 'node text content unsupported'\n    end\n\n    def content=(value)\n      raise NotImplementedError, 'node text content unsupported'\n    end\n  end\n\n  def blank?\n    raise NotImplementedError\n  end\n\n  # Return true if the node is a CDATA section.\n  def cdata?\n    node_type == CDATA_SECTION_NODE\n  end\n\n  # @!attribute [r] child\n  # @return [Node?] the first child of the node\n  def child\n    children.first\n  end\n\n  # @!attribute children\n  # @return [NodeSet] the children of the node\n  def children\n    NodeSet[Native::Array.new(`#@native.childNodes`)]\n  end\n\n  def children=(node)\n    raise NotImplementedError\n  end\n\n  # Return true if the node is a comment.\n  def comment?\n    node_type == COMMENT_NODE\n  end\n\n  # Return true if the node is a custom element.\n  def custom?\n    false\n  end\n\n  # @!attribute [rw] document\n  # @return [Document?] the document the node is attached to\n  def document\n    DOM(`#@native.ownerDocument`) if defined?(`#@native.ownerDocument`)\n  end\n\n  # Detach a node and transfer it to another document.\n  def document=(new_document)\n    `#{Native.try_convert(new_document, new_document)}.adoptNode(#@native)`\n  end\n\n  # Return true if the node is a document.\n  def document?\n    node_type == DOCUMENT_NODE\n  end\n\n  # Return true if the node is an element.\n  def elem?\n    node_type == ELEMENT_NODE\n  end\n\n  alias element? elem?\n\n  # @!attribute [r] element_children\n  # @return [NodeSet] all the children which are elements\n  def element_children\n    children.select(&:element?)\n  end\n\n  alias elements element_children\n\n  # @!attribute [r] first_element_child\n  # @return [Element?] the first element child\n  def first_element_child\n    element_children.first\n  end\n\n  # Return true if the node is a document fragment.\n  def fragment?\n    node_type == DOCUMENT_FRAGMENT_NODE\n  end\n\n  alias inner_text content\n  alias inner_text= content=\n\n  # @!attribute [r] last_element_child\n  # @return [Element?] the last element child\n  def last_element_child\n    element_children.last\n  end\n\n  # @!attribute name\n  # @return [String] the name of the node\n  def name\n    `#@native.nodeName || nil`\n  end\n\n  def name=(value)\n    `#@native.nodeName = #{value.to_s}`\n  end\n\n  # @!attribute [r] namespace\n  # @return [String] the namespace of the node\n  def namespace\n    `#@native.namespaceURI || nil`\n  end\n\n  # @!attribute next\n  # @return [Node?] the next sibling of the node\n  def next\n    DOM(`#@native.nextSibling`) if `#@native.nextSibling != null`\n  end\n\n  alias next= add_next_sibling\n\n  # @!attribute [r] next_element\n  # @return [Element?] the next element sibling of the node\n  def next_element\n    current = self.next\n\n    while current && !current.element?\n      current = current.next\n    end\n\n    current\n  end\n\n  alias next_sibling next\n\n  alias node_name name\n\n  alias node_name= name=\n\n  # @!attribute [r] node_type\n  # @return [Symbol] the type of the node\n  def node_type\n    `#@native.nodeType`\n  end\n\n  # @!attribute outer_html\n  # @return [String] the simulated outer html of the node\n  def outer_html\n    div = $document.create_element(\"DIV\")\n    div << self.dup\n    div.inner_html\n  end\n\n  # @!attribute parent\n  # @return [Element?] the parent of the node\n  def parent\n    DOM(`#@native.parentNode`) if `#@native.parentNode != null`\n  end\n\n  def parent=(node)\n    `#@native.parentNode = #{Native.convert(node)}`\n  end\n\n  def parse(text, options = {})\n    raise NotImplementedError\n  end\n\n  def path\n    raise NotImplementedError\n  end\n\n  # Prepend the node to the passed one.\n  #\n  # @param node [Node] the node to prepend to\n  def prepend_to(node)\n    node >> self\n    self\n  end\n\n  # @!attribute previous\n  # @return [Node?] the previous sibling of the node\n  def previous\n    DOM(`#@native.previousSibling`) if `#@native.previousSibling != null`\n  end\n\n  alias previous= add_previous_sibling\n\n  # @!attribute [r] previous_element\n  # @return [Element?] the previous element sibling of the node\n  def previous_element\n    current = self.previous\n\n    while current && !current.element?\n      current = current.previous\n    end\n\n    current\n  end\n\n  alias previous_sibling previous\n\n  # Remove the given node from the children of this node.\n  def remove_child(node)\n    `#@native.removeChild(#{Native.try_convert(node)})`\n    self\n  end\n\n  # Replace the node with the given one.\n  #\n  # @todo implement for NodeSet\n  #\n  # @param node [Node] the node to replace with\n  # @return [Node] the passed node\n  def replace(node)\n    node = node.to_dom(document) if Opal.respond_to? node, :to_dom\n\n    unless native?(node)\n      if String === node\n        node = `#@native.ownerDocument.createTextNode(node)`\n      else\n        node = Native.convert(node)\n      end\n    end\n\n    `#@native.parentNode.replaceChild(node, #@native)`\n\n    DOM(node)\n  end\n\n  alias replace_with replace\n\n  alias text content\n  alias text= content=\n\n  # Return true if the node is a text node.\n  def text?\n    node_type == TEXT_NODE\n  end\n\n  def traverse(&block)\n    raise NotImplementedError\n  end\n\n  alias type node_type\n\n  # @!attribute value\n  # @return [String] the value of the node\n  def value\n    `#@native.nodeValue || nil`\n  end\n\n  def value=(value)\n    `#@native.nodeValue = value`\n  end\n\n  # @private\n  def inspect\n    \"#<DOM::Node: #{name}>\"\n  end\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<module:DOM>","<class:Node>","self","include","Browser::NativeCachedWrapper","Browser","1","2","3","4","5","6","7","8","9","10","11","12","new","value","Node","@classes","$ret_or_1","Element","Attribute","Text","CDATA","Comment","Document","DocumentFragment","klass","[]","raise","ArgumentError","initialize","node","class","==","other","@native","Native","convert","initialize_copy","old","set_native_reference","to_n","<<","Opal","respond_to?","each","block in <<","n","block (2 levels) in <<","to_dom","document","native?","String",">>","block in >>","block (2 levels) in >>","add_child","DOM","block","to_proc","add_next_sibling","add_previous_sibling","append_to","ancestors","expression","parent","NodeSet","parents","last","pop","select!","block in ancestors","p","block (2 levels) in ancestors","=~","attached?","remove","remove_child","clear","children","supports?","content","content=","NotImplementedError","blank?","cdata?","node_type","CDATA_SECTION_NODE","child","first","Native::Array","children=","comment?","COMMENT_NODE","custom?","document=","new_document","try_convert","document?","DOCUMENT_NODE","elem?","ELEMENT_NODE","element_children","select","first_element_child","fragment?","DOCUMENT_FRAGMENT_NODE","last_element_child","name","name=","to_s","namespace","next","next_element","current","element?","!","outer_html","div","$document","create_element","dup","inner_html","parent=","parse","text","options","path","prepend_to","previous","previous_element","replace","text?","TEXT_NODE","traverse","value=","inspect"],"mappings":"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"}},{"offset":{"line":33057,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/dom/attribute.rb"],"sourcesContent":["module Browser; module DOM\n\n# Encapsulates an {Element} attribute.\nclass Attribute\n  include Browser::NativeCachedWrapper\n\n  # @!attribute [r] name\n  # @return [String] the name of the attribute\n  alias_native :name\n\n  # @!attribute value\n  # @return [String] the value of the attribute\n  alias_native :value\n  alias_native :value=\n\n  # Returns true if the attribute is an id.\n  if Browser.supports? 'Attr.isId'\n    alias_native :id?, :isId\n  else\n    def id?\n      name == :id\n    end\n  end\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<module:DOM>","<class:Attribute>","self","include","Browser::NativeCachedWrapper","Browser","alias_native","supports?","id?","name","=="],"mappings":"AAAAA,wDAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAGhBA,OAAAC;MAAAA;;QAAAA;;;QACEC,IAAAC,SAAAA,CAAQC,IAAAC,aAAAD,wBAARD;QAIAD,IAAAI,cAAAA,CAAa,MAAbA;QAIAJ,IAAAI,cAAAA,CAAa,OAAbA;QACAJ,IAAAI,cAAAA,CAAa,QAAbA;QAGA,IAAA,QAAGD,aAAOE,cAAAA,CAAWN,WAAXM,CAAV,CAAA;UACEN,OAAAC,IAAAI,cAAAA,CAAa,KAAb,EAAmB,MAAnBA;QADF;UAGEL,OAAAO,mBAAAA,8BAAAA;AAAAA,YAAAA;;YACEA,OAAAN,IAAAO,MAAAA,CAAAA,CAAKC,OAAAA,CAAG,IAAHA;UADPF,CAAAA,GAAAA;QAHF;MAbFP,GAAAA,WAAAA,EAAAA,IAAAA;IAHgBD,GAAAA,WAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":33095,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/dom/character_data.rb"],"sourcesContent":["module Browser; module DOM\n\nclass CharacterData < Node\n  # Append data to the node.\n  #\n  # @param string [String] the data to add\n  #\n  # @return [self]\n  def append(string)\n    `#@native.appendData(string)`\n\n    self\n  end\n\n  # @!attribute [r] data\n  # @return [String] the data of the node\n  def data\n    `#@native.data`\n  end\n\n  # Delete data from the node.\n  #\n  # @param count [Integer] how much data to delete\n  # @param offset [Integer] the offset to start at\n  #\n  # @return [self]\n  def delete(count, offset = 0)\n    `#@native.deleteData(offset, count)`\n\n    self\n  end\n\n  # Insert data in the node.\n  #\n  # @param string [String] the data to insert\n  # @param offset [Integer] the offset to start at\n  #\n  # @return [self]\n  def insert(string, offset = 0)\n    `#@native.insertData(offset, string)`\n\n    self\n  end\n\n  # @!attribute [r] length\n  # @return [Integer] the length of the node\n  alias_native :length\n\n  # Replace data in the node.\n  #\n  # @param string [String] the data to replace with\n  # @param offset [Integer] the offset to start at\n  # @param count [Integer] how much data to replace\n  #\n  # @return [self]\n  def replace(string, offset = 0, count = `#@native.length`)\n    `#@native.replaceData(offset, count, string)`\n\n    self\n  end\n\n  # Get a substring of the data.\n  #\n  # @param count [Integer] how much data to lice\n  # @param offset [Integer] the offset to start at\n  #\n  # @return [String] the substring\n  def substring(count, offset = 0)\n    `#@native.substringData(offset, count)`\n  end\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<module:DOM>","<class:CharacterData>","append","string","@native","self","data","delete","count","offset","0","insert","alias_native","replace","substring","Node"],"mappings":"AAAAA,6DAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAEhBA,OAAAC;MAAAA;;QAAAA;;AAAAA;;;AAMEC,QAAAA,sBAAAA,kBAAWC,MAAXD;AAAAA,UAAAA;;;UACIE,cAAOF;UAETA,OAAAG;QAHFH,CAAAA,GAAAA;;AAQAI,QAAAA,oBAAAA,gBAAAA;AAAAA,UAAAA;;UACEA,OAAEF,cAAOE;QADXA,CAAAA,GAAAA;;AAUAC,QAAAA,sBAAAA,iCAAWC,KAAD,EAAQC,MAAlBF;AAAAA,UAAAA;;;;UAAkB,6BAASG,CAAT;UACdN,cAAOG;UAETA,OAAAF;QAHFE,CAAAA,IAAAA;;AAYAI,QAAAA,sBAAAA,kBAAWR,MAAD,EAASM,MAAnBE;AAAAA,UAAAA;;;;UAAmB,6BAASD,CAAT;UACfN,cAAOO;UAETA,OAAAN;QAHFM,CAAAA,IAAAA;QAQAN,IAAAO,cAAAA,CAAa,QAAbA;;AASAC,QAAAA,uBAAAA,mBAAYV,MAAD,EAASM,MAAT,EAAqBD,KAAhCK;AAAAA,UAAAA;;;;UAAoB,6BAASH,CAAT;;UAAY,2BAAUN,cAAOS,OAAjB;UAC5BT,cAAOS;UAETA,OAAAR;QAHFQ,CAAAA,IAAAA;QAYAZ,OAAAa,yBAAAA,qBAAcN,KAAD,EAAQC,MAArBK;AAAAA,UAAAA;;;;UAAqB,6BAASJ,CAAT;UACnBI,OAAEV,cAAOU;QADXA,CAAAA,IAAAA;MAjEFb,GAAAA,WAAAA,EAAsBc,UAAtBd;IAFgBD,GAAAA,WAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":33176,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/dom/text.rb"],"sourcesContent":["module Browser; module DOM\n\n# Encapsulates a text node.\n#\n# @see https://developer.mozilla.org/en-US/docs/Web/API/Text\nclass Text < CharacterData\n  # (see Document#create_text)\n  def self.create(content)\n    $document.create_text(content)\n  end\n\n  # @!attribute [r] whole\n  # @return [String] the whole text\n  #\n  # @see https://developer.mozilla.org/en-US/docs/Web/API/Text.wholeText\n  def whole\n    `#@native.wholeText`\n  end\n\n  # Split the text node at a given offset.\n  #\n  # @param offset [Integer] the offset where to split the text node\n  #\n  # @return [Text] the newly created text node\n  #\n  # @see https://developer.mozilla.org/en-US/docs/Web/API/Text.splitText\n  def split(offset)\n    DOM(`#@native.splitText(offset)`)\n  end\n\n  def inspect\n    \"#<DOM::Text: #{data}>\"\n  end\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<module:DOM>","<class:Text>","create","self","content","$document","create_text","whole","@native","split","offset","DOM","inspect","data","CharacterData"],"mappings":"AAAAA,mDAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAKhBA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QAEEC,MAAIC,IAAJD,aAAAA,kBAAgBE,OAAhBF;AAAAA,UAAAA;;UACEA,OAAAG,eAASC,aAAAA,CAAaF,OAAbE;QADXJ,CAAAA,GAAAA;;AAQAK,QAAAA,qBAAAA,iBAAAA;AAAAA,UAAAA;;UACEA,OAAEC,cAAOD;QADXA,CAAAA,GAAAA;;AAWAE,QAAAA,qBAAAA,iBAAUC,MAAVD;AAAAA,UAAAA;;UACEA,OAAAN,IAAAQ,KAAAA,CAAMH,cAAOC,kBAAbE;QADFF,CAAAA,GAAAA;QAIAR,OAAAW,uBAAAA,mBAAAA;AAAAA,UAAAA;;UACEA,OAACA,eAAD,GAAA,CAAgBT,IAAAU,MAAAA,CAAAA,CAAhB,CAAA,GAAqBD;QADvBA,CAAAA,GAAAA;MAzBFX,GAAAA,WAAAA,EAAaa,mBAAbb;IALgBD,GAAAA,WAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":33224,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/dom/cdata.rb"],"sourcesContent":["module Browser; module DOM\n\nclass CDATA < Text\n  def inspect\n    \"#<DOM::CDATA: #{value}>\"\n  end\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<module:DOM>","<class:CDATA>","inspect","self","value","Text"],"mappings":"AAAAA,oDAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAEhBA,OAAAC;MAAAA;;;QACEA,OAAAC,uBAAAA,mBAAAA;AAAAA,UAAAA;;UACEA,OAACA,gBAAD,GAAA,CAAiBC,IAAAC,OAAAA,CAAAA,CAAjB,CAAA,GAAuBF;QADzBA,CAAAA,GAAAA;MADFD,GAAAA,WAAAA,EAAcI,UAAdJ;IAFgBD,GAAAA,WAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":33252,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/dom/comment.rb"],"sourcesContent":["module Browser; module DOM\n\nclass Comment < CharacterData\n  def inspect\n    \"#<DOM::Comment: #{value}>\"\n  end\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<module:DOM>","<class:Comment>","inspect","self","value","CharacterData"],"mappings":"AAAAA,sDAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAEhBA,OAAAC;MAAAA;;;QACEA,OAAAC,uBAAAA,mBAAAA;AAAAA,UAAAA;;UACEA,OAACA,kBAAD,GAAA,CAAmBC,IAAAC,OAAAA,CAAAA,CAAnB,CAAA,GAAyBF;QAD3BA,CAAAA,GAAAA;MADFD,GAAAA,WAAAA,EAAgBI,mBAAhBJ;IAFgBD,GAAAA,WAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":33280,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/dom/element/attributes.rb"],"sourcesContent":["module Browser; module DOM; class Element < Node\n\nclass Attributes\n  attr_reader :namespace\n\n  def initialize(element, options)\n    @element   = element\n    @native    = element.to_n\n    @namespace = options[:namespace]\n  end\n\n  if Browser.supports?('Element.className') || Browser.supports?('Element.htmlFor')\n    def [](name, options = {})\n      if name == :class && Browser.supports?('Element.className')\n        name = :className\n      elsif name == :for && Browser.supports?('Element.htmlFor')\n        name = :htmlFor\n      end\n\n      if namespace = options[:namespace] || @namespace\n        `#@native.getAttributeNS(#{namespace.to_s}, #{name.to_s}) || nil`\n      else\n        `#@native.getAttribute(#{name.to_s}) || nil`\n      end\n    end\n\n    def []=(name, value, options = {})\n      if name == :class && Browser.supports?('Element.className')\n        name = :className\n      elsif name == :for && Browser.supports?('Element.htmlFor')\n        name = :htmlFor\n      end\n\n      if namespace = options[:namespace] || @namespace\n        if value\n          `#@native.setAttributeNS(#{namespace.to_s}, #{name.to_s}, #{value})`\n        else\n          `#@native.removeAttributeNS(#{namespace.to_s}, #{name.to_s})`\n        end\n      else\n        if value\n          `#@native.setAttribute(#{name.to_s}, #{value.to_s})`\n        else\n          `#@native.removeAttribute(#{name.to_s})`\n        end\n      end\n    end\n  else\n    def [](name, options = {})\n      if namespace = options[:namespace] || @namespace\n        `#@native.getAttributeNS(#{namespace.to_s}, #{name.to_s}) || nil`\n      else\n        `#@native.getAttribute(#{name.to_s}) || nil`\n      end\n    end\n\n    def []=(name, value, options = {})\n      if namespace = options[:namespace] || @namespace\n        if value\n          `#@native.setAttributeNS(#{namespace.to_s}, #{name.to_s}, #{value})`\n        else\n          `#@native.removeAttributeNS(#{namespace.to_s}, #{name.to_s})`\n        end\n      else\n        if value\n          `#@native.setAttribute(#{name.to_s}, #{value.to_s})`\n        else\n          `#@native.removeAttribute(#{name.to_s})`\n        end\n      end\n    end\n  end\n\n  # Deletes an attribute with a given name\n  # @return [String] an attribute value before deletion\n  def delete(name)\n    attr = self[name]\n    self[name] = nil\n    attr\n  end\n\n  include Enumerable\n\n  def each(&block)\n    return enum_for :each unless block_given?\n\n    @element.attribute_nodes.each {|attr|\n      yield attr.name, attr.value\n    }\n\n    self\n  end\n\n  alias get []\n\n  def has_key?(name)\n    !!self[name]\n  end\n\n  def merge!(hash)\n    hash.each {|name, value|\n      self[name] = value\n    }\n\n    self\n  end\n\n  alias set []=\nend\n\nend; end; end\n"],"names":["<top (required)>","<module:Browser>","<module:DOM>","<class:Element>","<class:Attributes>","self","attr_reader","initialize","element","options","@element","@native","to_n","@namespace","[]","Browser","supports?","name","namespace","$ret_or_1","to_s","[]=","value","delete","attr","$writer","-","1","include","Enumerable","each","block_given?","enum_for","attribute_nodes","block in each","has_key?","!","merge!","hash","block in merge!","block (2 levels) in merge!","Node"],"mappings":"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"}},{"offset":{"line":33456,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/dom/element/data.rb"],"sourcesContent":["module Browser; module DOM; class Element < Node\n\nclass Data\n  attr_reader :element\n\n  def initialize(element)\n    @element = element\n    @native  = element.to_n\n\n    unless defined?(`#@native.$data`)\n      `#@native.$data = {}`\n    end\n  end\n\n  include Enumerable\n\n  def each(&block)\n    return enum_for :each unless block\n\n    %x{\n      var data = #@native.$data;\n\n      for (var key in data) {\n        #{block.call `key`, `data[key]`};\n      }\n    }\n\n    @element.attributes.each {|name, value|\n      if name =~ /^data-(.*)$/\n        block.call $1, value\n      end\n    }\n\n    self\n  end\n\n  def assign(data)\n    data.each {|name, value|\n      self[name] = value\n    }\n\n    self\n  end\n\n  def [](name)\n    if data = @element[\"data-#{name}\"]\n      return data\n    end\n\n    %x{\n      var value = #@native.$data[name];\n\n      if (value === undefined) {\n        return nil;\n      }\n      else {\n        return value;\n      }\n    }\n  end\n\n  def []=(name, value)\n    `delete #@native.$data[name]`\n    if [true, false, nil].include?(value)\n      @element[\"data-#{name}\"] = value\n    elsif value.respond_to? :to_str\n      @element[\"data-#{name}\"] = value.to_str\n    elsif value.respond_to? :to_int\n      @element[\"data-#{name}\"] = value.to_int.to_s\n    else\n      `#@native.$data[name] = value`\n    end\n  end\n\n  def delete(name)\n    data = self[name]\n    self[name] = nil\n    data\n  end\nend\n\nend; end; end\n"],"names":["<top (required)>","<module:Browser>","<module:DOM>","<class:Element>","<class:Data>","self","attr_reader","initialize","element","@element","@native","to_n","include","Enumerable","each","block","enum_for","call","attributes","block in each","name","value","block (2 levels) in each","=~","assign","data","block in assign","block (2 levels) in assign","$writer","[]=","-","1","[]","include?","respond_to?","to_str","to_int","to_s","delete","Node"],"mappings":"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"}},{"offset":{"line":33606,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/dom/element/position.rb"],"sourcesContent":["module Browser; module DOM; class Element < Node\n\nclass Position\n  attr_reader :element\n\n  # @private\n  def initialize(element)\n    @element = element\n    @native  = element.to_n\n  end\n\n  # @private\n  def get\n    offset        = @element.offset\n    position      = offset.get\n    parent        = offset.parent\n    parent_offset = Browser::Position.new(0, 0)\n\n    if @element.style[:position] == :fixed\n      unless parent =~ :html\n        parent_offset = parent.offset\n      end\n\n      parent_offset.x += parent.style['border-top-width'].to_i\n      parent_offset.y += parent.style['border-left-width'].to_i\n    end\n\n    Browser::Position.new(\n      position.x - parent_offset.x - @element.style['margin-left'].to_i,\n      position.y - parent_offset.y - @element.style['margin-top'].to_i)\n  end\n\n  # @!attribute [r] x\n  # @return [Integer] the position of the element on the x axis\n  def x\n    get.x\n  end\n\n  # @!attribute [r] y\n  # @return [Integer] the position of the element on the y axis\n  def y\n    get.y\n  end\nend\n\nend; end; end\n"],"names":["<top (required)>","<module:Browser>","<module:DOM>","<class:Element>","<class:Position>","self","attr_reader","initialize","element","@element","@native","to_n","get","offset","position","parent","parent_offset","Browser::Position","Browser","new","0","style","[]","=~","$writer","+","x","to_i","x=","-","1","y","y=","Node"],"mappings":"AAAAA,+DAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAAYA,OAAAC;MAAAA;;QAAAA;;QAE5BA,OAAAC;QAAAA;;UAAAA;;AAAAA;;UACEC,IAAAC,aAAAA,CAAY,SAAZA;;AAGAC,UAAAA,0BAAAA,sBAAeC,OAAfD;AAAAA,YAAAA;;;YACEE,eAAWD;YACXD,OAAAG,CAAAA,iBAAWF,OAAOG,MAAAA,CAAAA,CAAlBD;UAFFH,CAAAA,GAAAA;;AAMAK,UAAAA,mBAAAA,eAAAA;AAAAA,YAAAA;;;YACEC,SAAgBJ,YAAQI,QAAAA,CAAAA;YACxBC,WAAgBD,MAAMD,KAAAA,CAAAA;YACtBG,SAAgBF,MAAME,QAAAA,CAAAA;YACtBC,gBAAgBC,IAAAC,aAAAD,aAAiBE,KAAAA,CAAKC,CAAtB,EAAyBA,CAARD;YAEjC,IAAA,MAAGV,YAAQY,OAAAA,CAAAA,CAAMC,OAAAA,CAAC,UAADA,CAAjB,EAAgC,OAAhC,CAAA;;cACE,KAAA,QAAOP,MAAOQ,OAAAA,CAAG,MAAHA,CAAd,CAAA;gBACEP,gBAAgBD,MAAMF,QAAAA,CAAAA;cADxB;;cAnBNW,UAAA,CAuBmBC,SAAbT,aAAaU,GAAAA,CAAAA,CAAAD,EAAMV,MAAMM,OAAAA,CAAAA,CAAMC,OAAAA,CAACV,kBAADU,CAAoBK,MAAAA,CAAAA,CAAtCF,CAvBnB;cAuBmBG,MAAbZ,aAAaY,MAAAA,EAvBnB,MAAAJ,OAAA,CAuBmBI;cAvBnBJ,OAAA,CAAAK,UAAAL,OAAA,CAAAZ,QAAA,CAAAiB,EAAAC,CAAAD,CAAA;;cAAAL,UAAA,CAwBmBC,SAAbT,aAAae,GAAAA,CAAAA,CAAAN,EAAMV,MAAMM,OAAAA,CAAAA,CAAMC,OAAAA,CAACV,mBAADU,CAAqBK,MAAAA,CAAAA,CAAvCF,CAxBnB;cAwBmBO,MAAbhB,aAAagB,MAAAA,EAxBnB,MAAAR,OAAA,CAwBmBQ;cAxBnBR,OAAA,CAAAK,UAAAL,OAAA,CAAAZ,QAAA,CAAAiB,EAAAC,CAAAD,CAAA;YAkBI;YASAjB,OAAAK,IAAAC,aAAAD,aAAiBE,KAAAA,CACcU,UAAlBA,UAAXf,QAAQY,GAAAA,CAAAA,CAAGG,EAAEb,aAAaU,GAAAA,CAAAA,CAAfG,CAAkBA,EAAEpB,YAAQY,OAAAA,CAAAA,CAAMC,OAAAA,CAACV,aAADU,CAAeK,MAAAA,CAAAA,CAA/BE,CAD/B,EAE+BA,UAAlBA,UAAXf,QAAQiB,GAAAA,CAAAA,CAAGF,EAAEb,aAAae,GAAAA,CAAAA,CAAfF,CAAkBA,EAAEpB,YAAQY,OAAAA,CAAAA,CAAMC,OAAAA,CAACV,YAADU,CAAcK,MAAAA,CAAAA,CAA9BE,CAFdV;UAfnBP,CAAAA,GAAAA;;AAsBAc,UAAAA,iBAAAA,aAAAA;AAAAA,YAAAA;;YACEA,OAAArB,IAAAO,KAAAA,CAAAA,CAAGc,GAAAA,CAAAA;UADLA,CAAAA,GAAAA;UAMAtB,OAAA2B,iBAAAA,aAAAA;AAAAA,YAAAA;;YACEA,OAAA1B,IAAAO,KAAAA,CAAAA,CAAGmB,GAAAA,CAAAA;UADLA,CAAAA,GAAAA;QAtCF3B,GAAAA,WAAAA,EAAAA,IAAAA;MAF4BD,GAAAA,WAAAA,EAAgB8B,UAAhB9B;IAAZD,GAAAA,WAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":33683,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/dom/element/offset.rb"],"sourcesContent":["module Browser; module DOM; class Element < Node\n\nclass Offset\n  attr_reader :element\n\n  # @private\n  def initialize(element)\n    @element = element\n    @native  = element.to_n\n  end\n\n  def parent\n    DOM(`#@native.offsetParent || #{@element.document.root.to_n}`)\n  end\n\n  # @!attribute x\n  # @return [Integer]\n  def x\n    get.x\n  end\n\n  def x=(value)\n    set value, nil\n  end\n\n  # @!attribute y\n  # @return [Integer]\n  def y\n    get.y\n  end\n\n  def y=(value)\n    set nil, value\n  end\n\n  if Browser.supports? 'Element.getBoundingClientRect'\n    def get\n      doc  = @element.document\n      root = doc.root.to_n\n      win  = doc.window.to_n\n\n      %x{\n        var box = #@native.getBoundingClientRect(),\n            y   = box.top + (#{win}.pageYOffset || #{root}.scrollTop) - (#{root}.clientTop || 0),\n            x   = box.left + (#{win}.pageXOffset || #{root}.scrollLeft) - (#{root}.clientLeft || 0);\n      }\n\n      Browser::Position.new(`x`, `y`)\n    end\n  else\n    def get\n      doc  = document\n      root = doc.root.to_n\n      win  = doc.window.to_n\n\n      %x{\n        var y = (#{win}.pageYOffset || #{root}.scrollTop) - (#{root}.clientTop || 0),\n            x = (#{win}.pageXOffset || #{root}.scrollLeft) - (#{root}.clientLeft || 0);\n      }\n\n      Browser::Position.new(`x`, `y`)\n    end\n  end\n\n  def set(*value)\n    position = @element.style![:position]\n\n    if position == :static\n      @element.style[:position] = :relative\n    end\n\n    offset = get\n    top    = @element.style![:top].to_u\n    left   = @element.style![:left].to_u\n\n    if Browser::Position === value.first\n      x, y = value.first.x, value.first.y\n    elsif Hash === value.first\n      x, y = value.first[:x], value.first[:y]\n    else\n      x, y = value\n    end\n\n    @element.style[:left] = (x.px - offset.x) + left if x\n    @element.style[:top]  = (y.px - offset.y) + top  if y\n  end\nend\n\nend; end; end\n"],"names":["<top (required)>","<module:Browser>","<module:DOM>","<class:Element>","<class:Offset>","self","attr_reader","initialize","element","@element","@native","to_n","parent","DOM","document","root","x","get","x=","value","set","y","y=","Browser","supports?","doc","win","window","Browser::Position","new","position","style!","[]","$writer","[]=","style","-","1","offset","top","to_u","left","first","Hash","+","px","Node"],"mappings":"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"}},{"offset":{"line":33826,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/dom/element/scroll.rb"],"sourcesContent":["module Browser; module DOM; class Element < Node\n\n# @todo Consider using the new interfaces which allow for optional\n#       smooth transitions.\nclass Scroll\n  attr_reader :element\n\n  # @private\n  def initialize(element)\n    @element = element\n    @native  = element.to_n\n\n    # Portable support for Window#scroll and Document#scroll\n    @scrolling_native = @native\n    if [Document, Window].include?(@element.class)\n      # If we are a window, let's become a document first.\n      if defined? `#@scrolling_native.document`\n        @scrolling_native = `#@scrolling_native.document`\n      end\n      # There were slight disagreements in the past which element\n      # should we handle.\n      if defined? `#@scrolling_native.documentElement.scrollTop`\n        @scrolling_native = `#@scrolling_native.documentElement`\n      elsif defined? `#@scrolling_native.body.scrollTop`\n        @scrolling_native = `#@scrolling_native.body`\n      end\n    end\n  end\n\n  # @overload to(x, y)\n  #\n  #   Scroll to the given x and y.\n  #\n  #   @param x [Integer] scroll to x on the x axis\n  #   @param y [Integer] scroll to y on the y axis\n  #\n  # @overload to(hash)\n  #\n  #   Scroll to the given x and y.\n  #\n  #   @param hash [Hash] the descriptor\n  #\n  #   @option hash [Integer] :x scroll to x on the x axis\n  #   @option hash [Integer] :y scroll to y on the y axis\n  #\n  # @overload to(symbol)\n  #\n  #   Scroll to :top or to :bottom\n  #\n  #   @param symbol [Symbol] either :top or :bottom\n  def to(*args)\n    x, y = nil, nil\n    case args.first\n    when Hash\n      x = args.first[:x]\n      y = args.first[:y]\n    when :top\n      y = 0\n    when :bottom\n      y = 99999999\n    else\n      x, y = args\n    end\n\n    set(x, y) if x || y\n\n    self\n  end\n\n  # @overload by(x, y)\n  #\n  #   Scroll by the given x and y.\n  #\n  #   @param x [Integer] scroll by x on the x axis\n  #   @param y [Integer] scroll by y on the y axis\n  #\n  # @overload by(hash)\n  #\n  #   Scroll by the given x and y.\n  #\n  #   @param hash [Hash] the descriptor\n  #\n  #   @option hash [Integer] :x scroll by x on the x axis\n  #   @option hash [Integer] :y scroll by y on the y axis\n  def by(*args)\n    case args.first\n    when Hash\n      x = args.first[:x] || 0\n      y = args.first[:y] || 0\n    else\n      x, y = args\n    end\n\n    set_by(x, y)\n\n    self\n  end\n\n  if Browser.supports? 'Element.scrollBy'\n    private def set_by(x, y)\n      `#@scrolling_native.scrollBy(#{x}, #{y})`\n    end\n  else\n    private def set_by(x, y)\n      set(self.x + x, self.y + y)\n    end\n  end\n\n  if Browser.supports? 'Element.scroll'\n    private def set(x=nil, y=nil)\n      `#@scrolling_native.scrollTop  = #{y}` if y\n      `#@scrolling_native.scrollLeft = #{x}` if x\n    end\n\n    def position\n      Browser::Position.new(`#@scrolling_native.scrollLeft`, `#@scrolling_native.scrollTop`)\n    end\n  else\n    private def set(x=nil, y=nil)\n      raise NotImplementedError, 'scroll on element unsupported'\n    end\n\n    def position\n      raise NotImplementedError, 'scroll on element unsupported'\n    end\n  end\n\n  # @!attribute [r] x\n  # @return [Integer] the scroll position on the x axis\n  def x\n    position.x\n  end\n\n  # @!attribute [r] y\n  # @return [Integer] the scroll position on the y axis\n  def y\n    position.y\n  end\n\n  # @!attribute [r] height\n  # @return [Integer] the height of the scroll\n  def height\n    `#@scrolling_native.scrollHeight`\n  end\n\n  # @!attribute [r] width\n  # @return [Integer] the width of the scroll\n  def width\n    `#@scrolling_native.scrollWidth`\n  end\n\n  if Browser.supports? 'Element.scrollIntoViewIfNeeded'\n    def into_view(align = true)\n      `#@scrolling_native.scrollIntoViewIfNeeded(align)`\n    end\n  else\n    # Non-standard. Not supported by modern Firefox. Use {#into_view!}\n    def into_view(align = true)\n      raise NotImplementedError\n    end\n  end\n\n  def into_view!(align = true)\n    `#@scrolling_native.scrollIntoView(align)`\n  end\nend\n\nend; end; end\n"],"names":["<top (required)>","<module:Browser>","<module:DOM>","<class:Element>","<class:Scroll>","self","attr_reader","initialize","element","@element","@native","to_n","@scrolling_native","Document","Window","include?","class","to","x","y","Hash","$ret_or_1","args","first","[]","0","99999999","set","by","$ret_or_2","set_by","Browser","supports?","private","+","position","Browser::Position","new","raise","NotImplementedError","height","width","into_view","align","into_view!","Node"],"mappings":"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"}},{"offset":{"line":34038,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/dom/element/size.rb"],"sourcesContent":["module Browser; module DOM; class Element < Node\n\nclass Size\n  attr_reader :element\n\n  # @private\n  def initialize(element, *inc)\n    @element = element\n    @native  = element.to_n\n    @include = inc\n  end\n\n  # @!attribute width\n  # @return [Integer] the element width\n  def width\n    `#@native.offsetWidth`\n  end\n\n  def width=(value)\n    @element.style[:width] = value\n  end\n\n  # @!attribute height\n  # @return [Integer] the element height\n  def height\n    `#@native.offsetHeight`\n  end\n\n  def height=(value)\n    @element.style[:height] = value\n  end\n\n  # @!attribute client_width\n  # @return [Integer] the content-box width of an element\n  def client_width\n    `#@native.clientWidth`\n  end\n\n  # @!attribute client_height\n  # @return [Integer] the content-box height of an element\n  def client_height\n    `#@native.clientHeight`\n  end\nend\n\nend; end; end\n"],"names":["<top (required)>","<module:Browser>","<module:DOM>","<class:Element>","<class:Size>","self","attr_reader","initialize","element","@element","@native","to_n","@include","inc","width","width=","value","$writer","[]=","style","-","1","height","height=","client_width","client_height","Node"],"mappings":"AAAAA,2DAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAAYA,OAAAC;MAAAA;;QAAAA;;QAE5BA,OAAAC;QAAAA;;UAAAA;;AAAAA;;UACEC,IAAAC,aAAAA,CAAY,SAAZA;;AAGAC,UAAAA,0BAAAA,sBAAeC,OAAD,EANhB,EAMED;AAAAA,YAAAA;;;;YANF;;YAM0B;YACtBE,eAAWD;YACXE,iBAAWF,OAAOG,MAAAA,CAAAA;YAClBJ,OAAAK,CAAAA,eAAWC,GAAXD;UAHFL,CAAAA,IAAAA;;AAQAO,UAAAA,qBAAAA,iBAAAA;AAAAA,YAAAA;;YACEA,OAAEJ,cAAOI;UADXA,CAAAA,GAAAA;;AAIAC,UAAAA,sBAAAA,0BAAWC,KAAXD;AAAAA,YAAAA;;;YAlBFE,UAAA,CAmBmB,OAnBnB,EAmB6BD,KAnB7B;YAmBkBE,MAAdT,YAAQU,OAAAA,CAAAA,CAAMD,OAAAA,EAnBlB,MAAAD,OAAA,CAmBkBC;YAnBlBH,OAAAE,OAAA,CAAAG,UAAAH,OAAA,CAAAF,QAAA,CAAAK,EAAAC,CAAAD,CAAA;UAkBEL,CAAAA,GAAAA;;AAMAO,UAAAA,sBAAAA,kBAAAA;AAAAA,YAAAA;;YACEA,OAAEZ,cAAOY;UADXA,CAAAA,GAAAA;;AAIAC,UAAAA,uBAAAA,2BAAYP,KAAZO;AAAAA,YAAAA;;;YA5BFN,UAAA,CA6BmB,QA7BnB,EA6B8BD,KA7B9B;YA6BkBE,MAAdT,YAAQU,OAAAA,CAAAA,CAAMD,OAAAA,EA7BlB,MAAAD,OAAA,CA6BkBC;YA7BlBK,OAAAN,OAAA,CAAAG,UAAAH,OAAA,CAAAM,QAAA,CAAAH,EAAAC,CAAAD,CAAA;UA4BEG,CAAAA,GAAAA;;AAMAC,UAAAA,4BAAAA,wBAAAA;AAAAA,YAAAA;;YACEA,OAAEd,cAAOc;UADXA,CAAAA,GAAAA;UAMApB,OAAAqB,6BAAAA,yBAAAA;AAAAA,YAAAA;;YACEA,OAAEf,cAAOe;UADXA,CAAAA,GAAAA;QAtCFrB,GAAAA,WAAAA,EAAAA,IAAAA;MAF4BD,GAAAA,WAAAA,EAAgBuB,UAAhBvB;IAAZD,GAAAA,WAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":34125,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/dom/element/button.rb"],"sourcesContent":["module Browser; module DOM; class Element < Node\n\nclass Button < Element\n  def_selector \"button\"\n\n  def disabled?\n    `#@native.disabled`\n  end\n\n  def disabled=(value)\n    `#@native.disabled = #{value}`\n  end\n\n  def autofocus?\n    `#@native.autofocus`\n  end\n\n  def autofocus=(value)\n    `#@native.autofocus = #{value}`\n  end\n\n  def name_\n    `#@native.name`\n  end\n\n  def name_=(value)\n    `#@native.name = #{value}`\n  end\nend\n\nend; end; end\n"],"names":["<top (required)>","<module:Browser>","<module:DOM>","<class:Element>","<class:Button>","self","def_selector","disabled?","@native","disabled=","value","autofocus?","autofocus=","name_","name_=","Element","Node"],"mappings":"AAAAA,6DAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAAYA,OAAAC;MAAAA;;QAAAA;;QAE5BA,OAAAC;QAAAA;;UAAAA;;AAAAA;;UACEC,IAAAC,cAAAA,CAAaF,QAAbE;;AAEAC,UAAAA,yBAAAA,iCAAAA;AAAAA,YAAAA;;YACEA,OAAEC,cAAOD;UADXA,CAAAA,GAAAA;;AAIAE,UAAAA,yBAAAA,+BAAcC,KAAdD;AAAAA,YAAAA;;YACEA,OAAED,cAAOC,YAAcC;UADzBD,CAAAA,GAAAA;;AAIAE,UAAAA,0BAAAA,kCAAAA;AAAAA,YAAAA;;YACEA,OAAEH,cAAOG;UADXA,CAAAA,GAAAA;;AAIAC,UAAAA,0BAAAA,gCAAeF,KAAfE;AAAAA,YAAAA;;YACEA,OAAEJ,cAAOI,aAAeF;UAD1BE,CAAAA,GAAAA;;AAIAC,UAAAA,qBAAAA,iBAAAA;AAAAA,YAAAA;;YACEA,OAAEL,cAAOK;UADXA,CAAAA,GAAAA;UAIAT,OAAAU,sBAAAA,4BAAWJ,KAAXI;AAAAA,YAAAA;;YACEA,OAAEN,cAAOM,QAAUJ;UADrBI,CAAAA,GAAAA;QAvBFV,GAAAA,WAAAA,EAAeW,aAAfX;MAF4BD,GAAAA,WAAAA,EAAgBa,UAAhBb;IAAZD,GAAAA,WAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":34193,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/dom/element/image.rb"],"sourcesContent":["module Browser; module DOM; class Element < Node\n\nclass Image < Element\n  def_selector \"img\"\n\n  def complete?\n    `#@native.complete`\n  end\n\n  def cross?\n    `#@native.crossOrigin`\n  end\n\n  def height\n    `#@native.naturalHeight`\n  end\n\n  def width\n    `#@native.naturalWidth`\n  end\nend\n\nImg = Image\n\nend; end; end\n"],"names":["<top (required)>","<module:Browser>","<module:DOM>","<class:Element>","<class:Image>","self","def_selector","complete?","@native","cross?","height","width","Element","Image","Node"],"mappings":"AAAAA,4DAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAAYA,OAAAC;MAAAA;;QAAAA;;;QAE5BC;QAAAA;;UAAAA;;AAAAA;;UACEC,IAAAC,cAAAA,CAAaF,KAAbE;;AAEAC,UAAAA,yBAAAA,gCAAAA;AAAAA,YAAAA;;YACEA,OAAEC,cAAOD;UADXA,CAAAA,GAAAA;;AAIAE,UAAAA,sBAAAA,6BAAAA;AAAAA,YAAAA;;YACEA,OAAED,cAAOC;UADXA,CAAAA,GAAAA;;AAIAC,UAAAA,sBAAAA,kBAAAA;AAAAA,YAAAA;;YACEA,OAAEF,cAAOE;UADXA,CAAAA,GAAAA;UAIAN,OAAAO,qBAAAA,iBAAAA;AAAAA,YAAAA;;YACEA,OAAEH,cAAOG;UADXA,CAAAA,GAAAA;QAfFP,GAAAA,WAAAA,EAAcQ,aAAdR;QAoBAD,OAAA,+BAAMU,WAAN;MAtB4BV,GAAAA,WAAAA,EAAgBW,UAAhBX;IAAZD,GAAAA,WAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":34251,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/dom/element/form.rb"],"sourcesContent":["module Browser; module DOM; class Element < Node\n\nclass Form < Element\n  def_selector \"form\"\n\n  # Capture the content of this form to a new {FormData} object,\n  #\n  # @return [FormData]\n  def form_data\n    FormData.create(self)\n  end\n\n  # Submit a form. This will fire a submit event.\n  def submit\n    `#@native.submit()`\n  end\n\n  # Reset a form. This will fire a reset event.\n  def reset\n    `#@native.reset()`\n  end\n\n  alias_native :action\n  alias_native :action=\n  alias_native :method\n  alias_native :method=\n  alias_native :target\n  alias_native :target=\n  alias_native :encoding\n  alias_native :encoding=\n\n  # Return a NodeSet containing all form controls belonging to this form element.\n  def controls\n    NodeSet[Native::Array.new(`#@native.elements`)]\n  end\nend\n\nend; end; end\n"],"names":["<top (required)>","<module:Browser>","<module:DOM>","<class:Element>","<class:Form>","self","def_selector","form_data","FormData","create","submit","@native","reset","alias_native","controls","NodeSet","[]","Native::Array","Native","new","Element","Node"],"mappings":"AAAAA,2DAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAAYA,OAAAC;MAAAA;;QAAAA;;QAE5BA,OAAAC;QAAAA;;UAAAA;;AAAAA;;UACEC,IAAAC,cAAAA,CAAaF,MAAbE;;AAKAC,UAAAA,yBAAAA,qBAAAA;AAAAA,YAAAA;;YACEA,OAAAC,cAAQC,QAAAA,CAAQJ,IAARI;UADVF,CAAAA,GAAAA;;AAKAG,UAAAA,sBAAAA,kBAAAA;AAAAA,YAAAA;;YACEA,OAAEC,cAAOD;UADXA,CAAAA,GAAAA;;AAKAE,UAAAA,qBAAAA,iBAAAA;AAAAA,YAAAA;;YACEA,OAAED,cAAOC;UADXA,CAAAA,GAAAA;UAIAP,IAAAQ,cAAAA,CAAa,QAAbA;UACAR,IAAAQ,cAAAA,CAAa,SAAbA;UACAR,IAAAQ,cAAAA,CAAa,QAAbA;UACAR,IAAAQ,cAAAA,CAAa,SAAbA;UACAR,IAAAQ,cAAAA,CAAa,QAAbA;UACAR,IAAAQ,cAAAA,CAAa,SAAbA;UACAR,IAAAQ,cAAAA,CAAa,UAAbA;UACAR,IAAAQ,cAAAA,CAAa,WAAbA;UAGAT,OAAAU,wBAAAA,oBAAAA;AAAAA,YAAAA;;YACEA,OAAAC,aAAOC,OAAAA,CAACC,IAAAC,YAAAD,UAAaE,KAAAA,CAAOR,cAAOG,SAAdK,CAAdH;UADTF,CAAAA,GAAAA;QA9BFV,GAAAA,WAAAA,EAAagB,aAAbhB;MAF4BD,GAAAA,WAAAA,EAAgBkB,UAAhBlB;IAAZD,GAAAA,WAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":34315,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/dom/element/input.rb"],"sourcesContent":["module Browser; module DOM; class Element < Node\n\nclass Input < Element\n  def_selector \"input\"\n\n  def value\n    %x{\n      if (#@native.value == \"\") {\n        return nil;\n      }\n      else {\n        return #@native.value;\n      }\n    }\n  end\n\n  def value=(value)\n    `#@native.value = #{value}`\n  end\n\n  def name_\n    `#@native.name`\n  end\n\n  def type\n    `#@native.type`\n  end\n\n  def checked?\n    `#@native.checked`\n  end\n\n  def check!\n    `#@native.checked = 'checked'`\n  end\n\n  def uncheck!\n    `#@native.checked = ''`\n  end\n\n  def enabled?\n    `#@native.enabled`\n  end\n\n  def disable!\n    `#@native.disabled = 'disabled'`\n  end\n\n  def enable!\n    `#@native.disabled = ''`\n  end\n\n  def clear\n    `#@native.value = ''`\n  end\n\n  # @!attribute [r] files\n  # @return [Array<File>] list of files attached to this {Input}\n  def files\n    Native::Array.new(`#@native.files`).map { |f| File.new(f.to_n) }\n  end\nend\n\nend; end; end\n"],"names":["<top (required)>","<module:Browser>","<module:DOM>","<class:Element>","<class:Input>","self","def_selector","value","@native","value=","name_","type","checked?","check!","uncheck!","enabled?","disable!","enable!","clear","files","map","Native::Array","Native","new","block in files","f","block (2 levels) in files","File","to_n","Element","Node"],"mappings":"AAAAA,4DAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAAYA,OAAAC;MAAAA;;QAAAA;;QAE5BA,OAAAC;QAAAA;;UAAAA;;AAAAA;;UACEC,IAAAC,cAAAA,CAAaF,OAAbE;;AAEAC,UAAAA,qBAAAA,iBAAAA;AAAAA,YAAAA;;;AAEFA,UAAWC,cAAOD;AAClBA;AACAA;AACAA;AACAA,eAAgBC,cAAOD;AACvBA;AACAA;UAREA,CAAAA,GAAAA;;AAWAE,UAAAA,sBAAAA,2BAAWF,KAAXE;AAAAA,YAAAA;;YACEA,OAAED,cAAOC,SAAWF;UADtBE,CAAAA,GAAAA;;AAIAC,UAAAA,qBAAAA,iBAAAA;AAAAA,YAAAA;;YACEA,OAAEF,cAAOE;UADXA,CAAAA,GAAAA;;AAIAC,UAAAA,oBAAAA,gBAAAA;AAAAA,YAAAA;;YACEA,OAAEH,cAAOG;UADXA,CAAAA,GAAAA;;AAIAC,UAAAA,wBAAAA,+BAAAA;AAAAA,YAAAA;;YACEA,OAAEJ,cAAOI;UADXA,CAAAA,GAAAA;;AAIAC,UAAAA,sBAAAA,6BAAAA;AAAAA,YAAAA;;YACEA,OAAEL,cAAOK;UADXA,CAAAA,GAAAA;;AAIAC,UAAAA,wBAAAA,+BAAAA;AAAAA,YAAAA;;YACEA,OAAEN,cAAOM;UADXA,CAAAA,GAAAA;;AAIAC,UAAAA,wBAAAA,+BAAAA;AAAAA,YAAAA;;YACEA,OAAEP,cAAOO;UADXA,CAAAA,GAAAA;;AAIAC,UAAAA,wBAAAA,+BAAAA;AAAAA,YAAAA;;YACEA,OAAER,cAAOQ;UADXA,CAAAA,GAAAA;;AAIAC,UAAAA,uBAAAA,8BAAAA;AAAAA,YAAAA;;YACEA,OAAET,cAAOS;UADXA,CAAAA,GAAAA;;AAIAC,UAAAA,qBAAAA,iBAAAA;AAAAA,YAAAA;;YACEA,OAAEV,cAAOU;UADXA,CAAAA,GAAAA;UAMAd,OAAAe,qBAAAA,iBAAAA;AAAAA,YAAAA;;YACEA,OAAmCC,MAAnCC,IAAAC,YAAAD,UAAaE,KAAAA,CAAOf,cAAOW,MAAdI,CAAsBH,OAAAA,EAAAA,EAAAA,EAAnCI,aAA2CC,CAA3CD;;;cAA2C;cAAGE,OAAAC,UAAIJ,KAAAA,CAAKE,CAACG,MAAAA,CAAAA,CAANL,EAAlDC,CAAAA,GAAmCJ;UADrCD,CAAAA,GAAAA;QAxDFf,GAAAA,WAAAA,EAAcyB,aAAdzB;MAF4BD,GAAAA,WAAAA,EAAgB2B,UAAhB3B;IAAZD,GAAAA,WAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":34430,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/dom/element/select.rb"],"sourcesContent":["module Browser; module DOM; class Element < Node\n\nclass Select < Element\n  def_selector \"select\"\n\n  def value\n    %x{\n      if (#@native.value == \"\") {\n        return nil;\n      }\n      else {\n        return #@native.value;\n      }\n    }\n  end\n\n  def value= value\n    `#@native.value = #{value.to_n}`\n  end\n\n  def labels\n    NodeSet[Native::Array.new(`#@native.labels`)]\n  end\n\n  def options\n    NodeSet[Native::Array.new(`#@native.options`)]\n  end\n\n  def option\n    DOM(`#@native.options[#@native.selectedIndex]`)\n  end\n\n  def index\n    `#@native.selectedIndex`\n  end\n\n  alias_native :multiple?, :multiple\n  alias_native :required?, :required\n  alias_native :length\nend\n\nend; end; end\n"],"names":["<top (required)>","<module:Browser>","<module:DOM>","<class:Element>","<class:Select>","self","def_selector","value","@native","value=","to_n","labels","NodeSet","[]","Native::Array","Native","new","options","option","DOM","index","alias_native","Element","Node"],"mappings":"AAAAA,6DAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAAYA,OAAAC;MAAAA;;QAAAA;;QAE5BA,OAAAC;QAAAA;;UAAAA;;AAAAA;;UACEC,IAAAC,cAAAA,CAAaF,QAAbE;;AAEAC,UAAAA,qBAAAA,iBAAAA;AAAAA,YAAAA;;;AAEFA,UAAWC,cAAOD;AAClBA;AACAA;AACAA;AACAA,eAAgBC,cAAOD;AACvBA;AACAA;UAREA,CAAAA,GAAAA;;AAWAE,UAAAA,sBAAAA,4BAAWF,KAAXE;AAAAA,YAAAA;;YACEA,OAAED,cAAOC,SAAWF,KAAKG,MAAAA,CAAAA;UAD3BD,CAAAA,GAAAA;;AAIAE,UAAAA,sBAAAA,kBAAAA;AAAAA,YAAAA;;YACEA,OAAAC,aAAOC,OAAAA,CAACC,IAAAC,YAAAD,UAAaE,KAAAA,CAAOR,cAAOG,OAAdK,CAAdH;UADTF,CAAAA,GAAAA;;AAIAM,UAAAA,uBAAAA,mBAAAA;AAAAA,YAAAA;;YACEA,OAAAL,aAAOC,OAAAA,CAACC,IAAAC,YAAAD,UAAaE,KAAAA,CAAOR,cAAOS,QAAdD,CAAdH;UADTI,CAAAA,GAAAA;;AAIAC,UAAAA,sBAAAA,kBAAAA;AAAAA,YAAAA;;YACEA,OAAAb,IAAAc,KAAAA,CAAMX,cAAOU,SAAUV,cAAOU,eAA9BC;UADFD,CAAAA,GAAAA;;AAIAE,UAAAA,qBAAAA,iBAAAA;AAAAA,YAAAA;;YACEA,OAAEZ,cAAOY;UADXA,CAAAA,GAAAA;UAIAf,IAAAgB,cAAAA,CAAa,WAAb,EAAyB,UAAzBA;UACAhB,IAAAgB,cAAAA,CAAa,WAAb,EAAyB,UAAzBA;UACAjB,OAAAC,IAAAgB,cAAAA,CAAa,QAAbA;QApCFjB,GAAAA,WAAAA,EAAekB,aAAflB;MAF4BD,GAAAA,WAAAA,EAAgBoB,UAAhBpB;IAAZD,GAAAA,WAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":34509,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/dom/element/template.rb"],"sourcesContent":["module Browser; module DOM; class Element < Node\n\nclass Template < Element\n  def_selector \"template\"\n\n  def content\n    DOM(`#@native.content`)\n  end\nend\n\nend; end; end\n"],"names":["<top (required)>","<module:Browser>","<module:DOM>","<class:Element>","<class:Template>","self","def_selector","content","DOM","@native","Element","Node"],"mappings":"AAAAA,+DAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAAYA,OAAAC;MAAAA;;QAAAA;;QAE5BA,OAAAC;QAAAA;;UAAAA;;AAAAA;;UACEC,IAAAC,cAAAA,CAAaF,UAAbE;UAEAF,OAAAG,uBAAAA,mBAAAA;AAAAA,YAAAA;;YACEA,OAAAF,IAAAG,KAAAA,CAAMC,cAAOF,QAAbC;UADFD,CAAAA,GAAAA;QAHFH,GAAAA,WAAAA,EAAiBM,aAAjBN;MAF4BD,GAAAA,WAAAA,EAAgBQ,UAAhBR;IAAZD,GAAAA,WAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":34547,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/dom/element/textarea.rb"],"sourcesContent":["module Browser; module DOM; class Element < Node\n\nclass Textarea < Element\n  def_selector \"textarea\"\n\n  def value\n    %x{\n      if (#@native.value == \"\") {\n        return nil;\n      }\n      else {\n        return #@native.value;\n      }\n    }\n  end\n\n  def value=(value)\n    `#@native.value = #{value}`\n  end\n\n  def clear\n    `#@native.value = ''`\n  end\nend\n\nend; end; end\n"],"names":["<top (required)>","<module:Browser>","<module:DOM>","<class:Element>","<class:Textarea>","self","def_selector","value","@native","value=","clear","Element","Node"],"mappings":"AAAAA,+DAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAAYA,OAAAC;MAAAA;;QAAAA;;QAE5BA,OAAAC;QAAAA;;UAAAA;;AAAAA;;UACEC,IAAAC,cAAAA,CAAaF,UAAbE;;AAEAC,UAAAA,qBAAAA,iBAAAA;AAAAA,YAAAA;;;AAEFA,UAAWC,cAAOD;AAClBA;AACAA;AACAA;AACAA,eAAgBC,cAAOD;AACvBA;AACAA;UAREA,CAAAA,GAAAA;;AAWAE,UAAAA,sBAAAA,8BAAWF,KAAXE;AAAAA,YAAAA;;YACEA,OAAED,cAAOC,SAAWF;UADtBE,CAAAA,GAAAA;UAIAL,OAAAM,qBAAAA,iBAAAA;AAAAA,YAAAA;;YACEA,OAAEF,cAAOE;UADXA,CAAAA,GAAAA;QAlBFN,GAAAA,WAAAA,EAAiBO,aAAjBP;MAF4BD,GAAAA,WAAAA,EAAgBS,UAAhBT;IAAZD,GAAAA,WAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":34604,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/dom/element/iframe.rb"],"sourcesContent":["module Browser; module DOM; class Element < Node\n\nclass Iframe < Element\n  def_selector \"iframe\"\n\n  # @!attribute src\n  # @return [String] the URL of the page to embed\n  alias_native :src\n  alias_native :src=\n\n  # @!attribute [r] content_window\n  # @return [Window] window of content of this iframe\n  def content_window\n    Browser::Window.new(`#@native.contentWindow`)\n  end\n\n  # @!attribute [r] content_document\n  # @return [Document] document of content of this iframe \n  def content_document\n    DOM(`#@native.contentDocument || #@native.contentWindow.document`)\n  end\n\n  # Send a message to the iframe content's window.\n  #\n  # @param message [String] the message\n  # @param options [Hash] optional `to: target`\n  def send(message, options={})\n    content_window.send(message, options)\n  end\nend\n\n# Object is not an iframe, but acts the same.\nclass Object < Iframe\n  def_selector \"object\"\nend\n\nend; end; end\n"],"names":["<top (required)>","<module:Browser>","<module:DOM>","<class:Element>","<class:Iframe>","self","def_selector","alias_native","content_window","Browser::Window","Browser","new","@native","content_document","DOM","send","message","options","Element","<class:Object>","Iframe","Node"],"mappings":"AAAAA,6DAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAAYA,OAAAC;MAAAA;;QAAAA;;;QAE5BC;QAAAA;;UAAAA;;AAAAA;;UACEC,IAAAC,cAAAA,CAAaF,QAAbE;UAIAD,IAAAE,cAAAA,CAAa,KAAbA;UACAF,IAAAE,cAAAA,CAAa,MAAbA;;AAIAC,UAAAA,8BAAAA,0BAAAA;AAAAA,YAAAA;;YACEA,OAAAC,IAAAC,aAAAD,WAAeE,KAAAA,CAAOC,cAAOJ,cAAdG;UADjBH,CAAAA,GAAAA;;AAMAK,UAAAA,gCAAAA,4BAAAA;AAAAA,YAAAA;;YACEA,OAAAR,IAAAS,KAAAA,CAAMF,cAAOC,oBAAqBD,cAAOC,uBAAzCC;UADFD,CAAAA,GAAAA;UAQAT,OAAAW,oBAAAA,gBAASC,OAAD,EAAUC,OAAlBF;AAAAA,YAAAA;;;;YAAkB,+BAAQ,YAAA,EAAR;YAChBA,OAAAV,IAAAG,gBAAAA,CAAAA,CAAcO,MAAAA,CAAMC,OAApB,EAA6BC,OAAfF;UADhBA,CAAAA,IAAAA;QAxBFX,GAAAA,WAAAA,EAAec,aAAfd;QA8BAD,OAAAgB;QAAAA;;;UACEA,OAAAd,IAAAC,cAAAA,CAAaa,QAAbb;QADFa,GAAAA,WAAAA,EAAeC,YAAfD;MAhC4BhB,GAAAA,WAAAA,EAAgBkB,UAAhBlB;IAAZD,GAAAA,WAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":34666,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/dom/element/media.rb"],"sourcesContent":["module Browser; module DOM; class Element < Node\n\nclass Media < Element\n  def play\n    `#@native.play()`\n  end\nend\n\nclass Video < Media\n  def_selector \"video\"\nend\n\nclass Audio < Media\n  def_selector \"audio\"\nend\n\nend; end; end\n"],"names":["<top (required)>","<module:Browser>","<module:DOM>","<class:Element>","<class:Media>","play","@native","Element","<class:Video>","self","def_selector","Media","<class:Audio>","Node"],"mappings":"AAAAA,4DAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAAYA,OAAAC;MAAAA;;QAAAA;;;QAE5BC;QAAAA;;UAAAA;;AAAAA;UACEA,OAAAC,oBAAAA,gBAAAA;AAAAA,YAAAA;;YACEA,OAAEC,cAAOD;UADXA,CAAAA,GAAAA;QADFD,GAAAA,WAAAA,EAAcG,aAAdH;QAMAI;QAAAA;;;UACEA,OAAAC,IAAAC,cAAAA,CAAaF,OAAbE;QADFF,GAAAA,WAAAA,EAAcG,WAAdH;QAIAL,OAAAS;QAAAA;;;UACEA,OAAAH,IAAAC,cAAAA,CAAaE,OAAbF;QADFE,GAAAA,WAAAA,EAAcD,WAAdC;MAZ4BT,GAAAA,WAAAA,EAAgBU,UAAhBV;IAAZD,GAAAA,WAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":34715,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/dom/element.rb"],"sourcesContent":["# Requires are moved to the bottom of this file.\n\nmodule Browser; module DOM\n\nclass Element < Node\n  def self.create(*args, &block)\n    if Document === args.first\n      document = args.shift\n    else\n      document = $document\n    end\n\n    if self == Element\n      document.create_element(*args, &block)\n    elsif @tag_name\n      document.create_element(@tag_name, *args, &block)\n    elsif @selector\n      # That's crude, but should cover the most basic cases.\n      # Just in case, you can override it safely. To reiterate:\n      # .create is not to be used inside libraries, those are\n      # expected to use the Document#create_element API.\n      kwargs = {}\n      kwargs = args.pop if Hash === args.last\n      custom_attrs, custom_id, custom_classes = nil, nil, nil\n      tag_name = (@selector.scan(/^[\\w-]+/).first || \"div\").upcase\n      classes = @selector.scan(/\\.([\\w-]+)/).flatten\n      classes |= custom_classes if custom_classes = kwargs.delete(:classes)\n      id = @selector.scan(/#([\\w-]+)/).flatten.first\n      id = custom_id if custom_id = kwargs.delete(:id)\n      attrs = @selector.scan(/\\[([\\w-]+)=(([\"'])(.*?)\\3|[\\w_-]*)\\]/).map { |a,b,_,d| [a,d||b] }.to_h\n      attrs = attrs.merge(custom_attrs) if custom_attrs = kwargs.delete(:attrs)\n      document.create_element(tag_name, *args, classes: classes, id: id, attrs: attrs, **kwargs, &block)\n    else\n      raise NotImplementedError\n    end\n  end\n\n  def self.subclasses\n    @subclasses ||= []\n  end\n\n  # Define a selector for subclass dispatch\n  #\n  # Example:\n  # ```\n  # class CustomElement < Browser::DOM::Element\n  #   def_selector \"div.hello-world\"\n  # end\n  # ```\n  def self.def_selector(selector)\n    Element.subclasses << self\n\n    @selector = selector\n\n    # A special case to speedup dispatch\n    @tag_name = selector.upcase unless selector =~ /[^\\w-]/\n  end\n\n  def self.selector\n    @selector\n  end\n\n  def self.tag_name\n    @tag_name\n  end\n\n  def self.new(*args, &block)\n    if args.length == 1 && !block_given? && Opal.native?(args[0])\n      # Use `.new` as a wrapping method.\n      node = args[0]\n    else\n      # Use `.new` as an alias for `.create`.\n      return create(*args, &block)\n    end\n\n    if self == Element\n      subclass = Element.subclasses.select do |subclass|\n        Element.native_is?(node, subclass)\n      end.last\n\n      if subclass\n        subclass.new(node)\n      else\n        super(node)\n      end\n    else\n      super(node)\n    end\n  end\n\n  include Event::Target\n\n  target {|value|\n    begin\n      DOM(value)\n    rescue StandardError, JS::Error\n      nil\n    end\n  }\n\n  def self.native_is? (native, klass)\n    if tag_name = klass.tag_name\n      is = `(#{native}.getAttribute(\"is\") || \"\")`\n      `#{tag_name} === #{is}.toUpperCase() || #{tag_name} === #{native}.nodeName`\n    else\n      Element.native_matches?(native, klass.selector)\n    end\n  end\n\n  if Browser.supports? 'Element.matches'\n    def self.native_matches? (native, selector)\n      `#{native}.matches(#{selector})`\n    end\n  elsif Browser.supports? 'Element.matches (Opera)'\n    def self.native_matches? (native, selector)\n      `#{native}.oMatchesSelector(#{selector})`\n    end\n  elsif Browser.supports? 'Element.matches (Internet Explorer)'\n    def self.native_matches? (native, selector)\n      `#{native}.msMatchesSelector(#{selector})`\n    end\n  elsif Browser.supports? 'Element.matches (Firefox)'\n    def self.native_matches? (native, selector)\n      `#{native}.mozMatchesSelector(#{selector})`\n    end\n  elsif Browser.supports? 'Element.matches (Chrome)'\n    def self.native_matches? (native, selector)\n      `#{native}.webkitMatchesSelector(#{selector})`\n    end\n  elsif Browser.loaded? 'Sizzle'\n    def self.native_matches? (native, selector)\n      `Sizzle.matchesSelector(#{native}, #{selector})`\n    end\n  else\n    def self.native_matches? (native, selector)\n      raise NotImplementedError, 'selector matching unsupported'\n    end\n  end\n\n  # Check whether the element matches the given selector.\n  #\n  # @param selector [String] the CSS selector\n  def =~(selector)\n    Element.native_matches?(@native, selector)\n  end\n\n  # Allow for case expressions\n  alias === =~\n\n  # Query for children with the given XPpaths.\n  #\n  # @param paths [Array<String>] the XPaths to look for\n  #\n  # @return [NodeSet]\n  def /(*paths)\n    NodeSet[paths.map { |path| xpath(path) }]\n  end\n\n  # Get the attribute with the given name.\n  #\n  # @param name [String] the attribute name\n  # @param options [Hash] options for the attribute\n  #\n  # @option options [String] :namespace the namespace for the attribute\n  #\n  # @return [String?]\n  def [](name, options = {})\n    attributes.get(name, options)\n  end\n\n  # Set the attribute with the given name and value.\n  #\n  # @param name [String] the attribute name\n  # @param value [Object] the attribute value\n  # @param options [Hash] the options for the attribute\n  #\n  # @option options [String] :namespace the namespace for the attribute\n  def []=(name, value, options = {})\n    attributes.set(name, value, options)\n  end\n\n  # Add class names to the element.\n  #\n  # @param names [Array<String>] class names to add\n  #\n  # @return [self]\n  def add_class(*names)\n    classes = class_names + names\n\n    unless classes.empty?\n      `#@native.className = #{classes.uniq.join ' '}`\n    end\n\n    self\n  end\n\n  # Get the first node that matches the given CSS selector or XPath.\n  #\n  # @param path_or_selector [String] an XPath or CSS selector\n  #\n  # @return [Node?]\n  def at(path_or_selector)\n    xpath(path_or_selector).first || css(path_or_selector).first\n  end\n\n  # Get the first node matching the given CSS selectors.\n  #\n  # @param rules [Array<String>] the CSS selectors to match with\n  #\n  # @return [Node?]\n  def at_css(*rules)\n    result = nil\n\n    rules.each {|rule|\n      if result = css(rule).first\n        break\n      end\n    }\n\n    result\n  end\n\n  # Get the first node matching the given XPath.\n  #\n  # @param paths [Array<String>] the XPath to match with\n  #\n  # @return [Node?]\n  def at_xpath(*paths)\n    result = nil\n\n    paths.each {|path|\n      if result = xpath(path).first\n        break\n      end\n    }\n\n    result\n  end\n\n  alias attr []\n\n  alias attribute []\n\n  # @!attribute [r] attributes\n  # @return [Attributes] the attributes for the element\n  def attributes(options = {})\n    Attributes.new(self, options)\n  end\n\n  # @!attribute [r] attribute_nodes\n  # @return [NodeSet] the attribute nodes for the element\n  def attribute_nodes\n    NodeSet[Native::Array.new(`#@native.attributes`, get: :item)]\n  end\n\n  # @!attribute [r] class_name\n  # @return [String] all the element class names\n  alias_native :class_name, :className\n\n  # @!attribute [r] class_names\n  # @return [Array<String>] all the element class names\n  def class_names\n    `#@native.className`.split(/\\s+/).reject(&:empty?)\n  end\n\n  if Browser.supports? 'Query.css'\n    def css(path)\n      NodeSet[Native::Array.new(`#@native.querySelectorAll(path)`)]\n    rescue StandardError, JS::Error\n      NodeSet[]\n    end\n  elsif Browser.loaded? 'Sizzle'\n    def css(path)\n      NodeSet[`Sizzle(path, #@native)`]\n    rescue StandardError, JS::Error\n      NodeSet[]\n    end\n  else\n    # Query for children matching the given CSS selector.\n    #\n    # @param selector [String] the CSS selector\n    #\n    # @return [NodeSet]\n    def css(selector)\n      raise NotImplementedError, 'query by CSS selector unsupported'\n    end\n  end\n\n  # Click the element. it fires the element's click event.\n  def click\n    `#@native.click()`\n    self\n  end\n\n  # @overload data()\n  #\n  #   Return the data for the element.\n  #\n  #   @return [Data]\n  #\n  # @overload data(hash)\n  #\n  #   Set data on the element.\n  #\n  #   @param hash [Hash] the data to set\n  #\n  #   @return [self]\n  def data(value = nil)\n    data = Data.new(self)\n\n    return data unless value\n\n    if Hash === value\n      data.assign(value)\n    else\n      raise ArgumentError, 'unknown data type'\n    end\n\n    self\n  end\n\n  alias get_attribute []\n\n  alias get []\n\n  # @!attribute height\n  # @return [Integer] the height of the element\n  def height\n    size.height\n  end\n\n  def height=(value)\n    size.height = value\n  end\n\n  # @!attribute id\n  # @return [String?] the ID of the element\n  def id\n    %x{\n      var id = #@native.id;\n\n      if (id === \"\") {\n        return nil;\n      }\n      else {\n        return id;\n      }\n    }\n  end\n\n  def id=(value)\n    `#@native.id = #{value.to_s}`\n  end\n\n  # Set the inner DOM of the element using the {Builder}.\n  def inner_dom(builder=nil, &block)\n    self.inner_dom = Builder.new(document, builder, &block).to_a\n    self\n  end\n\n  # Set the inner DOM with the given node.\n  #\n  # (see #append_child)\n  def inner_dom=(node)\n    clear\n\n    self << node\n  end\n\n  # @!attribute inner_html\n  # @return [String] the inner HTML of the element\n  def inner_html\n    `#@native.innerHTML`\n  end\n\n  def inner_html=(value)\n    `#@native.innerHTML = #{value}`\n  end\n\n  def inspect\n    inspect = name.downcase\n\n    if id\n      inspect += '.' + id + '!'\n    end\n\n    unless class_names.empty?\n      inspect += '.' + class_names.join('.')\n    end\n\n    \"#<#{self.class.name.gsub(\"Browser::\",\"\")}: #{inspect}>\"\n  end\n\n  # @!attribute offset\n  # @return [Offset] the offset of the element\n  def offset(*values)\n    off = Offset.new(self)\n\n    unless values.empty?\n      off.set(*values)\n    end\n\n    off\n  end\n\n  def offset=(value)\n    offset.set(*value)\n  end\n\n  # @!attribute outer_html\n  # @return [String] the outer HTML of the element\n  def outer_html\n    `#@native.outerHTML`\n  end\n\n  # @!attribute [r] position\n  # @return [Position] the position of the element\n  def position\n    @position ||= Position.new(self)\n  end\n\n  # @!attribute [r] scroll\n  # @return [Scroll] the scrolling for the element\n  def scroll\n    @scroll ||= Scroll.new(self)\n  end\n\n  # Search for all the children matching the given XPaths or CSS selectors.\n  #\n  # @param selectors [Array<String>] mixed list of XPaths and CSS selectors\n  #\n  # @return [NodeSet]\n  def search(*selectors)\n    NodeSet.new selectors.map {|selector|\n      xpath(selector).to_a.concat(css(selector).to_a)\n    }.flatten.uniq\n  end\n\n  alias set []=\n\n  alias set_attribute []=\n\n  # Creates or accesses the shadow root of this element\n  #\n  # @param open [Boolean] set to false if you want to create a closed\n  #                       shadow root\n  #\n  # @return [ShadowRoot]\n  def shadow (open = true)\n    if root = `#@native.shadowRoot`\n      DOM(root)\n    else\n      DOM(`#@native.attachShadow({mode: #{open ? \"open\" : \"closed\"}})`)\n    end\n  end\n\n  # Checks for a presence of a shadow root of this element\n  #\n  # @return [Boolean]\n  def shadow?\n    `!!#@native.shadowRoot`\n  end\n\n  # @overload style()\n  #\n  #   Return the style for the element.\n  #\n  #   @return [CSS::Declaration]\n  #\n  # @overload style(data)\n  #\n  #   Set the CSS style as string or set of values.\n  #\n  #   @param data [String, Hash] the new style\n  #\n  #   @return [self]\n  #\n  # @overload style(&block)\n  #\n  #   Set the CSS style from a CSS builder DSL.\n  #\n  #   @return [self]\n  def style(data = nil, &block)\n    style = CSS::Declaration.new(`#@native.style`)\n\n    return style unless data || block\n\n    if String === data\n      style.replace(data)\n    elsif Hash === data\n      style.assign(data)\n    elsif block\n      style.apply(&block)\n    else\n      raise ArgumentError, 'unknown data type'\n    end\n\n    self\n  end\n\n  if Browser.supports? 'CSS.computed'\n    def style!\n      CSS::Declaration.new(`#{window.to_n}.getComputedStyle(#@native, null)`)\n    end\n  elsif Browser.supports? 'CSS.current'\n    def style!\n      CSS::Declaration.new(`#@native.currentStyle`)\n    end\n  else\n    # @!attribute [r] style!\n    # @return [CSS::Declaration] get the computed style for the element\n    def style!\n      raise NotImplementedError, 'computed style unsupported'\n    end\n  end\n\n  # Remove an attribute from the element.\n  #\n  # @param name [String] the attribute name\n  def remove_attribute(name)\n    `#@native.removeAttribute(name)`\n  end\n\n  # Remove class names from the element.\n  #\n  # @param names [Array<String>] class names to remove\n  #\n  # @return [self]\n  def remove_class(*names)\n    classes = class_names - names\n\n    if classes.empty?\n      `#@native.removeAttribute('class')`\n    else\n      `#@native.className = #{classes.join ' '}`\n    end\n\n    self\n  end\n\n  # @!attribute [r] size\n  # @return [Size] the size of the element\n  def size(*inc)\n    Size.new(self, *inc)\n  end\n\n  # Toggle class names of the element.\n  #\n  # @param names [Array<String>] class names to toggle\n  #\n  # @return [self]\n  def toggle_class(*names)\n    to_remove, to_add = names.partition { |name| class_names.include? name }\n\n    add_class(*to_add)\n    remove_class(*to_remove)\n  end\n\n  # @!attribute width\n  # @return [Integer] the width of the element\n  def width\n    size.width\n  end\n\n  def width=(value)\n    size.width = value\n  end\n\n  # @!attribute [r] window\n  # @return [Window] the window for the element\n  def window\n    document.window\n  end\n\n  if Browser.supports?('Query.xpath') || Browser.loaded?('wicked-good-xpath')\n    if Browser.loaded? 'wicked-good-xpath'\n      `wgxpath.install()`\n    end\n\n    def xpath(path)\n      NodeSet[Native::Array.new(\n        `(#@native.ownerDocument || #@native).evaluate(path,\n           #@native, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null)`,\n        get:    :snapshotItem,\n        length: :snapshotLength)]\n    rescue StandardError, JS::Error\n      NodeSet[]\n    end\n  else\n    # Query for children matching the given XPath.\n    #\n    # @param path [String] the XPath\n    #\n    # @return [NodeSet]\n    def xpath(path)\n      raise NotImplementedError, 'query by XPath unsupported'\n    end\n  end\nend\n\nend; end\n\nrequire 'browser/dom/element/attributes'\nrequire 'browser/dom/element/data'\nrequire 'browser/dom/element/position'\nrequire 'browser/dom/element/offset'\nrequire 'browser/dom/element/scroll'\nrequire 'browser/dom/element/size'\n\nrequire 'browser/dom/element/button'\nrequire 'browser/dom/element/image'\nrequire 'browser/dom/element/form'\nrequire 'browser/dom/element/input'\nrequire 'browser/dom/element/select'\nrequire 'browser/dom/element/template'\nrequire 'browser/dom/element/textarea'\nrequire 'browser/dom/element/iframe'\nrequire 'browser/dom/element/media'\n"],"names":["<top (required)>","<module:Browser>","<module:DOM>","<class:Element>","create","self","Document","args","first","document","shift","$document","Element","create_element","block","to_proc","@tag_name","@selector","kwargs","Hash","last","pop","custom_attrs","custom_id","custom_classes","tag_name","$ret_or_1","scan","upcase","classes","flatten","delete","|","id","attrs","map","block in create","a","b","_","d","block (2 levels) in create","to_h","merge","raise","NotImplementedError","subclasses","@subclasses","def_selector","selector","<<","=~","new","length","1","block_given?","Opal","native?","[]","0","node","subclass","select","block in new","block (2 levels) in new","native_is?","include","Event::Target","Event","target","block in <class:Element>","value","block (2 levels) in <class:Element>","DOM","StandardError","JS::Error","JS","native$","klass","is","native_matches?","Browser","supports?","loaded?","@native","/","NodeSet","paths","block in /","path","block (2 levels) in /","xpath","name","options","attributes","get","[]=","set","add_class","+","class_names","names","empty?","uniq","join","at","path_or_selector","css","at_css","result","each","rules","block in at_css","rule","block (2 levels) in at_css","at_xpath","block in at_xpath","block (2 levels) in at_xpath","Attributes","attribute_nodes","Native::Array","Native","alias_native","reject","split","click","data","Data","assign","ArgumentError","height","size","height=","$writer","-","id=","to_s","inner_dom","builder","Builder","to_a","inner_dom=","clear","inner_html","inner_html=","inspect","downcase","class","gsub","offset","off","Offset","values","offset=","outer_html","position","@position","Position","scroll","@scroll","Scroll","search","selectors","block in search","block (2 levels) in search","concat","shadow","open","root","shadow?","style","CSS::Declaration","CSS","String","replace","apply","style!","window","to_n","remove_attribute","remove_class","Size","inc","toggle_class","partition","block in toggle_class","block (2 levels) in toggle_class","include?","to_remove","to_add","width","width=","Node","require"],"mappings":"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"}},{"offset":{"line":35448,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/dom/document_or_shadow_root.rb"],"sourcesContent":["module Browser; module DOM\n\n# Document and ShadowRoot have some methods and properties in common.\n# This solution mimics how it's done in DOM.\n#\n# @see https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot\nmodule DocumentOrShadowRoot\n  # @!attribute [r] style_sheets\n  # @return [Array<CSS::StyleSheet>] the style sheets for the document\n  def style_sheets\n    Native::Array.new(`#@native.styleSheets`) {|e|\n      CSS::StyleSheet.new(e)\n    }\n  end\n\n  alias stylesheets style_sheets\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<module:DOM>","<module:DocumentOrShadowRoot>","style_sheets","new","Native::Array","Native","@native","block in style_sheets","e","block (2 levels) in style_sheets","CSS::StyleSheet","CSS"],"mappings":"AAAAA,sEAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAMhBA,OAAAC;MAAAA;;QAAAA;;;;AAGEC,QAAAA,4BAAAA,wBAAAA;AAAAA,UAAAA;AAAAA;;UACEA,OAAaC,MAAbC,IAAAC,YAAAD,UAAaD,OAAAA,EAAAA,CAAOG,cAAOJ,YAAdC,CAAAA,EAAbI,aAA4CC,CAA5CD;;;YAA4C;YAC1CE,OAAAC,IAAAC,SAAAD,eAAeP,KAAAA,CAAKK,CAALL,EADjBI,CAAAA,GAAaJ;QADfD,CAAAA,GAAAA;QAMAD,OAAA,aAAM,aAAN,EAAkB,cAAlB;MATFA,GAAAA,WAAAA;IANgBD,GAAAA,WAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":35485,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/dom/document.rb"],"sourcesContent":["module Browser; module DOM\n\nclass Document < Element\n  include DocumentOrShadowRoot\n\n  # Get the first element matching the given ID, CSS selector or XPath.\n  #\n  # @param what [String] ID, CSS selector or XPath\n  #\n  # @return [Element?] the first matching element\n  def [](what)\n    %x{\n      var result = #@native.getElementById(what);\n\n      if (result) {\n        return #{DOM(`result`)};\n      }\n    }\n\n    css(what).first || xpath(what).first\n  end\n\n  alias at []\n\n  # @!attribute [r] body\n  # @return [Element?] the body element of the document\n  def body\n    DOM(`#@native.body`)\n  rescue ArgumentError\n    raise '$document.body is not defined; try to wrap your code in $document.ready{}'\n  end\n\n  # Create a new element for the document.\n  #\n  # @param name [String] the node name\n  # @param builder [Browser::DOM::Builder] optional builder to append element to\n  # @param options [String] :namespace optional namespace name\n  # @param options [String] :is optional WebComponents is parameter\n  # @param options [String] :id optional id to set\n  # @param options [Array<String>] :classes optional classes to set\n  # @param options [Hash] :attrs optional attributes to set\n  #\n  # @return [Element]\n  def create_element(name, builder=nil, **options, &block)\n    opts = {}\n\n    if options[:is] ||= (options.dig(:attrs, :is))\n      opts[:is] = options[:is]\n    end\n\n    if ns = options[:namespace]\n      elem = `#@native.createElementNS(#{ns}, #{name}, #{opts.to_n})`\n    else\n      elem = `#@native.createElement(name, #{opts.to_n})`\n    end\n\n    if options[:classes]\n      `#{elem}.className = #{Array(options[:classes]).join(\" \")}`\n    end\n\n    if options[:id]\n      `#{elem}.id = #{options[:id]}`\n    end\n\n    if options[:attrs]\n      options[:attrs].each do |k,v|\n        next unless v\n        `#{elem}.setAttribute(#{k}, #{v})`\n      end\n    end\n\n    dom = DOM(elem)\n\n    if block_given?\n      dom.inner_dom(builder, &block)\n    end\n\n    if builder\n      builder << dom\n    end\n\n    dom\n  end\n\n  # Create a new document fragment.\n  #\n  # @return [DocumentFragment]\n  def create_document_fragment\n    DOM(`#@native.createDocumentFragment()`)\n  end\n\n  # Create a new text node for the document.\n  #\n  # @param content [String] the text content\n  #\n  # @return [Text]\n  def create_text(content)\n    DOM(`#@native.createTextNode(#{content})`)\n  end\n\n  # Create a new comment node for the document.\n  #\n  # @param content [String] the comment content\n  #\n  # @return [Comment]\n  def create_comment(content)\n    DOM(`#@native.createComment(#{content})`)\n  end\n\n  def document\n    self\n  end\n\n  # @!attribute [r] head\n  # @return [Element?] the head element of the document\n  def head\n    DOM(`#@native.getElementsByTagName(\"head\")[0]`)\n  end\n\n  def inspect\n    \"#<DOM::Document>\"\n  end\n\n  if Browser.supports? 'Event.addListener'\n    def ready(&block)\n      raise ArgumentError, 'no block given' unless block\n\n      return block.call if ready?\n\n      on 'dom:load' do |e|\n        e.off\n\n        block.call\n      end\n    end\n  elsif Browser.supports? 'Event.attach'\n    def ready(&block)\n      raise ArgumentError, 'no block given' unless block\n\n      return block.call if ready?\n\n      on 'ready:state:change' do |e|\n        if ready?\n          e.off\n\n          block.call\n        end\n      end\n    end\n  else\n    # Wait for the document to be ready and call the block.\n    def ready(&block)\n      raise NotImplementedError, 'document ready unsupported'\n    end\n  end\n\n  # Check if the document is ready.\n  def ready?\n    `#@native.readyState === \"complete\" || #@native.readyState === \"interactive\"`\n  end\n\n  # @!attribute referrer\n  # @return [String] the referring document, or empty string if direct access\n  def referrer\n    `#@native.referrer`\n  end\n\n  # @!attribute root\n  # @return [Element?] the root element of the document\n  def root\n    DOM(`#@native.documentElement`)\n  end\n\n  def root=(element)\n    `#@native.documentElement = #{Native.convert(element)}`\n  end\n\n  # @!attribute title\n  # @return [String] the document title\n  def title\n    `#@native.title`\n  end\n\n  def title=(value)\n    `#@native.title = value`\n  end\n\n  # @!attribute [r] hidden?\n  # @return [Boolean] is the page considered hidden?\n  def hidden?\n    `#@native.hidden`\n  end\n\n  # @!attribute [r] visibility\n  # @return [String] the visibility state of the document - prerender, hidden or visible\n  def visibility\n    `#@native.visibilityState`\n  end\n\n  if Browser.supports? 'Document.view'\n    def window\n      Window.new(`#@native.defaultView`)\n    end\n  elsif Browser.supports? 'Document.window'\n    def window\n      Window.new(`#@native.parentWindow`)\n    end\n  else\n    # @!attribute [r] window\n    # @return [Window] the window for the document\n    def window\n      raise NotImplementedError, 'window from document unsupported'\n    end\n  end\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<module:DOM>","<class:Document>","self","include","DocumentOrShadowRoot","[]","what","@native","DOM","$ret_or_1","css","first","xpath","body","ArgumentError","raise","create_element","name","opts","options","$writer","dig","[]=","-","1","ns","elem","to_n","Array","join","each","block in create_element","k","v","block (2 levels) in create_element","dom","block_given?","inner_dom","builder","block","to_proc","<<","create_document_fragment","create_text","content","create_comment","document","head","inspect","Browser","supports?","ready","ready?","call","on","block in ready","e","off","block (2 levels) in ready","NotImplementedError","referrer","root","root=","element","Native","convert","title","title=","value","hidden?","visibility","window","Window","new","Element"],"mappings":"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"}},{"offset":{"line":35767,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/dom/document_fragment.rb"],"sourcesContent":["module Browser; module DOM\n\n# TODO: DocumentFragment is not a subclass of Element, but\n#       a subclass of Node. It implements a ParentNode.\n#\n# @see https://github.com/opal/opal-browser/pull/46\nclass DocumentFragment < Element\n  def self.new(node)\n    if self == DocumentFragment\n      if defined? `#{node}.mode`\n        ShadowRoot.new(node)\n      else\n        super\n      end\n    else\n      super\n    end\n  end\n\n  def self.create\n    $document.create_document_fragment\n  end\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<module:DOM>","<class:DocumentFragment>","new","self","node","DocumentFragment","ShadowRoot","create","$document","create_document_fragment","Element"],"mappings":"AAAAA,gEAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAMhBA,OAAAC;MAAAA;;QAAAA;;;QACEC,MAAIC,IAAJD,UAAAA,iCAAaE,IAAbF;AAAAA,UAAAA;;UAAAA;UACE,IAAA,MAAGC,IAAH,EAAWE,sBAAX,CAAA;YACE,IAAA,QAAG,QAAYD,IAAKF,KAAjB,kBAAH,CAAA;cACEA,OAAAI,gBAAUJ,KAAAA,CAAKE,IAALF;YADZ;cAGEA,OAAA,OAAAC,IAAA,EAAA,8DAAA,OAAA,EAAA,CAAAC,IAAA,CAAA,EAAA,MAAA;YAHF;UADF;YAOEF,OAAA,OAAAC,IAAA,EAAA,8DAAA,OAAA,EAAA,CAAAC,IAAA,CAAA,EAAA,MAAA;UAPF;QADFF,CAAAA,GAAAA;QAYAD,OAAAM,MAAIJ,IAAJI,aAAAA,kBAAAA;AAAAA,UAAAA;;UACEA,OAAAC,eAASC,0BAAAA,CAAAA;QADXF,CAAAA,GAAAA;MAbFN,GAAAA,WAAAA,EAAyBS,aAAzBT;IANgBD,GAAAA,WAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":35811,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/dom/shadow_root.rb"],"sourcesContent":["module Browser; module DOM\n\nclass ShadowRoot < DocumentFragment\n  include DocumentOrShadowRoot\n\n  # Use: Element#shadow\n  def self.create\n    raise ArgumentError\n  end\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<module:DOM>","<class:ShadowRoot>","self","include","DocumentOrShadowRoot","create","raise","ArgumentError","DocumentFragment"],"mappings":"AAAAA,0DAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAEhBA,OAAAC;MAAAA;;QAAAA;;;QACEC,IAAAC,SAAAA,CAAQC,0BAARD;QAGAF,OAAAI,MAAIH,IAAJG,aAAAA,kBAAAA;AAAAA,UAAAA;;UACEA,OAAAH,IAAAI,OAAAA,CAAMC,mBAAND;QADFD,CAAAA,GAAAA;MAJFJ,GAAAA,WAAAA,EAAmBO,sBAAnBP;IAFgBD,GAAAA,WAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":35842,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/dom/mutation_observer.rb"],"sourcesContent":["module Browser; module DOM\n\n# A {MutationObserver} is a performant way to observe changes in the DOM,\n# either on the tree, the attributes or data.\n#\n# @see https://developer.mozilla.org/en/docs/Web/API/MutationObserver\nclass MutationObserver\n  def self.supported?\n    Browser.supports? :MutationObserver\n  end\n\n  include Native::Wrapper\n\n  # Encapsulates a recorded change.\n  class Record\n    include Browser::NativeCachedWrapper\n\n    # @!attribute [r] type\n    # @return [:attributes, :tree, :cdata] the type of the recorded change\n    def type\n      case `#@native.type`\n      when :attributes    then :attribute\n      when :childList     then :tree\n      when :characterData then :cdata\n      end\n    end\n\n    # Returns true if the change happened on attributes.\n    def attribute?\n      type == :attribute\n    end\n\n    # Returns true if the change happened on the tree.\n    def tree?\n      type == :tree\n    end\n\n    # Returns true if the change happened in a CDATA section.\n    def cdata?\n      type == :cdata\n    end\n\n    # @!attribute [r] added\n    # @return [NodeSet] the added nodes\n    def added\n      array = if `#@native.addedNodes != null`\n        Native::Array.new(`#@native.addedNodes`)\n      else\n        []\n      end\n\n      NodeSet[array]\n    end\n\n    # @!attribute [r] removed\n    # @return [NodeSet] the removed nodes\n    def removed\n      array = if `#@native.removedNodes != null`\n        Native::Array.new(`#@native.removedNodes`)\n      else\n        []\n      end\n\n      NodeSet[array]\n    end\n\n    # @!attribute [r] target\n    # @return [Node] the node the mutation affected\n    def target\n      DOM(`#@native.target`)\n    end\n\n    # @!attribute [r] old\n    # @return [String] the old value\n    alias_native :old, :oldValue\n\n    # @!attribute [r] name\n    # @return [String] the name of the attribute\n    alias_native :name, :attributeName\n\n    # @!attribute [r] namespace\n    # @return [String] the namespace of the attribute\n    alias_native :namespace, :attributeNamespace\n  end\n\n  # Create a new MutationObserver with the given block.\n  #\n  # @yieldparam records [Array<Record>] the recorded changes\n  def initialize(&block)\n    %x{\n      var func = function(records) {\n        return #{block.call(`records`.map { |r| Browser::DOM::MutationObserver::Record.new(r) })};\n      }\n    }\n\n    super(`new window.MutationObserver(func)`)\n  end\n\n  # Observe the given target with the given options.\n  #\n  # The supported options are:\n  #\n  # + **children** - whether to observe changes on the children\n  #   of the target or not\n  # + **tree** - whether to observe changes on the whole subtree\n  #   or not\n  # + **attributes** - whether to observe changes to attributes or not,\n  #   if the value is `:old` the old value will be saved\n  # + **cdata** - whether to observe changes to CDATA sections or not,\n  #   if the value is `:old` the old value will be saved\n  # + **filter** - array of attribute names to observe\n  #\n  # @param target [DOM::Node, native] the node to observe\n  # @param options [Hash?] the options\n  def observe(target, options = nil)\n    unless options\n      options = {\n        children:   true,\n        tree:       true,\n        attributes: :old,\n        cdata:      :old\n      }\n    end\n\n    `#@native.observe(#{Native.convert(target)}, #{convert(options)})`\n\n    self\n  end\n\n  # Empty the observer queue and return its contents.\n  #\n  # @return [Array<Record>]\n  def take\n    `#@native.takeRecords()`.map { |r| Record.new(r) }\n  end\n\n  # Disconnect the observer, thus stopping observing any changes.\n  def disconnect\n    `#@native.disconnect()`\n  end\n\nprivate\n  def convert(hash)\n    options = Native(`{}`)\n\n    if hash[:children]\n      options[:childList] = true\n    end\n\n    if hash[:tree]\n      options[:subtree] = true\n    end\n\n    if attrs = hash[:attributes]\n      options[:attributes] = true\n\n      if attrs == :old\n        options[:attributeOldValue] = true\n      end\n    end\n\n    if filter = hash[:filter]\n      options[:attributeFilter] = filter\n    end\n\n    if cdata = hash[:cdata]\n      options[:characterData] = true\n\n      if cdata == :old\n        options[:characterDataOldValue] = true\n      end\n    end\n\n    options.to_n\n  end\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<module:DOM>","<class:MutationObserver>","supported?","self","Browser","supports?","include","Native::Wrapper","Native","<class:Record>","Browser::NativeCachedWrapper","type","$ret_or_1","@native","attribute?","==","tree?","cdata?","added","array","Native::Array","new","NodeSet","[]","removed","target","DOM","alias_native","initialize","block","call","map","block in initialize","r","block (2 levels) in initialize","Browser::DOM::MutationObserver::Record","Browser::DOM::MutationObserver","Browser::DOM","observe","options","convert","take","block in take","block (2 levels) in take","Record","disconnect","private","hash","$writer","[]=","-","1","attrs","filter","cdata","to_n"],"mappings":"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"}},{"offset":{"line":36038,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/dom.rb"],"sourcesContent":["require 'browser/dom/node_set'\nrequire 'browser/dom/node'\nrequire 'browser/dom/attribute'\nrequire 'browser/dom/character_data'\nrequire 'browser/dom/text'\nrequire 'browser/dom/cdata'\nrequire 'browser/dom/comment'\nrequire 'browser/dom/element'\nrequire 'browser/dom/document_or_shadow_root'\nrequire 'browser/dom/document'\nrequire 'browser/dom/document_fragment'\nrequire 'browser/dom/shadow_root'\nrequire 'browser/dom/mutation_observer'\n\nmodule Kernel\n  # Parse an XML string into a DOM usable {Browser::DOM::Document}\n  #\n  # @param what [String] the string to parse\n  # @return [Browser::DOM::Document] the document\n  def XML(what)\n    %x{\n      var doc;\n\n      if (window.DOMParser) {\n        doc = new DOMParser().parseFromString(what, 'text/xml');\n      }\n      else {\n        doc       = new ActiveXObject('Microsoft.XMLDOM');\n        doc.async = 'false';\n        doc.loadXML(what);\n      }\n    }\n\n    DOM(`doc`)\n  end\n\n  # @overload DOM(document = $document, &block)\n  #\n  #   Create a DOM tree using the {Paggio::HTML} DSL.\n  #\n  #   @param document [Browser::DOM::Document] the document instance\n  #     we intend to use\n  #\n  #   @return [Browser::DOM::Node, Browser::DOM::NodeSet]\n  #\n  # @overload DOM(string, document = $document)\n  #\n  #   Create a DOM tree from a HTML string.\n  #\n  #   @param string [String] the HTML string\n  #   @param document [Browser::DOM::Document] the document instance\n  #     we intend to use\n  #\n  #   @return [Browser::DOM::Node]\n  #\n  # @overload DOM(native)\n  #\n  #   Wrap a native element to create a DOM tree.\n  #\n  #   @param native [Native] the Native node\n  #\n  #   @return [Browser::DOM::Node]\n  #\n  def DOM(*args, &block)\n    if block\n      document = args.shift || $document\n      roots    = Browser::DOM::Builder.new(document, &block).to_a\n\n      if roots.length == 1\n        roots.first\n      else\n        Browser::DOM::NodeSet.new(roots)\n      end\n    else\n      what     = args.shift\n      document = args.shift || $document\n\n      what = what.to_dom(document) if Opal.respond_to? what, :to_dom\n\n      if `typeof(#{what}) === 'undefined' || #{what} === null`\n        raise ArgumentError, 'argument is null'\n      elsif native?(what)\n        Browser::DOM::Node.new(what)\n      elsif Browser::DOM::Node === what\n        what\n      elsif Opal.respond_to? what, :each # eg. NodeSet, Array\n        document.create_element(\"DIV\").tap do |div|\n          div << what\n        end\n      elsif String === what\n        %x{\n          var doc = #{Native.try_convert(document)}.createElement('div');\n          doc.innerHTML = what;\n\n          return #{DOM(`doc.childNodes.length == 1 ? doc.childNodes[0] : doc`)};\n        }\n      else\n        raise ArgumentError, 'argument is not DOM convertible'\n      end\n    end\n  end\nend\n\nmodule Browser\n\nclass Window\n  # Get the {DOM::Document} for this window.\n  #\n  # @return [DOM::Document]\n  def document\n    DOM(`#@native.document`)\n  end\nend\n\nend\n\n$document = $window.document\n"],"names":["<top (required)>","self","require","<module:Kernel>","XML","what","DOM","block","document","$ret_or_1","args","shift","$document","roots","new","Browser::DOM::Builder","Browser::DOM","Browser","to_proc","to_a","length","1","first","Browser::DOM::NodeSet","Opal","respond_to?","to_dom","raise","ArgumentError","native?","Browser::DOM::Node","tap","create_element","block in DOM","div","block (2 levels) in DOM","<<","String","Native","try_convert","<module:Browser>","<class:Window>","@native","$window"],"mappings":"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"}},{"offset":{"line":36155,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/css/declaration.rb"],"sourcesContent":["module Browser; module CSS\n\nclass Declaration\n  include Browser::NativeCachedWrapper\n  include Enumerable\n\n  def rule\n    Rule.new(`#@native.parentRule`) if defined?(`#@native.parentRule`)\n  end\n\n  def assign(data)\n    data.each {|name, value|\n      self[name] = value\n    }\n\n    self\n  end\n\n  def replace(string)\n    `#@native.cssText = #{string}`\n  end\n\n  def apply(&block)\n    Paggio::CSS::Definition.new(&block).each {|style|\n      if style.important\n        `#@native.setProperty(#{style.name}, #{style.value}, \"important\")`\n      else\n        `#@native.setProperty(#{style.name}, #{style.value}, \"\")`\n      end\n    }\n  end\n\n  def delete(name)\n    `#@native.removeProperty(#{name})`\n  end\n\n  def [](name)\n    %x{\n      var result = #@native.getPropertyValue(#{name});\n\n      if (result == null || result === \"\") {\n        return nil;\n      }\n\n      return result;\n    }\n  end\n\n  def []=(name, value)\n    `#@native.setProperty(#{name}, #{value.to_s}, \"\")`\n  end\n\n  def important?(name)\n    `#@native.getPropertyPriority(#{name}) == \"important\"`\n  end\n\n  def each(&block)\n    return enum_for :each unless block_given?\n\n    %x{\n      for (var i = 0, length = #@native.length; i < length; i++) {\n        var name  = #@native.item(i);\n\n        #{yield `name`, self[`name`]}\n      }\n    }\n\n    self\n  end\n\n  alias_native :length\n  alias_native :to_s, :cssText\n\n  def method_missing(name, value = nil)\n    if name.end_with? ?=\n      self[name[0 .. -2]] = value\n    else\n      self[name]\n    end\n  end\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<module:CSS>","<class:Declaration>","self","include","Browser::NativeCachedWrapper","Browser","Enumerable","rule","@native","Rule","new","assign","data","each","block in assign","name","value","block (2 levels) in assign","$writer","[]=","-","1","replace","string","apply","Paggio::CSS::Definition","Paggio::CSS","Paggio","block","to_proc","block in apply","style","block (2 levels) in apply","important","delete","[]","to_s","important?","block_given?","enum_for","alias_native","method_missing","end_with?","0","-2"],"mappings":"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"}},{"offset":{"line":36303,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/css/style_sheet.rb"],"sourcesContent":["module Browser; module CSS\n\nclass StyleSheet\n  include Browser::NativeCachedWrapper\n\n  def initialize(what)\n    if DOM::Element === what\n      super(`#{what.to_n}.sheet`)\n    else\n      super(what)\n    end\n  end\n\n  alias_native :disabled?, :disabled\n  alias_native :href\n  alias_native :title\n  alias_native :type\n\n  def media\n    Media.new(`#@native.media`) if `#@native.media != null`\n  end\n\n  def owner\n    DOM(`#@native.ownerNode`)\n  end\n\n  def parent\n    Sheet.new(`#@native.parentStyleSheet`) if `#@native.parentStyleSheet != null`\n  end\n\n  def rules\n    Native::Array.new(`#@native.cssRules`) { |e|\n      Rule.new(e)\n    }\n  end\n\n  def delete(index)\n    `#@native.deleteRule(index)`\n  end\n\n  def insert(index, rule)\n    `#@native.insertRule(#{rule}, #{index})`\n  end\n\n  def rule(selector, body)\n    unless String === selector\n      selector = selector.join ', '\n    end\n\n    unless String === body\n      body = body.map {|name, value|\n        \"#{name}: #{value};\"\n      }.join \"\\n\"\n    end\n\n    insert(length, \"#{selector} { #{body} }\")\n  end\n\n  def [](id)\n    rules.find { |r| log r; r.id == id }\n  end\n\n  def method_missing(*args, &block)\n    rules.__send__(*args, &block)\n  end\n\n  class Media < Native::Array\n    alias_native :text, :mediaText\n    alias_native :to_s, :mediaText\n\n    def push(medium)\n      `#@native.appendMedium(#{medium})`\n\n      self\n    end\n\n    def delete(medium)\n      `#@native.deleteMedium(#{medium})`\n    end\n  end\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<module:CSS>","<class:StyleSheet>","self","include","Browser::NativeCachedWrapper","Browser","initialize","what","DOM::Element","DOM","to_n","alias_native","media","@native","Media","new","owner","parent","Sheet","rules","Native::Array","Native","block in rules","e","block (2 levels) in rules","Rule","delete","index","insert","rule","selector","body","String","join","map","block in rule","name","value","block (2 levels) in rule","length","[]","id","find","block in []","r","block (2 levels) in []","log","==","method_missing","__send__","args","block","to_proc","<class:Media>","push","medium"],"mappings":"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"}},{"offset":{"line":36460,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/css/rule.rb"],"sourcesContent":["module Browser; module CSS\n\nclass Rule\n  include Browser::NativeCachedWrapper\n\n  STYLE_RULE               = 1\n  CHARSET_RULE             = 2\n  IMPORT_RULE              = 3\n  MEDIA_RULE               = 4\n  FONT_FACE_RULE           = 5\n  PAGE_RULE                = 6\n  KEYFRAMES_RULE           = 7\n  KEYFRAME_RULE            = 8\n  NAMESPACE_RULE           = 10\n  COUNTER_STYLE_RULE       = 11\n  SUPPORTS_RULE            = 12\n  DOCUMENT_RULE            = 13\n  FONT_FEATURE_VALUES_RULE = 14\n  VIEWPORT_RULE            = 15\n  REGION_STYLE_RULE        = 16\n\n  def self.new(rule)\n    if self == Rule\n      @classes ||= [nil, Style]\n\n      if klass = @classes[`rule.type`]\n        klass.new(rule)\n      else\n        raise ArgumentError, 'cannot instantiate a non derived Rule object'\n      end\n    else\n      super(rule)\n    end\n  end\n\n  alias_native :text, :cssText\n  alias_native :to_s, :cssText\n\n  def parent\n    Rule.new(`#@native.parentRule`) if `#@native.parentRule != null`\n  end\n\n  def style_sheet\n    StyleSheet.new(`#@native.parentStyleSheet`) if `#@native.parentStyleSheet != null`\n  end\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<module:CSS>","<class:Rule>","self","include","Browser::NativeCachedWrapper","Browser","1","2","3","4","5","6","7","8","10","11","12","13","14","15","16","new","rule","Rule","@classes","$ret_or_1","Style","klass","[]","raise","ArgumentError","alias_native","parent","@native","style_sheet","StyleSheet"],"mappings":"AAAAA,mDAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAEhBA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QACEC,IAAAC,SAAAA,CAAQC,IAAAC,aAAAD,wBAARD;QAEA,sCAA2BG,CAA3B;QACA,wCAA2BC,CAA3B;QACA,uCAA2BC,CAA3B;QACA,sCAA2BC,CAA3B;QACA,0CAA2BC,CAA3B;QACA,qCAA2BC,CAA3B;QACA,0CAA2BC,CAA3B;QACA,yCAA2BC,CAA3B;QACA,0CAA2BC,EAA3B;QACA,8CAA2BC,EAA3B;QACA,yCAA2BC,EAA3B;QACA,yCAA2BC,EAA3B;QACA,oDAA2BC,EAA3B;QACA,yCAA2BC,EAA3B;QACA,6CAA2BC,EAA3B;QAEAC,MAAInB,IAAJmB,UAAAA,qBAAaC,IAAbD;AAAAA,UAAAA;AAAAA;;UAAAA;UACE,IAAA,MAAGnB,IAAH,EAAWqB,UAAX,CAAA;;YACEC,eAvBN,CAAA,QAAAC,CAAAA,YAuBMD,YAvBNC,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAuBmB,CAAC,GAAD,EAAMC,WAAN,CAvBnB,CAAA;YAyBM,IAAA,QAAGC,CAAAA,QAAQH,YAAQI,OAAAA,CAAEP,SAAFO,CAAhBD,CAAH,CAAA;cACEN,OAAAM,KAAKN,KAAAA,CAAKC,IAALD;YADP;cAGEA,OAAAnB,IAAA2B,OAAAA,CAAMC,mBAAN,EAAqBT,8CAArBQ;YAHF;UAHF;YASER,OAAA,OAAAnB,IAAA,EAAA,kDAAA,OAAA,EAAA,CAAMoB,IAAN,CAAA,EAAA,IAAA;UATF;QADFD,CAAAA,GAAAA;QAcAnB,IAAA6B,cAAAA,CAAa,MAAb,EAAoB,SAApBA;QACA7B,IAAA6B,cAAAA,CAAa,MAAb,EAAoB,SAApBA;;AAEAC,QAAAA,sBAAAA,kBAAAA;AAAAA,UAAAA;;UACE,IAAA,QAAqCC,cAAOD,mBAA5C,CAAA;YAAAA,OAAAT,UAAIF,KAAAA,CAAOY,cAAOD,WAAdX;UAAJ;YAvCJW,OAAA;UAuCI;QADFA,CAAAA,GAAAA;QAIA/B,OAAAiC,2BAAAA,uBAAAA;AAAAA,UAAAA;;UACE,IAAA,QAAiDD,cAAOC,yBAAxD,CAAA;YAAAA,OAAAC,gBAAUd,KAAAA,CAAOY,cAAOC,iBAAdb;UAAV;YA3CJa,OAAA;UA2CI;QADFA,CAAAA,GAAAA;MAxCFjC,GAAAA,WAAAA,EAAAA,IAAAA;IAFgBD,GAAAA,WAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":36540,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/css/rule/style.rb"],"sourcesContent":["module Browser; module CSS; class Rule\n\nclass Style < Rule\n  alias_native :selector, :selectorText\n  alias_native :id, :selectorText\n\n  def declaration\n    Declaration.new(`#@native.style`)\n  end\n\n  def method_missing(*args, &block)\n    declaration.__send__(*args, &block)\n  end\nend\n\nend; end; end\n"],"names":["<top (required)>","<module:Browser>","<module:CSS>","<class:Rule>","<class:Style>","self","alias_native","declaration","Declaration","new","@native","method_missing","__send__","args","block","to_proc","Rule"],"mappings":"AAAAA,yDAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAAYA,OAAAC;MAAAA;;QAAAA;;QAE5BA,OAAAC;QAAAA;;UAAAA;;AAAAA;;UACEC,IAAAC,cAAAA,CAAa,UAAb,EAAwB,cAAxBA;UACAD,IAAAC,cAAAA,CAAa,IAAb,EAAkB,cAAlBA;;AAEAC,UAAAA,2BAAAA,uBAAAA;AAAAA,YAAAA;;YACEA,OAAAC,iBAAWC,KAAAA,CAAOC,cAAOH,MAAdE;UADbF,CAAAA,GAAAA;UAIAH,OAAAO,8BAAAA,0BAVF,EAUEA;AAAAA,YAAAA;;YAAAA;;;;YAVF;;YAUqB;YACjBA,OAAWC,MAAXP,IAAAE,aAAAA,CAAAA,CAAWK,YAAAA,EAAU,MAACC,IAAD,CAAVD,EAAkBE,KAADC,SAAAA,CAAAA,CAAjBH;UADbD,CAAAA,IAAAA;QARFP,GAAAA,WAAAA,EAAcY,UAAdZ;MAF4BD,GAAAA,WAAAA,EAAAA,IAAAA;IAAZD,GAAAA,WAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":36592,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/css.rb"],"sourcesContent":["require 'browser/css/declaration'\nrequire 'browser/css/style_sheet'\nrequire 'browser/css/rule'\nrequire 'browser/css/rule/style'\n\nmodule Kernel\n  # @overload CSS(document = $document, &block)\n  #\n  #   Create a `<style>` element from a {Paggio::CSS} DSL.\n  #\n  #   @param document [Browser::DOM::Document] the document instance\n  #     we intend to use\n  #\n  #   @return [Browser::DOM::Element] the created `<style>` element\n  #\n  # @overload CSS(string, document = $document)\n  #\n  #   Create a `<style>` element from a string.\n  #\n  #   @param document [Browser::DOM::Document] the document instance\n  #     we intend to use\n  #\n  #   @return [Browser::DOM::Element] the created `<style>` element\n  def CSS(*args, &block)\n    document = if args.length > 1 || block_given?\n      args.pop\n    end || $document\n\n    style = document.create_element(:style)\n    style[:type] = 'text/css'\n\n    if block\n      style.inner_text = Paggio.css(&block)\n    else\n      style.inner_text = args.join(\"\")\n    end\n\n    style\n  end\nend\n"],"names":["<top (required)>","self","require","<module:Kernel>","CSS","document","$ret_or_1",">","args","length","1","block_given?","pop","$document","style","create_element","$writer","[]=","-","block","css","Paggio","to_proc","inner_text=","join"],"mappings":"AAAAA,8CAAAA;EAAAA;;EAAAA;;EAAAC,IAAAC,SAAAA,CAAQF,yBAARE;EACAD,IAAAC,SAAAA,CAAQF,yBAARE;EACAD,IAAAC,SAAAA,CAAQF,kBAARE;EACAD,IAAAC,SAAAA,CAAQF,wBAARE;EAEAF,OAAAG;EAAAA;;IAAAA;;IAkBEA,OAAAC,mBAAAA,eAvBF,EAuBEA;AAAAA,MAAAA;AAAAA;;MAAAA;;;;MAvBF;;MAuBU;MACNC,WAAW,CAAA,QAAAC,CAAAA,YAAA,CAAG,CAAA,QAAYC,OAAZC,IAAIC,QAAAA,CAAAA,CAAQF,EAAEG,CAAFH,CAAZ,CAAA,IAAA,CAAmBI,eAAnB,CAAA,CAAH,GAAA,CACTH,IAAII,KAAAA,CAAAA,CADK,IAAA,GAAA,CAAAN,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAEJO,eAFI,CAAA;MAIXC,QAAQT,QAAQU,gBAAAA,CAAgB,OAAhBA;;MA5BpBC,UAAA,CA6BU,MA7BV,EA6BmBZ,UA7BnB;MA6BSa,MAALH,KAAKG,OAAAA,EA7BT,MAAAD,OAAA,CA6BSC;MA7BTD,OAAA,CAAAE,UAAAF,OAAA,CAAAZ,QAAA,CAAAc,EAAAR,CAAAQ,CAAA;MA+BI,IAAA,QAAGC,KAAH,CAAA;;QA/BJH,UAAA,CAgC+BI,MAANC,YAAMD,OAAAA,EAAAA,EAAAA,EAAMD,KAADG,SAAAA,CAAAA,CAALF,CAhC/B;QAgCWG,MAALT,KAAKS,eAAAA,EAhCX,MAAAP,OAAA,CAgCWO;QAhCXP,OAAA,CAAAE,UAAAF,OAAA,CAAAZ,QAAA,CAAAc,EAAAR,CAAAQ,CAAA;MA+BI;;QA/BJF,UAAA,CAkCyBR,IAAIgB,MAAAA,CAAMpB,EAANoB,CAlC7B;QAkCWD,MAALT,KAAKS,eAAAA,EAlCX,MAAAP,OAAA,CAkCWO;QAlCXP,OAAA,CAAAE,UAAAF,OAAA,CAAAZ,QAAA,CAAAc,EAAAR,CAAAQ,CAAA;MA+BI;MAMAd,OAAAU;IAdFV,CAAAA,IAAAA;EAlBFD,GAAAA,WAAAA;AALAH;"}},{"offset":{"line":36639,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/setup/mini.rb"],"sourcesContent":["# browser/setup/mini - A smaller set of requires, designed for slim codebases\n\nrequire 'browser/setup/base'\n\nrequire 'browser/event'\nrequire 'browser/window'\nrequire 'browser/dom'\nrequire 'browser/css'\n"],"names":["<top (required)>","self","require"],"mappings":"AAAAA,qDAAAA;EAAAA;;EAAAA;;EAEAC,IAAAC,SAAAA,CAAQF,oBAARE;EAEAD,IAAAC,SAAAA,CAAQF,eAARE;EACAD,IAAAC,SAAAA,CAAQF,gBAARE;EACAD,IAAAC,SAAAA,CAAQF,aAARE;EACAF,OAAAC,IAAAC,SAAAA,CAAQF,aAARE;AAPAF;"}},{"offset":{"line":36651,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/animation_frame.rb"],"sourcesContent":["module Browser\n\n# Allows you to wrap a block to use in an animation rendering cycle.\n#\n# @see https://developer.mozilla.org/en/docs/Web/API/window.requestAnimationFrame\nclass AnimationFrame\n  def self.supported?\n    ['Animation.request',\n     'Animation.request (Chrome)',\n     'Animation.request (Firefox)',\n     'Animation.request (Opera)',\n     'Animation.request (Internet Explorer)'].any? {|feature|\n       Browser.supports? feature\n     }\n  end\n\n  # Execute the block to update an animation before the next repaint.\n  #\n  # @param window [Window] the window to request the frame on\n  def initialize(window, &block)\n    @window = window\n    @native = window.to_n\n    @id     = request(block)\n  end\n\n  if Browser.supports? 'Animation.request'\n    def request(block)\n      `#@native.requestAnimationFrame(#{block.to_n})`\n    end\n  elsif Browser.supports? 'Animation.request (Chrome)'\n    def request(block)\n      `#@native.webkitRequestAnimationFrame(#{block.to_n})`\n    end\n  elsif Browser.supports? 'Animation.request (Firefox)'\n    def request(block)\n      `#@native.mozRequestAnimationFrame(#{block.to_n})`\n    end\n  elsif Browser.supports? 'Animation.request (Opera)'\n    def request(block)\n      `#@native.oRequestAnimationFrame(#{block.to_n})`\n    end\n  elsif Browser.supports? 'Animation.request (Internet Explorer)'\n    def request(block)\n      `#@native.msRequestAnimationFrame(#{block.to_n})`\n    end\n  else\n    # Request the animation frame.\n    def request\n      raise NotImplementedError, 'window requestAnimationFrame unsupported'\n    end\n  end\n\n  if Browser.supports? 'Animation.cancel'\n    def cancel\n      `#@native.cancelAnimationFrame(#@id)`\n    end\n  elsif Browser.supports? 'Animation.cancel (Chrome)'\n    def cancel\n      `#@native.webkitCancelAnimationFrame(#@id)`\n    end\n  elsif Browser.supports? 'Animation.cancelRequest (Chrome)'\n    def cancel\n      `#@native.webkitCancelRequestAnimationFrame(#@id)`\n    end\n  elsif Browser.supports? 'Animation.cancel (Firefox)'\n    def cancel\n      `#@native.mozCancelAnimationFrame(#@id)`\n    end\n  elsif Browser.supports? 'Animation.cancelRequest (Firefox)'\n    def cancel\n      `#@native.mozCancelRequestAnimationFrame(#@id)`\n    end\n  elsif Browser.supports? 'Animation.cancel (Opera)'\n    def cancel\n      `#@native.oCancelAnimationFrame(#@id)`\n    end\n  elsif Browser.supports? 'Animation.cancelRequest (Opera)'\n    def cancel\n      `#@native.oCancelRequestAnimationFrame(#@id)`\n    end\n  elsif Browser.supports? 'Animation.cancel (Internet Explorer)'\n    def cancel\n      `#@native.msCancelAnimationFrame(#@id)`\n    end\n  elsif Browser.supports? 'Animation.cancelRequest (Internet Explorer)'\n    def cancel\n      `#@native.msCancelRequestAnimationFrame(#@id)`\n    end\n  else\n    # Cancel the animation frame request.\n    def cancel\n      raise NotImplementedError, 'window cancelAnimationFrame unsupported'\n    end\n  end\nend\n\nend\n\nmodule Kernel\n  # (see Browser::AnimationFrame.new)\n  def animation_frame(&block)\n    Browser::AnimationFrame.new($window, &block)\n  end\nend\n\nclass Proc\n  # (see Browser::AnimationFrame.new)\n  def animation_frame\n    Browser::AnimationFrame.new($window, &self)\n  end\nend\n"],"names":["<top (required)>","<module:Browser>","<class:AnimationFrame>","supported?","self","any?","block in supported?","feature","block (2 levels) in supported?","Browser","supports?","initialize","window","@window","@native","to_n","@id","request","block","raise","NotImplementedError","cancel","<module:Kernel>","animation_frame","new","Browser::AnimationFrame","$window","to_proc","<class:Proc>"],"mappings":"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"}},{"offset":{"line":36822,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/effects.rb"],"sourcesContent":["require 'browser/animation_frame'\n\nmodule Browser; module DOM\n\nclass Document < Element\n  # @!attribute [r] active_element\n  # @return [Element] the element with focus\n  def active_element\n    DOM(`#@native.activeElement`)\n  end\nend\n\nclass Element\n  # Show the element.\n  #\n  # @param what [Symbol] how to display it\n  def show(what = :block)\n    style[:display] = what\n    self\n  end\n\n  # Hide the element.\n  def hide\n    style[:display] = :none\n    self\n  end\n\n  def visible?\n    # Let's check if we want to lie about the real visibility of an element.\n    # It could be wise to lie about it when it's in a process of animation...\n    if !@virtually_visible.nil?\n      @virtually_visible\n    else\n      style![:display] != :none\n    end\n  end\n\n  # Toggle the visibility of the element, hide it if it's shown, show it if\n  # it's hidden.\n  def toggle(what = :block)\n    if visible?\n      hide\n    else\n      show(what)\n    end\n    self\n  end\n\n  # Set the focus on the element.\n  def focus\n    `#@native.focus()`\n    self\n  end\n\n  # Blur the focus from the element.\n  def blur\n    `#@native.blur()`\n    self\n  end\n\n  # Check if the element is focused.\n  def focused?\n    `#@native.hasFocus`\n  end\n\n  # Queue the block to happen when currently queued animations finish or during\n  # the next animation frame.\n  def animation_queue &block\n    promise = Promise.new\n\n    promise_resolve = proc do\n      @animation_promise = nil if @animation_promise == promise\n      promise.resolve\n    end\n\n    @animation_promise = (@animation_promise || Promise.value(true)).then do\n      animation_frame do\n        yield promise_resolve\n      end\n      promise\n    end\n  end\n\n  # Transform an element smoothly using CSS transitions, jQuery style. Yield\n  # a block afterwards if it's provided.\n  def animate(properties, duration: 0.4.s, easing: :ease, resolve: false, &block)\n    animation_queue(resolve) do |res|\n      duration = 0.6.s if duration == :slow\n      duration = 0.2.s if duration == :fast\n\n      original_value = style['transition']\n\n      style['transition'] = [original_value,\n                            *properties.keys.map do |key|\n                              \"#{key} #{duration} #{easing}\"\n                            end].compact.join(\", \")\n\n      properties.each do |key, value|\n        style[key] = value\n      end\n\n      promise = Promise.new\n\n      one :transitionend do |*args|\n        style['transition'] = original_value\n\n        yield(*args) if block_given?\n\n        res.call\n      end\n    end\n    self\n  end\n\n  # Show a hidden element with a \"fade in\" animation. Yield a block afterwards.\n  def fade_in(**kwargs, &block)\n    animation_queue do |resolve|\n      if !visible?\n        @virtually_visible = true\n        show\n\n        style[:opacity] = 0.0\n        animate opacity: 1.0, **kwargs do |*args|\n          @virtually_visible = nil\n          style[:opacity] = nil\n          yield(*args) if block_given?\n        end\n      end\n      resolve.call\n    end\n    self\n  end\n\n  # Hide a visible element with a \"fade out\" animation. Yield a block afterwards.\n  def fade_out(**kwargs, &block)\n    animation_queue do |resolve|\n      if visible?\n        @virtually_visible = false\n\n        style[:opacity] = 1.0\n        animate opacity: 0.0, **kwargs do |*args|\n          @virtually_visible = nil\n          style[:opacity] = nil\n          hide\n          yield(*args) if block_given?\n        end\n      end\n      resolve.call\n    end\n    self\n  end\n\n  # Toggle a visibility of an element with a \"fade in\"/\"fade out\" animation. Yield\n  # a block afterwards.\n  def fade_toggle(**kwargs, &block)\n    if visible?\n      fade_out(**kwargs, &block)\n    else\n      fade_in(**kwargs, &block)\n    end\n    self\n  end\n\n  # Show a hidden element with a \"slide down\" animation. Yield a block afterwards.\n  def slide_down(**kwargs, &block)\n    animation_queue do |resolve|\n      if !visible?\n        @virtually_visible = true\n        show\n        height = size.height\n        orig_height = style[:height]\n        style[:height] = 0.px\n\n        animate height: height.px, **kwargs do |*args|\n          @virtually_visible = nil\n          style[:height] = orig_height\n          yield(*args) if block_given?\n        end\n      end\n      resolve.call\n    end\n    self\n  end\n\n  # Hide a visible element with a \"slide up\" animation. Yield a block afterwards.\n  def slide_up(**kwargs, &block)\n    animation_queue do |resolve|\n      if visible?\n        @virtually_visible = false\n        orig_height = style[:height]\n\n        animate height: 0.px, **kwargs do |*args|\n          @virtually_visible = nil\n          style[:height] = orig_height\n          hide\n          yield(*args) if block_given?\n        end\n      end\n      resolve.call\n    end\n    self\n  end\n\n  # Toggle a visibility of an element with a \"slide up\"/\"slide down\" animation.\n  # Yield a block afterwards.\n  def slide_toggle(**kwargs, &block)\n    if visible?\n      slide_up(**kwargs, &block)\n    else\n      slide_down(**kwargs, &block)\n    end\n    self\n  end\nend\n\nend; end\n"],"names":["<top (required)>","self","require","<module:Browser>","<module:DOM>","<class:Document>","active_element","DOM","@native","Element","<class:Element>","show","what","$writer","[]=","style","-","1","hide","visible?","@virtually_visible","nil?","style!","[]","!=","toggle","focus","blur","focused?","animation_queue","promise","Promise","new","promise_resolve","proc","block in animation_queue","block (2 levels) in animation_queue","@animation_promise","resolve","then","$ret_or_1","value","animation_frame","animate","properties","$kwargs","s","block in animate","res","block (2 levels) in animate","duration","original_value","map","keys","key","block (3 levels) in animate","easing","compact","join","each","one","block_given?","args","call","fade_in","block in fade_in","block (2 levels) in fade_in","kwargs","block (3 levels) in fade_in","fade_out","block in fade_out","block (2 levels) in fade_out","block (3 levels) in fade_out","fade_toggle","block","to_proc","slide_down","block in slide_down","block (2 levels) in slide_down","height","size","orig_height","0","px","block (3 levels) in slide_down","slide_up","block in slide_up","block (2 levels) in slide_up","block (3 levels) in slide_up","slide_toggle"],"mappings":"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"}},{"offset":{"line":37264,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/http/binary.rb"],"sourcesContent":["module Browser; module HTTP\n\n# Represents a binary result from a HTTP response.\nclass Binary\n  # @!attribute [r] type\n  # @return [:string, :buffer] the type of binary\n  attr_reader :type\n\n  # Create a binary from a value.\n  #\n  # @param value [String, Buffer] the binary\n  def initialize(value)\n    if String === value\n      @type = :string\n      @data = value\n    else\n      @type = :buffer\n      @data = value.to_a\n    end\n  end\n\n  include Enumerable\n\n  # Iterate over each byte in the binary.\n  #\n  # @yield [byte] the byte\n  #\n  # @return [self]\n  def each(&block)\n    return enum_for :each unless block\n\n    index  = 0\n    length = self.length\n\n    while index < length\n      block.call(self[index])\n\n      index += 1\n    end\n\n    self\n  end\n\n  # Access a byte from the binary.\n  #\n  # @return [Integer] a byte\n  def [](index)\n    @type == :string ? `#@data.charCodeAt(index) & 0xff` : @data[index]\n  end\n\n  # @!attribute [r] length\n  # @return [Integer] the length of the binary\n  def length\n    @data.length\n  end\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<module:HTTP>","<class:Binary>","self","attr_reader","initialize","value","String","@type","@data","to_a","include","Enumerable","each","block","enum_for","index","0","length","<","call","[]","+","1"],"mappings":"AAAAA,sDAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAGhBA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QAGEC,IAAAC,aAAAA,CAAY,MAAZA;;AAKAC,QAAAA,0BAAAA,sBAAeC,KAAfD;AAAAA,UAAAA;;UACE,IAAA,QAAGE,YAAH,EAAcD,KAAd,CAAA;;YACEE,YAAQ;YACRH,OAAAI,CAAAA,YAAQH,KAARG;UAFF;;YAIED,YAAQ;YACRH,OAAAI,CAAAA,YAAQH,KAAKI,MAAAA,CAAAA,CAAbD;UALF;QADFJ,CAAAA,GAAAA;QAUAF,IAAAQ,SAAAA,CAAQC,gBAARD;;AAOAE,QAAAA,oBAAAA,gBAAAA;AAAAA,UAAAA;;UAAAA;;;UACE,KAAA,QAA6BC,KAA7B,CAAA;YAAA,OAAOX,IAAAY,UAAAA,CAAS,MAATA;UAAP;UAEAC,QAASC;UACTC,SAASf,IAAIe,QAAAA,CAAAA;UAEb,OAAA,QAAYC,OAANH,KAAMG,EAAED,MAAFC,CAAZ,CAAA;;YACEL,KAAKM,MAAAA,CAAMjB,IAAIkB,OAAAA,CAACL,KAADK,CAAVD;YAELJ,QAAMM,SAANN,KAAMM,EAAGC,CAAHD;UAHR;UAMAT,OAAAV;QAZFU,CAAAA,GAAAA;;AAkBAQ,QAAAA,kBAAAA,sBAAOL,KAAPK;AAAAA,UAAAA;;UACE,IAAA,MAAAb,SAAA,EAAS,QAAT,CAAA;YAAmBa,OAAEZ,SAAKY;UAA1B;YAAuDA,OAAAZ,SAAKY,OAAAA,CAACL,KAADK;UAA5D;QADFA,CAAAA,GAAAA;QAMAnB,OAAAgB,sBAAAA,kBAAAA;AAAAA,UAAAA;;UACEA,OAAAT,SAAKS,QAAAA,CAAAA;QADPA,CAAAA,GAAAA;MAjDFhB,GAAAA,WAAAA,EAAAA,IAAAA;IAHgBD,GAAAA,WAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":37340,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/http/headers.rb"],"sourcesContent":["module Browser; module HTTP\n\n# Represents a single HTTP header.\nHeader = Struct.new(:name, :value)\n\n# Represents HTTP headers.\nclass Headers\n  # Parse HTTP headers from a string.\n  #\n  # @param string [String] the whole HTTP headers response\n  # @return [Headers] the parsed headers\n  def self.parse(string)\n    self[string.lines.map { |l| l.chomp.split(/\\s*:\\s*/) }]\n  end\n\n  # Create {Headers} from a hash.\n  #\n  # @param hash [Hash]\n  def self.[](hash)\n    result = new\n\n    hash.each {|name, value|\n      result[name] = value\n    }\n\n    result\n  end\n\n  include Enumerable\n\n  # Create an empty {Headers}.\n  def initialize\n    @hash = Hash.new\n  end\n\n  # Clear the {Headers}.\n  def clear\n    @hash.clear\n  end\n\n  # Enumerate over the headers.\n  #\n  # @yieldparam name [String] the name of the header\n  # @yieldparam value [String] the value of the header\n  #\n  # @return [self]\n  def each(&block)\n    return enum_for :each unless block\n\n    @hash.each {|_, header|\n      block.call [header.name, header.value]\n    }\n\n    self\n  end\n\n  # Get the value of a header.\n  #\n  # @param name [String] the name of the header\n  #\n  # @return [String] the value of the header\n  def [](name)\n    @hash[name.downcase]\n  end\n\n  # Set a value for the header.\n  #\n  # @param name [String] the name of the header\n  # @param value [String] the value of the header\n  def []=(name, value)\n    header = Header.new(name, value)\n\n    @hash[name.downcase] = header\n  end\n\n  # Push a header.\n  #\n  # @param header [Header] the header to push\n  #\n  # @return [self]\n  def <<(header)\n    @hash[header.name.downcase] = header\n\n    self\n  end\n\n  alias push <<\n\n  # Merge in place other headers.\n  #\n  # @param other [Headers, Hash, #each] the headers to merge\n  #\n  # @return [self]\n  def merge!(other)\n    other.each {|name, value|\n      self[name] = value\n    }\n\n    self\n  end\n\n  # @!attribute [r] length\n  # @return [Integer] the number of headers\n  def length\n    @hash.length\n  end\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<module:HTTP>","Struct","new","<class:Headers>","parse","self","string","[]","map","lines","block in parse","l","block (2 levels) in parse","chomp","split","hash","result","each","block in []","name","value","block (2 levels) in []","$writer","[]=","-","1","include","Enumerable","initialize","@hash","Hash","clear","block","enum_for","block in each","_","header","block (2 levels) in each","call","downcase","Header","<<","merge!","other","block in merge!","block (2 levels) in merge!","length"],"mappings":"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"}},{"offset":{"line":37477,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/http/request.rb"],"sourcesContent":["module Browser; module HTTP\n\nclass Request\n  include Native::Wrapper\n  include Event::Target\n\n  # Default headers.\n  HEADERS = {\n    'X-Requested-With' => 'XMLHttpRequest',\n    'X-Opal-Version'   => RUBY_ENGINE_VERSION,\n    'Accept'           => 'text/javascript, text/html, application/xml, text/xml, */*'\n  }\n\n  STATES = %w[uninitialized loading loaded interactive complete]\n\n  # @!attribute [r] headers\n  # @return [Headers] the request headers\n  attr_reader :headers\n\n  # @!attribute [r] response\n  # @return [Response] the response associated with this request\n  attr_reader :response\n\n  # @!attribute [r] method\n  # @return [Symbol] the HTTP method for this request\n  attr_reader :method\n\n  # @!attribute [r] url\n  # @return [String, #to_s] the URL for this request\n  attr_reader :url\n\n  # Create a request with the optionally given configuration block.\n  #\n  # @yield [request] if the block has a parameter the request is passed\n  #                  otherwise it's instance_exec'd\n  def initialize(&block)\n    super(transport)\n\n    @parameters   = {}\n    @query        = {}\n    @headers      = Headers[HEADERS]\n    @method       = :get\n    @asynchronous = true\n    @binary       = false\n    @cacheable    = true\n    @opened       = false\n    @sent         = false\n    @completed    = false\n    @callbacks    = Hash.new { |h, k| h[k] = [] }\n\n    if block.arity == 0\n      instance_exec(&block)\n    else\n      block.call(self)\n    end if block\n  end\n\n  # @!method transport\n  #   @private\n  if Browser.supports? :XHR\n    def transport\n      `new XMLHttpRequest()`\n    end\n  elsif Browser.supports? :ActiveX\n    def transport\n      `new ActiveXObject(\"MSXML2.XMLHTTP.3.0\")`\n    end\n  else\n    def transport\n      raise NotImplementedError\n    end\n  end\n\n  # Check if the request has been opened.\n  def opened?\n    @opened\n  end\n\n  # Check if the request has been sent.\n  def sent?\n    @sent\n  end\n\n  # Check if the request has completed.\n  def completed?\n    @completed\n  end\n\n  # Check the request is asynchronous.\n  def asynchronous?\n    @asynchronous\n  end\n\n  # Check the request is synchronous.\n  def synchronous?\n    !@asynchronous\n  end\n\n  # Make the request asynchronous.\n  def asynchronous!\n    @asynchronous = true\n  end\n\n  # Make the request synchronous.\n  def synchronous!\n    @asynchronous = false\n  end\n\n  # Check the request is binary.\n  def binary?\n    @binary\n  end\n\n  # Make the request binary.\n  def binary!\n    @binary = true\n  end\n\n  # Check if the request is cacheable.\n  def cacheable?\n    @cacheable\n  end\n\n  # Disable caching for this request.\n  def no_cache!\n    @cacheable = false\n  end\n\n  # Get or set the user used for authentication.\n  #\n  # @param value [String] when passed it sets, when omitted it gets\n  #\n  # @return [String]\n  def user(value = nil)\n    value ? @user = value : @user\n  end\n\n  # Get or set the password used for authentication.\n  #\n  # @param value [String] when passed it sets, when omitted it gets\n  #\n  # @return [String]\n  def password(value = nil)\n    value ? @password = value : @password\n  end\n\n  # Get or set the MIME type of the request.\n  #\n  # @param value [String] when passed it sets, when omitted it gets\n  #\n  # @return [String]\n  def mime_type(value = nil)\n    value ? @mime_type = value : @mime_type\n  end\n\n  # Get or set the Content-Type of the request.\n  #\n  # @param value [String] when passed it sets, when omitted it gets\n  #\n  # @return [String]\n  def content_type(value = nil)\n    value ? @content_type = value : @content_type\n  end\n\n  # Get or set the encoding of the request.\n  #\n  # @param value [String] when passed it sets, when omitted it gets\n  #\n  # @return [String]\n  def encoding(value = nil)\n    value ? @encoding = value : @encoding\n  end\n\n  # Set the request parameters.\n  #\n  # @param hash [Hash] the parameters\n  #\n  # @return [Hash]\n  def parameters(hash = nil)\n    hash ? @parameters = hash : @parameters\n  end\n\n  # Set the URI query.\n  #\n  # @param hash [Hash] the query\n  #\n  # @return [Hash]\n  def query(hash = nil)\n    hash ? @query = hash : @query\n  end\n\n  # Register an event on the request.\n  #\n  # @param what [Symbol, String] the event name\n  #\n  # @yieldparam response [Response] the response for the event\n  def on(what, *, &block)\n    if STATES.include?(what) || %w[success failure].include?(what) || Integer === what\n      @callbacks[what] << block\n    else\n      super\n    end\n  end\n\n  # Open the request.\n  #\n  # @param method [Symbol] the HTTP method to use\n  # @param url [String, #to_s] the URL to send the request to\n  # @param asynchronous [Boolean] whether the request is asynchronous or not\n  # @param user [String] the user to use for authentication\n  # @param password [String] the password to use for authentication\n  #\n  # @return [self]\n  def open(method = nil, url = nil, asynchronous = nil, user = nil, password = nil)\n    raise 'the request has already been opened' if opened?\n\n    @method       = method       unless method.nil?\n    @url          = url          unless url.nil?\n    @asynchronous = asynchronous unless asynchronous.nil?\n    @user         = user         unless user.nil?\n    @password     = password     unless password.nil?\n\n    url = @url\n\n    # add a dummy random parameter to the query to try circumvent caching\n    unless cacheable?\n      @query[:_] = rand\n    end\n\n    # add the encoded query to the @url, prepending the right character if\n    # there was already a query in the defined @url or not\n    unless @query.empty?\n      if url.include? ??\n        url += ?&\n      else\n        url += ??\n      end\n\n      url += FormData.build_query(@query)\n    end\n\n    `#@native.open(#{@method.to_s.upcase}, #{url.to_s}, #{@asynchronous}, #{@user.to_n}, #{@password.to_n})`\n\n    # if there are no registered callbacks no point in setting the event\n    # handler\n    unless @callbacks.empty?\n      `#@native.onreadystatechange = #{callback}`\n    end\n\n    @opened = true\n\n    self\n  end\n\n  # Send the request with optional parameters.\n  #\n  # @param parameters [String, Hash] the data to send\n  #\n  # @return [Response] the response\n  def send(parameters = @parameters)\n    raise 'the request has not been opened' unless opened?\n\n    raise 'the request has already been sent' if sent?\n\n    # try to circumvent caching setting an If-Modified-Since header with a very\n    # old date\n    unless cacheable?\n      `#@native.setRequestHeader(\"If-Modified-Since\", \"Tue, 11 Sep 2001 12:46:00 GMT\")`\n    end\n\n    @headers.each {|name, value|\n      `#@native.setRequestHeader(#{name.to_s}, #{value.to_s})`\n    }\n\n    if @content_type\n      header  = @content_type\n      header += \"; charset=#{@encoding}\" if @encoding\n\n      `#@native.setRequestHeader('Content-Type', header)`\n    end\n\n    if binary?\n      if Buffer.supported?\n        `#@native.responseType = 'arraybuffer'`\n      else\n        `#@native.overrideMimeType('text/plain; charset=x-user-defined')`\n      end\n    end\n\n    if mime_type && !binary?\n      `#@native.overrideMimeType(#@mime_type)`\n    end\n\n    @sent     = true\n    @response = Response.new(self)\n\n    if String === parameters\n      data = parameters\n    elsif (Hash === parameters && !parameters.empty?) || FormData === parameters\n      data = if Hash === parameters\n        if FormData.contain_files?(parameters)\n          FormData.build_form_data(parameters)\n        else\n          FormData.build_query(parameters)\n        end\n      else #if FormData === parameters\n        parameters\n      end\n\n      unless @content_type\n        if FormData === data\n          # I thought it's done this way, but it isn't. It actually is\n          # \"multipart/form-data; boundary=-----------.......\". Let's miss it\n          # purposefully, because it's filled in automatically in this example.\n          # `#@native.setRequestHeader('Content-Type', 'multipart/form-data')`\n        else\n          `#@native.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')`\n        end\n      end\n\n      data = data.to_n\n    else\n      data = `null`\n    end\n\n    `#@native.send(#{data})`\n\n    @response\n  end\n\n  # Abort the request.\n  def abort\n    `#@native.abort()`\n  end\n\nprivate\n  def callback\n    -> event {\n      state = STATES[`#@native.readyState`]\n      res   = response\n\n      @callbacks[state].each { |b| b.(res) }\n\n      if state == :complete\n        @completed = true\n\n        @callbacks[res.status.code].each { |b| b.(res) }\n\n        if res.success?\n          @callbacks[:success].each { |b| b.(res) }\n        else\n          @callbacks[:failure].each { |b| b.(res) }\n        end\n      end\n    }\n  end\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<module:HTTP>","<class:Request>","self","include","Native::Wrapper","Native","Event::Target","Event","RUBY_ENGINE_VERSION","attr_reader","initialize","transport","@parameters","@query","@headers","Headers","[]","HEADERS","@method","@asynchronous","@binary","@cacheable","@opened","@sent","@completed","@callbacks","new","Hash","block in initialize","h","k","block (2 levels) in initialize","$writer","[]=","-","1","block","arity","0","instance_exec","to_proc","call","Browser","supports?","raise","NotImplementedError","opened?","sent?","completed?","asynchronous?","synchronous?","!","asynchronous!","synchronous!","binary?","binary!","cacheable?","no_cache!","user","value","@user","password","@password","mime_type","@mime_type","content_type","@content_type","encoding","@encoding","parameters","hash","query","on","what","STATES","include?","Integer","<<","open","method","url","asynchronous","nil?","@url","rand","empty?","+","FormData","build_query","@native","to_s","upcase","to_n","callback","send","each","block in send","name","block (2 levels) in send","header","Buffer","supported?","@response","Response","String","data","contain_files?","build_form_data","abort","private","block in callback","event","block (2 levels) in callback","state","res","response","b","block (3 levels) in callback","status","code","success?"],"mappings":"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"}},{"offset":{"line":37910,"column":0},"map":{"version":3,"sourceRoot":"","sources":["./json.rb"],"sourcesContent":["module JSON\n  class JSONError < StandardError\n  end\n\n  class ParserError < JSONError\n  end\n\n  %x{\n    var $hasOwn = Opal.hasOwnProperty;\n\n    function $parse(source) {\n      try {\n        return JSON.parse(source);\n      } catch (e) {\n        #{raise JSON::ParserError, `e.message`};\n      }\n    };\n\n    function to_opal(value, options) {\n      var klass, arr, hash, i, ii, k;\n\n      switch (typeof value) {\n        case 'string':\n          return value;\n\n        case 'number':\n          return value;\n\n        case 'boolean':\n          return !!value;\n\n        case 'undefined':\n          return nil;\n\n        case 'object':\n          if (!value) return nil;\n\n          if (value.$$is_array) {\n            arr = #{`options.array_class`.new};\n\n            for (i = 0, ii = value.length; i < ii; i++) {\n              #{`arr`.push(`to_opal(value[i], options)`)};\n            }\n\n            return arr;\n          }\n          else {\n            hash = #{`options.object_class`.new};\n\n            for (k in value) {\n              if ($hasOwn.call(value, k)) {\n                #{`hash`[`k`] = `to_opal(value[k], options)`};\n              }\n            }\n\n            if (!options.parse && (klass = #{`hash`[JSON.create_id]}) != nil) {\n              return #{::Object.const_get(`klass`).json_create(`hash`)};\n            }\n            else {\n              return hash;\n            }\n          }\n        }\n    };\n  }\n\n  class << self\n    attr_accessor :create_id\n  end\n\n  self.create_id = :json_class\n\n  def self.[](value, options = {})\n    if String === value\n      parse(value, options)\n    else\n      generate(value, options)\n    end\n  end\n\n  def self.parse(source, options = {})\n    from_object(`$parse(source)`, options.merge(parse: true))\n  end\n\n  def self.parse!(source, options = {})\n    parse(source, options)\n  end\n\n  def self.load(source, options = {})\n    from_object(`$parse(source)`, options)\n  end\n\n  # Raw js object => opal object\n  def self.from_object(js_object, options = {})\n    options[:object_class] ||= Hash\n    options[:array_class]  ||= Array\n\n    `to_opal(js_object, options.$$smap)`\n  end\n\n  def self.generate(obj, options = {})\n    obj.to_json(options)\n  end\n\n  def self.dump(obj, io = nil, limit = nil)\n    string = generate(obj)\n\n    if io\n      io = io.to_io if io.responds_to? :to_io\n      io.write string\n\n      io\n    else\n      string\n    end\n  end\nend\n\nclass Object\n  def to_json\n    to_s.to_json\n  end\nend\n\n# BUG: Enumerable must come before Array, otherwise it overrides #to_json\n#      this is due to how modules are implemented.\nmodule Enumerable\n  def to_json\n    to_a.to_json\n  end\nend\n\nclass Array\n  def to_json\n    %x{\n      var result = [];\n\n      for (var i = 0, length = #{self}.length; i < length; i++) {\n        result.push(#{`self[i]`.to_json});\n      }\n\n      return '[' + result.join(',') + ']';\n    }\n  end\nend\n\nclass Boolean\n  def to_json\n    `(self == true) ? 'true' : 'false'`\n  end\nend\n\nclass Hash\n  def to_json\n    %x{\n      var result = [];\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        result.push(#{`key`.to_s.to_json} + ':' + #{`value`.to_json});\n      }\n\n      return '{' + result.join(',') + '}';\n    }\n  end\nend\n\nclass NilClass\n  def to_json\n    'null'\n  end\nend\n\nclass Numeric\n  def to_json\n    `self.toString()`\n  end\nend\n\nclass String\n  def to_json\n    `JSON.stringify(self)`\n  end\nend\n\nclass Time\n  def to_json\n    strftime('%FT%T%z').to_json\n  end\nend\n\nclass Date\n  def to_json\n    to_s.to_json\n  end\n\n  def as_json\n    to_s\n  end\nend\n"],"names":["<top (required)>","<module:JSON>","<class:JSONError>","StandardError","<class:ParserError>","JSONError","self","raise","JSON::ParserError","JSON","new","push","$writer","[]=","-","1","[]","create_id","Object","const_get","json_create","attr_accessor","create_id=","value","options","String","parse","generate","source","from_object","merge","parse!","load","js_object","$ret_or_1","Hash","Array","obj","to_json","dump","io","limit","string","responds_to?","to_io","write","<class:Object>","to_s","<module:Enumerable>","to_a","<class:Array>","<class:Boolean>","<class:Hash>","<class:NilClass>","<class:Numeric>","<class:String>","<class:Time>","strftime","<class:Date>","as_json"],"mappings":"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"}},{"offset":{"line":38210,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/http/response.rb"],"sourcesContent":["require 'json'\n\nmodule Browser; module HTTP\n\n# Represents an HTTP response.\nclass Response\n  include Native::Wrapper\n\n  Status = Struct.new(:code, :text)\n\n  # @!attribute [r] request\n  # @return [Request] the request to this response\n  attr_reader :request\n\n  # Create a response from a request.\n  #\n  # @param request [Request] the request\n  def initialize(request)\n    super(request.to_n)\n\n    @request = request\n  end\n\n  # @!attribute [r] headers\n  # @return [Headers] the response headers\n  def headers\n    @headers ||= Headers.parse(`#@native.getAllResponseHeaders()`)\n  end\n\n  # @!attribute [r] status\n  # @return [Status] the response status\n  def status\n    Status.new(`#@native.status || nil`, `#@native.statusText || nil`)\n  end\n\n  # Checks if the response was successful\n  def success?\n    if code = status.code\n      code >= 200 && code < 300 || code == 304\n    else\n      false\n    end\n  end\n\n  # Check if the response failed\n  def failure?\n    !success?\n  end\n\n  # @!attribute [r] url\n  # @return [String] the response URL (after redirects)\n  alias_native :url, :responseURL\n\n  # @!attribute [r] text\n  # @return [String] the response body as text\n  def text\n    %x{\n      var result = #@native.responseText;\n\n      if (!result) {\n        return nil;\n      }\n\n      return result;\n    }\n  end\n\n  # @!attribute [r] json\n  # @return [Hash, Array] the response body as JSON\n  def json\n    %x{\n      var result = #@native.responseText;\n\n      if (!result) {\n        return nil;\n      }\n\n      return #{JSON.parse(`result`)};\n    }\n  end\n\n  # @!attribute [r] xml\n  # @return [DOM::Document] the response body as DOM document\n  def xml\n    %x{\n      var result = #@native.responseXML;\n\n      if (!result) {\n        return nil;\n      }\n    }\n\n    DOM(`result`)\n  end\n\n  # @!attribute [r] binary\n  # @return [Binary] the response body as binary\n  def binary\n    return unless request.binary?\n\n    if Buffer.supported?\n      %x{\n        var result = #@native.response;\n\n        if (!result) {\n          return nil;\n        }\n      }\n\n      Binary.new(Buffer.new(`result`))\n    else\n      return unless text\n\n      Binary.new(text)\n    end\n  end\nend\n\nend; end\n"],"names":["<top (required)>","self","require","<module:Browser>","<module:HTTP>","<class:Response>","include","Native::Wrapper","Native","Struct","new","attr_reader","initialize","request","to_n","@request","headers","@headers","$ret_or_1","Headers","parse","@native","status","Status","success?","code","$ret_or_2",">=","200","<","300","==","304","failure?","!","alias_native","text","json","JSON","xml","DOM","binary","binary?","Buffer","supported?","Binary"],"mappings":"AAAAA,wDAAAA;EAAAA;;EAAAA;;EAAAC,IAAAC,SAAAA,CAAQF,MAARE;EAEAF,OAAAG;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAGhBA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QACEJ,IAAAK,SAAAA,CAAQC,IAAAC,YAAAD,YAARD;QAEA,kCAASG,YAAMC,KAAAA,CAAK,MAAX,EAAkB,MAAZA,CAAf;QAIAT,IAAAU,aAAAA,CAAY,SAAZA;;AAKAC,QAAAA,0BAAAA,sBAAeC,OAAfD;AAAAA,UAAAA;;UAAAA;;UACE,OAAAX,IAAA,EAAA,0DAAA,cAAA,EAAA,CAAMY,OAAOC,MAAAA,CAAAA,CAAb,CAAA,EAAA,IAAA;UAEAF,OAAAG,CAAAA,eAAWF,OAAXE;QAHFH,CAAAA,GAAAA;;AAQAI,QAAAA,uBAAAA,mBAAAA;AAAAA,UAAAA;;UACEA,OAAAC,CAAAA,eA1BJ,CAAA,QAAAC,CAAAA,YA0BID,YA1BJC,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CA0BiBC,aAAOC,OAAAA,CAASC,cAAOL,wBAAhBI,CA1BxB,CAAA,CA0BIH;QADFD,CAAAA,GAAAA;;AAMAM,QAAAA,sBAAAA,kBAAAA;AAAAA,UAAAA;;UACEA,OAAAC,YAAMb,KAAAA,CAAOW,cAAOC,cAApB,EAAuCD,cAAOC,kBAAxCZ;QADRY,CAAAA,GAAAA;;AAKAE,QAAAA,wBAAAA,kCAAAA;AAAAA,UAAAA;;UACE,IAAA,QAAGC,CAAAA,OAAOxB,IAAAqB,QAAAA,CAAAA,CAAMG,MAAAA,CAAAA,CAAbA,CAAH,CAAA;YACE,IAAA,QAAAP,CAAAA,YAAA,CAAA,QAAAQ,CAAAA,YAAKC,OAALF,IAAKE,EAAGC,GAAHD,CAALD,CAAA,CAAA,GAAA,CAAoBG,OAALJ,IAAKI,EAAEC,GAAFD,CAApB,IAAA,CAAA,SAAA,CAAA,CAAAX,CAAA,CAAA;cAAAM,OAAA;YAAA;cAA6BA,OAAAC,IAAKM,OAAAA,CAAGC,GAAHD;YAAlC;UADF;YAGEP,OAAA;UAHF;QADFA,CAAAA,GAAAA;;AASAS,QAAAA,wBAAAA,kCAAAA;AAAAA,UAAAA;;UACEA,OAAChC,IAAAuB,aAAAA,CAAAA,CAADU,MAAAA,CAAAA;QADFD,CAAAA,GAAAA;QAMAhC,IAAAkC,cAAAA,CAAa,KAAb,EAAmB,aAAnBA;;AAIAC,QAAAA,oBAAAA,gBAAAA;AAAAA,UAAAA;;;AAEFA,mBAAoBf,cAAOe;;AAE3BA;AACAA;AACAA;;AAEAA;AACAA;QATEA,CAAAA,GAAAA;;AAcAC,QAAAA,oBAAAA,gBAAAA;AAAAA,UAAAA;;;AAEFA,mBAAoBhB,cAAOgB;;AAE3BA;AACAA;AACAA;;AAEAA,aAAeC,UAAIlB,OAAAA,CAAQiB,MAARjB,CAAiBiB;AACpCA;QATEA,CAAAA,GAAAA;;AAcAE,QAAAA,mBAAAA,eAAAA;AAAAA,UAAAA;;;;AAEFA,mBAAoBlB,cAAOkB;;AAE3BA;AACAA;AACAA;AACAA;UAEIA,OAAAtC,IAAAuC,KAAAA,CAAKD,MAALC;QATFD,CAAAA,GAAAA;QAcAlC,OAAAoC,sBAAAA,kBAAAA;AAAAA,UAAAA;;;UACE,KAAA,QAAcxC,IAAAY,SAAAA,CAAAA,CAAO6B,YAAAA,CAAAA,CAArB,CAAA;YAAA,OAAA;UAAA;UAEA,IAAA,QAAGC,YAAMC,eAAAA,CAAAA,CAAT,CAAA;;;AAEJH,qBAAsBpB,cAAOoB;;AAE7BA;AACAA;AACAA;AACAA;YAEMA,OAAAI,YAAMnC,KAAAA,CAAKiC,YAAMjC,KAAAA,CAAM+B,MAAN/B,CAAXA;UATR;;YAWE,KAAA,QAAcT,IAAAmC,MAAAA,CAAAA,CAAd,CAAA;cAAA,OAAA;YAAA;YAEAK,OAAAI,YAAMnC,KAAAA,CAAKT,IAAAmC,MAAAA,CAAAA,CAAL1B;UAbR;QAHF+B,CAAAA,GAAAA;MA5FFpC,GAAAA,WAAAA,EAAAA,IAAAA;IAHgBD,GAAAA,WAAAA;EAAhBD,GAAAA,WAAAA;AAFAH;"}},{"offset":{"line":38350,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/http.rb"],"sourcesContent":["require 'browser/http/binary'\nrequire 'browser/http/headers'\nrequire 'browser/http/request'\nrequire 'browser/http/response'\n\nmodule Browser\n\nmodule HTTP\n  # Check if HTTP requests are supported.\n  def self.supported?\n    Browser.supports?('XHR') || Browser.supports?('ActiveXObject')\n  end\n\n  # Send an asynchronous request.\n  #\n  # @param method [Symbol] the HTTP method to use\n  # @param url [String] the URL to request\n  # @param data [String, Hash] the data to send\n  #\n  # @yieldparam request [Request] the request to configure\n  #\n  # @return [Promise] a promise that will be resolved with the response\n  def self.send(method, url, data = nil, &block)\n    Promise.new.tap {|promise|\n      Request.new(&block).tap {|req|\n        req.on :success do |res|\n          promise.resolve(res)\n        end\n\n        req.on :failure do |res|\n          promise.reject(res)\n        end\n      }.open(method, url).send(data)\n    }\n  end\n\n  # Send an asynchronous GET request.\n  #\n  # @param url [String] the URL to request\n  #\n  # @yieldparam request [Request] the request to configure\n  #\n  # @return [Promise] a promise that will be resolved with the response\n  def self.get(url, &block)\n    send(:get, url, &block)\n  end\n\n  # Send an asynchronous HEAD request.\n  #\n  # @param url [String] the URL to request\n  #\n  # @yieldparam request [Request] the request to configure\n  #\n  # @return [Promise] a promise that will be resolved with the response\n  def self.head(url, &block)\n    send(:head, url, &block)\n  end\n\n  # Send an asynchrnous POST request.\n  #\n  # @param url [String] the URL to request\n  # @param data [String, Hash] the data to send\n  #\n  # @yieldparam request [Request] the request to configure\n  #\n  # @return [Promise] a promise that will be resolved with the response\n  def self.post(url, data = nil, &block)\n    send(:post, url, data, &block)\n  end\n\n  # Send an asynchronous PUT request.\n  #\n  # @param url [String] the URL to request\n  # @param data [String, Hash] the data to send\n  #\n  # @yieldparam request [Request] the request to configure\n  #\n  # @return [Promise] a promise that will be resolved with the response\n  def self.put(url, data = nil, &block)\n    send(:put, url, data, &block)\n  end\n\n  # Send an asynchronous DELETE request.\n  #\n  # @param url [String] the URL to request\n  # @param data [String, Hash] the data to send\n  #\n  # @yieldparam request [Request] the request to configure\n  #\n  # @return [Promise] a promise that will be resolved with the response\n  def self.delete(url, data = nil, &block)\n    send(:delete, url, data, &block)\n  end\n\n  # Send a synchronous request.\n  #\n  # @param method [Symbol] the HTTP method to use\n  # @param url [String] the URL to request\n  # @param data [String, Hash] the data to send\n  #\n  # @yieldparam request [Request] the request to configure\n  #\n  # @return [Response] the response\n  def self.send!(method, url, data = nil, &block)\n    Request.new(&block).open(method, url, false).send(data)\n  end\n\n  # Send a synchronous GET request.\n  #\n  # @param url [String] the URL to request\n  #\n  # @yieldparam request [Request] the request to configure\n  #\n  # @return [Response] the response\n  def self.get!(url, &block)\n    send!(:get, url, &block)\n  end\n\n  # Send a synchronous HEAD request.\n  #\n  # @param url [String] the URL to request\n  #\n  # @yieldparam request [Request] the request to configure\n  #\n  # @return [Response] the response\n  def self.head!(url, &block)\n    send!(:head, url, &block)\n  end\n\n  # Send a synchronous POST request.\n  #\n  # @param url [String] the URL to request\n  # @param data [String, Hash] the data to send\n  #\n  # @yieldparam request [Request] the request to configure\n  #\n  # @return [Response] the response\n  def self.post!(url, data = nil, &block)\n    send!(:post, url, data, &block)\n  end\n\n  # Send a synchronous PUT request.\n  #\n  # @param url [String] the URL to request\n  # @param data [String, Hash] the data to send\n  #\n  # @yieldparam request [Request] the request to configure\n  #\n  # @return [Response] the response\n  def self.put!(url, data = nil, &block)\n    send!(:put, url, data, &block)\n  end\n\n  # Send a synchronous DELETE request.\n  #\n  # @param url [String] the URL to request\n  # @param data [String, Hash] the data to send\n  #\n  # @yieldparam request [Request] the request to configure\n  #\n  # @return [Response] the response\n  def self.delete!(url, data = nil, &block)\n    send!(:delete, url, data, &block)\n  end\nend\n\nend\n"],"names":["<top (required)>","self","require","<module:Browser>","<module:HTTP>","supported?","$ret_or_1","Browser","supports?","send","method","url","data","tap","Promise","new","block in send","promise","block (2 levels) in send","Request","block","to_proc","req","on","block (3 levels) in send","res","block (4 levels) in send","resolve","reject","open","get","head","post","put","delete","send!","get!","head!","post!","put!","delete!"],"mappings":"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"}},{"offset":{"line":38512,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/delay.rb"],"sourcesContent":["module Browser\n\n# Allows you to delay the call to a function which gets called after the\n# given time.\n#\n# @see https://developer.mozilla.org/en-US/docs/Web/API/Window.setTimeout\nclass Delay\n  # @!attribute [r] after\n  # @return [Float] the seconds after which the block is called\n  attr_reader :after\n\n  # Create and start a timeout.\n  #\n  # @param window [Window] the window to start the timeout on\n  # @param time [Float] seconds after which the block is called\n  def initialize(window, time, &block)\n    @window = Native.convert(window)\n    @after  = time\n    @block  = block\n  end\n\n  # Abort the timeout.\n  def abort\n    `#@window.clearTimeout(#@id)`\n  end\n\n  # Start the delay.\n  def start\n    @id = `#@window.setTimeout(#{@block.to_n}, #@after * 1000)`\n  end\nend\n\nclass Window\n  # Execute a block after the given seconds.\n  #\n  # @param time [Float] the seconds after it gets called\n  #\n  # @return [Delay] the object representing the timeout\n  def after(time, &block)\n    Delay.new(@native, time, &block).tap(&:start)\n  end\n\n  # Execute a block after the given seconds, you have to call [#start] on it\n  # yourself.\n  #\n  # @param time [Float] the seconds after it gets called\n  #\n  # @return [Delay] the object representing the timeout\n  def after!(time, &block)\n    Delay.new(@native, time, &block)\n  end\n\n  # Returns a promise that will resolve after the given seconds.\n  #\n  # @param time [Float] the seconds after it gets called\n  #\n  # @return [Promise] the promise that will resolve after timeout happens\n  def resolve_after(time)\n    promise = Promise.new\n    Delay.new(@native, time) { promise.resolve }.start\n    promise\n  end\nend\n\nend\n\nmodule Kernel\n  # (see Browser::Window#after)\n  def after(time, &block)\n    $window.after(time, &block)\n  end\n\n  # (see Browser::Window#after!)\n  def after!(time, &block)\n    $window.after!(time, &block)\n  end\n\n  # (see Browser::Window#resolve_after)\n  def resolve_after(time)\n    $window.resolve_after(time)\n  end\nend\n\nclass Proc\n  # (see Browser::Window#after)\n  def after(time)\n    $window.after(time, &self)\n  end\n\n  # (see Browser::Window#after!)\n  def after!(time)\n    $window.after!(time, &self)\n  end\nend\n"],"names":["<top (required)>","<module:Browser>","<class:Delay>","self","attr_reader","initialize","window","time","@window","Native","convert","@after","@block","block","abort","@id","start","to_n","<class:Window>","after","tap","new","Delay","@native","to_proc","after!","resolve_after","promise","Promise","block in resolve_after","block (2 levels) in resolve_after","resolve","<module:Kernel>","$window","<class:Proc>"],"mappings":"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"}},{"offset":{"line":38642,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/interval.rb"],"sourcesContent":["module Browser\n\n# Allows you to create an interval that executes the function every given\n# seconds.\n#\n# @see https://developer.mozilla.org/en-US/docs/Web/API/Window.setInterval\nclass Interval\n  # @!attribute [r] every\n  # @return [Float] the seconds every which the block is called\n  attr_reader :every\n\n  # Create and start an interval.\n  #\n  # @param window [Window] the window to start the interval on\n  # @param time [Float] seconds every which to call the block\n  def initialize(window, time, &block)\n    @window = Native.convert(window)\n    @every  = time\n    @block  = block\n\n    @aborted = false\n  end\n\n  # Check if the interval has been stopped.\n  def stopped?\n    @id.nil?\n  end\n\n  # Check if the interval has been aborted.\n  def aborted?\n    @aborted\n  end\n\n  # Abort the interval, it won't be possible to start it again.\n  def abort\n    `#@window.clearInterval(#@id)`\n\n    @aborted = true\n    @id      = nil\n  end\n\n  # Stop the interval, it will be possible to start it again.\n  def stop\n    return if stopped?\n\n    `#@window.clearInterval(#@id)`\n\n    @stopped = true\n    @id      = nil\n  end\n\n  # Start the interval if it has been stopped.\n  def start\n    raise \"the interval has been aborted\" if aborted?\n    return unless stopped?\n\n    @id = `#@window.setInterval(#@block, #@every * 1000)`\n  end\n\n  # Call the [Interval] block.\n  def call\n    @block.call\n  end\nend\n\nclass Window\n  # Execute the block every given seconds.\n  #\n  # @param time [Float] the seconds between every call\n  #\n  # @return [Interval] the object representing the interval\n  def every(time, &block)\n    Interval.new(@native, time, &block).tap(&:start)\n  end\n\n  # Execute the block every given seconds, you have to call [#start] on it\n  # yourself.\n  #\n  # @param time [Float] the seconds between every call\n  #\n  # @return [Interval] the object representing the interval\n  def every!(time, &block)\n    Interval.new(@native, time, &block)\n  end\nend\n\nend\n\nmodule Kernel\n  # (see Browser::Window#every)\n  def every(time, &block)\n    $window.every(time, &block)\n  end\n\n  # (see Browser::Window#every!)\n  def every!(time, &block)\n    $window.every!(time, &block)\n  end\nend\n\nclass Proc\n  # (see Browser::Window#every)\n  def every(time)\n    $window.every(time, &self)\n  end\n\n  # (see Browser::Window#every!)\n  def every!(time)\n    $window.every!(time, &self)\n  end\nend\n"],"names":["<top (required)>","<module:Browser>","<class:Interval>","self","attr_reader","initialize","window","time","@window","Native","convert","@every","@block","block","@aborted","stopped?","@id","nil?","aborted?","abort","stop","@stopped","start","raise","call","<class:Window>","every","tap","new","Interval","@native","to_proc","every!","<module:Kernel>","$window","<class:Proc>"],"mappings":"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"}},{"offset":{"line":38797,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/immediate.rb"],"sourcesContent":["module Browser\n\n# Class to easily create and dispatch an immediate call.\n#\n# Immediate calls are deferred function calls that happen as soon as they can\n# be scheduled.\n#\n# Compatibility\n# -------------\n# The compatibility layer will try various implementations in the following\n# order.\n#\n# + [setImmediate](https://developer.mozilla.org/en-US/docs/Web/API/Window.setImmediate)\n# + [postMessage](https://developer.mozilla.org/en-US/docs/Web/API/Window.postMessage)\n# + [readystatechange](https://developer.mozilla.org/en-US/docs/Web/Reference/Events/readystatechange)\n# + [setTimeout](https://developer.mozilla.org/en/docs/Web/API/window.setTimeout)\n#\n# The order has been chosen from best to worst for both performance and\n# preemptiveness.\nclass Immediate\n  # Create an immediate for the given function which will be called with the\n  # arguments and block.\n  #\n  # @param func [Proc] the function to call\n  # @param args [Array] the arguments to call it with\n  def initialize(func, args, &block)\n    @aborted   = false\n    @function  = func\n    @arguments = args\n    @block     = block\n  end\n\n  # @!method dispatch\n  #   Dispatch the immediate.\n\n  # @!method prevent\n  #   Prevent the immediate from being called once scheduled.\n  if Browser.supports? 'Immediate'\n    def dispatch\n      @id = `window.setImmediate(function() {\n        #{@function.call(*@arguments, &@block)};\n      })`\n    end\n\n    def prevent\n      `window.clearImmediate(#@id)`\n    end\n  elsif Browser.supports? 'Immediate (Internet Explorer)'\n    def dispatch\n      @id = `window.msSetImmediate(function() {\n        #{@function.call(*@arguments, &@block)};\n      })`\n    end\n\n    def prevent\n      `window.msClearImmediate(#@id)`\n    end\n  elsif Browser.supports? 'Window.send (Asynchronous)'\n    # @private\n    @@tasks  = {}\n\n    # @private\n    @@prefix = \"opal.browser.immediate.#{rand(1_000_000)}.\"\n\n    $window.on :message do |e|\n      if String === e.data && e.data.start_with?(@@prefix)\n        if task = @@tasks.delete(e.data[@@prefix.length .. -1])\n          task[0].call(*task[1], &task[2])\n        end\n      end\n    end\n\n    def dispatch\n      @id          = rand(1_000_000).to_s\n      @@tasks[@id] = [@function, @arguments, @block]\n\n      $window.send \"#{@@prefix}#{@id}\"\n    end\n\n    def prevent\n      @@tasks.delete(@id)\n    end\n  elsif Browser.supports? 'Event.readystatechange'\n    def dispatch\n      %x{\n        var script = document.createElement(\"script\");\n\n        script.onreadystatechange = function() {\n          if (!#{aborted?}) {\n            #{@function.call(*@arguments, &@block)};\n          }\n\n          script.onreadystatechange = null;\n          script.parentNode.removeChild(script);\n        };\n\n        document.documentElement.appendChild(script);\n      }\n    end\n\n    def prevent; end\n  else\n    def dispatch\n      @id = `window.setTimeout(function() {\n        #{@function.call(*@arguments, &@block)};\n      }, 0)`\n    end\n\n    def prevent\n      `window.clearTimeout(#@id)`\n    end\n  end\n\n  # Abort the immediate.\n  def abort\n    return if aborted?\n\n    @aborted = true\n    prevent\n\n    self\n  end\n\n  # Check if the immediate has been aborted.\n  def aborted?\n    @aborted\n  end\nend\n\nend\n\nmodule Kernel\n  # (see Immediate.new)\n  def defer(*args, &block)\n    Browser::Immediate.new(block, args).tap(&:dispatch)\n  end\nend\n\nclass Proc\n  # (see Immediate.new)\n  def defer(*args, &block)\n    Browser::Immediate.new(self, args, &block).tap(&:dispatch)\n  end\nend\n\nclass Promise\n  # Create a promise which will be resolved with the result of the immediate.\n  #\n  # @param args [Array] the arguments the block will be called with\n  def self.defer(*args, &block)\n    new.tap {|promise|\n      proc {\n        begin\n          promise.resolve(block.call(*args))\n        rescue Exception => e\n          promise.reject(e)\n        end\n      }.defer\n    }\n  end\nend\n"],"names":["<top (required)>","<module:Browser>","<class:Immediate>","initialize","func","args","@aborted","@function","@arguments","@block","block","Browser","supports?","dispatch","@id","call","to_proc","prevent","@@tasks","@@prefix","self","rand","1000000","on","$window","block in <class:Immediate>","e","block (2 levels) in <class:Immediate>","String","data","start_with?","task","delete","[]","length","-1","0","1","2","to_s","$writer","[]=","-","send","aborted?","abort","<module:Kernel>","defer","tap","Browser::Immediate","new","<class:Proc>","<class:Promise>","block in defer","promise","block (2 levels) in defer","proc","block (3 levels) in defer","resolve","Exception","reject"],"mappings":"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"}},{"offset":{"line":39029,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/storage.rb"],"sourcesContent":["require 'json'\nrequire 'stringio'\n\nmodule Browser\n\n# A {Storage} allows you to store data across page loads and browser\n# restarts.\n#\n# Compatibility\n# -------------\n# The compatibility layer will try various implementations in the following\n# order.\n#\n# + [window.localStorage](https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Storage#localStorage)\n# + [window.globalStorage](https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Storage#globalStorage)\n# + [document.body.addBehavior](http://msdn.microsoft.com/en-us/library/ms531424(VS.85).aspx)\n# + [document.cookie](https://developer.mozilla.org/en-US/docs/Web/API/document.cookie)\n#\n# @see https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Storage\n# @todo remove method_defined? checks when require order is fixed\nclass Storage\n  def self.json_create(data)\n    data.delete(JSON.create_id)\n\n    Hash[data.map {|key, value|\n      [JSON.parse(key), value]\n    }]\n  end\n\n  # @!attribute [r] name\n  # @return [String] the name of the storage\n  attr_reader :name\n\n  # Create a new storage on the given window with the given name.\n  #\n  # @param window [native] the window to save the storage to\n  # @param name [String] the name to use to discern different storages\n  def initialize(window, name)\n    super()\n\n    @window = window\n    @name   = name\n    @data   = {}\n\n    autosave!\n    reload\n  end\n\n  # Check if autosaving is enabled.\n  #\n  # When autosaving is enabled the {Storage} is saved every time a change is\n  # made, otherwise you'll have to save it manually yourself.\n  def autosave?\n    @autosave\n  end\n\n  # Enable autosaving.\n  def autosave!\n    @autosave = true\n  end\n\n  # Disable autosaving.\n  def no_autosave!\n    @autosave = false\n  end\n\n  include Enumerable\n\n  # Iterate over the (key, value) pairs in the storage.\n  #\n  # @yield [key, value]\n  def each(&block)\n    return enum_for :each unless block\n\n    @data.each(&block)\n\n    self\n  end\n\n  def method_missing(*args, &block)\n    @data.__send__(*args, &block)\n  end\n\n  # Set a value in the storage.\n  def []=(key, value)\n    @data[key] = value\n\n    save if autosave?\n  end\n\n  # Delete a value from the storage.\n  def delete(key)\n    @data.delete(key).tap {\n      save if autosave?\n    }\n  end\n\n  # Clear the storage.\n  def clear\n    @data.clear.tap {\n      save if autosave?\n    }\n  end\n\n  # Replace the current storage with the given one.\n  #\n  # @param new [Hash, String] if new is a {String} it will be parsed as JSON\n  def replace(new)\n    if String === new\n      @data.replace(JSON.parse(new))\n    else\n      @data.replace(new)\n    end\n  end\n\n  # Call the block between a [#reload] and [#save].\n  def commit(&block)\n    autosave  = @autosave\n    @autosave = false\n    result    = nil\n\n    reload\n\n    begin\n      result = block.call\n      save\n    rescue\n      reload\n      raise\n    ensure\n      @autosave = autosave\n    end\n\n    result\n  end\n\n  def to_h\n    @data\n  end\n\n  # @!method reload\n  #   Load the storage.\n\n  # @!method save\n  #   Persist the current state to the storage.\n\n  if Browser.supports? 'Storage.local'\n    def reload\n      replace `#@window.localStorage[#@name] || '{}'`\n    end\n\n    def save\n      `#@window.localStorage[#@name] = #{JSON.dump(self)}`\n    end\n  elsif Browser.supports? 'Storage.global'\n    def reload\n      replace `#@window.globalStorage[#@window.location.hostname][#@name] || '{}'`\n    end\n\n    def save\n      `#@window.globalStorage[#@window.location.hostname][#@name] = #{JSON.dump(self)}`\n    end\n  elsif Browser.supports? 'Element.addBehavior'\n    def reload\n      %x{\n        #@element = #@window.document.createElement('link');\n        #@element.addBehavior('#default#userData');\n\n        #@window.document.getElementsByTagName('head')[0].appendChild(#@element);\n\n        #@element.load(#@name);\n      }\n\n      replace `#@element.getAttribute(#@name) || '{}'`\n    end\n\n    def save\n      %x{\n        #@element.setAttribute(#@name, #{JSON.dump(self)});\n        #@element.save(#@name);\n      }\n    end\n  else\n    def reload\n      $document.cookies.options expires: 60 * 60 * 24 * 365\n\n      replace $document.cookies[@name]\n    end\n\n    def save\n      $document.cookies[@name] = JSON.dump(self)\n    end\n  end\n\n  # Convert the storage to JSON.\n  #\n  # @return [String] the JSON representation\n  def to_json\n    io = StringIO.new << \"{\"\n\n    io << JSON.create_id.to_json << \":\" << self.class.name.to_json << \",\"\n\n    @data.each {|key, value|\n      io << key.to_json.to_s << \":\" << value.to_json << \",\"\n    }\n\n    io.seek(-1, IO::SEEK_CUR)\n    io << \"}\"\n\n    io.string\n  end\nend\n\n# A {SessionStorage} allows you to store data across page reloads, as long as the session\n# is active.\n#\n# @see https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Storage#sessionStorage\nclass SessionStorage < Storage\n  def self.supported?\n    Browser.supports? 'Storage.session'\n  end\n\n  def reload\n    replace `#@window.sessionStorage[#@name] || '{}'`\n  end\n\n  def save\n    `#@window.sessionStorage[#@name] = #{JSON.dump(self)}`\n  end\nend\n\nclass Window\n  # Get a storage with the given name.\n  #\n  # @param name [Symbol] the name of the storage\n  #\n  # @return [Storage]\n  def storage(name = :default)\n    Storage.new(to_n, name)\n  end\n\n  # Get a session storage with the given name.\n  #\n  # @param name [Symbol] the name of the storage\n  #\n  # @return [SessionStorage]\n  def session_storage(name = :default)\n    SessionStorage.new(to_n, name)\n  end\nend\n\nend\n"],"names":["<top (required)>","self","require","<module:Browser>","<class:Storage>","json_create","data","delete","JSON","create_id","Hash","[]","map","block in json_create","key","value","block (2 levels) in json_create","parse","attr_reader","initialize","window","name","@window","@name","@data","autosave!","reload","autosave?","@autosave","no_autosave!","include","Enumerable","each","block","enum_for","to_proc","method_missing","__send__","args","[]=","$writer","-","1","save","tap","block in delete","block (2 levels) in delete","clear","block in clear","block (2 levels) in clear","replace","new$","String","commit","autosave","result","call","StandardError","raise","to_h","Browser","supports?","dump","@element","$document","cookies","options","*","60","24","365","to_json","io","StringIO","new","<<","class","block in to_json","block (2 levels) in to_json","to_s","seek","-1","IO::SEEK_CUR","IO","string","<class:SessionStorage>","supported?","Storage","<class:Window>","storage","to_n","session_storage","SessionStorage"],"mappings":"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"}},{"offset":{"line":39350,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/blob.rb"],"sourcesContent":["module Browser\n\nclass Blob\n  include NativeCachedWrapper\n\n  # Create a new blob from anything that Blob API supports\n  def self.create(from, options={})\n    new(`new Blob(#{Native.convert(from)}, #{options.to_n})`)\n  end\n\n  # @!attribute [r] size\n  # @return [Integer] blob size in bytes\n  def size\n    `#@native.size`\n  end\n\n  # @!attribute [r] type\n  # @return [String] blob mime type\n  def type\n    `#@native.type`\n  end\n\n  # Convert a blob to a UTF-8 encoded string.\n  #\n  # If block is given it will be called with a parameter once we receive\n  # the text. Otherwise return a {Promise} which will resolve once we\n  # receive it.\n  def text(&block)\n    promise = nil\n    unless block_given?\n      promise = Promise.new\n      block = proc { |i| promise.resolve(i) }\n    end\n    `#@native.text().then(#{block.to_n})`\n    promise\n  end\n\n  # {Buffer} view into the blob\n  #\n  # If block is given it will be called with a parameter once we receive\n  # the buffer. Otherwise return a {Promise} which will resolve once we\n  # receive it.\n  def buffer\n    promise = nil\n    unless block_given?\n      promise = Promise.new\n      block = proc { |i| promise.resolve(i) }\n    end\n    resblock = proc { |i| block.call(Buffer.new(i)) }\n    `#@native.arrayBuffer().then(#{resblock.to_n})`\n    promise\n  end\n\n  # Create a new blob by slicing this blob\n  def slice(start, finish=nil)\n    Blob.new(`#@native.slice(#{start}, #{finish})`)\n  end\n\n  # Convert a blob to an URL that can be used to reference this blob in DOM\n  # eg. display some multimedia\n  def to_url(window=$window)\n    `#{window.to_n}.URL.createObjectURL(#@native)`\n  end\n\n  # Rename a blob and return a {File} with a new name.\n  #\n  # @return [File] a renamed blob\n  def rename(new_filename)\n    File.create([self], new_filename, type: type, \n                                      lastModified: respond_to?(:last_modified) ? \n                                                      last_modified : Time.now)\n  end\nend\n\nclass File < Blob\n  # Create a new file from anything that File API supports\n  def self.create(from, name, options={})\n    new(`new File(#{Native.convert(from)}, #{name}, #{options.to_n})`)\n  end\n\n  # @!attribute [r] last_modified\n  # @return [Time] last modified date of this file\n  def last_modified\n    Time.at(`#@native.lastModified`/1000.0)\n  end\n\n  # @!attribute [r] name\n  # @return [String] filename \n  def name\n    `#@native.name`\n  end\nend\n\nend\n"],"names":["<top (required)>","<module:Browser>","<class:Blob>","self","include","NativeCachedWrapper","create","from","options","new","Native","convert","to_n","size","@native","type","text","promise","block_given?","Promise","block","proc","block in text","i","block (2 levels) in text","resolve","buffer","block in buffer","block (2 levels) in buffer","resblock","call","Buffer","slice","start","finish","Blob","to_url","window","$window","rename","new_filename","File","respond_to?","last_modified","Time","now","<class:File>","name","at","/"],"mappings":"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"}},{"offset":{"line":39487,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/socket.rb"],"sourcesContent":["module Browser\n\n# A {Socket} allows the browser and a server to have a bidirectional data\n# connection.\n#\n# @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket\nclass Socket < IO\n  def self.supported?\n    Browser.supports? :WebSocket\n  end\n\n  include Native::Wrapper\n  include IO::Writable if defined? IO::Writable\n  include Event::Target\n\n  target {|value|\n    Socket.new(value) if Native.is_a?(value, `window.WebSocket`)\n  }\n\n  # Create a connection to the given URL, optionally using the given protocol.\n  #\n  # @param url [String] the URL to connect to\n  # @param protocol [String] the protocol to use\n  #\n  # @yield if the block has no parameters it's `instance_exec`d, otherwise it's\n  #        called with `self`\n  def initialize(url, protocol = nil, &block)\n    if native?(url)\n      super(url)\n    elsif protocol\n      super(`new window.WebSocket(#{url.to_s}, #{protocol.to_n})`)\n    else\n      super(`new window.WebSocket(#{url.to_s})`)\n    end\n\n    if block.arity == 0\n      instance_exec(&block)\n    else\n      block.call(self)\n    end if block\n  end\n\n  # @!attribute [r] protocol\n  # @return [String] the protocol of the socket\n  alias_native :protocol\n\n  # @!attribute [r] url\n  # @return [String] the URL the socket is connected to\n  alias_native :url\n\n  # @!attribute [r] buffered\n  # @return [Integer] the amount of buffered data.\n  alias_native :buffered, :bufferedAmount\n\n  # @!attribute [r] type\n  # @return [:blob, :buffer, :string] the type of the socket\n  def type\n    %x{\n      switch (#@native.binaryType) {\n        case \"blob\":\n          return \"blob\";\n\n        case \"arraybuffer\":\n          return \"buffer\";\n\n        default:\n          return \"string\";\n      }\n    }\n  end\n\n  # @!attribute [r] state\n  # @return [:connecting, :open, :closing, :closed] the state of the socket\n  def state\n    %x{\n      switch (#@native.readyState) {\n        case window.WebSocket.CONNECTING:\n          return \"connecting\";\n\n        case window.WebSocket.OPEN:\n          return \"open\";\n\n        case window.WebSocket.CLOSING:\n          return \"closing\";\n\n        case window.WebSocket.CLOSED:\n          return \"closed\";\n      }\n    }\n  end\n\n  # @!attribute [r] extensions\n  # @return [Array<String>] the extensions used by the socket\n  def extensions\n    `#@native.extensions`.split(/\\s*,\\s*/)\n  end\n\n  # Check if the socket is alive.\n  def alive?\n    state == :open\n  end\n\n  # Send data to the socket.\n  #\n  # @param data [#to_n] the data to send\n  def write(data)\n    `#@native.send(#{data.to_n})`\n  end\n\n  alias << write\n\n  alias send write\n\n  # Close the socket.\n  #\n  # @param code [Integer, nil] the error code\n  # @param reason [String, nil] the reason for closing\n  def close(code = nil, reason = nil)\n    `#@native.close(#{code.to_n}, #{reason.to_n})`\n  end\nend\n\nend\n"],"names":["<top (required)>","<module:Browser>","<class:Socket>","supported?","self","Browser","supports?","include","Native::Wrapper","Native","IO::Writable","IO","Event::Target","Event","target","block in <class:Socket>","value","is_a?","block (2 levels) in <class:Socket>","Socket","new","initialize","url","protocol","native?","to_s","to_n","block","arity","0","instance_exec","to_proc","call","alias_native","type","@native","state","extensions","split","alive?","==","write","data","close","code","reason"],"mappings":"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"}},{"offset":{"line":39621,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/location.rb"],"sourcesContent":["module Browser\n\n# Allows manipulation of a location, usually from {Window} and {DOM::Document}.\n#\n# @see https://developer.mozilla.org/en-US/docs/Web/API/Location\nclass Location\n  include Browser::NativeCachedWrapper\n\n  # Change the location.\n  #\n  # @param url [String, #to_s] the URL to go to\n  def assign(url)\n    `#@native.assign(#{url.to_s})`\n  end\n\n  # Replace the current URL.\n  #\n  # @param url [String, #to_s] the URL to go to\n  def replace(url)\n    `#@native.replace(#{url.to_s})`\n  end\n\n  # Reload the page.\n  #\n  # @param force [Boolean] whether to force the reload\n  def reload(force = false)\n    `#@native.reload(force)`\n  end\n\n  # Convert the location to a string.\n  def to_s\n    `#@native.toString()`\n  end\n\n  # @!attribute fragment\n  # @return [String] the hash fragment of the location URI\n  alias_native :fragment, :hash\n  alias_native :fragment=, :hash=\n\n  # @!attribute host\n  # @return [String] the host part of the location URI\n  alias_native :host\n  alias_native :host=\n\n  # @!attribute uri\n  # @return [String] the whole location URI\n  alias_native :uri, :href\n  alias_native :uri=, :href=\n\n  # @!attribute path\n  # @return [String] the path part of the location URI\n  alias_native :path, :pathname\n  alias_native :path=, :pathname=\n\n  # @!attribute port\n  # @return [Integer] the port part of the location URI\n  alias_native :port\n  alias_native :port=\n\n  # @!attribute scheme\n  # @return [String] the scheme part of the location URI\n  alias_native :scheme, :protocol\n  alias_native :scheme=, :protocol=\n\n  # @!attribute query\n  # @return [String] the query part of the location URI\n  alias_native :query, :search\n  alias_native :query=, :search=\n\n  # Returns the full path of the location URI, including\n  # the query string and fragment, eg. /site?a=b#c\n  def full_path\n    path + query + fragment\n  end\nend\n\nclass Window\n  # @!attribute [r] location\n  # @return [Location] the location for the window\n  def location\n    Location.new(`#@native.location`) if `#@native.location`\n  end\nend\n\nclass DOM::Document < DOM::Element\n  # @!attribute [r] location\n  # @return [Location] the location for the document\n  def location\n    Location.new(`#@native.location`) if `#@native.location`\n  end\nend\n\nend\n"],"names":["<top (required)>","<module:Browser>","<class:Location>","self","include","Browser::NativeCachedWrapper","Browser","assign","url","@native","to_s","replace","reload","force","alias_native","full_path","+","path","query","fragment","<class:Window>","location","Location","new","<class:DOM::Document>","DOM","DOM::Element"],"mappings":"AAAAA,mDAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;;IAKAC;IAAAA;;MAAAA;;AAAAA;;MACEC,IAAAC,SAAAA,CAAQC,IAAAC,aAAAD,wBAARD;;AAKAG,MAAAA,sBAAAA,kBAAWC,GAAXD;AAAAA,QAAAA;;QACEA,OAAEE,cAAOF,QAAUC,GAAGE,MAAAA,CAAAA,CAAMH;MAD9BA,CAAAA,GAAAA;;AAOAI,MAAAA,uBAAAA,mBAAYH,GAAZG;AAAAA,QAAAA;;QACEA,OAAEF,cAAOE,SAAWH,GAAGE,MAAAA,CAAAA,CAAMC;MAD/BA,CAAAA,GAAAA;;AAOAC,MAAAA,sBAAAA,kBAAWC,KAAXD;AAAAA,QAAAA;;;;QAAW,2BAAQ,KAAR;QACTA,OAAEH,cAAOG;MADXA,CAAAA,IAAAA;;AAKAF,MAAAA,oBAAAA,gBAAAA;AAAAA,QAAAA;;QACEA,OAAED,cAAOC;MADXA,CAAAA,GAAAA;MAMAP,IAAAW,cAAAA,CAAa,UAAb,EAAwB,MAAxBA;MACAX,IAAAW,cAAAA,CAAa,WAAb,EAAyB,OAAzBA;MAIAX,IAAAW,cAAAA,CAAa,MAAbA;MACAX,IAAAW,cAAAA,CAAa,OAAbA;MAIAX,IAAAW,cAAAA,CAAa,KAAb,EAAmB,MAAnBA;MACAX,IAAAW,cAAAA,CAAa,MAAb,EAAoB,OAApBA;MAIAX,IAAAW,cAAAA,CAAa,MAAb,EAAoB,UAApBA;MACAX,IAAAW,cAAAA,CAAa,OAAb,EAAqB,WAArBA;MAIAX,IAAAW,cAAAA,CAAa,MAAbA;MACAX,IAAAW,cAAAA,CAAa,OAAbA;MAIAX,IAAAW,cAAAA,CAAa,QAAb,EAAsB,UAAtBA;MACAX,IAAAW,cAAAA,CAAa,SAAb,EAAuB,WAAvBA;MAIAX,IAAAW,cAAAA,CAAa,OAAb,EAAqB,QAArBA;MACAX,IAAAW,cAAAA,CAAa,QAAb,EAAsB,SAAtBA;MAIAZ,OAAAa,yBAAAA,qBAAAA;AAAAA,QAAAA;;QACEA,OAAaC,SAARA,SAALb,IAAAc,MAAAA,CAAAA,CAAKD,EAAEb,IAAAe,OAAAA,CAAAA,CAAFF,CAAQA,EAAEb,IAAAgB,UAAAA,CAAAA,CAAFH;MADfD,CAAAA,GAAAA;IAlEFb,GAAAA,WAAAA,EAAAA,IAAAA;IAuEAkB;IAAAA;;MAAAA;;AAAAA;MAGEA,OAAAC,wBAAAA,oBAAAA;AAAAA,QAAAA;;QACE,IAAA,QAAuCZ,cAAOY,SAA9C,CAAA;UAAAA,OAAAC,cAAQC,KAAAA,CAAOd,cAAOY,SAAdE;QAAR;UAhFJF,OAAA;QAgFI;MADFA,CAAAA,GAAAA;IAHFD,GAAAA,WAAAA,EAAAA,IAAAA;IAQAnB,OAAAuB;IAAAA;;MAAAA;;AAAAA;MAGEA,OAAAH,wBAAAA,oBAAAA;AAAAA,QAAAA;;QACE,IAAA,QAAuCZ,cAAOY,SAA9C,CAAA;UAAAA,OAAAC,cAAQC,KAAAA,CAAOd,cAAOY,SAAdE;QAAR;UAxFJF,OAAA;QAwFI;MADFA,CAAAA,GAAAA;IAHFG,GAAMC,SAAND,EAAsBE,IAAAD,SAAAC,YAAtBF;EApFAvB,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":39721,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/history.rb"],"sourcesContent":["require 'browser/location'\n\nmodule Browser\n\n# {History} allows manipulation of the session history.\n#\n# @see https://developer.mozilla.org/en-US/docs/Web/API/History\nclass History\n  # Check if HTML5 history is supported.\n  def self.supported?\n    Browser.supports? 'History'\n  end\n\n  include Browser::NativeCachedWrapper\n\n  # @!attribute [r] length\n  # @return [Integer] how many items are in the history\n  alias_native :length\n\n  # Go back in the history.\n  #\n  # @param number [Integer] how many items to go back\n  def back(number = 1)\n    `#@native.go(-number)`\n  end\n\n  # Go forward in the history.\n  #\n  # @param number [Integer] how many items to go forward\n  def forward(number = 1)\n    `#@native.go(number)`\n  end\n\n  # Push an item in the history.\n  #\n  # @param item [String] the item to push in the history\n  # @param data [Object] additional state to push\n  def push(item, data = nil)\n    `#@native.pushState(#{data.to_n}, null, item)`\n  end\n\n  # Replace the current history item with another.\n  #\n  # @param item [String] the item to replace with\n  # @param data [Object] additional state to replace\n  def replace(item, data = nil)\n    `#@native.replaceState(#{data.to_n}, null, item)`\n  end\n\n  # @!attribute [r] current\n  # @return [String] the current item\n  def current\n    $window.location.full_path\n  end\n\n  # @!attribute [r] state\n  # @return [Object] the current state\n  if Browser.supports? 'History.state'\n    def state\n      %x{\n        var state = #@native.state;\n\n        if (state == null) {\n          return nil;\n        }\n        else {\n          return state;\n        }\n      }\n    end\n  else\n    def state\n      raise NotImplementedError, 'history state unsupported'\n    end\n  end\nend\n\nclass Window\n  # @!attribute [r] history\n  # @return [History] the history for this window\n  def history\n    History.new(`#@native.history`) if `#@native.history`\n  end\nend\n\nend\n"],"names":["<top (required)>","self","require","<module:Browser>","<class:History>","supported?","Browser","supports?","include","Browser::NativeCachedWrapper","alias_native","back","number","1","@native","forward","push","item","data","to_n","replace","current","$window","location","full_path","state","raise","NotImplementedError","<class:Window>","history","History","new"],"mappings":"AAAAA,kDAAAA;EAAAA;;EAAAA;;EAAAC,IAAAC,SAAAA,CAAQF,kBAARE;EAEAF,OAAAG;EAAAA;;IAAAA;;;IAKAC;IAAAA;;MAAAA;;AAAAA;;MAEEC,MAAIJ,IAAJI,iBAAAA,mCAAAA;AAAAA;QACEA,OAAAC,aAAOC,cAAAA,CAAWF,SAAXE;MADTF,CAAAA,GAAAA;MAIAJ,IAAAO,SAAAA,CAAQC,IAAAH,aAAAG,wBAARD;MAIAP,IAAAS,cAAAA,CAAa,QAAbA;;AAKAC,MAAAA,oBAAAA,gBAASC,MAATD;AAAAA,QAAAA;;;;QAAS,6BAASE,CAAT;QACPF,OAAEG,cAAOH;MADXA,CAAAA,IAAAA;;AAOAI,MAAAA,uBAAAA,mBAAYH,MAAZG;AAAAA,QAAAA;;;;QAAY,6BAASF,CAAT;QACVE,OAAED,cAAOC;MADXA,CAAAA,IAAAA;;AAQAC,MAAAA,oBAAAA,gBAASC,IAAD,EAAOC,IAAfF;AAAAA,QAAAA;;;;QAAe,yBAAO,GAAP;QACbA,OAAEF,cAAOE,WAAaE,IAAIC,MAAAA,CAAAA,CAAMH;MADlCA,CAAAA,IAAAA;;AAQAI,MAAAA,uBAAAA,mBAAYH,IAAD,EAAOC,IAAlBE;AAAAA,QAAAA;;;;QAAkB,yBAAO,GAAP;QAChBA,OAAEN,cAAOM,cAAgBF,IAAIC,MAAAA,CAAAA,CAAMC;MADrCA,CAAAA,IAAAA;;AAMAC,MAAAA,uBAAAA,mBAAAA;AAAAA,QAAAA;;QACEA,OAAAC,aAAOC,UAAAA,CAAAA,CAASC,WAAAA,CAAAA;MADlBH,CAAAA,GAAAA;MAMA,IAAA,QAAGf,aAAOC,cAAAA,CAAWH,eAAXG,CAAV,CAAA;QACEH,OAAAqB,qBAAAA,iBAAAA;AAAAA,UAAAA;;;AAEJA,oBAAqBX,cAAOW;;AAE5BA;AACAA;AACAA;AACAA;AACAA;AACAA;AACAA;QAVIA,CAAAA,GAAAA;MADF;QAcErB,OAAAqB,qBAAAA,iBAAAA;AAAAA,UAAAA;;UACEA,OAAAxB,IAAAyB,OAAAA,CAAMC,yBAAN,EAA2BF,2BAA3BC;QADFD,CAAAA,GAAAA;MAdF;IAlDFrB,GAAAA,WAAAA,EAAAA,IAAAA;IAsEAD,OAAAyB;IAAAA;;MAAAA;;AAAAA;MAGEA,OAAAC,uBAAAA,mBAAAA;AAAAA,QAAAA;;QACE,IAAA,QAAqCf,cAAOe,QAA5C,CAAA;UAAAA,OAAAC,aAAOC,KAAAA,CAAOjB,cAAOe,QAAdE;QAAP;UAjFJF,OAAA;QAiFI;MADFA,CAAAA,GAAAA;IAHFD,GAAAA,WAAAA,EAAAA,IAAAA;EA3EAzB,GAAAA,WAAAA;AAFAH;"}},{"offset":{"line":39830,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/navigator.rb"],"sourcesContent":["module Browser\n\n# Representation of the navigator application.\n#\n# @see https://developer.mozilla.org/en-US/docs/Web/API/Navigator\nclass Navigator\n  include Browser::NativeCachedWrapper\n\n  Version = Struct.new(:major, :minor, :build)\n  Product = Struct.new(:name, :version)\n  Vendor  = Struct.new(:name, :version)\n\n  # Representation of a MIME type.\n  class MimeType\n    include Browser::NativeCachedWrapper\n\n    # @!attribute [r] plugin\n    # @return [Plugin] the plugin for the MIME type\n    def plugin\n      Plugin.new(`#@native.enabledPlugin`)\n    end\n\n    # @!attribute [r] description\n    # @return [String] the description for the MIME type\n    alias_native :description\n\n    # @!attribute [r] extensions\n    # @return [Array<String>] the extensions for this MIME type\n    def extensions\n      `#@native.suffixes`.split(/\\s*/)\n    end\n\n    # @!attribute [r] type\n    # @return [String] the MIME type\n    alias_native :type\n  end\n\n  # Representation of a navigator plugin.\n  #\n  # @see https://developer.mozilla.org/en-US/docs/Web/API/Plugin\n  class Plugin < Native::Array\n    def initialize(plugin)\n      super plugin do |m|\n        MimeType.new(m)\n      end\n    end\n\n    # @!attribute [r] description\n    # @return [String] the plugin description\n    alias_native :description\n\n    # @!attribute [r] file\n    # @return [String] the file associated with the plugin\n    alias_native :file, :filename\n\n    # @!attribute [r] name\n    # @return [String] the plugin name\n    alias_native :name\n\n    # @!attribute [r] version\n    # @return [String] the plugin version\n    alias_native :version\n  end\n\n  # Representation for the array of plugins.\n  #\n  # @see https://developer.mozilla.org/en-US/docs/Web/API/NavigatorPlugins\n  class Plugins < Native::Array\n    def initialize(plugins)\n      super plugins do |p|\n        Plugin.new(p)\n      end\n    end\n\n    # Reload all browser plugins.\n    def refresh\n      `#@native.refresh(false)`\n    end\n\n    # Reload all browser plugins reloading pages that contain `<embed>`s.\n    def refresh!\n      `#@native.refresh(true)`\n    end\n  end\n\n  # @!attribute [r] code\n  # @return [String] the browser code name\n  alias_native :code, :appCodeName\n\n  # @!attribute [r] name\n  # @return [String] the browser name\n  alias_native :name, :appName\n\n  # @!attribute [r] version\n  # @return [Version] the browser version\n  def version\n    Version.new(`#@native.appVersion`, `#@native.appMinorVersion`, `#@native.buildID`)\n  end\n\n  # Check if cookies are enabled.\n  alias_native :cookies?, :cookieEnabled\n\n  # Check if DNT is disabled.\n  def track?\n    `!#@native.doNotTrack`\n  end\n\n  # @!attribute [r] language\n  # @return [String] the browser language\n  alias_native :language\n\n  # @!attribute [r] mime_types\n  # @return [Native::Array<MimeType>] the supported MIME types\n  def mime_types\n    Native::Array.new `#@native.mimeTypes`, get: :item, named: :namedItem do |m|\n      MimeType.new(m)\n    end\n  end\n\n  # Check if the browser is in offline mode.\n  def offline?\n    `!#@native.onLine`\n  end\n\n  # @!attribute [r] operating_system\n  # @return [String] the operating system the browser is running on\n  alias_native :operating_system, :oscpu\n\n  alias os operating_system\n\n  # @!attribute [r] platform\n  # @return [String] the platform the browser is running on\n  alias_native :platform\n\n  # @!attribute [r] plugins\n  # @return [Plugins] the enabled plugins\n  def plugins\n    Plugins.new(`#@native.plugins`)\n  end\n\n  # @!attribute [r] product\n  # @return [Product] the product name and version\n  def product\n    Product.new(`#@native.product`, `#@native.productSub`)\n  end\n\n  # @!attribute [r] user_agent\n  # @return [String] the browser's user agent\n  alias_native :user_agent, :userAgent\n\n  # @!attribute [r] vendor\n  # @return [Vendor] the vendor name and version\n  def vendor\n    Vendor.new(`#@native.vendor`, `#@native.vendorSub`)\n  end\n\n  # Check if Java is enabled.\n  def java?\n    `#@native.javaEnabled()`\n  rescue\n    false\n  end\n\n  # Representation of user location based on Geolocation API\n  #\n  # Example usage:\n  # ```\n  # $window.navigator.geolocate.then do |pos|\n  #   puts \"#{pos.coords.latitude}, #{pos.coords.longitude}, #{pos.coords.accuracy}\"\n  # end\n  # ```\n  #\n  # @see https://developer.mozilla.org/en-US/docs/Web/API/Position\n  class Position\n    include Browser::NativeCachedWrapper\n\n    class Coords\n      include Native::Wrapper\n\n      # @!attribute [r] latitude\n      alias_native :latitude\n      # @!attribute [r] longitude\n      alias_native :longitude\n      # @!attribute [r] altitude\n      alias_native :altitude\n      # @!attribute [r] accuracy\n      alias_native :accuracy\n      # @!attribute [r] altitude_accuracy\n      alias_native :altitude_accuracy, :altitudeAccuracy\n      # @!attribute [r] heading\n      alias_native :heading\n      # @!attribute [r] speed\n      alias_native :speed\n    end\n\n    # @!attribute [r] timestamp\n    alias_native :timestamp\n\n    def coords\n      @coords ||= Coords.new(`#@native.coords`)\n    end\n  end\n\n  # Geolocates the user once\n  #\n  # @return [Promise] promise that resolves to the {Position} object\n  def geolocate(max_age: 0, timeout: Float::INFINITY, high_accuracy: false)\n    promise = Promise.new\n    succ = proc { |i| promise.resolve(Position.new(i)) }\n    fail = proc { |i| promise.reject(Native(i)) }\n    opts = {maxAge: max_age, timeout: timeout, enableHighAccuracy: high_accuracy}\n    `#@native.geolocation.getCurrentPosition(#{succ.to_n}, #{fail.to_n}, #{opts.to_n})`\n    promise\n  end\n\n  # Geolocates the user multiple times and calls a block with his location\n  # until #stop_tracking is called with a returned id. Calls a proc named error\n  # if error happens.\n  #\n  # @return [Integer] an ID that can be used as an argument to #stop_tracking\n  def track(max_age: 0, timeout: Float::INFINITY, high_accuracy: false, error: proc{|i|}, &block)\n    opts = {maxAge: max_age, timeout: timeout, enableHighAccuracy: high_accuracy}\n    succ = proc { |i| block.call(Position.new(i)) }\n    fail = proc { |i| error.call(Native(i)) }\n    `#@native.geolocation.watchPosition(#{succ.to_n}, #{fail.to_n}, #{opts.to_n})`\n  end\n\n  def stop_tracking(id)\n    `#@native.geolocation.clearWatch(#{id})`\n  end\n\n  # Triggers a vibration on a device. A pattern can be either a number of\n  # miliseconds for a vibration length, or an array of lengths (in\n  # miliseconds) which describes a vibration pattern - first element of said\n  # array describes how long the device should vibrate, second - how long to\n  # stop for and so on.\n  def vibrate(pattern)\n    `#@native.vibrate(#{pattern.to_n})`\n  end\n\n  # Check a battery status of user device. This API is deprecated in the browser\n  # context and usable mainly in privileged contexts.\n  #\n  # @return [Promise] a promise that resolves with a battery status\n  #\n  # @see https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getBattery\n  def get_battery\n    promise = Promise.new\n    yes = proc { |r| promise.resolve(Native(r)) }\n    no = proc { |r| promise.reject(Native(r)) }\n    `#@native.getBattery().then(#{yes.to_n}).catch(#{no.to_n})`\n    promise\n  end\n\n  # Queue to send a small amount of data to a server.\n  #\n  # @param url [String] url to trigger\n  # @param payload [String, Blob, FormData, Hash] data to send\n  #\n  # @see https://developer.mozilla.org/en-US/docs/Web/API/Navigator/sendBeacon\n  def send_beacon(url, payload=nil)\n    `#@native.sendBeacon(#{url}, #{payload.to_n})`\n  end\nend\n\nclass Window\n  # @!attribute [r] navigator\n  # @return [Navigator] the navigator\n  def navigator\n    @navigator ||= Navigator.new(`#@native.navigator`) if `#@native.navigator`\n  end\nend\n\nend\n"],"names":["<top (required)>","<module:Browser>","<class:Navigator>","self","include","Browser::NativeCachedWrapper","Browser","Struct","new","<class:MimeType>","plugin","Plugin","@native","alias_native","extensions","split","<class:Plugin>","initialize","block in initialize","m","block (2 levels) in initialize","MimeType","Native::Array","Native","<class:Plugins>","plugins","p","refresh","refresh!","version","Version","track?","mime_types","block in mime_types","block (2 levels) in mime_types","offline?","Plugins","product","Product","vendor","Vendor","java?","StandardError","<class:Position>","<class:Coords>","Native::Wrapper","coords","@coords","$ret_or_1","Coords","geolocate","$kwargs","0","Float::INFINITY","Float","promise","Promise","succ","proc","block in geolocate","i","block (2 levels) in geolocate","resolve","Position","fail","reject","opts","max_age","timeout","high_accuracy","to_n","track","block in track","block (2 levels) in track","block","call","error","stop_tracking","id","vibrate","pattern","get_battery","yes","block in get_battery","r","block (2 levels) in get_battery","no","send_beacon","url","payload","<class:Window>","navigator","@navigator","Navigator"],"mappings":"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"}},{"offset":{"line":40164,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/setup/large.rb"],"sourcesContent":["# browser/setup/large - a larger set of requires for more complex applications\n#\n# Note - it doesn't include Paggio (or Paggio support) or many events\n\nrequire 'browser/setup/mini'\n\nrequire 'browser/effects'\nrequire 'browser/http'\nrequire 'browser/delay'\nrequire 'browser/interval'\nrequire 'browser/immediate'\nrequire 'browser/storage'\nrequire 'browser/blob'\nrequire 'browser/animation_frame'\nrequire 'browser/socket'\nrequire 'browser/history'\nrequire 'browser/navigator'\n"],"names":["<top (required)>","self","require"],"mappings":"AAAAA,sDAAAA;EAAAA;;EAAAA;;EAIAC,IAAAC,SAAAA,CAAQF,oBAARE;EAEAD,IAAAC,SAAAA,CAAQF,iBAARE;EACAD,IAAAC,SAAAA,CAAQF,cAARE;EACAD,IAAAC,SAAAA,CAAQF,eAARE;EACAD,IAAAC,SAAAA,CAAQF,kBAARE;EACAD,IAAAC,SAAAA,CAAQF,mBAARE;EACAD,IAAAC,SAAAA,CAAQF,iBAARE;EACAD,IAAAC,SAAAA,CAAQF,cAARE;EACAD,IAAAC,SAAAA,CAAQF,yBAARE;EACAD,IAAAC,SAAAA,CAAQF,gBAARE;EACAD,IAAAC,SAAAA,CAAQF,iBAARE;EACAF,OAAAC,IAAAC,SAAAA,CAAQF,mBAARE;AAhBAF;"}},{"offset":{"line":40183,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/event/focus.rb"],"sourcesContent":["module Browser; class Event\n\nclass Focus < UI\n  handles 'blur', 'focus', 'focusin', 'focusout'\n\n  def self.supported?\n    Browser.supports? 'Event.Focus'\n  end\n\n  class Definition < UI::Definition\n    def view=(value)\n      `#@native.view = #{Native.convert(value)}`\n    end\n\n    def related=(elem)\n      `#@native.relatedTarget = #{Native.convert(elem)}`\n    end\n  end\n\n  if Browser.supports? 'Event.constructor'\n    def self.construct(name, desc)\n      `new FocusEvent(#{name}, #{desc})`\n    end\n  elsif Browser.supports? 'Event.create'\n    def self.construct(name, desc)\n      %x{\n        var event = document.createEvent(\"FocusEvent\");\n            event.initFocusEvent(name, desc.bubbles, desc.cancelable,\n              desc.view || window, 0, desc.relatedTarget);\n\n        return event;\n      }\n    end\n  end if supported?\n\n  def related\n    DOM(`#@native.relatedTarget`)\n  end\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<class:Event>","<class:Focus>","self","handles","supported?","Browser","supports?","<class:Definition>","view=","value","@native","Native","convert","related=","elem","UI::Definition","UI","construct","name","desc","related","DOM"],"mappings":"AAAAA,sDAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAEhBA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QACEC,IAAAC,SAAAA,CAAQF,MAAR,EAAgBA,OAAhB,EAAyBA,SAAzB,EAAoCA,UAApCE;QAEAC,MAAIF,IAAJE,iBAAAA,iCAAAA;AAAAA;UACEA,OAAAC,aAAOC,cAAAA,CAAWF,aAAXE;QADTF,CAAAA,GAAAA;QAIAG;QAAAA;;UAAAA;;AAAAA;;;AACEC,UAAAA,qBAAAA,+BAAUC,KAAVD;AAAAA,YAAAA;;YACEA,OAAEE,cAAOF,QAAUG,YAAMC,SAAAA,CAASH,KAATG;UAD3BJ,CAAAA,GAAAA;UAIAD,OAAAM,wBAAAA,kCAAaC,IAAbD;AAAAA,YAAAA;;YACEA,OAAEH,cAAOG,iBAAmBF,YAAMC,SAAAA,CAASE,IAATF;UADpCC,CAAAA,GAAAA;QALFN,GAAAA,WAAAA,EAAmBQ,IAAAC,QAAAD,eAAnBR;QAUA,IAAA,QAcOL,IAAAE,eAAAA,CAAAA,CAdP,CAAA;UAAA,IAAA,QAAGC,aAAOC,cAAAA,CAAWL,mBAAXK,CAAV,CAAA;YACEW,MAAIf,IAAJe,gBAAAA,qBAAmBC,IAAD,EAAOC,IAAzBF;AAAAA;cACEA,OAACA,eAAiBC,IAAKD,EAAIE,IAAKF;YADlCA,CAAAA,GAAAA;UADF,OAIA,IAAA,QAAMZ,aAAOC,cAAAA,CAAWL,cAAXK,CAAb,CAAA;YACEW,MAAIf,IAAJe,gBAAAA,qBAAmBC,IAAD,EAAOC,IAAzBF;AAAAA;;AAEJA;AACAA;AACAA;;AAEAA;AACAA;YAPIA,CAAAA,GAAAA;UADF;QAJA;QAgBAhB,OAAAmB,uBAAAA,mBAAAA;AAAAA,UAAAA;;UACEA,OAAAlB,IAAAmB,KAAAA,CAAMX,cAAOU,cAAbC;QADFD,CAAAA,GAAAA;MAjCFnB,GAAAA,WAAAA,EAAce,QAAdf;IAFgBD,GAAAA,WAAAA,EAAAA,IAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":40257,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/event/wheel.rb"],"sourcesContent":["module Browser; class Event\n\nclass Wheel < UI\n  handles 'wheel', 'mousewheel'\n\n  def self.supported?\n    not $$[:WheelEvent].nil?\n  end\n\n  class Definition < Definition\n    def x=(value)\n      `#@native.deltaX = #{value}`\n    end\n\n    def y=(value)\n      `#@native.deltaY = #{value}`\n    end\n\n    def z=(value)\n      `#@native.deltaZ = #{value}`\n    end\n\n    def mode=(value)\n      value = case value\n        when :pixel then `WheelEvent.DOM_DELTA_PIXEL`\n        when :line  then `WheelEvent.DOM_DELTA_LINE`\n        when :page  then `WheelEvent.DOM_DELTA_PAGE`\n      end\n\n      `#@native.deltaMode = #{value}`\n    end\n  end\n\n  def self.construct(name, desc)\n    `new WheelEvent(#{name}, #{desc})`\n  end\n\n  alias_native :x, :deltaX\n  alias_native :y, :deltaY\n  alias_native :z, :deltaZ\n\n  def mode\n    case `#@native.deltaMode`\n      when `WheelEvent.DOM_DELTA_PIXEL` then :pixel\n      when `WheelEvent.DOM_DELTA_LINE`  then :line\n      when `WheelEvent.DOM_DELTA_PAGE`  then :page\n    end\n  end\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<class:Event>","<class:Wheel>","self","handles","supported?","$$","[]","nil?","!","<class:Definition>","x=","value","@native","y=","z=","mode=","$ret_or_1","Definition","construct","name","desc","alias_native","mode","UI"],"mappings":"AAAAA,sDAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAEhBA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QACEC,IAAAC,SAAAA,CAAQF,OAAR,EAAiBA,YAAjBE;QAEAC,MAAIF,IAAJE,iBAAAA,iCAAAA;AAAAA,UAAAA;;UACEA,OAAIC,QAAEC,OAAAA,CAAC,YAADA,CAAaC,SAAAA,CAAAA,CAAnBC,MAAAA,CAAAA;QADFJ,CAAAA,GAAAA;QAIAK;QAAAA;;UAAAA;;AAAAA;;;AACEC,UAAAA,kBAAAA,4BAAOC,KAAPD;AAAAA,YAAAA;;YACEA,OAAEE,cAAOF,UAAYC;UADvBD,CAAAA,GAAAA;;AAIAG,UAAAA,kBAAAA,4BAAOF,KAAPE;AAAAA,YAAAA;;YACEA,OAAED,cAAOC,UAAYF;UADvBE,CAAAA,GAAAA;;AAIAC,UAAAA,kBAAAA,4BAAOH,KAAPG;AAAAA,YAAAA;;YACEA,OAAEF,cAAOE,UAAYH;UADvBG,CAAAA,GAAAA;UAIAL,OAAAM,qBAAAA,+BAAUJ,KAAVI;AAAAA,YAAAA;;;YACEJ,QACE,CAAA,QAAK,OAAL,EADMK,CAAAA,YAAKL,KAALK,CACN,CAAA,GAAA,CAAkBD,0BAAlB,IACA,CAAA,QAAK,MAAL,EAzBR,SAyBQ,CAAA,GAAA,CAAkBA,yBAAlB,IACA,CAAA,QAAK,MAAL,EA1BR,SA0BQ,CAAA,GAAA,CAAkBA,yBAAlB,IAAA,CAHM,GAGN,CAAA,CADA,CADA;YAKFA,OAAEH,cAAOG,aAAeJ;UAP1BI,CAAAA,GAAAA;QAbFN,GAAAA,WAAAA,EAAmBQ,gBAAnBR;QAwBAS,MAAIhB,IAAJgB,gBAAAA,qBAAmBC,IAAD,EAAOC,IAAzBF;AAAAA;UACEA,OAACA,eAAiBC,IAAKD,EAAIE,IAAKF;QADlCA,CAAAA,GAAAA;QAIAhB,IAAAmB,cAAAA,CAAa,GAAb,EAAiB,QAAjBA;QACAnB,IAAAmB,cAAAA,CAAa,GAAb,EAAiB,QAAjBA;QACAnB,IAAAmB,cAAAA,CAAa,GAAb,EAAiB,QAAjBA;QAEApB,OAAAqB,oBAAAA,gBAAAA;AAAAA,UAAAA;;UAEI,IAAA,QAAMA,0BAAN,EADFN,CAAAA,YAAOJ,cAAOU,UAAdN,CACE,CAAA;YAAuCM,OAAA;UAAvC,OACA,IAAA,QAAMA,yBAAN,EA5CN,SA4CM,CAAA;YAAuCA,OAAA;UAAvC,OACA,IAAA,QAAMA,yBAAN,EA7CN,SA6CM,CAAA;YAAuCA,OAAA;UAAvC;YAHFA,OAAA;UAGE;QAJJA,CAAAA,GAAAA;MAvCFrB,GAAAA,WAAAA,EAAcsB,QAAdtB;IAFgBD,GAAAA,WAAAA,EAAAA,IAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":40342,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/event/data_transfer.rb"],"sourcesContent":["require 'browser/blob'\n\nmodule Browser; class Event\n\n# {DataTransfer} is an object which manages included data to\n# an event of type {Event::Drag} or {Event::Clipboard}.\nclass DataTransfer\n  include NativeCachedWrapper\n\n  # @!attribute [rw] effect\n  # @return [Symbol] Effect of this drop operation.\n  #   Must be one of: :none, :copy, :link or :move.\n  def effect\n    `#@native.dropEffect`\n  end\n\n  def effect= (effect)\n    `#@native.dropEffect = #{effect}`\n  end\n\n  # Extract some text data from this {DataTransfer} instance.\n  def [] (type)\n    `#@native.getData(#{type})`\n  end\n\n  # Embed some text data in this {DataTransfer} instance.\n  def []= (type, value)\n    `#@native.setData(#{type}, #{Native.convert(value)})`\n  end\n\n  # Clear some (or all, if type is not specified) text data from\n  # this {DataTransfer} instance.\n  def clear (type=nil)\n    `#@native.clearData(#{type.to_n})`\n  end\n\n  # @!attribute [w] drag_image\n  # Sets a drag image for this {DataTransfer}. Use some\n  # {DOM::Element::Image} or {Canvas} as a value.\n  def drag_image= (image)\n    `#@native.setDragImage(#{Native.convert(image)})`\n  end\n\n  # @!attribute [r] files\n  # @return [Array<File>] list of files attached to this {DataTransfer}\n  def files\n    Native::Array.new(`#@native.files`).map { |f| File.new(f.to_n) }\n  end\n\n  # @!attribute [r] items\n  # @return [Array<Item>] list of items attached to this {DataTransfer}\n  def items\n    Native::Array.new(`#@native.items`).map { |i| Item.new(i.to_n) }\n  end\n\n  # An instance of `DataTransferItem`\n  class Item\n    include NativeCachedWrapper\n\n    # @!attribute [r] kind\n    # @return [Symbol] kind of an item: :string or :file\n    def kind\n      `#@native.kind`\n    end\n\n    def string?; kind == 'string';           end\n    def file?;   kind == 'file' && to_file;  end # Some files can't be resolved...\n\n    # @!attribute [r] type\n    # @return [String] mime type of an item\n    def type\n      `#@native.type`\n    end\n\n    # Convert to string and call back once ready, or return a\n    # promise if a block isn't given.\n    def to_string(&block)\n      promise = nil\n      if !block\n        promise = Promise.new\n        block = proc { |i| promise.resolve(i) }\n      end\n      `#@native.getAsString(#{block.to_n})`\n      return promise\n    end\n\n    # Convert to file or return nil if impossible\n    def to_file\n      as_file = `#@native.getAsFile()`\n      File.new(as_file) if as_file\n    end\n  end\nend\n\nend; end\n"],"names":["<top (required)>","self","require","<module:Browser>","<class:Event>","<class:DataTransfer>","include","NativeCachedWrapper","effect","@native","effect=","[]","type","[]=","value","Native","convert","clear","to_n","drag_image=","image","files","map","Native::Array","new","block in files","f","block (2 levels) in files","File","items","block in items","i","block (2 levels) in items","Item","<class:Item>","kind","string?","==","file?","$ret_or_1","to_file","to_string","promise","block","Promise","proc","block in to_string","block (2 levels) in to_string","resolve","as_file"],"mappings":"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"}},{"offset":{"line":40498,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/event/composition.rb"],"sourcesContent":["module Browser; class Event\n\nclass Composition < UI\n  handles 'compositionend', 'compositionstart', 'compositionupdate'\n\n  def self.supported?\n    Browser.supports? 'Event.Composition'\n  end\n\n  class Definition < UI::Definition\n    def data=(value)\n      `#@native.data = #{value}`\n    end\n\n    def locale=(value)\n      `#@native.locale = #{value}`\n    end\n  end\n\n  if Browser.supports? 'Event.constructor'\n    def self.construct(name, desc)\n      `new CompositionEvent(#{name}, #{desc})`\n    end\n  elsif Browser.supports? 'Event.create'\n    def self.construct(name, desc)\n      %x{\n        var event = document.createEvent(\"CompositionEvent\");\n            event.initCompositionEvent(name, desc.bubbles, desc.cancelable,\n              desc.view || window, desc.data, desc.locale);\n\n        return event;\n      }\n    end\n  end if supported?\n\n  alias_native :data\n  alias_native :locale\n\n  def start?\n    name.downcase == 'compositionstart'\n  end\n\n  def update?\n    name.downcase == 'compositionupdate'\n  end\n\n  def end?\n    name.downcase == 'compositionend'\n  end\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<class:Event>","<class:Composition>","self","handles","supported?","Browser","supports?","<class:Definition>","data=","value","@native","locale=","UI::Definition","UI","construct","name","desc","alias_native","start?","downcase","==","update?","end?"],"mappings":"AAAAA,4DAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAEhBA,OAAAC;MAAAA;;QAAAA;;;QACEC,IAAAC,SAAAA,CAAQF,gBAAR,EAA0BA,kBAA1B,EAA8CA,mBAA9CE;QAEAC,MAAIF,IAAJE,iBAAAA,uCAAAA;AAAAA;UACEA,OAAAC,aAAOC,cAAAA,CAAWF,mBAAXE;QADTF,CAAAA,GAAAA;QAIAG;QAAAA;;UAAAA;;AAAAA;;;AACEC,UAAAA,qBAAAA,+BAAUC,KAAVD;AAAAA,YAAAA;;YACEA,OAAEE,cAAOF,QAAUC;UADrBD,CAAAA,GAAAA;UAIAD,OAAAI,uBAAAA,iCAAYF,KAAZE;AAAAA,YAAAA;;YACEA,OAAED,cAAOC,UAAYF;UADvBE,CAAAA,GAAAA;QALFJ,GAAAA,WAAAA,EAAmBK,IAAAC,QAAAD,eAAnBL;QAUA,IAAA,QAcOL,IAAAE,eAAAA,CAAAA,CAdP,CAAA;UAAA,IAAA,QAAGC,aAAOC,cAAAA,CAAWL,mBAAXK,CAAV,CAAA;YACEQ,MAAIZ,IAAJY,gBAAAA,qBAAmBC,IAAD,EAAOC,IAAzBF;AAAAA;cACEA,OAACA,qBAAuBC,IAAKD,EAAIE,IAAKF;YADxCA,CAAAA,GAAAA;UADF,OAIA,IAAA,QAAMT,aAAOC,cAAAA,CAAWL,cAAXK,CAAb,CAAA;YACEQ,MAAIZ,IAAJY,gBAAAA,qBAAmBC,IAAD,EAAOC,IAAzBF;AAAAA;;AAEJA;AACAA;AACAA;;AAEAA;AACAA;YAPIA,CAAAA,GAAAA;UADF;QAJA;QAgBAZ,IAAAe,cAAAA,CAAa,MAAbA;QACAf,IAAAe,cAAAA,CAAa,QAAbA;;AAEAC,QAAAA,sBAAAA,mCAAAA;AAAAA,UAAAA;;UACEA,OAAAhB,IAAAa,MAAAA,CAAAA,CAAII,UAAAA,CAAAA,CAAUC,OAAAA,CAAGF,kBAAHE;QADhBF,CAAAA,GAAAA;;AAIAG,QAAAA,uBAAAA,oCAAAA;AAAAA,UAAAA;;UACEA,OAAAnB,IAAAa,MAAAA,CAAAA,CAAII,UAAAA,CAAAA,CAAUC,OAAAA,CAAGC,mBAAHD;QADhBC,CAAAA,GAAAA;QAIApB,OAAAqB,oBAAAA,iCAAAA;AAAAA,UAAAA;;UACEA,OAAApB,IAAAa,MAAAA,CAAAA,CAAII,UAAAA,CAAAA,CAAUC,OAAAA,CAAGE,gBAAHF;QADhBE,CAAAA,GAAAA;MA5CFrB,GAAAA,WAAAA,EAAoBY,QAApBZ;IAFgBD,GAAAA,WAAAA,EAAAA,IAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":40585,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/event/animation.rb"],"sourcesContent":["module Browser; class Event\n\nclass Animation < Event\n  handles 'animationend', 'animationiteration', 'animationstart'\n\n  def self.supported?\n    Browser.supports? 'Event.Animation'\n  end\n\n  class Definition < Definition\n    def animation=(value)\n      `#@native.animationName = #{value}`\n    end\n\n    def elapsed=(value)\n      `#@native.elapsedTime = #{value}`\n    end\n  end\n\n  if Browser.supports? 'Event.constructor'\n    def self.construct(name, desc)\n      `new AnimationEvent(#{name}, #{desc})`\n    end\n  elsif Browser.supports? 'Event.create'\n    def self.construct(name, desc)\n      %x{\n        var event = document.createEvent(\"AnimationEvent\");\n            event.initAnimationEvent(name, desc.bubbles, desc.cancelable,\n              desc.animationName, desc.elapsedTime);\n\n        return event;\n      }\n    end\n  end if supported?\n\n  alias_native :name, :animationName\n  alias_native :elapsed, :elapsedTime\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<class:Event>","<class:Animation>","self","handles","supported?","Browser","supports?","<class:Definition>","animation=","value","@native","elapsed=","Definition","construct","name","desc","alias_native","Event"],"mappings":"AAAAA,0DAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAEhBA,OAAAC;MAAAA;;QAAAA;;;QACEC,IAAAC,SAAAA,CAAQF,cAAR,EAAwBA,oBAAxB,EAA8CA,gBAA9CE;QAEAC,MAAIF,IAAJE,iBAAAA,qCAAAA;AAAAA;UACEA,OAAAC,aAAOC,cAAAA,CAAWF,iBAAXE;QADTF,CAAAA,GAAAA;QAIAG;QAAAA;;UAAAA;;AAAAA;;;AACEC,UAAAA,0BAAAA,oCAAeC,KAAfD;AAAAA,YAAAA;;YACEA,OAAEE,cAAOF,iBAAmBC;UAD9BD,CAAAA,GAAAA;UAIAD,OAAAI,wBAAAA,kCAAaF,KAAbE;AAAAA,YAAAA;;YACEA,OAAED,cAAOC,eAAiBF;UAD5BE,CAAAA,GAAAA;QALFJ,GAAAA,WAAAA,EAAmBK,gBAAnBL;QAUA,IAAA,QAcOL,IAAAE,eAAAA,CAAAA,CAdP,CAAA;UAAA,IAAA,QAAGC,aAAOC,cAAAA,CAAWL,mBAAXK,CAAV,CAAA;YACEO,MAAIX,IAAJW,gBAAAA,qBAAmBC,IAAD,EAAOC,IAAzBF;AAAAA;cACEA,OAACA,mBAAqBC,IAAKD,EAAIE,IAAKF;YADtCA,CAAAA,GAAAA;UADF,OAIA,IAAA,QAAMR,aAAOC,cAAAA,CAAWL,cAAXK,CAAb,CAAA;YACEO,MAAIX,IAAJW,gBAAAA,qBAAmBC,IAAD,EAAOC,IAAzBF;AAAAA;;AAEJA;AACAA;AACAA;;AAEAA;AACAA;YAPIA,CAAAA,GAAAA;UADF;QAJA;QAgBAX,IAAAc,cAAAA,CAAa,MAAb,EAAoB,eAApBA;QACAf,OAAAC,IAAAc,cAAAA,CAAa,SAAb,EAAuB,aAAvBA;MAlCFf,GAAAA,WAAAA,EAAkBgB,WAAlBhB;IAFgBD,GAAAA,WAAAA,EAAAA,IAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":40655,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/event/audio_processing.rb"],"sourcesContent":["module Browser; class Event\n\nclass AudioProcessing < Event\n  handles 'audioprocess'\n  \n  def self.supported?\n    Browser.supports? 'Event.AudioProcessing'\n  end\n\n  class Definition < Definition\n    def time=(value)\n      `#@native.playbackTime = #{value}`\n    end\n\n    def input=(value)\n      `#@native.inputBuffer = #{value}`\n    end\n\n    def output=(value)\n      `#@native.outputBuffer = #{value}`\n    end\n  end\n\n  if Browser.supports? 'Event.constructor'\n    def self.construct(name, desc)\n      `new AudioProcessingEvent(#{name}, #{desc})`\n    end\n  end if supported?\n\n  alias_native :time, :playbackTime\n  alias_native :input, :inputBuffer\n  alias_native :output, :outputBuffer\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<class:Event>","<class:AudioProcessing>","self","handles","supported?","Browser","supports?","<class:Definition>","time=","value","@native","input=","output=","Definition","construct","name","desc","alias_native","Event"],"mappings":"AAAAA,iEAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAEhBA,OAAAC;MAAAA;;QAAAA;;;QACEC,IAAAC,SAAAA,CAAQF,cAARE;QAEAC,MAAIF,IAAJE,iBAAAA,2CAAAA;AAAAA;UACEA,OAAAC,aAAOC,cAAAA,CAAWF,uBAAXE;QADTF,CAAAA,GAAAA;QAIAG;QAAAA;;UAAAA;;AAAAA;;;AACEC,UAAAA,qBAAAA,+BAAUC,KAAVD;AAAAA,YAAAA;;YACEA,OAAEE,cAAOF,gBAAkBC;UAD7BD,CAAAA,GAAAA;;AAIAG,UAAAA,sBAAAA,gCAAWF,KAAXE;AAAAA,YAAAA;;YACEA,OAAED,cAAOC,eAAiBF;UAD5BE,CAAAA,GAAAA;UAIAJ,OAAAK,uBAAAA,iCAAYH,KAAZG;AAAAA,YAAAA;;YACEA,OAAEF,cAAOE,gBAAkBH;UAD7BG,CAAAA,GAAAA;QATFL,GAAAA,WAAAA,EAAmBM,gBAAnBN;QAcA,IAAA,QAIOL,IAAAE,eAAAA,CAAAA,CAJP,CAAA;UAAA,IAAA,QAAGC,aAAOC,cAAAA,CAAWL,mBAAXK,CAAV,CAAA;YACEQ,MAAIZ,IAAJY,gBAAAA,qBAAmBC,IAAD,EAAOC,IAAzBF;AAAAA;cACEA,OAACA,yBAA2BC,IAAKD,EAAIE,IAAKF;YAD5CA,CAAAA,GAAAA;UADF;QAAA;QAMAZ,IAAAe,cAAAA,CAAa,MAAb,EAAoB,cAApBA;QACAf,IAAAe,cAAAA,CAAa,OAAb,EAAqB,aAArBA;QACAhB,OAAAC,IAAAe,cAAAA,CAAa,QAAb,EAAsB,cAAtBA;MA7BFhB,GAAAA,WAAAA,EAAwBiB,WAAxBjB;IAFgBD,GAAAA,WAAAA,EAAAA,IAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":40721,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/event/before_unload.rb"],"sourcesContent":["module Browser; class Event\n\nclass BeforeUnload < Event\n  handles 'beforeunload'\n\n  def self.supported?\n    Browser.supports? 'Event.BeforeUnload'\n  end\n\n  if Browser.supports? 'Event.constructor'\n    def self.construct(name, desc)\n      `new BeforeUnloadEvent(#{name}, #{desc})`\n    end\n  end if supported?\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<class:Event>","<class:BeforeUnload>","self","handles","supported?","Browser","supports?","construct","name","desc","Event"],"mappings":"AAAAA,8DAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAEhBA,OAAAC;MAAAA;;QAAAA;;;QACEC,IAAAC,SAAAA,CAAQF,cAARE;QAEAC,MAAIF,IAAJE,iBAAAA,wCAAAA;AAAAA;UACEA,OAAAC,aAAOC,cAAAA,CAAWF,oBAAXE;QADTF,CAAAA,GAAAA;QAIA,IAAA,QAIOF,IAAAE,eAAAA,CAAAA,CAJP,CAAA;UAAA,IAAA,QAAGC,aAAOC,cAAAA,CAAWL,mBAAXK,CAAV,CAAA;YACEL,OAAAM,MAAIL,IAAJK,gBAAAA,qBAAmBC,IAAD,EAAOC,IAAzBF;AAAAA;cACEA,OAACA,sBAAwBC,IAAKD,EAAIE,IAAKF;YADzCA,CAAAA,GAAAA;UADF;YATFN,OAAA;UASE;QAAA;UATFA,OAAA;QASE;MAPFA,GAAAA,WAAAA,EAAqBS,WAArBT;IAFgBD,GAAAA,WAAAA,EAAAA,IAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":40763,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/event/clipboard.rb"],"sourcesContent":["module Browser; class Event\n\nclass Clipboard < Event\n  handles 'copy', 'cut', 'paste'\n\n  def self.supported?\n    Browser.supports? 'Event.Clipboard'\n  end\n\n  class Definition < Definition\n    def data=(value)\n      `#@native.data = #{value}`\n    end\n\n    def type=(value)\n      `#@native.dataType = #{value}`\n    end\n  end\n\n  if Browser.supports? 'Event.constructor'\n    def self.construct(name, desc)\n      `new ClipboardEvent(#{name}, #{desc})`\n    end\n  end if supported?\n\n  alias_native :data\n  alias_native :type, :dataType\n\n  # Returns a {DataTransfer} related to this event\n  #\n  # @see https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer\n  def transfer\n    DataTransfer.new(`#@native.clipboardData`)\n  end\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<class:Event>","<class:Clipboard>","self","handles","supported?","Browser","supports?","<class:Definition>","data=","value","@native","type=","Definition","construct","name","desc","alias_native","transfer","DataTransfer","new","Event"],"mappings":"AAAAA,0DAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAEhBA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QACEC,IAAAC,SAAAA,CAAQF,MAAR,EAAgBA,KAAhB,EAAuBA,OAAvBE;QAEAC,MAAIF,IAAJE,iBAAAA,qCAAAA;AAAAA;UACEA,OAAAC,aAAOC,cAAAA,CAAWF,iBAAXE;QADTF,CAAAA,GAAAA;QAIAG;QAAAA;;UAAAA;;AAAAA;;;AACEC,UAAAA,qBAAAA,+BAAUC,KAAVD;AAAAA,YAAAA;;YACEA,OAAEE,cAAOF,QAAUC;UADrBD,CAAAA,GAAAA;UAIAD,OAAAI,qBAAAA,+BAAUF,KAAVE;AAAAA,YAAAA;;YACEA,OAAED,cAAOC,YAAcF;UADzBE,CAAAA,GAAAA;QALFJ,GAAAA,WAAAA,EAAmBK,gBAAnBL;QAUA,IAAA,QAIOL,IAAAE,eAAAA,CAAAA,CAJP,CAAA;UAAA,IAAA,QAAGC,aAAOC,cAAAA,CAAWL,mBAAXK,CAAV,CAAA;YACEO,MAAIX,IAAJW,gBAAAA,qBAAmBC,IAAD,EAAOC,IAAzBF;AAAAA;cACEA,OAACA,mBAAqBC,IAAKD,EAAIE,IAAKF;YADtCA,CAAAA,GAAAA;UADF;QAAA;QAMAX,IAAAc,cAAAA,CAAa,MAAbA;QACAd,IAAAc,cAAAA,CAAa,MAAb,EAAoB,UAApBA;QAKAf,OAAAgB,wBAAAA,oBAAAA;AAAAA,UAAAA;;UACEA,OAAAC,kBAAYC,KAAAA,CAAOT,cAAOO,cAAdE;QADdF,CAAAA,GAAAA;MA7BFhB,GAAAA,WAAAA,EAAkBmB,WAAlBnB;IAFgBD,GAAAA,WAAAA,EAAAA,IAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":40828,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/event/device_light.rb"],"sourcesContent":["module Browser; class Event\n\nclass DeviceLight < Event\n  handles 'devicelight'\n\n  def self.supported?\n    Browser.supports? 'Event.DeviceLight'\n  end\n\n  class Definition < Definition\n    def value=(value)\n      `#@native.value = #{value}`\n    end\n  end\n\n  if Browser.supports? 'Event.constructor'\n    def self.construct(name, desc)\n      `new DeviceLightEvent(#{name}, #{desc})`\n    end\n  end if supported?\n\n  alias_native :value\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<class:Event>","<class:DeviceLight>","self","handles","supported?","Browser","supports?","<class:Definition>","value=","value","@native","Definition","construct","name","desc","alias_native","Event"],"mappings":"AAAAA,6DAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAEhBA,OAAAC;MAAAA;;QAAAA;;;QACEC,IAAAC,SAAAA,CAAQF,aAARE;QAEAC,MAAIF,IAAJE,iBAAAA,uCAAAA;AAAAA;UACEA,OAAAC,aAAOC,cAAAA,CAAWF,mBAAXE;QADTF,CAAAA,GAAAA;QAIAG;QAAAA;;UAAAA;;AAAAA;UACEA,OAAAC,sBAAAA,gCAAWC,KAAXD;AAAAA,YAAAA;;YACEA,OAAEE,cAAOF,SAAWC;UADtBD,CAAAA,GAAAA;QADFD,GAAAA,WAAAA,EAAmBI,gBAAnBJ;QAMA,IAAA,QAIOL,IAAAE,eAAAA,CAAAA,CAJP,CAAA;UAAA,IAAA,QAAGC,aAAOC,cAAAA,CAAWL,mBAAXK,CAAV,CAAA;YACEM,MAAIV,IAAJU,gBAAAA,qBAAmBC,IAAD,EAAOC,IAAzBF;AAAAA;cACEA,OAACA,qBAAuBC,IAAKD,EAAIE,IAAKF;YADxCA,CAAAA,GAAAA;UADF;QAAA;QAMAX,OAAAC,IAAAa,cAAAA,CAAa,OAAbA;MAnBFd,GAAAA,WAAAA,EAAoBe,WAApBf;IAFgBD,GAAAA,WAAAA,EAAAA,IAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":40879,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/event/device_motion.rb"],"sourcesContent":["module Browser; class Event\n\nclass DeviceMotion < Event\n  handles 'devicemotion'\n  \n  def self.supported?\n    Browser.supports? 'Event.DeviceMotion'\n  end\n\n  Acceleration = Struct.new(:x, :y, :z)\n\n  class Definition < Definition\n    def acceleration=(value)\n      `#@native.acceleration = #{value.to_n}`\n    end\n\n    def acceleration_with_gravity=(value)\n      `#@native.accelerationIncludingGravity = #{value.to_n}`\n    end\n\n    def rotation=(value)\n      `#@native.rotationRate = #{value}`\n    end\n\n    def interval=(value)\n      `#@native.interval = #{value}`\n    end\n  end\n\n  if Browser.supports? 'Event.constructor'\n    def self.construct(name, desc)\n      `new DeviceMotionEvent(#{name}, #{desc})`\n    end\n  elsif Browser.supports? 'Event.create'\n    def self.construct(name, desc)\n      %x{\n        var event = document.createEvent(\"DeviceMotionEvent\");\n            event.initDeviceMotionEvent(name, desc.bubbles, desc.cancelable,\n              desc.acceleration, desc.accelerationIncludingGravity,\n              desc.rotationRate, desc.interval);\n\n        return event;\n      }\n    end\n  end if supported?\n\n  alias_native :acceleration\n  alias_native :acceleration_with_gravity, :accelerationIncludingGravity\n  alias_native :rotation, :rotationRate\n  alias_native :interval\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<class:Event>","<class:DeviceMotion>","self","handles","supported?","Browser","supports?","Struct","new","<class:Definition>","acceleration=","value","@native","to_n","acceleration_with_gravity=","rotation=","interval=","Definition","construct","name","desc","alias_native","Event"],"mappings":"AAAAA,8DAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAEhBA,OAAAC;MAAAA;;QAAAA;;;QACEC,IAAAC,SAAAA,CAAQF,cAARE;QAEAC,MAAIF,IAAJE,iBAAAA,wCAAAA;AAAAA;UACEA,OAAAC,aAAOC,cAAAA,CAAWF,oBAAXE;QADTF,CAAAA,GAAAA;QAIA,wCAAeG,YAAMC,KAAAA,CAAK,GAAX,EAAe,GAAf,EAAmB,GAAbA,CAArB;QAEAC;QAAAA;;UAAAA;;AAAAA;;;AACEC,UAAAA,6BAAAA,uCAAkBC,KAAlBD;AAAAA,YAAAA;;YACEA,OAAEE,cAAOF,gBAAkBC,KAAKE,MAAAA,CAAAA;UADlCH,CAAAA,GAAAA;;AAIAI,UAAAA,0CAAAA,oDAA+BH,KAA/BG;AAAAA,YAAAA;;YACEA,OAAEF,cAAOE,gCAAkCH,KAAKE,MAAAA,CAAAA;UADlDC,CAAAA,GAAAA;;AAIAC,UAAAA,yBAAAA,mCAAcJ,KAAdI;AAAAA,YAAAA;;YACEA,OAAEH,cAAOG,gBAAkBJ;UAD7BI,CAAAA,GAAAA;UAIAN,OAAAO,yBAAAA,mCAAcL,KAAdK;AAAAA,YAAAA;;YACEA,OAAEJ,cAAOI,YAAcL;UADzBK,CAAAA,GAAAA;QAbFP,GAAAA,WAAAA,EAAmBQ,gBAAnBR;QAkBA,IAAA,QAeOP,IAAAE,eAAAA,CAAAA,CAfP,CAAA;UAAA,IAAA,QAAGC,aAAOC,cAAAA,CAAWL,mBAAXK,CAAV,CAAA;YACEY,MAAIhB,IAAJgB,gBAAAA,qBAAmBC,IAAD,EAAOC,IAAzBF;AAAAA;cACEA,OAACA,sBAAwBC,IAAKD,EAAIE,IAAKF;YADzCA,CAAAA,GAAAA;UADF,OAIA,IAAA,QAAMb,aAAOC,cAAAA,CAAWL,cAAXK,CAAb,CAAA;YACEY,MAAIhB,IAAJgB,gBAAAA,qBAAmBC,IAAD,EAAOC,IAAzBF;AAAAA;;AAEJA;AACAA;AACAA;AACAA;;AAEAA;AACAA;YARIA,CAAAA,GAAAA;UADF;QAJA;QAiBAhB,IAAAmB,cAAAA,CAAa,cAAbA;QACAnB,IAAAmB,cAAAA,CAAa,2BAAb,EAAyC,8BAAzCA;QACAnB,IAAAmB,cAAAA,CAAa,UAAb,EAAwB,cAAxBA;QACApB,OAAAC,IAAAmB,cAAAA,CAAa,UAAbA;MA/CFpB,GAAAA,WAAAA,EAAqBqB,WAArBrB;IAFgBD,GAAAA,WAAAA,EAAAA,IAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":40965,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/event/device_orientation.rb"],"sourcesContent":["module Browser; class Event\n\nclass DeviceOrientation < Event\n  handles 'deviceorientation'\n\n  def self.supported?\n    Browser.supports? 'Event.DeviceOrientation'\n  end\n\n  class Definition < Definition\n    def absolute=(value)\n      `#@native.absolute = #{value}`\n    end\n\n    def alpha=(value)\n      `#@native.alpha = #{value}`\n    end\n\n    def beta=(value)\n      `#@native.beta = #{value}`\n    end\n\n    def gamma=(value)\n      `#@native.gamma = #{value}`\n    end\n  end\n\n  if Browser.supports? 'Event.constructor'\n    def self.construct(name, desc)\n      `new DeviceOrientationEvent(#{name}, #{desc})`\n    end\n  elsif Browser.supports? 'Event.create'\n    def self.construct(name, desc)\n      %x{\n        var event = document.createEvent(\"DeviceOrientationEvent\");\n            event.initDeviceOrientationEvent(name, desc.bubbles, desc.cancelable,\n              desc.alpha, desc.beta, desc.gamma, desc.absolute);\n\n        return event;\n      }\n    end\n  end if supported?\n\n  alias_native :absolute\n  alias_native :alpha\n  alias_native :beta\n  alias_native :gamma\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<class:Event>","<class:DeviceOrientation>","self","handles","supported?","Browser","supports?","<class:Definition>","absolute=","value","@native","alpha=","beta=","gamma=","Definition","construct","name","desc","alias_native","Event"],"mappings":"AAAAA,mEAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAEhBA,OAAAC;MAAAA;;QAAAA;;;QACEC,IAAAC,SAAAA,CAAQF,mBAARE;QAEAC,MAAIF,IAAJE,iBAAAA,6CAAAA;AAAAA;UACEA,OAAAC,aAAOC,cAAAA,CAAWF,yBAAXE;QADTF,CAAAA,GAAAA;QAIAG;QAAAA;;UAAAA;;AAAAA;;;AACEC,UAAAA,yBAAAA,mCAAcC,KAAdD;AAAAA,YAAAA;;YACEA,OAAEE,cAAOF,YAAcC;UADzBD,CAAAA,GAAAA;;AAIAG,UAAAA,sBAAAA,gCAAWF,KAAXE;AAAAA,YAAAA;;YACEA,OAAED,cAAOC,SAAWF;UADtBE,CAAAA,GAAAA;;AAIAC,UAAAA,qBAAAA,+BAAUH,KAAVG;AAAAA,YAAAA;;YACEA,OAAEF,cAAOE,QAAUH;UADrBG,CAAAA,GAAAA;UAIAL,OAAAM,sBAAAA,gCAAWJ,KAAXI;AAAAA,YAAAA;;YACEA,OAAEH,cAAOG,SAAWJ;UADtBI,CAAAA,GAAAA;QAbFN,GAAAA,WAAAA,EAAmBO,gBAAnBP;QAkBA,IAAA,QAcOL,IAAAE,eAAAA,CAAAA,CAdP,CAAA;UAAA,IAAA,QAAGC,aAAOC,cAAAA,CAAWL,mBAAXK,CAAV,CAAA;YACES,MAAIb,IAAJa,gBAAAA,qBAAmBC,IAAD,EAAOC,IAAzBF;AAAAA;cACEA,OAACA,2BAA6BC,IAAKD,EAAIE,IAAKF;YAD9CA,CAAAA,GAAAA;UADF,OAIA,IAAA,QAAMV,aAAOC,cAAAA,CAAWL,cAAXK,CAAb,CAAA;YACES,MAAIb,IAAJa,gBAAAA,qBAAmBC,IAAD,EAAOC,IAAzBF;AAAAA;;AAEJA;AACAA;AACAA;;AAEAA;AACAA;YAPIA,CAAAA,GAAAA;UADF;QAJA;QAgBAb,IAAAgB,cAAAA,CAAa,UAAbA;QACAhB,IAAAgB,cAAAA,CAAa,OAAbA;QACAhB,IAAAgB,cAAAA,CAAa,MAAbA;QACAjB,OAAAC,IAAAgB,cAAAA,CAAa,OAAbA;MA5CFjB,GAAAA,WAAAA,EAA0BkB,WAA1BlB;IAFgBD,GAAAA,WAAAA,EAAAA,IAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":41049,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/event/device_proximity.rb"],"sourcesContent":["module Browser; class Event\n\nclass DeviceProximity < Event\n  handles 'deviceproximity'\n\n  def self.supported?\n    Browser.supports? 'Event.DeviceProximity'\n  end\n\n  class Definition < Definition\n    def value=(value)\n      `#@native.value = #{value}`\n    end\n\n    def min=(value)\n      `#@native.min = #{value}`\n    end\n\n    def max=(value)\n      `#@native.max = #{value}`\n    end\n  end\n\n  if Browser.supports? 'Event.constructor'\n    def self.construct(name, desc)\n      `new DeviceProximityEvent(#{name}, #{desc})`\n    end\n  end if supported?\n\n  alias_native :value\n  alias_native :min\n  alias_native :max\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<class:Event>","<class:DeviceProximity>","self","handles","supported?","Browser","supports?","<class:Definition>","value=","value","@native","min=","max=","Definition","construct","name","desc","alias_native","Event"],"mappings":"AAAAA,iEAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAEhBA,OAAAC;MAAAA;;QAAAA;;;QACEC,IAAAC,SAAAA,CAAQF,iBAARE;QAEAC,MAAIF,IAAJE,iBAAAA,2CAAAA;AAAAA;UACEA,OAAAC,aAAOC,cAAAA,CAAWF,uBAAXE;QADTF,CAAAA,GAAAA;QAIAG;QAAAA;;UAAAA;;AAAAA;;;AACEC,UAAAA,sBAAAA,gCAAWC,KAAXD;AAAAA,YAAAA;;YACEA,OAAEE,cAAOF,SAAWC;UADtBD,CAAAA,GAAAA;;AAIAG,UAAAA,oBAAAA,8BAASF,KAATE;AAAAA,YAAAA;;YACEA,OAAED,cAAOC,OAASF;UADpBE,CAAAA,GAAAA;UAIAJ,OAAAK,oBAAAA,8BAASH,KAATG;AAAAA,YAAAA;;YACEA,OAAEF,cAAOE,OAASH;UADpBG,CAAAA,GAAAA;QATFL,GAAAA,WAAAA,EAAmBM,gBAAnBN;QAcA,IAAA,QAIOL,IAAAE,eAAAA,CAAAA,CAJP,CAAA;UAAA,IAAA,QAAGC,aAAOC,cAAAA,CAAWL,mBAAXK,CAAV,CAAA;YACEQ,MAAIZ,IAAJY,gBAAAA,qBAAmBC,IAAD,EAAOC,IAAzBF;AAAAA;cACEA,OAACA,yBAA2BC,IAAKD,EAAIE,IAAKF;YAD5CA,CAAAA,GAAAA;UADF;QAAA;QAMAZ,IAAAe,cAAAA,CAAa,OAAbA;QACAf,IAAAe,cAAAA,CAAa,KAAbA;QACAhB,OAAAC,IAAAe,cAAAA,CAAa,KAAbA;MA7BFhB,GAAAA,WAAAA,EAAwBiB,WAAxBjB;IAFgBD,GAAAA,WAAAA,EAAAA,IAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":41115,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/event/drag.rb"],"sourcesContent":["module Browser; class Event\n\nclass Drag < Event\n  handles 'drag', 'dragend', 'dragenter', 'dragexit', 'dragleave', 'dragover',\n          'dragstart', 'drop'\n\n  def self.supported?\n    Browser.supports? 'Event.Drag'\n  end\n\n  class Definition < Definition\n    class Client\n      include Native::Wrapper\n\n      def x=(value)\n        `#@native.clientX = #{value}`\n      end\n\n      def y=(value)\n        `#@native.clientY = #{value}`\n      end\n    end\n\n    class Screen\n      include Native::Wrapper\n\n      def x=(value)\n        `#@native.screenX = #{value}`\n      end\n\n      def y=(value)\n        `#@native.screenY = #{value}`\n      end\n    end\n\n    def alt!\n      `#@native.altKey = true`\n    end\n\n    def ctrl!\n      `#@native.ctrlKey = true`\n    end\n\n    def meta!\n      `#@native.metaKey = true`\n    end\n\n    def button=(value)\n      `#@native.button = #{value}`\n    end\n\n    def client\n      Client.new(@native)\n    end\n\n    def screen\n      Screen.new(@native)\n    end\n\n    def related=(elem)\n      `#@native.relatedTarget = #{Native.convert(elem)}`\n    end\n\n    def transfer=(value)\n      `#@native.dataTransfer = #{Native.convert(value)}`\n    end\n  end\n\n  if Browser.supports? 'Event.constructor'\n    def self.construct(name, desc)\n      `new DragEvent(#{name}, #{desc})`\n    end\n  elsif Browser.supports? 'Event.create'\n    def self.construct(name, desc)\n      %x{\n        var event = document.createEvent(\"DragEvent\");\n            event.initDragEvent(name, desc.bubbles, desc.cancelable,\n              desc.view || window, 0,\n              desc.screenX || 0, desc.screenY || 0,\n              desc.clientX || 0, desc.clientY || 0,\n              desc.ctrlKey, desc.altKey, desc.shiftKey, desc.metaKey,\n              desc.button || 0, desc.relatedTarget, desc.dataTransfer);\n\n        return event;\n      }\n    end\n  end if supported?\n\n  alias_native :alt?, :altKey\n  alias_native :ctrl?, :ctrlKey\n  alias_native :meta?, :metaKey\n  alias_native :shift?, :shiftKey\n  alias_native :button\n\n  def client\n    Position.new(`#@native.clientX`, `#@native.clientY`)\n  end\n\n  def screen\n    Position.new(`#@native.screenX`, `#@native.screenY`) if defined?(`#@native.screenX`)\n  end\n\n  def x\n    screen.x\n  end\n\n  def y\n    screen.y\n  end\n\n  def related\n    DOM(`#@native.relatedTarget`)\n  end\n\n  # Returns a {DataTransfer} related to this event\n  #\n  # @see https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer\n  def transfer\n    DataTransfer.new(`#@native.dataTransfer`)\n  end\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<class:Event>","<class:Drag>","self","handles","supported?","Browser","supports?","<class:Definition>","<class:Client>","include","Native::Wrapper","Native","x=","value","@native","y=","<class:Screen>","alt!","ctrl!","meta!","button=","client","Client","new","screen","Screen","related=","elem","convert","transfer=","Definition","construct","name","desc","alias_native","Position","x","y","related","DOM","transfer","DataTransfer","Event"],"mappings":"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"}},{"offset":{"line":41308,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/event/gamepad.rb"],"sourcesContent":["module Browser; class Event\n\nclass Gamepad < Event\n  handles 'gamepadconnected', 'gamepaddisconnected'\n\n  def self.supported?\n    Browser.supports? 'Event.Gamepad'\n  end\n\n  class Definition < Definition\n    def id=(value)\n      `#@native.id = #{value}`\n    end\n\n    def index=(value)\n      `#@native.index = #{value}`\n    end\n\n    def at=(value)\n      `#@native.timestamp = #{value}`\n    end\n\n    def axes=(value)\n      `#@native.axes = #{value}`\n    end\n\n    def buttons=(value)\n      `#@native.buttons = #{value}`\n    end\n  end\n\n  if Browser.supports? 'Event.constructor'\n    def self.construct(name, desc)\n      `return new GamepadEvent(#{name}, {\n        bubbles:    desc.bubbles,\n        cancelable: desc.cancelable,\n        gamepad:    desc })`\n    end\n  end if supported?\n\n  def id\n    `#@native.gamepad.id`\n  end\n\n  def index\n    `#@native.gamepad.index`\n  end\n\n  def at\n    `#@native.gamepad.timestamp`\n  end\n\n  def axes\n    `#@native.gamepad.axes`\n  end\n\n  def buttons\n    `#@native.gamepad.buttons`\n  end\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<class:Event>","<class:Gamepad>","self","handles","supported?","Browser","supports?","<class:Definition>","id=","value","@native","index=","at=","axes=","buttons=","Definition","construct","name","desc","id","index","at","axes","buttons","Event"],"mappings":"AAAAA,wDAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAEhBA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QACEC,IAAAC,SAAAA,CAAQF,kBAAR,EAA4BA,qBAA5BE;QAEAC,MAAIF,IAAJE,iBAAAA,mCAAAA;AAAAA;UACEA,OAAAC,aAAOC,cAAAA,CAAWF,eAAXE;QADTF,CAAAA,GAAAA;QAIAG;QAAAA;;UAAAA;;AAAAA;;;AACEC,UAAAA,mBAAAA,6BAAQC,KAARD;AAAAA,YAAAA;;YACEA,OAAEE,cAAOF,MAAQC;UADnBD,CAAAA,GAAAA;;AAIAG,UAAAA,sBAAAA,gCAAWF,KAAXE;AAAAA,YAAAA;;YACEA,OAAED,cAAOC,SAAWF;UADtBE,CAAAA,GAAAA;;AAIAC,UAAAA,mBAAAA,6BAAQH,KAARG;AAAAA,YAAAA;;YACEA,OAAEF,cAAOE,aAAeH;UAD1BG,CAAAA,GAAAA;;AAIAC,UAAAA,qBAAAA,+BAAUJ,KAAVI;AAAAA,YAAAA;;YACEA,OAAEH,cAAOG,QAAUJ;UADrBI,CAAAA,GAAAA;UAIAN,OAAAO,wBAAAA,kCAAaL,KAAbK;AAAAA,YAAAA;;YACEA,OAAEJ,cAAOI,WAAaL;UADxBK,CAAAA,GAAAA;QAjBFP,GAAAA,WAAAA,EAAmBQ,gBAAnBR;QAsBA,IAAA,QAOOL,IAAAE,eAAAA,CAAAA,CAPP,CAAA;UAAA,IAAA,QAAGC,aAAOC,cAAAA,CAAWL,mBAAXK,CAAV,CAAA;YACEU,MAAId,IAAJc,gBAAAA,qBAAmBC,IAAD,EAAOC,IAAzBF;AAAAA;cACGA,wBAA0BC,IAAKD;AACtCA;AACAA;AACAA;YAJIA,CAAAA,GAAAA;UADF;QAAA;;AASAG,QAAAA,kBAAAA,cAAAA;AAAAA,UAAAA;;UACEA,OAAET,cAAOS;QADXA,CAAAA,GAAAA;;AAIAC,QAAAA,qBAAAA,iBAAAA;AAAAA,UAAAA;;UACEA,OAAEV,cAAOU;QADXA,CAAAA,GAAAA;;AAIAC,QAAAA,kBAAAA,cAAAA;AAAAA,UAAAA;;UACEA,OAAEX,cAAOW;QADXA,CAAAA,GAAAA;;AAIAC,QAAAA,oBAAAA,gBAAAA;AAAAA,UAAAA;;UACEA,OAAEZ,cAAOY;QADXA,CAAAA,GAAAA;QAIArB,OAAAsB,uBAAAA,mBAAAA;AAAAA,UAAAA;;UACEA,OAAEb,cAAOa;QADXA,CAAAA,GAAAA;MAtDFtB,GAAAA,WAAAA,EAAgBuB,WAAhBvB;IAFgBD,GAAAA,WAAAA,EAAAA,IAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":41416,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/event/hash_change.rb"],"sourcesContent":["module Browser; class Event\n\nclass HashChange < Event\n  handles 'hashchange'\n\n  def self.supported?\n    Browser.supports? 'Event.HashChange'\n  end\n\n  class Definition < Definition\n    def old=(value)\n      `#@native.oldURL = #{value}`\n    end\n\n    def new=(value)\n      `#@native.newURL = #{value}`\n    end\n  end\n\n  if Browser.supports? 'Event.constructor'\n    def self.construct(name, desc)\n      `new HashChangeEvent(#{name}, #{desc})`\n    end\n  end if supported?\n\n  alias_native :old, :oldURL\n  alias_native :new, :newURL\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<class:Event>","<class:HashChange>","self","handles","supported?","Browser","supports?","<class:Definition>","old=","value","@native","new=","Definition","construct","name","desc","alias_native","Event"],"mappings":"AAAAA,4DAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAEhBA,OAAAC;MAAAA;;QAAAA;;;QACEC,IAAAC,SAAAA,CAAQF,YAARE;QAEAC,MAAIF,IAAJE,iBAAAA,sCAAAA;AAAAA;UACEA,OAAAC,aAAOC,cAAAA,CAAWF,kBAAXE;QADTF,CAAAA,GAAAA;QAIAG;QAAAA;;UAAAA;;AAAAA;;;AACEC,UAAAA,oBAAAA,8BAASC,KAATD;AAAAA,YAAAA;;YACEA,OAAEE,cAAOF,UAAYC;UADvBD,CAAAA,GAAAA;UAIAD,OAAAI,oBAAAA,8BAASF,KAATE;AAAAA,YAAAA;;YACEA,OAAED,cAAOC,UAAYF;UADvBE,CAAAA,GAAAA;QALFJ,GAAAA,WAAAA,EAAmBK,gBAAnBL;QAUA,IAAA,QAIOL,IAAAE,eAAAA,CAAAA,CAJP,CAAA;UAAA,IAAA,QAAGC,aAAOC,cAAAA,CAAWL,mBAAXK,CAAV,CAAA;YACEO,MAAIX,IAAJW,gBAAAA,qBAAmBC,IAAD,EAAOC,IAAzBF;AAAAA;cACEA,OAACA,oBAAsBC,IAAKD,EAAIE,IAAKF;YADvCA,CAAAA,GAAAA;UADF;QAAA;QAMAX,IAAAc,cAAAA,CAAa,KAAb,EAAmB,QAAnBA;QACAf,OAAAC,IAAAc,cAAAA,CAAa,KAAb,EAAmB,QAAnBA;MAxBFf,GAAAA,WAAAA,EAAmBgB,WAAnBhB;IAFgBD,GAAAA,WAAAA,EAAAA,IAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":41475,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/event/progress.rb"],"sourcesContent":["module Browser; class Event\n\nclass Progress < Event\n  handles 'progress', 'load', 'loadend', 'loadstart'\n\n  def self.supported?\n    Browser.supports? 'Event.Progress'\n  end\n\n  class Definition < Definition\n    def computable=(value)\n      `#@native.computableLength = #{value}`\n    end\n\n    def loaded=(value)\n      `#@native.loaded = #{value}`\n    end\n\n    def total=(value)\n      `#@native.total = #{value}`\n    end\n  end\n\n  if Browser.supports? 'Event.constructor'\n    def self.construct(name, desc)\n      `new ProgressEvent(#{name}, #{desc})`\n    end\n  elsif Browser.supports? 'Event.create'\n    def self.construct(name, desc)\n      %x{\n        var event = document.createEvent(\"ProgressEvent\");\n            event.initProgressEvent(name, desc.bubbles, desc.cancelable,\n              desc.computable, desc.loaded, desc.total);\n\n        return event;\n      }\n    end\n  end if supported?\n\n  alias_native :computable?, :computableLength\n  alias_native :loaded\n  alias_native :total\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<class:Event>","<class:Progress>","self","handles","supported?","Browser","supports?","<class:Definition>","computable=","value","@native","loaded=","total=","Definition","construct","name","desc","alias_native","Event"],"mappings":"AAAAA,yDAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAEhBA,OAAAC;MAAAA;;QAAAA;;;QACEC,IAAAC,SAAAA,CAAQF,UAAR,EAAoBA,MAApB,EAA4BA,SAA5B,EAAuCA,WAAvCE;QAEAC,MAAIF,IAAJE,iBAAAA,oCAAAA;AAAAA;UACEA,OAAAC,aAAOC,cAAAA,CAAWF,gBAAXE;QADTF,CAAAA,GAAAA;QAIAG;QAAAA;;UAAAA;;AAAAA;;;AACEC,UAAAA,2BAAAA,qCAAgBC,KAAhBD;AAAAA,YAAAA;;YACEA,OAAEE,cAAOF,oBAAsBC;UADjCD,CAAAA,GAAAA;;AAIAG,UAAAA,uBAAAA,iCAAYF,KAAZE;AAAAA,YAAAA;;YACEA,OAAED,cAAOC,UAAYF;UADvBE,CAAAA,GAAAA;UAIAJ,OAAAK,sBAAAA,gCAAWH,KAAXG;AAAAA,YAAAA;;YACEA,OAAEF,cAAOE,SAAWH;UADtBG,CAAAA,GAAAA;QATFL,GAAAA,WAAAA,EAAmBM,gBAAnBN;QAcA,IAAA,QAcOL,IAAAE,eAAAA,CAAAA,CAdP,CAAA;UAAA,IAAA,QAAGC,aAAOC,cAAAA,CAAWL,mBAAXK,CAAV,CAAA;YACEQ,MAAIZ,IAAJY,gBAAAA,qBAAmBC,IAAD,EAAOC,IAAzBF;AAAAA;cACEA,OAACA,kBAAoBC,IAAKD,EAAIE,IAAKF;YADrCA,CAAAA,GAAAA;UADF,OAIA,IAAA,QAAMT,aAAOC,cAAAA,CAAWL,cAAXK,CAAb,CAAA;YACEQ,MAAIZ,IAAJY,gBAAAA,qBAAmBC,IAAD,EAAOC,IAAzBF;AAAAA;;AAEJA;AACAA;AACAA;;AAEAA;AACAA;YAPIA,CAAAA,GAAAA;UADF;QAJA;QAgBAZ,IAAAe,cAAAA,CAAa,aAAb,EAA2B,kBAA3BA;QACAf,IAAAe,cAAAA,CAAa,QAAbA;QACAhB,OAAAC,IAAAe,cAAAA,CAAa,OAAbA;MAvCFhB,GAAAA,WAAAA,EAAiBiB,WAAjBjB;IAFgBD,GAAAA,WAAAA,EAAAA,IAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":41552,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/event/page_transition.rb"],"sourcesContent":["module Browser; class Event\n\nclass PageTransition < Event\n  handles 'pagehide', 'pageshow'\n\n  def self.supported?\n    Browser.supports? 'Event.PageTransition'\n  end\n\n  class Definition < Definition\n    def persisted=(value)\n      `#@native.persisted = #{value}`\n    end\n  end\n\n  if Browser.supports? 'Event.PageTransition'\n    def self.construct(name, desc)\n      `new PageTransitionEvent(name, desc)`\n    end\n  end if supported?\n\n  alias_native :persisted?, :persisted\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<class:Event>","<class:PageTransition>","self","handles","supported?","Browser","supports?","<class:Definition>","persisted=","value","@native","Definition","construct","name","desc","alias_native","Event"],"mappings":"AAAAA,gEAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAEhBA,OAAAC;MAAAA;;QAAAA;;;QACEC,IAAAC,SAAAA,CAAQF,UAAR,EAAoBA,UAApBE;QAEAC,MAAIF,IAAJE,iBAAAA,0CAAAA;AAAAA;UACEA,OAAAC,aAAOC,cAAAA,CAAWF,sBAAXE;QADTF,CAAAA,GAAAA;QAIAG;QAAAA;;UAAAA;;AAAAA;UACEA,OAAAC,0BAAAA,oCAAeC,KAAfD;AAAAA,YAAAA;;YACEA,OAAEE,cAAOF,aAAeC;UAD1BD,CAAAA,GAAAA;QADFD,GAAAA,WAAAA,EAAmBI,gBAAnBJ;QAMA,IAAA,QAIOL,IAAAE,eAAAA,CAAAA,CAJP,CAAA;UAAA,IAAA,QAAGC,aAAOC,cAAAA,CAAWL,sBAAXK,CAAV,CAAA;YACEM,MAAIV,IAAJU,gBAAAA,qBAAmBC,IAAD,EAAOC,IAAzBF;AAAAA;cACEA,OAACA,mCAADA;YADFA,CAAAA,GAAAA;UADF;QAAA;QAMAX,OAAAC,IAAAa,cAAAA,CAAa,YAAb,EAA0B,WAA1BA;MAnBFd,GAAAA,WAAAA,EAAuBe,WAAvBf;IAFgBD,GAAAA,WAAAA,EAAAA,IAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":41603,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/event/pop_state.rb"],"sourcesContent":["module Browser; class Event\n\nclass PopState < Event\n  handles 'popstate'\n\n  def self.supported?\n    Browser.supports? 'Event.PopState'\n  end\n\n  class Definition < Definition\n    def state=(value)\n      `#@native.state = #{value}`\n    end\n  end\n\n  if Browser.supports? 'Event.constructor'\n    def self.construct(name, desc)\n      `new PopStateEvent(#{name}, #{desc})`\n    end\n  elsif Browser.supports? 'Event.create'\n    def self.construct(name, desc)\n      %x{\n        var event = document.createEvent('PopStateEvent');\n            event.initPopStateEvent(name, desc.bubbles, desc.cancelable,\n              desc.state);\n\n        return event;\n      }\n    end\n  end if supported?\n\n  alias_native :state\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<class:Event>","<class:PopState>","self","handles","supported?","Browser","supports?","<class:Definition>","state=","value","@native","Definition","construct","name","desc","alias_native","Event"],"mappings":"AAAAA,0DAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAEhBA,OAAAC;MAAAA;;QAAAA;;;QACEC,IAAAC,SAAAA,CAAQF,UAARE;QAEAC,MAAIF,IAAJE,iBAAAA,oCAAAA;AAAAA;UACEA,OAAAC,aAAOC,cAAAA,CAAWF,gBAAXE;QADTF,CAAAA,GAAAA;QAIAG;QAAAA;;UAAAA;;AAAAA;UACEA,OAAAC,sBAAAA,gCAAWC,KAAXD;AAAAA,YAAAA;;YACEA,OAAEE,cAAOF,SAAWC;UADtBD,CAAAA,GAAAA;QADFD,GAAAA,WAAAA,EAAmBI,gBAAnBJ;QAMA,IAAA,QAcOL,IAAAE,eAAAA,CAAAA,CAdP,CAAA;UAAA,IAAA,QAAGC,aAAOC,cAAAA,CAAWL,mBAAXK,CAAV,CAAA;YACEM,MAAIV,IAAJU,gBAAAA,qBAAmBC,IAAD,EAAOC,IAAzBF;AAAAA;cACEA,OAACA,kBAAoBC,IAAKD,EAAIE,IAAKF;YADrCA,CAAAA,GAAAA;UADF,OAIA,IAAA,QAAMP,aAAOC,cAAAA,CAAWL,cAAXK,CAAb,CAAA;YACEM,MAAIV,IAAJU,gBAAAA,qBAAmBC,IAAD,EAAOC,IAAzBF;AAAAA;;AAEJA;AACAA;AACAA;;AAEAA;AACAA;YAPIA,CAAAA,GAAAA;UADF;QAJA;QAgBAX,OAAAC,IAAAa,cAAAA,CAAa,OAAbA;MA7BFd,GAAAA,WAAAA,EAAiBe,WAAjBf;IAFgBD,GAAAA,WAAAA,EAAAA,IAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":41665,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/event/storage.rb"],"sourcesContent":["module Browser; class Event\n\nclass Storage < Event\n  handles 'storage'\n\n  def self.supported?\n    Browser.supports? 'Event.Storage'\n  end\n\n  class Definition < Definition\n    def key=(value)\n      `#@native.key = #{value}`\n    end\n\n    def new=(value)\n      `#@native.newValue = #{value}`\n    end\n\n    def old=(value)\n      `#@native.oldValue = #{value}`\n    end\n\n    def area=(value)\n      `#@native.storageArea = #{value}`\n    end\n\n    def url=(value)\n      `#@native.url = #{value}`\n    end\n  end\n\n  if Browser.supports? 'Event.constructor'\n    def self.construct(name, desc)\n      `new StorageEvent(#{name}, #{desc})`\n    end\n  end if supported?\n\n  alias_native :key\n  alias_native :new, :newValue\n  alias_native :old, :oldValue\n  alias_native :area, :storageArea\n  alias_native :url\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<class:Event>","<class:Storage>","self","handles","supported?","Browser","supports?","<class:Definition>","key=","value","@native","new=","old=","area=","url=","Definition","construct","name","desc","alias_native","Event"],"mappings":"AAAAA,wDAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAEhBA,OAAAC;MAAAA;;QAAAA;;;QACEC,IAAAC,SAAAA,CAAQF,SAARE;QAEAC,MAAIF,IAAJE,iBAAAA,mCAAAA;AAAAA;UACEA,OAAAC,aAAOC,cAAAA,CAAWF,eAAXE;QADTF,CAAAA,GAAAA;QAIAG;QAAAA;;UAAAA;;AAAAA;;;AACEC,UAAAA,oBAAAA,8BAASC,KAATD;AAAAA,YAAAA;;YACEA,OAAEE,cAAOF,OAASC;UADpBD,CAAAA,GAAAA;;AAIAG,UAAAA,oBAAAA,8BAASF,KAATE;AAAAA,YAAAA;;YACEA,OAAED,cAAOC,YAAcF;UADzBE,CAAAA,GAAAA;;AAIAC,UAAAA,oBAAAA,8BAASH,KAATG;AAAAA,YAAAA;;YACEA,OAAEF,cAAOE,YAAcH;UADzBG,CAAAA,GAAAA;;AAIAC,UAAAA,qBAAAA,+BAAUJ,KAAVI;AAAAA,YAAAA;;YACEA,OAAEH,cAAOG,eAAiBJ;UAD5BI,CAAAA,GAAAA;UAIAN,OAAAO,oBAAAA,8BAASL,KAATK;AAAAA,YAAAA;;YACEA,OAAEJ,cAAOI,OAASL;UADpBK,CAAAA,GAAAA;QAjBFP,GAAAA,WAAAA,EAAmBQ,gBAAnBR;QAsBA,IAAA,QAIOL,IAAAE,eAAAA,CAAAA,CAJP,CAAA;UAAA,IAAA,QAAGC,aAAOC,cAAAA,CAAWL,mBAAXK,CAAV,CAAA;YACEU,MAAId,IAAJc,gBAAAA,qBAAmBC,IAAD,EAAOC,IAAzBF;AAAAA;cACEA,OAACA,iBAAmBC,IAAKD,EAAIE,IAAKF;YADpCA,CAAAA,GAAAA;UADF;QAAA;QAMAd,IAAAiB,cAAAA,CAAa,KAAbA;QACAjB,IAAAiB,cAAAA,CAAa,KAAb,EAAmB,UAAnBA;QACAjB,IAAAiB,cAAAA,CAAa,KAAb,EAAmB,UAAnBA;QACAjB,IAAAiB,cAAAA,CAAa,MAAb,EAAoB,aAApBA;QACAlB,OAAAC,IAAAiB,cAAAA,CAAa,KAAbA;MAvCFlB,GAAAA,WAAAA,EAAgBmB,WAAhBnB;IAFgBD,GAAAA,WAAAA,EAAAA,IAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":41745,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/event/touch.rb"],"sourcesContent":["module Browser; class Event\n\nclass Touch < Event\n  handles 'touchcancel', 'touchend', 'touchleave', 'touchmove', 'touchstart'\n\n  def self.supported?\n    Browser.supports? 'Event.Touch'\n  end\n\n  class Definition < Definition\n    def alt!\n      `#@native.altKey = true`\n    end\n\n    def ctrl!\n      `#@native.ctrlKey = true`\n    end\n\n    def meta!\n      `#@native.metaKey = true`\n    end\n\n    def shift!\n      `#@native.shiftKey = true`\n    end\n  end\n\n  if Browser.supports? 'Event.constructor'\n    def self.construct(name, desc)\n      `new TouchEvent(#{name}, #{desc})`\n    end\n  end if supported?\n\n  alias_native :alt?, :altKey\n  alias_native :ctrl?, :ctrlKey\n  alias_native :meta?, :metaKey\n  alias_native :shift?, :shiftKey\n\n  # TODO: implement touches and targetTouches\n\n  def cancel?\n    name.downcase == 'touchcancel'\n  end\n\n  def end?\n    name.downcase == 'touchend'\n  end\n\n  def leave?\n    name.downcase == 'touchleave'\n  end\n\n  def move?\n    name.downcase == 'touchmove'\n  end\n\n  def start?\n    name.downcase == 'touchstart'\n  end\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<class:Event>","<class:Touch>","self","handles","supported?","Browser","supports?","<class:Definition>","alt!","@native","ctrl!","meta!","shift!","Definition","construct","name","desc","alias_native","cancel?","downcase","==","end?","leave?","move?","start?","Event"],"mappings":"AAAAA,sDAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAEhBA,OAAAC;MAAAA;;QAAAA;;;QACEC,IAAAC,SAAAA,CAAQF,aAAR,EAAuBA,UAAvB,EAAmCA,YAAnC,EAAiDA,WAAjD,EAA8DA,YAA9DE;QAEAC,MAAIF,IAAJE,iBAAAA,iCAAAA;AAAAA;UACEA,OAAAC,aAAOC,cAAAA,CAAWF,aAAXE;QADTF,CAAAA,GAAAA;QAIAG;QAAAA;;UAAAA;;AAAAA;;;AACEC,UAAAA,oBAAAA,gCAAAA;AAAAA,YAAAA;;YACEA,OAAEC,cAAOD;UADXA,CAAAA,GAAAA;;AAIAE,UAAAA,qBAAAA,iCAAAA;AAAAA,YAAAA;;YACEA,OAAED,cAAOC;UADXA,CAAAA,GAAAA;;AAIAC,UAAAA,qBAAAA,iCAAAA;AAAAA,YAAAA;;YACEA,OAAEF,cAAOE;UADXA,CAAAA,GAAAA;UAIAJ,OAAAK,sBAAAA,kCAAAA;AAAAA,YAAAA;;YACEA,OAAEH,cAAOG;UADXA,CAAAA,GAAAA;QAbFL,GAAAA,WAAAA,EAAmBM,gBAAnBN;QAkBA,IAAA,QAIOL,IAAAE,eAAAA,CAAAA,CAJP,CAAA;UAAA,IAAA,QAAGC,aAAOC,cAAAA,CAAWL,mBAAXK,CAAV,CAAA;YACEQ,MAAIZ,IAAJY,gBAAAA,qBAAmBC,IAAD,EAAOC,IAAzBF;AAAAA;cACEA,OAACA,eAAiBC,IAAKD,EAAIE,IAAKF;YADlCA,CAAAA,GAAAA;UADF;QAAA;QAMAZ,IAAAe,cAAAA,CAAa,MAAb,EAAoB,QAApBA;QACAf,IAAAe,cAAAA,CAAa,OAAb,EAAqB,SAArBA;QACAf,IAAAe,cAAAA,CAAa,OAAb,EAAqB,SAArBA;QACAf,IAAAe,cAAAA,CAAa,QAAb,EAAsB,UAAtBA;;AAIAC,QAAAA,uBAAAA,8BAAAA;AAAAA,UAAAA;;UACEA,OAAAhB,IAAAa,MAAAA,CAAAA,CAAII,UAAAA,CAAAA,CAAUC,OAAAA,CAAGF,aAAHE;QADhBF,CAAAA,GAAAA;;AAIAG,QAAAA,oBAAAA,2BAAAA;AAAAA,UAAAA;;UACEA,OAAAnB,IAAAa,MAAAA,CAAAA,CAAII,UAAAA,CAAAA,CAAUC,OAAAA,CAAGC,UAAHD;QADhBC,CAAAA,GAAAA;;AAIAC,QAAAA,sBAAAA,6BAAAA;AAAAA,UAAAA;;UACEA,OAAApB,IAAAa,MAAAA,CAAAA,CAAII,UAAAA,CAAAA,CAAUC,OAAAA,CAAGE,YAAHF;QADhBE,CAAAA,GAAAA;;AAIAC,QAAAA,qBAAAA,4BAAAA;AAAAA,UAAAA;;UACEA,OAAArB,IAAAa,MAAAA,CAAAA,CAAII,UAAAA,CAAAA,CAAUC,OAAAA,CAAGG,WAAHH;QADhBG,CAAAA,GAAAA;QAIAtB,OAAAuB,sBAAAA,8BAAAA;AAAAA,UAAAA;;UACEA,OAAAtB,IAAAa,MAAAA,CAAAA,CAAII,UAAAA,CAAAA,CAAUC,OAAAA,CAAGI,YAAHJ;QADhBI,CAAAA,GAAAA;MAtDFvB,GAAAA,WAAAA,EAAcwB,WAAdxB;IAFgBD,GAAAA,WAAAA,EAAAA,IAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":41847,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/event/sensor.rb"],"sourcesContent":["module Browser; class Event\n\nclass Sensor < Event\n  handles 'compassneedscalibration', 'userproximity'\n\n  def self.supported?\n    Browser.supports? 'Event.Sensor'\n  end\n\n  if Browser.supports? 'Event.constructor'\n    def self.construct(name, desc)\n      `new SensorEvent(#{name}, #{desc})`\n    end\n  end if supported?\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<class:Event>","<class:Sensor>","self","handles","supported?","Browser","supports?","construct","name","desc","Event"],"mappings":"AAAAA,uDAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAEhBA,OAAAC;MAAAA;;QAAAA;;;QACEC,IAAAC,SAAAA,CAAQF,yBAAR,EAAmCA,eAAnCE;QAEAC,MAAIF,IAAJE,iBAAAA,kCAAAA;AAAAA;UACEA,OAAAC,aAAOC,cAAAA,CAAWF,cAAXE;QADTF,CAAAA,GAAAA;QAIA,IAAA,QAIOF,IAAAE,eAAAA,CAAAA,CAJP,CAAA;UAAA,IAAA,QAAGC,aAAOC,cAAAA,CAAWL,mBAAXK,CAAV,CAAA;YACEL,OAAAM,MAAIL,IAAJK,gBAAAA,qBAAmBC,IAAD,EAAOC,IAAzBF;AAAAA;cACEA,OAACA,gBAAkBC,IAAKD,EAAIE,IAAKF;YADnCA,CAAAA,GAAAA;UADF;YATFN,OAAA;UASE;QAAA;UATFA,OAAA;QASE;MAPFA,GAAAA,WAAAA,EAAeS,WAAfT;IAFgBD,GAAAA,WAAAA,EAAAA,IAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":41889,"column":0},"map":{"version":3,"sourceRoot":"","sources":["buffer/array.rb"],"sourcesContent":["class Buffer\n  class Array\n    include Native::Wrapper\n\n    def self.for(bits, type)\n      $$[\"#{Buffer.name_for bits, type}Array\"]\n    end\n\n    include Enumerable\n\n    attr_reader :buffer, :type\n\n    def initialize(buffer, bits = nil, type = nil)\n      if Native == buffer\n        super(buffer)\n      else\n        %x{\n          var klass = #{Array.for(bits, type)};\n\n          #{super(`new klass(#{buffer.to_n})`)}\n        }\n      end\n\n      @buffer = buffer\n      @type   = type\n    end\n\n    def bits\n      `#{@native}.BYTES_PER_ELEMENT * 8`\n    end\n\n    def [](index, offset = nil)\n      offset ? `#{@native}.subarray(index, offset)` : `#{@native}[index]`\n    end\n\n    def []=(index, value)\n      `#{@native}[index] = value`\n    end\n\n    def bytesize\n      `#{@native}.byteLength`\n    end\n\n    def each\n      return enum_for :each unless block_given?\n\n      %x{\n        for (var i = 0, length = #{@native}.length; i < length; i++) {\n          #{yield `#{@native}[i]`}\n        }\n      }\n\n      self\n    end\n\n    def length\n      `#{@native}.length`\n    end\n\n    def merge!(other, offset = undefined)\n      `#{@native}.set(#{other.to_n}, offset)`\n    end\n\n    alias size length\n  end\nend\n"],"names":["<top (required)>","<class:Buffer>","<class:Array>","self","include","Native::Wrapper","Native","for","bits","type","$$","[]","Buffer","name_for","Enumerable","attr_reader","initialize","buffer","Array","to_n","@buffer","@type","@native","index","offset","[]=","value","bytesize","each","block_given?","enum_for","length","merge!","other"],"mappings":"AAAAA,+CAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;AAAAA;;MACEC,IAAAC,SAAAA,CAAQC,IAAAC,YAAAD,YAARD;MAEAG,MAAIJ,IAAJI,UAAAA,sBAAaC,IAAD,EAAOC,IAAnBF;AAAAA,QAAAA;;QACEA,OAAAG,QAAEC,OAAAA,CAAC,EAAA,GAAA,CAAGC,YAAMC,UAAAA,CAAUL,IAAhB,EAAsBC,IAAhBI,CAAT,CAAA,GAA8BN,OAA/BI;MADJJ,CAAAA,GAAAA;MAIAJ,IAAAC,SAAAA,CAAQU,gBAARV;MAEAD,IAAAY,aAAAA,CAAY,QAAZ,EAAqB,MAArBA;;AAEAC,MAAAA,0BAAAA,sBAAeC,MAAD,EAAST,IAAT,EAAqBC,IAAnCO;AAAAA,QAAAA;;QAAAA;;;QAAuB,yBAAO,GAAP;;QAAY,yBAAO,GAAP;QACjC,IAAA,MAAGV,YAAH,EAAaW,MAAb,CAAA;UACE,OAAAd,IAAA,EAAA,0DAAA,cAAA,EAAA,CAAMc,MAAN,CAAA,EAAA,IAAA;QADF;;AAIND,sBAAwBE,WAAKX,KAAAA,CAAKC,IAAV,EAAgBC,IAAXF,CAAiBS;;AAE9CA,UAAY,OAAAb,IAAA,EAAA,0DAAA,cAAA,EAAA,CAAOa,UAAYC,MAAME,MAAAA,CAAAA,CAAMH,CAA/B,CAAA,EAAA,IAAA;AACZA;QAPM;QAUAI,cAAUH;QACVD,OAAAK,CAAAA,YAAUZ,IAAVY;MAZFL,CAAAA,IAAAA;;AAeAR,MAAAA,oBAAAA,gBAAAA;AAAAA,QAAAA;;QACEA,OAAGc,cAAQd;MADbA,CAAAA,GAAAA;;AAIAG,MAAAA,kBAAAA,qBAAOY,KAAD,EAAQC,MAAdb;AAAAA,QAAAA;;;;QAAc,6BAAS,GAAT;QACZ,IAAA,QAAAa,MAAA,CAAA;UAASb,OAAGW,cAAQX;QAApB;UAAgDA,OAAGW,cAAQX;QAA3D;MADFA,CAAAA,IAAAA;;AAIAc,MAAAA,mBAAAA,wBAAQF,KAAD,EAAQG,KAAfD;AAAAA,QAAAA;;QACEA,OAAGH,cAAQG;MADbA,CAAAA,GAAAA;;AAIAE,MAAAA,wBAAAA,oBAAAA;AAAAA,QAAAA;;QACEA,OAAGL,cAAQK;MADbA,CAAAA,GAAAA;;AAIAC,MAAAA,oBAAAA,gBAAAA;AAAAA,QAAAA;;QAAAA;;QACE,KAA6BC,gBAA7B;UAAA,OAAO1B,IAAA2B,UAAAA,CAAS,MAATA;QAAP;;AAGNF,iCAAmCN,cAAQM;AAC3CA,UAAY,oBAASN,cAAQM,GAAjB;AACZA;AACAA;QAEMA,OAAAzB;MATFyB,CAAAA,GAAAA;;AAYAG,MAAAA,sBAAAA,kBAAAA;AAAAA,QAAAA;;QACEA,OAAGT,cAAQS;MADbA,CAAAA,GAAAA;;AAIAC,MAAAA,sBAAAA,6BAAWC,KAAD,EAAQT,MAAlBQ;AAAAA,QAAAA;;;;QACEA,OAAGV,cAAQU,KAAOC,KAAKd,MAAAA,CAAAA,CAAMa;MAD/BA,CAAAA,IAAAA;MAIA9B,OAAA,aAAM,MAAN,EAAW,QAAX;IA9DFA,GAAAA,WAAAA,EAAAA,IAAAA;EADFD,GAAAA,WAAAA,EAAAA,IAAAA;AAAAD;"}},{"offset":{"line":42001,"column":0},"map":{"version":3,"sourceRoot":"","sources":["buffer/view.rb"],"sourcesContent":["class Buffer\n  class View\n    include Native::Wrapper\n\n    def self.supported?\n      !$$[:DataView].nil?\n    end\n\n    attr_reader :buffer, :offset\n\n    def initialize(buffer, offset = nil, length = nil)\n      if native?(buffer)\n        super(buffer)\n      elsif offset && length\n        super(`new DataView(#{buffer.to_n}, #{offset.to_n}, #{length.to_n})`)\n      elsif offset\n        super(`new DataView(#{buffer.to_n}, #{offset.to_n})`)\n      else\n        super(`new DataView(#{buffer.to_n})`)\n      end\n\n      @buffer = buffer\n      @offset = offset\n    end\n\n    def length\n      `#{@native}.byteLength`\n    end\n\n    def get(offset, bits = 8, type = :unsigned, little = false)\n      `#{@native}[\"get\" + #{Buffer.name_for bits, type}](offset, little)`\n    end\n\n    alias [] get\n\n    def set(offset, value, bits = 8, type = :unsigned, little = false)\n      `#{@native}[\"set\" + #{Buffer.name_for bits, type}](offset, value, little)`\n    end\n\n    alias []= set\n\n    def get_int8(offset, little = false)\n      `#{@native}.getInt8(offset, little)`\n    end\n\n    def set_int8(offset, value, little = false)\n      `#{@native}.setInt8(offset, value, little)`\n    end\n\n    def get_uint8(offset, little = false)\n      `#{@native}.getUint8(offset, little)`\n    end\n\n    def set_uint8(offset, value, little = false)\n      `#{@native}.setUint8(offset, value, little)`\n    end\n\n    def get_int16(offset, little = false)\n      `#{@native}.getInt16(offset, little)`\n    end\n\n    def set_int16(offset, value, little = false)\n      `#{@native}.setInt16(offset, value, little)`\n    end\n\n    def get_uint16(offset, little = false)\n      `#{@native}.getUint16(offset, little)`\n    end\n\n    def set_uint16(offset, value, little = false)\n      `#{@native}.setUint16(offset, value, little)`\n    end\n\n    def get_int32(offset, little = false)\n      `#{@native}.getInt32(offset, little)`\n    end\n\n    def set_int32(offset, value, little = false)\n      `#{@native}.setInt32(offset, value, little)`\n    end\n\n    def get_uint32(offset, little = false)\n      `#{@native}.getUint32(offset, little)`\n    end\n\n    def set_uint32(offset, value, little = false)\n      `#{@native}.setUint32(offset, value, little)`\n    end\n\n    def get_float32(offset, little = false)\n      `#{@native}.getFloat32(offset, little)`\n    end\n\n    def set_float32(offset, value, little = false)\n      `#{@native}.setFloat32(offset, value, little)`\n    end\n\n    def get_float64(offset, little = false)\n      `#{@native}.getFloat64(offset, little)`\n    end\n\n    def set_float64(offset, value, little = false)\n      `#{@native}.setFloat64(offset, value, little)`\n    end\n\n    alias size length\n  end\nend\n"],"names":["<top (required)>","<class:Buffer>","<class:View>","self","include","Native::Wrapper","Native","supported?","$$","[]","nil?","!","attr_reader","initialize","buffer","offset","length","native?","to_n","@buffer","@offset","@native","get","bits","type","little","8","Buffer","name_for","set","value","get_int8","set_int8","get_uint8","set_uint8","get_int16","set_int16","get_uint16","set_uint16","get_int32","set_int32","get_uint32","set_uint32","get_float32","set_float32","get_float64","set_float64"],"mappings":"AAAAA,8CAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IACEA,OAAAC;IAAAA;;MAAAA;;AAAAA;;MACEC,IAAAC,SAAAA,CAAQC,IAAAC,YAAAD,YAARD;MAEAG,MAAIJ,IAAJI,iBAAAA,gCAAAA;AAAAA,QAAAA;;QACEA,OAACC,QAAEC,OAAAA,CAAC,UAADA,CAAWC,SAAAA,CAAAA,CAAdC,MAAAA,CAAAA;MADFJ,CAAAA,GAAAA;MAIAJ,IAAAS,aAAAA,CAAY,QAAZ,EAAqB,QAArBA;;AAEAC,MAAAA,0BAAAA,sBAAeC,MAAD,EAASC,MAAT,EAAuBC,MAArCH;AAAAA,QAAAA;;QAAAA;;;QAAuB,6BAAS,GAAT;;QAAc,6BAAS,GAAT;QACnC,IAAA,QAAGV,IAAAc,YAAAA,CAAQH,MAARG,CAAH,CAAA;UACE,OAAAd,IAAA,EAAA,0DAAA,cAAA,EAAA,CAAMW,MAAN,CAAA,EAAA,IAAA;QADF,OAEA,IAAM,CAAA,QAAAC,MAAA,CAAA,IAAA,CAAA,QAAUC,MAAV,CAAA,CAAA,CAAN;UACE,OAAAb,IAAA,EAAA,0DAAA,cAAA,EAAA,CAAOU,aAAeC,MAAMI,MAAAA,CAAAA,CAAML,EAAIE,MAAMG,MAAAA,CAAAA,CAAML,EAAIG,MAAME,MAAAA,CAAAA,CAAML,CAAlE,CAAA,EAAA,IAAA;QADF,OAEA,IAAA,QAAME,MAAN,CAAA;UACE,OAAAZ,IAAA,EAAA,0DAAA,cAAA,EAAA,CAAOU,aAAeC,MAAMI,MAAAA,CAAAA,CAAML,EAAIE,MAAMG,MAAAA,CAAAA,CAAML,CAAlD,CAAA,EAAA,IAAA;QADF;UAGE,OAAAV,IAAA,EAAA,0DAAA,cAAA,EAAA,CAAOU,aAAeC,MAAMI,MAAAA,CAAAA,CAAML,CAAlC,CAAA,EAAA,IAAA;QAHF;QAMAM,cAAUL;QACVD,OAAAO,CAAAA,cAAUL,MAAVK;MAZFP,CAAAA,IAAAA;;AAeAG,MAAAA,sBAAAA,kBAAAA;AAAAA,QAAAA;;QACEA,OAAGK,cAAQL;MADbA,CAAAA,GAAAA;;AAIAM,MAAAA,mBAAAA,eAAQP,MAAD,EAASQ,IAAT,EAAmBC,IAAnB,EAAqCC,MAA5CH;AAAAA,QAAAA;;;;QAAgB,yBAAOI,CAAP;;QAAU,yBAAO,UAAP;;QAAkB,6BAAS,KAAT;QAC1CJ,OAAGD,cAAQC,SAAWK,YAAMC,UAAAA,CAAUL,IAAhB,EAAsBC,IAAhBI,CAAqBN;MADnDA,CAAAA,IAAAA;MAIA,aAAM,IAAN,EAAS,KAAT;;AAEAO,MAAAA,mBAAAA,eAAQd,MAAD,EAASe,KAAT,EAAgBP,IAAhB,EAA0BC,IAA1B,EAA4CC,MAAnDI;AAAAA,QAAAA;;;;QAAuB,yBAAOH,CAAP;;QAAU,yBAAO,UAAP;;QAAkB,6BAAS,KAAT;QACjDG,OAAGR,cAAQQ,SAAWF,YAAMC,UAAAA,CAAUL,IAAhB,EAAsBC,IAAhBI,CAAqBC;MADnDA,CAAAA,IAAAA;MAIA,aAAM,KAAN,EAAU,KAAV;;AAEAE,MAAAA,wBAAAA,oBAAahB,MAAD,EAASU,MAArBM;AAAAA,QAAAA;;;;QAAqB,6BAAS,KAAT;QACnBA,OAAGV,cAAQU;MADbA,CAAAA,IAAAA;;AAIAC,MAAAA,wBAAAA,oBAAajB,MAAD,EAASe,KAAT,EAAgBL,MAA5BO;AAAAA,QAAAA;;;;QAA4B,6BAAS,KAAT;QAC1BA,OAAGX,cAAQW;MADbA,CAAAA,IAAAA;;AAIAC,MAAAA,yBAAAA,qBAAclB,MAAD,EAASU,MAAtBQ;AAAAA,QAAAA;;;;QAAsB,6BAAS,KAAT;QACpBA,OAAGZ,cAAQY;MADbA,CAAAA,IAAAA;;AAIAC,MAAAA,yBAAAA,qBAAcnB,MAAD,EAASe,KAAT,EAAgBL,MAA7BS;AAAAA,QAAAA;;;;QAA6B,6BAAS,KAAT;QAC3BA,OAAGb,cAAQa;MADbA,CAAAA,IAAAA;;AAIAC,MAAAA,yBAAAA,qBAAcpB,MAAD,EAASU,MAAtBU;AAAAA,QAAAA;;;;QAAsB,6BAAS,KAAT;QACpBA,OAAGd,cAAQc;MADbA,CAAAA,IAAAA;;AAIAC,MAAAA,yBAAAA,qBAAcrB,MAAD,EAASe,KAAT,EAAgBL,MAA7BW;AAAAA,QAAAA;;;;QAA6B,6BAAS,KAAT;QAC3BA,OAAGf,cAAQe;MADbA,CAAAA,IAAAA;;AAIAC,MAAAA,0BAAAA,sBAAetB,MAAD,EAASU,MAAvBY;AAAAA,QAAAA;;;;QAAuB,6BAAS,KAAT;QACrBA,OAAGhB,cAAQgB;MADbA,CAAAA,IAAAA;;AAIAC,MAAAA,0BAAAA,sBAAevB,MAAD,EAASe,KAAT,EAAgBL,MAA9Ba;AAAAA,QAAAA;;;;QAA8B,6BAAS,KAAT;QAC5BA,OAAGjB,cAAQiB;MADbA,CAAAA,IAAAA;;AAIAC,MAAAA,yBAAAA,qBAAcxB,MAAD,EAASU,MAAtBc;AAAAA,QAAAA;;;;QAAsB,6BAAS,KAAT;QACpBA,OAAGlB,cAAQkB;MADbA,CAAAA,IAAAA;;AAIAC,MAAAA,yBAAAA,qBAAczB,MAAD,EAASe,KAAT,EAAgBL,MAA7Be;AAAAA,QAAAA;;;;QAA6B,6BAAS,KAAT;QAC3BA,OAAGnB,cAAQmB;MADbA,CAAAA,IAAAA;;AAIAC,MAAAA,0BAAAA,sBAAe1B,MAAD,EAASU,MAAvBgB;AAAAA,QAAAA;;;;QAAuB,6BAAS,KAAT;QACrBA,OAAGpB,cAAQoB;MADbA,CAAAA,IAAAA;;AAIAC,MAAAA,0BAAAA,sBAAe3B,MAAD,EAASe,KAAT,EAAgBL,MAA9BiB;AAAAA,QAAAA;;;;QAA8B,6BAAS,KAAT;QAC5BA,OAAGrB,cAAQqB;MADbA,CAAAA,IAAAA;;AAIAC,MAAAA,2BAAAA,uBAAgB5B,MAAD,EAASU,MAAxBkB;AAAAA,QAAAA;;;;QAAwB,6BAAS,KAAT;QACtBA,OAAGtB,cAAQsB;MADbA,CAAAA,IAAAA;;AAIAC,MAAAA,2BAAAA,uBAAgB7B,MAAD,EAASe,KAAT,EAAgBL,MAA/BmB;AAAAA,QAAAA;;;;QAA+B,6BAAS,KAAT;QAC7BA,OAAGvB,cAAQuB;MADbA,CAAAA,IAAAA;;AAIAC,MAAAA,2BAAAA,uBAAgB9B,MAAD,EAASU,MAAxBoB;AAAAA,QAAAA;;;;QAAwB,6BAAS,KAAT;QACtBA,OAAGxB,cAAQwB;MADbA,CAAAA,IAAAA;;AAIAC,MAAAA,2BAAAA,uBAAgB/B,MAAD,EAASe,KAAT,EAAgBL,MAA/BqB;AAAAA,QAAAA;;;;QAA+B,6BAAS,KAAT;QAC7BA,OAAGzB,cAAQyB;MADbA,CAAAA,IAAAA;MAIA5C,OAAA,aAAM,MAAN,EAAW,QAAX;IAxGFA,GAAAA,WAAAA,EAAAA,IAAAA;EADFD,GAAAA,WAAAA,EAAAA,IAAAA;AAAAD;"}},{"offset":{"line":42229,"column":0},"map":{"version":3,"sourceRoot":"","sources":["./buffer.rb"],"sourcesContent":["require 'native'\nrequire 'buffer/array'\nrequire 'buffer/view'\n\nclass Buffer\n  include Native::Wrapper\n\n  def self.supported?\n    !$$[:ArrayBuffer].nil?\n  end\n\n  def self.name_for(bits, type)\n    part = case type\n           when :unsigned then 'Uint'\n           when :signed   then 'Int'\n           when :float    then 'Float'\n           end\n    \"#{part}#{bits}\"\n  end\n\n  def initialize(size, bits = 8)\n    if native?(size)\n      super(size)\n    else\n      super(`new ArrayBuffer(size * (bits / 8))`)\n    end\n  end\n\n  def length\n    `#{@native}.byteLength`\n  end\n\n  def to_a(bits = 8, type = :unsigned)\n    Array.new(self, bits, type)\n  end\n\n  def view(offset = nil, length = nil)\n    View.new(self, offset, length)\n  end\n\n  def to_s\n    to_a.to_a.pack('c*')\n  end\n\n  alias size length\nend\n"],"names":["<top (required)>","self","require","<class:Buffer>","include","Native::Wrapper","Native","supported?","$$","[]","nil?","!","name_for","bits","type","part","$ret_or_1","initialize","size","8","native?","length","@native","to_a","Array","new","view","offset","View","to_s","pack"],"mappings":"AAAAA,yCAAAA;EAAAA;;EAAAA;;EAAAC,IAAAC,SAAAA,CAAQF,QAARE;EACAD,IAAAC,SAAAA,CAAQF,cAARE;EACAD,IAAAC,SAAAA,CAAQF,aAARE;EAEAF,OAAAG;EAAAA;;IAAAA;;AAAAA;;IACEF,IAAAG,SAAAA,CAAQC,IAAAC,YAAAD,YAARD;IAEAG,MAAIN,IAAJM,iBAAAA,kCAAAA;AAAAA,MAAAA;;MACEA,OAACC,QAAEC,OAAAA,CAAC,aAADA,CAAcC,SAAAA,CAAAA,CAAjBC,MAAAA,CAAAA;IADFJ,CAAAA,GAAAA;IAIAK,MAAIX,IAAJW,eAAAA,oBAAkBC,IAAD,EAAOC,IAAxBF;AAAAA,MAAAA;;;MACEG,OACO,CAAA,QAAK,UAAL,EADAC,CAAAA,YAAKF,IAALE,CACA,CAAA,GAAA,CAAoBJ,MAApB,IACA,CAAA,QAAK,QAAL,EAdX,SAcW,CAAA,GAAA,CAAoBA,KAApB,IACA,CAAA,QAAK,OAAL,EAfX,SAeW,CAAA,GAAA,CAAoBA,OAApB,IAAA,CAHA,GAGA,CAAA,CADA,CADA;MAIPA,OAAA,EAAA,GAAA,CAAGG,IAAH,CAAA,GAAA,CAAUF,IAAV;IANFD,CAAAA,GAAAA;;AASAK,IAAAA,0BAAAA,sBAAeC,IAAD,EAAOL,IAArBI;AAAAA,MAAAA;;MAAAA;;;MAAqB,yBAAOE,CAAP;MACnB,IAAA,QAAGlB,IAAAmB,YAAAA,CAAQF,IAARE,CAAH,CAAA;QACEH,OAAA,OAAAhB,IAAA,EAAA,0DAAA,cAAA,EAAA,CAAMiB,IAAN,CAAA,EAAA,IAAA;MADF;QAGED,OAAA,OAAAhB,IAAA,EAAA,0DAAA,cAAA,EAAA,CAAOgB,kCAAP,CAAA,EAAA,IAAA;MAHF;IADFA,CAAAA,IAAAA;;AAQAI,IAAAA,sBAAAA,kBAAAA;AAAAA,MAAAA;;MACEA,OAAGC,cAAQD;IADbA,CAAAA,GAAAA;;AAIAE,IAAAA,oBAAAA,gBAASV,IAAD,EAAWC,IAAnBS;AAAAA,MAAAA;;;;MAAS,yBAAOJ,CAAP;;MAAU,yBAAO,UAAP;MACjBI,OAAAC,WAAKC,KAAAA,CAAKxB,IAAV,EAAgBY,IAAhB,EAAsBC,IAAjBW;IADPF,CAAAA,IAAAA;;AAIAG,IAAAA,oBAAAA,gBAASC,MAAD,EAAeN,MAAvBK;AAAAA,MAAAA;;;;MAAS,6BAAS,GAAT;;MAAc,6BAAS,GAAT;MACrBA,OAAAE,UAAIH,KAAAA,CAAKxB,IAAT,EAAe0B,MAAf,EAAuBN,MAAnBI;IADNC,CAAAA,IAAAA;;AAIAG,IAAAA,oBAAAA,gBAAAA;AAAAA,MAAAA;;MACEA,OAAA5B,IAAAsB,MAAAA,CAAAA,CAAIA,MAAAA,CAAAA,CAAKO,MAAAA,CAAMD,IAANC;IADXD,CAAAA,GAAAA;IAIA1B,OAAA,aAAM,MAAN,EAAW,QAAX;EAxCFA,GAAAA,WAAAA,EAAAA,IAAAA;AAJAH;"}},{"offset":{"line":42309,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/event/message.rb"],"sourcesContent":["require 'buffer'\n\nmodule Browser; class Event\n\nclass Message < Event\n  handles 'message'\n\n  def self.supported?\n    Browser.supports? 'Event.Message'\n  end\n\n  class Definition < Definition\n    def data=(value)\n      `#@native.data = value`\n    end\n\n    def origin=(value)\n      `#@native.origin = value`\n    end\n\n    def source=(value)\n      `#@native.source = #{Native.convert(value)}`\n    end\n  end\n\n  if Browser.supports? 'Event.constructor'\n    def self.construct(name, desc)\n      `new MessageEvent(#{name}, #{desc})`\n    end\n  elsif Browser.supports? 'Event.create'\n    def self.construct(name, desc)\n      %x{\n        var event = document.createEvent(\"MessageEvent\");\n            event.initMessageEvent(name, desc.bubbles, desc.cancelable,\n              desc.data, desc.origin, \"\", desc.source || window);\n\n        return event;\n      }\n    end\n  end if supported?\n\n  def data\n    %x{\n      if (window.ArrayBuffer && #@native.data instanceof ArrayBuffer) {\n        return #{Buffer.new(`#@native.data`)};\n      }\n      else if (window.Blob && #@native.data instanceof Blob) {\n        return #{Blob.new(`#@native.data`)};\n      }\n      else {\n        return #@native.data;\n      }\n    }\n  end\n\n  alias_native :origin\n\n  def source\n    %x{\n      var source = #@native.source;\n\n      if (window.Window && source instanceof window.Window) {\n        return #{Window.new(`source`)};\n      }\n      else {\n        return nil;\n      }\n    }\n  end\nend\n\nend; end\n"],"names":["<top (required)>","self","require","<module:Browser>","<class:Event>","<class:Message>","handles","supported?","Browser","supports?","<class:Definition>","data=","value","@native","origin=","source=","Native","convert","Definition","construct","name","desc","data","Buffer","new","Blob","alias_native","source","Window","Event"],"mappings":"AAAAA,wDAAAA;EAAAA;;EAAAA;;EAAAC,IAAAC,SAAAA,CAAQF,QAARE;EAEAF,OAAAG;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAEhBA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QACEJ,IAAAK,SAAAA,CAAQD,SAARC;QAEAC,MAAIN,IAAJM,iBAAAA,mCAAAA;AAAAA;UACEA,OAAAC,aAAOC,cAAAA,CAAWF,eAAXE;QADTF,CAAAA,GAAAA;QAIAG;QAAAA;;UAAAA;;AAAAA;;;AACEC,UAAAA,qBAAAA,+BAAUC,KAAVD;AAAAA,YAAAA;;YACEA,OAAEE,cAAOF;UADXA,CAAAA,GAAAA;;AAIAG,UAAAA,uBAAAA,iCAAYF,KAAZE;AAAAA,YAAAA;;YACEA,OAAED,cAAOC;UADXA,CAAAA,GAAAA;UAIAJ,OAAAK,uBAAAA,iCAAYH,KAAZG;AAAAA,YAAAA;;YACEA,OAAEF,cAAOE,UAAYC,YAAMC,SAAAA,CAASL,KAATK;UAD7BF,CAAAA,GAAAA;QATFL,GAAAA,WAAAA,EAAmBQ,gBAAnBR;QAcA,IAAA,QAcOT,IAAAM,eAAAA,CAAAA,CAdP,CAAA;UAAA,IAAA,QAAGC,aAAOC,cAAAA,CAAWJ,mBAAXI,CAAV,CAAA;YACEU,MAAIlB,IAAJkB,gBAAAA,qBAAmBC,IAAD,EAAOC,IAAzBF;AAAAA;cACEA,OAACA,iBAAmBC,IAAKD,EAAIE,IAAKF;YADpCA,CAAAA,GAAAA;UADF,OAIA,IAAA,QAAMX,aAAOC,cAAAA,CAAWJ,cAAXI,CAAb,CAAA;YACEU,MAAIlB,IAAJkB,gBAAAA,qBAAmBC,IAAD,EAAOC,IAAzBF;AAAAA;;AAEJA;AACAA;AACAA;;AAEAA;AACAA;YAPIA,CAAAA,GAAAA;UADF;QAJA;;AAgBAG,QAAAA,oBAAAA,gBAAAA;AAAAA,UAAAA;;;AAEFA,gCAAiCT,cAAOS;AACxCA,eAAiBC,YAAMC,KAAAA,CAAOX,cAAOS,KAAdE,CAAsBF;AAC7CA;AACAA,8BAA+BT,cAAOS;AACtCA,eAAiBG,UAAID,KAAAA,CAAOX,cAAOS,KAAdE,CAAsBF;AAC3CA;AACAA;AACAA,eAAgBT,cAAOS;AACvBA;AACAA;QAXEA,CAAAA,GAAAA;QAcArB,IAAAyB,cAAAA,CAAa,QAAbA;QAEArB,OAAAsB,sBAAAA,kBAAAA;AAAAA,UAAAA;;;AAEFA,mBAAoBd,cAAOc;;AAE3BA;AACAA,eAAiBC,YAAMJ,KAAAA,CAAMG,MAANH,CAAeG;AACtCA;AACAA;AACAA;AACAA;AACAA;QAVEA,CAAAA,GAAAA;MArDFtB,GAAAA,WAAAA,EAAgBwB,WAAhBxB;IAFgBD,GAAAA,WAAAA,EAAAA,IAAAA;EAAhBD,GAAAA,WAAAA;AAFAH;"}},{"offset":{"line":42417,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/event/close.rb"],"sourcesContent":["module Browser; class Event\n\nclass Close < Event\n  handles 'close'\n\n  def self.supported?\n    Browser.supports? 'Event.Close'\n  end\n\n  class Definition < Definition\n    def code=(value)\n      `#@native.code = #{value}`\n    end\n\n    def reason=(value)\n      `#@native.reason = #{value}`\n    end\n\n    def clean!(value)\n      `#@native.wasClean = true`\n    end\n\n    def not_clean!(value)\n      `#@native.wasClean = false`\n    end\n  end\n\n  if Browser.supports? 'Event.constructor'\n    def self.construct(name, desc)\n      `new CloseEvent(#{name}, #{desc})`\n    end\n  elsif Browser.supports? 'Event.create'\n    def self.construct(name, desc)\n      %x{\n        var event = document.createEvent(\"CloseEvent\");\n            event.initCloseEvent(name, desc.bubbles, desc.cancelable,\n              desc.wasClean, desc.code, desc.reason);\n\n        return event;\n      }\n    end\n  end if supported?\n\n  alias_native :code\n  alias_native :reason\n  alias_native :clean?, :wasClean\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<class:Event>","<class:Close>","self","handles","supported?","Browser","supports?","<class:Definition>","code=","value","@native","reason=","clean!","not_clean!","Definition","construct","name","desc","alias_native","Event"],"mappings":"AAAAA,sDAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAEhBA,OAAAC;MAAAA;;QAAAA;;;QACEC,IAAAC,SAAAA,CAAQF,OAARE;QAEAC,MAAIF,IAAJE,iBAAAA,iCAAAA;AAAAA;UACEA,OAAAC,aAAOC,cAAAA,CAAWF,aAAXE;QADTF,CAAAA,GAAAA;QAIAG;QAAAA;;UAAAA;;AAAAA;;;AACEC,UAAAA,qBAAAA,+BAAUC,KAAVD;AAAAA,YAAAA;;YACEA,OAAEE,cAAOF,QAAUC;UADrBD,CAAAA,GAAAA;;AAIAG,UAAAA,uBAAAA,iCAAYF,KAAZE;AAAAA,YAAAA;;YACEA,OAAED,cAAOC,UAAYF;UADvBE,CAAAA,GAAAA;;AAIAC,UAAAA,sBAAAA,kCAAWH,KAAXG;AAAAA,YAAAA;;YACEA,OAAEF,cAAOE;UADXA,CAAAA,GAAAA;UAIAL,OAAAM,0BAAAA,sCAAeJ,KAAfI;AAAAA,YAAAA;;YACEA,OAAEH,cAAOG;UADXA,CAAAA,GAAAA;QAbFN,GAAAA,WAAAA,EAAmBO,gBAAnBP;QAkBA,IAAA,QAcOL,IAAAE,eAAAA,CAAAA,CAdP,CAAA;UAAA,IAAA,QAAGC,aAAOC,cAAAA,CAAWL,mBAAXK,CAAV,CAAA;YACES,MAAIb,IAAJa,gBAAAA,qBAAmBC,IAAD,EAAOC,IAAzBF;AAAAA;cACEA,OAACA,eAAiBC,IAAKD,EAAIE,IAAKF;YADlCA,CAAAA,GAAAA;UADF,OAIA,IAAA,QAAMV,aAAOC,cAAAA,CAAWL,cAAXK,CAAb,CAAA;YACES,MAAIb,IAAJa,gBAAAA,qBAAmBC,IAAD,EAAOC,IAAzBF;AAAAA;;AAEJA;AACAA;AACAA;;AAEAA;AACAA;YAPIA,CAAAA,GAAAA;UADF;QAJA;QAgBAb,IAAAgB,cAAAA,CAAa,MAAbA;QACAhB,IAAAgB,cAAAA,CAAa,QAAbA;QACAjB,OAAAC,IAAAgB,cAAAA,CAAa,QAAb,EAAsB,UAAtBA;MA3CFjB,GAAAA,WAAAA,EAAckB,WAAdlB;IAFgBD,GAAAA,WAAAA,EAAAA,IAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":42500,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/event/all.rb"],"sourcesContent":["# browser/event/all: Load support for all events\n\nrequire 'browser/event/focus'\nrequire 'browser/event/wheel'\nrequire 'browser/event/data_transfer'\nrequire 'browser/event/composition'\nrequire 'browser/event/animation'\nrequire 'browser/event/audio_processing'\nrequire 'browser/event/before_unload'\nrequire 'browser/event/composition'\nrequire 'browser/event/clipboard'\nrequire 'browser/event/device_light'\nrequire 'browser/event/device_motion'\nrequire 'browser/event/device_orientation'\nrequire 'browser/event/device_proximity'\nrequire 'browser/event/drag'\nrequire 'browser/event/gamepad'\nrequire 'browser/event/hash_change'\nrequire 'browser/event/progress'\nrequire 'browser/event/page_transition'\nrequire 'browser/event/pop_state'\nrequire 'browser/event/storage'\nrequire 'browser/event/touch'\nrequire 'browser/event/sensor'\nrequire 'browser/event/message'\nrequire 'browser/event/close'\n"],"names":["<top (required)>","self","require"],"mappings":"AAAAA,oDAAAA;EAAAA;;EAAAA;;EAEAC,IAAAC,SAAAA,CAAQF,qBAARE;EACAD,IAAAC,SAAAA,CAAQF,qBAARE;EACAD,IAAAC,SAAAA,CAAQF,6BAARE;EACAD,IAAAC,SAAAA,CAAQF,2BAARE;EACAD,IAAAC,SAAAA,CAAQF,yBAARE;EACAD,IAAAC,SAAAA,CAAQF,gCAARE;EACAD,IAAAC,SAAAA,CAAQF,6BAARE;EACAD,IAAAC,SAAAA,CAAQF,2BAARE;EACAD,IAAAC,SAAAA,CAAQF,yBAARE;EACAD,IAAAC,SAAAA,CAAQF,4BAARE;EACAD,IAAAC,SAAAA,CAAQF,6BAARE;EACAD,IAAAC,SAAAA,CAAQF,kCAARE;EACAD,IAAAC,SAAAA,CAAQF,gCAARE;EACAD,IAAAC,SAAAA,CAAQF,oBAARE;EACAD,IAAAC,SAAAA,CAAQF,uBAARE;EACAD,IAAAC,SAAAA,CAAQF,2BAARE;EACAD,IAAAC,SAAAA,CAAQF,wBAARE;EACAD,IAAAC,SAAAA,CAAQF,+BAARE;EACAD,IAAAC,SAAAA,CAAQF,yBAARE;EACAD,IAAAC,SAAAA,CAAQF,uBAARE;EACAD,IAAAC,SAAAA,CAAQF,qBAARE;EACAD,IAAAC,SAAAA,CAAQF,sBAARE;EACAD,IAAAC,SAAAA,CAAQF,uBAARE;EACAF,OAAAC,IAAAC,SAAAA,CAAQF,qBAARE;AAzBAF;"}},{"offset":{"line":42531,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/dom/builder.rb"],"sourcesContent":["# Temporary fix for a bug in String#scan\nmodule Paggio::Utils\n  def self.heredoc(string)\n    string\n  end\nend\n\nclass Paggio::HTML::Element < BasicObject\n  def on(*args, &block)\n    (@on ||= []) << [args, block]\n  end\nend\n\nmodule Browser; module DOM\n\nclass Builder\n  def self.to_h\n    @builders ||= {}\n  end\n\n  def self.for(klass, &block)\n    if block\n      to_h[klass] = block\n    else\n      to_h[klass]\n    end\n  end\n\n  def self.build(builder, item)\n    to_h.each {|klass, block|\n      if klass === item\n        return block.call(builder, item)\n      end\n    }\n\n    raise ArgumentError, \"cannot build unknown item #{item}\"\n  end\n\n  attr_reader :document, :element\n\n  NEW_PAGGIO = (Paggio::HTML.instance_method(:build!) rescue false)\n\n  def initialize(document, builder=nil, &block)\n    @document = document\n\n    # Compatibility issue due to an unreleased Paggio gem.\n    # Let's try to support both versions. When Paggio is released,\n    # we may remove it.\n\n    if NEW_PAGGIO\n      @builder = Paggio::HTML.new(defer: true, &block)\n\n      build = proc do\n        @builder.build!(force_call: !!builder)\n        @roots = @builder.each.map { |e| Builder.build(self, e) }\n      end\n\n      if builder\n        builder.extend!(@builder, &build)\n      else\n        build.()\n      end\n    else\n      @builder = Paggio::HTML.new(&block)\n      @roots = @builder.each.map { |e| Builder.build(self, e) }\n    end\n  end\n\n  def to_a\n    @roots\n  end\nend\n\nBuilder.for String do |b, item|\n  b.document.create_text(item)\nend\n\nBuilder.for Paggio::HTML::Element do |b, item|\n  options = {}\n\n  options[:attrs] = `item.attributes` if Hash === `item.attributes`\n  options[:classes] = `item.class_names`\n\n  dom = b.document.create_element(`item.name`, **options)\n\n  if on = `item.on || nil`\n    on.each {|args, block|\n      dom.on(*args, &block)\n    }\n  end\n\n  if inner = `item.inner_html || nil`\n    dom.inner_html = inner\n  else\n    item.each {|child|\n      dom << Builder.build(b, child)\n    }\n  end\n\n  dom\nend\n\nBuilder.for DOM::Node do |b, item|\n  item\nend\n\nend; end\n"],"names":["<top (required)>","<module:Paggio::Utils>","heredoc","self","string","Paggio","<class:Paggio::HTML::Element>","on","@on","$ret_or_1","<<","args","block","Paggio::HTML","BasicObject","<module:Browser>","<module:DOM>","<class:Builder>","to_h","@builders","for","klass","$writer","[]=","-","1","[]","build","builder","item","each","block in build","call","block (2 levels) in build","raise","ArgumentError","attr_reader","instance_method","StandardError","initialize","document","@document","NEW_PAGGIO","@builder","new","to_proc","proc","block in initialize","block (2 levels) in initialize","build!","!","@roots","map","e","block (3 levels) in initialize","Builder","extend!","to_a","String","block in <module:DOM>","b","block (2 levels) in <module:DOM>","create_text","Paggio::HTML::Element","options","Hash","dom","create_element","block (3 levels) in <module:DOM>","inner","inner_html=","child","DOM::Node","DOM"],"mappings":"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"}},{"offset":{"line":42737,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/dom/element/custom.rb"],"sourcesContent":["# use_strict: true\n# helpers: truthy\n\nmodule Browser; module DOM; class Element < Node\n\n# CustomElements implementation for opal-browser. See examples/custom_elements/.\n#\n# @see https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements\n# @abstract This class should not be used directly. Please extend it and implement needed methods.\nclass Custom < Element\n  # The reason why we wrap class definition with an eval is kind of selfish. I want it to work\n  # with opal-optimizer which doesn't support the new class syntax. I would do it with prototypes,\n  # but the prototypes system is so messy I gave up.\n  #\n  # Therefore, for it to be cleaned up, one of those two must happen:\n  # - we raise the supported ES version in Opal and we implement those ES syntax features in\n  #   rkelly-turbo. And then we remove the polyfill.\n  # - we reimplement it in terms of prototypes.\n  %x{\n    var make_custom_class = Function('self,base_class',\n      '\"use strict\"; \\\n      var klass = class extends base_class { \\\n        constructor() { \\\n          super(); \\\n          self.$_dispatch_constructor(this); \\\n        } \\\n        connectedCallback() { \\\n          return this.$$opal_native_cached.$attached(); \\\n        } \\\n        disconnectedCallback() { \\\n          return this.$$opal_native_cached.$detached(); \\\n        } \\\n        adoptedCallback() { \\\n          return this.$$opal_native_cached.$adopted(); \\\n        } \\\n        attributeChangedCallback(attr, from, to) { \\\n          if (from === null) from = Opal.nil; \\\n          if (to === null) to = Opal.nil; \\\n          return this.$$opal_native_cached.$attribute_changed(attr, from, to); \\\n        } \\\n        \\\n        static get observedAttributes() { \\\n          return self.$observed_attributes(); \\\n        } \\\n      }; \\\n      klass.$$opal_class = self; \\\n      return klass;'\n    );\n  } if Browser.supports? 'Custom Elements' #'\n\n  module ClassMethods\n    if Browser.supports? 'Custom Elements'\n      # Defines a new custom element. This should come as the last call\n      # in the class definition, because at this point the methods may\n      # be called!\n      #\n      # @opalopt uses:_dispatch_constructor,attached,detached,adopted,attribute_changed,observed_attributes\n      def def_custom(tag_name, base_class: nil, extends: nil)\n        if `base_class !== nil`\n        elsif self.superclass == Custom\n          base_class = `HTMLElement`\n        elsif self.ancestors.include? Custom\n          base_class = `#{self.superclass}.custom_class`\n        else\n          raise ArgumentError, \"You must define base_class\"\n        end\n\n        @custom_class = `make_custom_class(self, #{base_class})`\n        @observed_attributes ||= []\n\n        def_selector tag_name\n\n        %x{\n          if ($truthy(#{extends})) customElements.define(#{tag_name}, #{@custom_class}, {extends: #{extends}});\n          else customElements.define(#{tag_name}, #{@custom_class});\n        }\n      end\n    elsif Browser.supports? 'MutationObserver'\n      # Can we polyfill it?\n      Browser::DOM::MutationObserver.new do |obs|\n        obs.each do |e|\n          target = e.target\n\n          case e.type\n          when :attribute\n            if Custom::Mixin === target && target.class.observed_attributes.include?(e.name)\n              target.attribute_changed(e.name, e.old, target[e.name])\n            end\n          when :tree\n            e.added.each { |n| n.attached_once if Custom::Mixin === n }\n            e.removed.each { |n| n.detached_once if Custom::Mixin === n }\n          end\n        end\n      end.observe($document, tree: true, children: true, attributes: :old)\n    end\n\n    unless Browser.supports? 'Custom Elements'\n      # The polyfilled implementation. Define the selector and then\n      # try to upgrade the elements that are already in the document.\n      def def_custom(tag_name, base_class: nil, extends: nil)\n        def_selector tag_name\n\n        $document.body.css(tag_name).each do |elem|\n          _dispatch_constructor(elem.to_n)&.attached_once\n        end\n      end\n    end\n\n    private def _dispatch_constructor(obj)\n      %x{\n        if (typeof obj.$$opal_native_cached !== 'undefined') {\n          delete obj.$$opal_native_cached;\n          return self.$new(obj);\n        }\n        else {\n          self.$new(obj);\n          return nil;\n        }\n      }\n    end\n\n    # This must be defined before def_custom is called!\n    attr_accessor :observed_attributes\n\n    attr_reader :custom_class\n  end\n\n  module Mixin\n    def self.included(klass)\n      klass.extend ClassMethods\n    end\n\n    # @abstract\n    def attached\n    end\n\n    # @abstract\n    def detached\n    end\n\n    # @abstract\n    def adopted\n    end\n\n    # Note: for this method to fire, you will need to define\n    # the observed attributes.\n    #\n    # @abstract\n    def attribute_changed(attr, from, to)\n    end\n\n    # Return true if the node is a custom element.\n    def custom?\n      true\n    end\n\n    # Those methods keep track of the attachment status of the elements,\n    # so that #attached/#detached isn't called twice.\n    unless Browser.supports? 'Custom Elements'\n      # @private\n      def attached_once\n        attached unless @_polyfill_attached\n        @_polyfill_attached = true\n      end\n\n      # @private\n      def detached_once\n        detached if @_polyfill_attached\n        @_polyfill_attached = false\n      end\n    end\n  end\n\n  include Mixin\nend\n\nend; end; end\n"],"names":["<top (required)>","<module:Browser>","<module:DOM>","<class:Element>","<class:Custom>","Browser","supports?","<module:ClassMethods>","def_custom","tag_name","$kwargs","self","superclass","Custom","base_class","ancestors","include?","raise","ArgumentError","@custom_class","@observed_attributes","$ret_or_1","def_selector","extends$","new","Browser::DOM::MutationObserver","Browser::DOM","block in <module:ClassMethods>","obs","block (2 levels) in <module:ClassMethods>","each","e","block (3 levels) in <module:ClassMethods>","target","type","Custom::Mixin","class","observed_attributes","name","attribute_changed","old","[]","added","n","block (4 levels) in <module:ClassMethods>","attached_once","removed","detached_once","observe","$document","body","css","block in def_custom","elem","block (2 levels) in def_custom","_dispatch_constructor","to_n","private","obj","attr_accessor","attr_reader","<module:Mixin>","included","klass","extend","ClassMethods","attached","detached","adopted","attr","from","to","custom?","@_polyfill_attached","include","Mixin","Element","Node"],"mappings":"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"}},{"offset":{"line":42995,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/canvas/style.rb"],"sourcesContent":["module Browser; class Canvas\n\nclass StyleObject\n  include Native::Wrapper\n\n  attr_reader :context\n\n  def initialize(context)\n    @context = context\n\n    super(@context.to_n)\n  end\nend\n\nclass Style < StyleObject\n  class Line < StyleObject\n    attr_reader :width, :cap, :join, :miter_limit\n\n    def width=(value)\n      `#@native.lineWidth = #{@width = value}`\n    end\n\n    def cap=(value)\n      `#@native.lineCap = #{@cap = value}`\n    end\n\n    def join=(value)\n      `#@native.lineJoin = #{@join = value}`\n    end\n\n    def miter_limit=(value)\n      `#@native.miterLimit = #{@miter_limit = value}`\n    end\n  end\n\n  class Text < StyleObject\n    attr_reader :font, :align, :baseline\n\n    def font=(value)\n      `#@native.font = #{@font = value}`\n    end\n\n    def align=(value)\n      `#@native.textAlign = #{@align = value}`\n    end\n\n    def baseline=(value)\n      `#@native.textBaseline = #{@baseline = value}`\n    end\n  end\n\n  class Image < StyleObject\n    attr_reader :smooth\n\n    alias smooth? smooth\n\n    def smooth!\n      `#@native.mozImageSmoothingEnabled = #{@smooth = true}`\n      `#@native.imageSmoothingEnabled = #{@smooth = true}`\n    end\n\n    def no_smooth!\n      `#@native.mozImageSmoothingEnabled = #{@smooth = false}`\n      `#@native.imageSmoothingEnabled = #{@smooth = false}`\n    end\n  end\n\n  class Shadow < StyleObject\n    attr_reader :offset, :blur, :color\n\n    def offset=(value)\n      `#@native.shadowOffsetX = #{value[:x]}`\n      `#@native.shadowOffsetY = #{value[:y]}`\n\n      @offset = value\n    end\n\n    def blur=(value)\n      `#@native.shadowBlur = #{@blur = value}`\n    end\n\n    def color=(value)\n      `#@native.shadowColor = #{@color = value}`\n    end\n  end\n\n  attr_reader :line, :text, :image, :shadow, :fill, :stroke, :alpha, :composite_operation\n\n  def initialize(context)\n    super(context)\n\n    @line   = Line.new(context)\n    @text   = Text.new(context)\n    @image  = Image.new(context)\n    @shadow = Shadow.new(context)\n  end\n\n  def fill=(value)\n    `#@native.fillStyle = #{(@fill = value).to_n}`\n  end\n\n  def stroke=(value)\n    `#@native.strokeStyle = #{(@stroke = value).to_n}`\n  end\n\n  def alpha=(value)\n    `#@native.globalAlpha = #{@alpha = value}`\n  end\n\n  def composite_operation=(value)\n    `#@native.globalCompositeOperation = #{@composite_operation = value}`\n  end\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<class:Canvas>","<class:StyleObject>","self","include","Native::Wrapper","Native","attr_reader","initialize","context","@context","to_n","<class:Style>","<class:Line>","width=","value","@native","@width","cap=","@cap","join=","@join","miter_limit=","@miter_limit","StyleObject","<class:Text>","font=","@font","align=","@align","baseline=","@baseline","<class:Image>","smooth!","@smooth","no_smooth!","<class:Shadow>","offset=","[]","@offset","blur=","@blur","color=","@color","@line","Line","new","@text","Text","@image","Image","@shadow","Shadow","fill=","@fill","stroke=","@stroke","alpha=","@alpha","composite_operation=","@composite_operation"],"mappings":"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"}},{"offset":{"line":43188,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/canvas/text.rb"],"sourcesContent":["module Browser; class Canvas\n\nclass Text\n  include Native::Wrapper\n\n  attr_reader :context\n\n  def initialize(context)\n    @context = context\n\n    super(@context.to_n)\n  end\n\n  def measure(text)\n    `#@native.measureText(text)`\n  end\n\n  def fill(text, x = nil, y = nil, max_width = nil)\n    x ||= 0\n    y ||= 0\n\n    if max_width\n      `#@native.fillText(text, x, y, max_width)`\n    else\n      `#@native.fillText(text, x, y)`\n    end\n\n    @context\n  end\n\n  def stroke(text, x = nil, y = nil, max_width = nil)\n    x ||= 0\n    y ||= 0\n\n    if max_width\n      `#@native.strokeText(text, x, y, max_width)`\n    else\n      `#@native.strokeText(text, x, y)`\n    end\n\n    @context\n  end\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<class:Canvas>","<class:Text>","self","include","Native::Wrapper","Native","attr_reader","initialize","context","@context","to_n","measure","text","@native","fill","x","y","max_width","$ret_or_1","0","stroke"],"mappings":"AAAAA,sDAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAEhBA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QACEC,IAAAC,SAAAA,CAAQC,IAAAC,YAAAD,YAARD;QAEAD,IAAAI,aAAAA,CAAY,SAAZA;;AAEAC,QAAAA,0BAAAA,sBAAeC,OAAfD;AAAAA,UAAAA;;UAAAA;;UACEE,eAAWD;UAEXD,OAAA,OAAAL,IAAA,EAAA,0DAAA,cAAA,EAAA,CAAMO,YAAQC,MAAAA,CAAAA,CAAd,CAAA,EAAA,IAAA;QAHFH,CAAAA,GAAAA;;AAMAI,QAAAA,uBAAAA,mBAAYC,IAAZD;AAAAA,UAAAA;;UACEA,OAAEE,cAAOF;QADXA,CAAAA,GAAAA;;AAIAG,QAAAA,oBAAAA,gBAASF,IAAD,EAAOG,CAAP,EAAgBC,CAAhB,EAAyBC,SAAjCH;AAAAA,UAAAA;;;;UAAe,mBAAI,GAAJ;;UAAS,mBAAI,GAAJ;;UAAS,mCAAY,GAAZ;UAC/BC,IAlBJ,CAAA,QAAAG,CAAAA,YAkBIH,CAlBJG,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAkBUC,CAlBV,CAAA;UAmBIH,IAnBJ,CAAA,QAAAE,CAAAA,YAmBIF,CAnBJE,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAmBUC,CAnBV,CAAA;UAqBI,IAAA,QAAGF,SAAH,CAAA;YACIJ,cAAOC;UADX;YAGID,cAAOC;UAHX;UAMAA,OAAAL;QAVFK,CAAAA,IAAAA;QAaAb,OAAAmB,sBAAAA,kBAAWR,IAAD,EAAOG,CAAP,EAAgBC,CAAhB,EAAyBC,SAAnCG;AAAAA,UAAAA;;;;UAAiB,mBAAI,GAAJ;;UAAS,mBAAI,GAAJ;;UAAS,mCAAY,GAAZ;UACjCL,IA/BJ,CAAA,QAAAG,CAAAA,YA+BIH,CA/BJG,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CA+BUC,CA/BV,CAAA;UAgCIH,IAhCJ,CAAA,QAAAE,CAAAA,YAgCIF,CAhCJE,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAgCUC,CAhCV,CAAA;UAkCI,IAAA,QAAGF,SAAH,CAAA;YACIJ,cAAOO;UADX;YAGIP,cAAOO;UAHX;UAMAA,OAAAX;QAVFW,CAAAA,IAAAA;MA5BFnB,GAAAA,WAAAA,EAAAA,IAAAA;IAFgBD,GAAAA,WAAAA,EAAAA,IAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":43270,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/canvas/data.rb"],"sourcesContent":["module Browser; class Canvas\n\nclass Data\n  def self.create(canvas, width, height)\n    data = allocate\n\n    data.instance_eval {\n      @canvas = canvas.to_a\n      @x      = 0\n      @y      = 0\n      @width  = width\n      @height = height\n\n      @native = `#{canvas.to_n}.createImageData(width, height)`\n    }\n\n    data\n  end\n\n  include Native::Wrapper\n\n  attr_reader :x, :y, :width, :height\n\n  def initialize(canvas, x, y, width, height)\n    @canvas = canvas.to_n\n    @x      = x\n    @y      = y\n    @width  = width\n    @height = height\n\n    super(`#@canvas.getImageData(x, y, width, height)`)\n  end\n\n  def length\n    `#@native.data.length`\n  end\n\n  def [](index)\n    `#@native.data[index]`\n  end\n\n  def []=(index, value)\n    `#@native.data[index] = value`\n  end\n\n  def save(x = nil, y = nil)\n    x ||= 0\n    y ||= 0\n\n    `#@canvas.putImageData(#@native, x, y)`\n  end\n\n  def save_to(canvas, x = nil, y = nil)\n    x ||= 0\n    y ||= 0\n\n    `#{canvas.to_n}.putImageData(#@native, x, y)`\n  end\n\n  alias size length\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<class:Canvas>","<class:Data>","create","self","canvas","width","height","data","allocate","instance_eval","block in create","block (2 levels) in create","@canvas","to_a","@x","0","@y","@width","@height","@native","to_n","include","Native::Wrapper","Native","attr_reader","initialize","x","y","length","[]","index","[]=","value","save","$ret_or_1","save_to"],"mappings":"AAAAA,sDAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAEhBA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QACEC,MAAIC,IAAJD,aAAAA,kBAAgBE,MAAD,EAASC,KAAT,EAAgBC,MAA/BJ;AAAAA,UAAAA;;;UACEK,OAAOJ,IAAAK,UAAAA,CAAAA;UAEHC,MAAJF,IAAIE,iBAAAA,EAAAA,EAAAA,EAAJC,aAAAA,EAAAC;;;YACEC,cAAUR,MAAMS,MAAAA,CAAAA;YAChBC,SAAUC;YACVC,SAAUD;YACVE,aAAUZ;YACVa,cAAUZ;YAEVK,OAAAQ,CAAAA,iBAAaf,MAAMgB,MAAAA,CAAAA,CAAMT,+BAAzBQ,EAPFT,CAAAA,GAAAA,qBAAAA,CAAID;UAUJP,OAAAK;QAbFL,CAAAA,GAAAA;QAgBAC,IAAAkB,SAAAA,CAAQC,IAAAC,YAAAD,YAARD;QAEAlB,IAAAqB,aAAAA,CAAY,GAAZ,EAAgB,GAAhB,EAAoB,OAApB,EAA4B,QAA5BA;;AAEAC,QAAAA,0BAAAA,sBAAerB,MAAD,EAASsB,CAAT,EAAYC,CAAZ,EAAetB,KAAf,EAAsBC,MAApCmB;AAAAA,UAAAA;;UAAAA;;UACEb,cAAUR,MAAMgB,MAAAA,CAAAA;UAChBN,SAAUY;UACVV,SAAUW;UACVV,aAAUZ;UACVa,cAAUZ;UAEVmB,OAAA,OAAAtB,IAAA,EAAA,0DAAA,cAAA,EAAA,CAAQS,WAAOa,kCAAf,CAAA,EAAA,IAAA;QAPFA,CAAAA,GAAAA;;AAUAG,QAAAA,sBAAAA,kBAAAA;AAAAA,UAAAA;;UACEA,OAAET,cAAOS;QADXA,CAAAA,GAAAA;;AAIAC,QAAAA,kBAAAA,oBAAOC,KAAPD;AAAAA,UAAAA;;UACEA,OAAEV,cAAOU;QADXA,CAAAA,GAAAA;;AAIAE,QAAAA,mBAAAA,uBAAQD,KAAD,EAAQE,KAAfD;AAAAA,UAAAA;;UACEA,OAAEZ,cAAOY;QADXA,CAAAA,GAAAA;;AAIAE,QAAAA,oBAAAA,gBAASP,CAAD,EAAUC,CAAlBM;AAAAA,UAAAA;;;;UAAS,mBAAI,GAAJ;;UAAS,mBAAI,GAAJ;UAChBP,IA9CJ,CAAA,QAAAQ,CAAAA,YA8CIR,CA9CJQ,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CA8CUnB,CA9CV,CAAA;UA+CIY,IA/CJ,CAAA,QAAAO,CAAAA,YA+CIP,CA/CJO,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CA+CUnB,CA/CV,CAAA;UAiDIkB,OAAErB,WAAOqB,cAAed,cAAOc;QAJjCA,CAAAA,IAAAA;;AAOAE,QAAAA,uBAAAA,mBAAY/B,MAAD,EAASsB,CAAT,EAAkBC,CAA7BQ;AAAAA,UAAAA;;;;UAAoB,mBAAI,GAAJ;;UAAS,mBAAI,GAAJ;UAC3BT,IArDJ,CAAA,QAAAQ,CAAAA,YAqDIR,CArDJQ,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAqDUnB,CArDV,CAAA;UAsDIY,IAtDJ,CAAA,QAAAO,CAAAA,YAsDIP,CAtDJO,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAsDUnB,CAtDV,CAAA;UAwDIoB,OAAG/B,MAAMgB,MAAAA,CAAAA,CAAMe,cAAehB,cAAOgB;QAJvCA,CAAAA,IAAAA;QAOAlC,OAAA,aAAM,MAAN,EAAW,QAAX;MAzDFA,GAAAA,WAAAA,EAAAA,IAAAA;IAFgBD,GAAAA,WAAAA,EAAAA,IAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":43372,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/canvas/gradient.rb"],"sourcesContent":["module Browser; class Canvas\n\nclass Gradient\n  include Native::Wrapper\n\n  attr_reader :context\n\n  def initialize(context, *args, &block)\n    @context = context\n\n    super(case args.length\n      when 4 then `#{@context.to_n}.createLinearGradient.apply(self, args)`\n      when 6 then `#{@context.to_n}.createRadialGradient.apply(self, args)`\n      else raise ArgumentError, \"don't know where to dispatch\"\n    end)\n\n    instance_eval(&block)\n  end\n\n  def add(position, color)\n    `#{@context.to_n}.addColorStop(position, color)`\n\n    self\n  end\nend\n\nend; end\n"],"names":["<top (required)>","<module:Browser>","<class:Canvas>","<class:Gradient>","self","include","Native::Wrapper","Native","attr_reader","initialize","context","@context","4","$ret_or_1","args","length","to_n","6","raise","ArgumentError","instance_eval","block","to_proc","add","position","color"],"mappings":"AAAAA,0DAAAA;EAAAA;;EAAAA;EAAAA,OAAAC;EAAAA;;IAAAA;;IAAgBA,OAAAC;IAAAA;;MAAAA;;MAEhBA,OAAAC;MAAAA;;QAAAA;;AAAAA;;QACEC,IAAAC,SAAAA,CAAQC,IAAAC,YAAAD,YAARD;QAEAD,IAAAI,aAAAA,CAAY,SAAZA;;AAEAC,QAAAA,0BAAAA,sBAAeC,OAAD,EAPhB,EAOED;AAAAA,UAAAA;;UAAAA;;;;UAPF;;UAO0B;UACtBE,eAAWD;UAEX,OAAAN,IAAA,EAAA,0DAAA,cAAA,EAAA,CACE,CAAA,QAAKQ,CAAL,EADIC,CAAAA,YAAKC,IAAIC,QAAAA,CAAAA,CAATF,CACJ,CAAA,GAAA,CAAeF,YAAQK,MAAAA,CAAAA,CAAMP,uCAA7B,IACA,CAAA,QAAKQ,CAAL,EAZN,SAYM,CAAA,GAAA,CAAeN,YAAQK,MAAAA,CAAAA,CAAMP,uCAA7B,IAAA,CACKL,IAAAc,OAAAA,CAAMC,mBAAN,EAAqBV,8BAArBS,CADL,CAAA,CADA,CADF,CAAA,EAAA,IAAA;UAMAT,OAAAW,MAAAhB,IAAAgB,iBAAAA,EAAAA,EAAAA,EAAeC,KAADC,SAAAA,CAAAA,CAAdF;QATFX,CAAAA,IAAAA;QAYAN,OAAAoB,mBAAAA,eAAQC,QAAD,EAAWC,KAAlBF;AAAAA,UAAAA;;;UACKZ,YAAQK,MAAAA,CAAAA,CAAMO;UAEjBA,OAAAnB;QAHFmB,CAAAA,GAAAA;MAjBFpB,GAAAA,WAAAA,EAAAA,IAAAA;IAFgBD,GAAAA,WAAAA,EAAAA,IAAAA;EAAhBD,GAAAA,WAAAA;AAAAD;"}},{"offset":{"line":43422,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/canvas.rb"],"sourcesContent":["require 'browser/canvas/style'\nrequire 'browser/canvas/text'\nrequire 'browser/canvas/data'\nrequire 'browser/canvas/gradient'\n\nmodule Browser\n\nclass Canvas\n  include Native::Wrapper\n\n  attr_reader :element, :style, :text\n\n  def initialize(*args)\n    if DOM::Element === args.first\n      element = args.shift\n\n      if DOM::Element::Image === element\n        @image   = element\n      else\n        @element = element\n      end\n    elsif Canvas === args.first\n      @image = args.first\n    end\n\n    unless @element\n      @element = $document.create_element('canvas')\n\n      if @image\n        @element[:width]  = @image.width\n        @element[:height] = @image.height\n      else\n        @element[:width]  = args.shift\n        @element[:height] = args.shift\n      end\n    end\n\n    if @element.node_name != 'CANVAS'\n      raise ArgumentError, \"the element isn't a <canvas> element\"\n    end\n\n    super(`#{@element.to_n}.getContext('2d')`)\n\n    @style = Style.new(self)\n    @text  = Text.new(self)\n\n    if @image\n      draw_image(@image)\n    end\n  end\n\n  def width\n    @element[:width].to_i\n  end\n\n  def height\n    @element[:height].to_i\n  end\n\n  def width=(new_width)\n    @element[:width] = new_width.to_i\n  end\n\n  def height=(new_height)\n    @element[:height] = new_height.to_i\n  end\n\n  def append_to(parent)\n    @element.append_to(parent)\n  end\n\n  def load(path)\n    promise = Promise.new\n    image   = $document.create_element('img')\n\n    image.on :load do\n      promise.resolve(image)\n    end\n\n    image[:src] = path\n\n    promise\n  end\n\n  def data(x = nil, y = nil, width = nil, height = nil)\n    x      ||= 0\n    y      ||= 0\n    width  ||= self.width\n    height ||= self.height\n\n    Data.new(self, x, y, width, height)\n  end\n\n  def pattern(image, type = :repeat)\n    `#@native.createPattern(#{DOM(image).to_n}, type)`\n  end\n\n  def gradient(*args, &block)\n    Gradient.new(self, *args, &block)\n  end\n\n  def clear(x = nil, y = nil, width = nil, height = nil)\n    x      ||= 0\n    y      ||= 0\n    width  ||= self.width\n    height ||= self.height\n\n    `#@native.clearRect(x, y, width, height)`\n  end\n\n  def begin\n    `#@native.beginPath()`\n\n    self\n  end\n\n  def close\n    `#@native.closePath()`\n\n    self\n  end\n\n  def save\n    `#@native.save()`\n\n    self\n  end\n\n  def restore\n    `#@native.restore()`\n\n    self\n  end\n\n  def move_to(x, y)\n    `#@native.moveTo(x, y)`\n\n    self\n  end\n\n  alias move move_to\n\n  def line_to(x, y)\n    `#@native.lineTo(x, y)`\n\n    self\n  end\n\n  def line(x1, y1, x2, y2)\n    move_to x1, y1\n    line_to x2, y2\n  end\n\n  def rect(x, y, width, height)\n    `#@native.rect(x, y, width, height)`\n\n    self\n  end\n\n  def arc(x, y, radius, angle, clockwise = false)\n    `#@native.arc(x, y, radius, #{angle[:start]}, #{angle[:end]}, !clockwise)`\n\n    self\n  end\n\n  def quadratic_curve_to(cp1x, cp1y, x, y)\n    `#@native.quadraticCurveTo(cp1x, cp1y, x, y)`\n\n    self\n  end\n\n  def bezier_curve_to(cp1x, cp1y, cp2x, cp2y, x, y)\n    `#@native.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)`\n\n    self\n  end\n\n  def curve_to(*args)\n    case args.length\n    when 4 then quadratic_curve_to(*args)\n    when 6 then bezier_curve_to(*args)\n\n    else raise ArgumentError, \"don't know where to dispatch\"\n    end\n\n    self\n  end\n\n  def draw_image(image, *args)\n    if Canvas === image\n      image = image.element\n    else\n      image = DOM(image)\n    end\n\n    if args.first.is_a?(Hash)\n      source, destination = args\n\n      `#@native.drawImage(#{image.to_n}, #{source[:x]}, #{source[:y]}, #{source[:width]}, #{source[:height]}, #{destination[:x]}, #{destination[:y]}, #{destination[:width]}, #{destination[:height]})`\n    else\n      case args.length\n      when 0\n        `#@native.drawImage(#{image.to_n}, 0, 0)`\n\n      when 2\n        `#@native.drawImage(#{image.to_n}, #{args[0]}, #{args[1]})`\n\n      when 4\n        `#@native.drawImage(#{image.to_n}, #{args[0]}, #{args[1]}, #{args[2]}, #{args[3]})`\n      end\n    end\n\n    self\n  end\n\n  def translate(x, y, &block)\n    if block\n      save\n\n      `#@native.translate(x, y)`\n\n      instance_eval(&block)\n\n      restore\n    else\n      `#@native.translate(x, y)`\n    end\n\n    self\n  end\n\n  def rotate(angle, &block)\n    if block\n      save\n\n      `#@native.rotate(angle)`\n\n      instance_eval(&block)\n\n      restore\n    else\n      `#@native.rotate(angle)`\n    end\n\n    self\n  end\n\n  def scale(x, y, &block)\n    if block\n      save\n\n      `#@native.scale(x, y)`\n\n      instance_eval(&block)\n\n      restore\n    else\n      `#@native.scale(x, y)`\n    end\n\n    self\n  end\n\n  def transform(m11, m12, m21, m22, dx, dy, &block)\n    if block\n      save\n\n      `#@native.transform(m11, m12, m21, m22, dx, dy)`\n\n      instance_eval(&block)\n\n      restore\n    else\n      `#@native.transform(m11, m12, m21, m22, dx, dy)`\n    end\n\n    self\n  end\n\n  def path(&block)\n    `#@native.beginPath()`\n\n    instance_eval(&block)\n\n    `#@native.closePath()`\n\n    self\n  end\n\n  def fill(&block)\n    path(&block) if block\n\n    `#@native.fill()`\n\n    self\n  end\n\n  def stroke(&block)\n    path(&block) if block\n\n    `#@native.stroke()`\n\n    self\n  end\n\n  def clip(&block)\n    path(&block) if block\n\n    `#@native.clip()`\n\n    self\n  end\n\n  def point_in_path?(x, y)\n    `#@native.isPointInPath(x, y)`\n  end\n\n  def to_data(type = undefined)\n    `#{@element.to_n}.toDataUrl(type)`\n  end\n\n  def to_dom(*)\n    @element\n  end\n\n  def on(*args, &block); @element.on(*args, &block); end\n  def one(*args, &block); @element.one(*args, &block); end\n  def off(*args, &block); @element.off(*args, &block); end\nend\n\nBrowser::DOM::Builder.for Canvas do |b, item|\n  item.element\nend\n\nend\n"],"names":["<top (required)>","self","require","<module:Browser>","<class:Canvas>","include","Native::Wrapper","Native","attr_reader","initialize","DOM::Element","DOM","args","first","element","shift","DOM::Element::Image","@image","@element","Canvas","$document","create_element","$writer","width","[]=","-","1","height","node_name","raise","ArgumentError","to_n","@style","Style","new","@text","Text","draw_image","[]","to_i","width=","new_width","height=","new_height","append_to","parent","load","path","promise","Promise","image","on","block in load","block (2 levels) in load","resolve","data","x","y","$ret_or_1","0","Data","pattern","type","@native","gradient","Gradient","block","to_proc","clear","begin","close","save","restore","move_to","line_to","line","x1","y1","x2","y2","rect","arc","radius","angle","clockwise","quadratic_curve_to","cp1x","cp1y","bezier_curve_to","cp2x","cp2y","curve_to","4","length","6","is_a?","Hash","source","destination","2","3","translate","instance_eval","rotate","scale","transform","m11","m12","m21","m22","dx","dy","fill","stroke","clip","point_in_path?","to_data","to_dom","one","off","for","Browser::DOM::Builder","Browser::DOM","Browser","block in <module:Browser>","b","item","block (2 levels) in <module:Browser>"],"mappings":"AAAAA,iDAAAA;EAAAA;;EAAAA;;EAAAC,IAAAC,SAAAA,CAAQF,sBAARE;EACAD,IAAAC,SAAAA,CAAQF,qBAARE;EACAD,IAAAC,SAAAA,CAAQF,qBAARE;EACAD,IAAAC,SAAAA,CAAQF,yBAARE;EAEAF,OAAAG;EAAAA;;IAAAA;;;IAEAC;IAAAA;;MAAAA;;AAAAA;;MACEH,IAAAI,SAAAA,CAAQC,IAAAC,YAAAD,YAARD;MAEAJ,IAAAO,aAAAA,CAAY,SAAZ,EAAsB,OAAtB,EAA8B,MAA9BA;;AAEAC,MAAAA,0BAAAA,sBAZF,EAYEA;AAAAA,QAAAA;AAAAA;;QAAAA;;;QAZF;;QAYiB;QACb,IAAA,QAAGC,IAAAC,SAAAD,YAAH,EAAoBE,IAAIC,OAAAA,CAAAA,CAAxB,CAAA;;UACEC,UAAUF,IAAIG,OAAAA,CAAAA;UAEd,IAAA,QAAGC,IAAAN,IAAAC,SAAAD,YAAAM,UAAH,EAA2BF,OAA3B,CAAA;YACEG,aAAWH;UADb;YAGEI,eAAWJ;UAHb;QAHF,OAQA,IAAA,QAAMK,YAAN,EAAiBP,IAAIC,OAAAA,CAAAA,CAArB,CAAA;UACEI,aAASL,IAAIC,OAAAA,CAAAA;QADf;QAIA,KAAA,QAAOK,YAAP,CAAA;;UACEA,eAAWE,eAASC,gBAAAA,CAAgBZ,QAAhBY;UAEpB,IAAA,QAAGJ,UAAH,CAAA;;;YA5BNK,UAAA,CA6BiB,OA7BjB,EA6B4BL,UAAMM,OAAAA,CAAAA,CA7BlC;YA6BgBC,MAARN,YAAQM,OAAAA,EA7BhB,MAAAF,OAAA,CA6BgBE;YA7BhBF,OAAA,CAAAG,UAAAH,OAAA,CAAAb,QAAA,CAAAgB,EAAAC,CAAAD,CAAA;;YAAAH,UAAA,CA8BiB,QA9BjB,EA8B4BL,UAAMU,QAAAA,CAAAA,CA9BlC;YA8BgBH,MAARN,YAAQM,OAAAA,EA9BhB,MAAAF,OAAA,CA8BgBE;YA9BhBF,OAAA,CAAAG,UAAAH,OAAA,CAAAb,QAAA,CAAAgB,EAAAC,CAAAD,CAAA;UA4BM;;;YA5BNH,UAAA,CAgCiB,OAhCjB,EAgC4BV,IAAIG,OAAAA,CAAAA,CAhChC;YAgCgBS,MAARN,YAAQM,OAAAA,EAhChB,MAAAF,OAAA,CAgCgBE;YAhChBF,OAAA,CAAAG,UAAAH,OAAA,CAAAb,QAAA,CAAAgB,EAAAC,CAAAD,CAAA;;YAAAH,UAAA,CAiCiB,QAjCjB,EAiC4BV,IAAIG,OAAAA,CAAAA,CAjChC;YAiCgBS,MAARN,YAAQM,OAAAA,EAjChB,MAAAF,OAAA,CAiCgBE;YAjChBF,OAAA,CAAAG,UAAAH,OAAA,CAAAb,QAAA,CAAAgB,EAAAC,CAAAD,CAAA;UA4BM;QAHF;QAYA,IAAA,OAAGP,YAAQU,WAAAA,CAAAA,CAAX,EAAyBnB,QAAzB,CAAA;UACER,IAAA4B,OAAAA,CAAMC,mBAAN,EAAqBrB,sCAArBoB;QADF;QAIA,OAAA5B,IAAA,EAAA,0DAAA,cAAA,EAAA,CAASiB,YAAQa,MAAAA,CAAAA,CAAMtB,iBAAvB,CAAA,EAAA,IAAA;QAEAuB,aAASC,WAAKC,KAAAA,CAAKjC,IAALiC;QACdC,YAASC,UAAIF,KAAAA,CAAKjC,IAALiC;QAEb,IAAA,QAAGjB,UAAH,CAAA;UACER,OAAAR,IAAAoC,YAAAA,CAAWpB,UAAXoB;QADF;UA9CJ5B,OAAA;QA8CI;MAlCFA,CAAAA,IAAAA;;AAuCAc,MAAAA,qBAAAA,iBAAAA;AAAAA,QAAAA;;QACEA,OAAAL,YAAQoB,OAAAA,CAAC,OAADA,CAAQC,MAAAA,CAAAA;MADlBhB,CAAAA,GAAAA;;AAIAI,MAAAA,sBAAAA,kBAAAA;AAAAA,QAAAA;;QACEA,OAAAT,YAAQoB,OAAAA,CAAC,QAADA,CAASC,MAAAA,CAAAA;MADnBZ,CAAAA,GAAAA;;AAIAa,MAAAA,sBAAAA,4BAAWC,SAAXD;AAAAA,QAAAA;;;QA3DFlB,UAAA,CA4Da,OA5Db,EA4DuBmB,SAASF,MAAAA,CAAAA,CA5DhC;QA4DYf,MAARN,YAAQM,OAAAA,EA5DZ,MAAAF,OAAA,CA4DYE;QA5DZgB,OAAAlB,OAAA,CAAAG,UAAAH,OAAA,CAAAkB,QAAA,CAAAf,EAAAC,CAAAD,CAAA;MA2DEe,CAAAA,GAAAA;;AAIAE,MAAAA,uBAAAA,6BAAYC,UAAZD;AAAAA,QAAAA;;;QA/DFpB,UAAA,CAgEa,QAhEb,EAgEwBqB,UAAUJ,MAAAA,CAAAA,CAhElC;QAgEYf,MAARN,YAAQM,OAAAA,EAhEZ,MAAAF,OAAA,CAgEYE;QAhEZkB,OAAApB,OAAA,CAAAG,UAAAH,OAAA,CAAAoB,QAAA,CAAAjB,EAAAC,CAAAD,CAAA;MA+DEiB,CAAAA,GAAAA;;AAIAE,MAAAA,yBAAAA,qBAAcC,MAAdD;AAAAA,QAAAA;;QACEA,OAAA1B,YAAQ0B,WAAAA,CAAWC,MAAXD;MADVA,CAAAA,GAAAA;;AAIAE,MAAAA,oBAAAA,gBAASC,IAATD;AAAAA,QAAAA;AAAAA;;;QACEE,UAAUC,aAAOf,KAAAA,CAAAA;QACjBgB,QAAU9B,eAASC,gBAAAA,CAAgByB,KAAhBzB;QAEd8B,MAALD,KAAKC,MAAAA,EAAAA,CAAI,MAAJA,CAAAA,EAALC,aAAAA;UACEC,OAAAL,OAAOM,SAAAA,CAASJ,KAATI,CADTF,CAAAA,GAAKD;;QA3ET7B,UAAA,CA+EU,KA/EV,EA+EkByB,IA/ElB;QA+ESvB,MAAL0B,KAAK1B,OAAAA,EA/ET,MAAAF,OAAA,CA+ESE;QA/ETF,OAAA,CAAAG,UAAAH,OAAA,CAAAwB,QAAA,CAAArB,EAAAC,CAAAD,CAAA;QAiFIqB,OAAAE;MAVFF,CAAAA,GAAAA;;AAaAS,MAAAA,oBAAAA,gBAASC,CAAD,EAAUC,CAAV,EAAmBlC,KAAnB,EAAgCI,MAAxC4B;AAAAA,QAAAA;;;;QAAS,mBAAI,GAAJ;;QAAS,mBAAI,GAAJ;;QAAS,2BAAQ,GAAR;;QAAa,6BAAS,GAAT;QACtCC,IArFJ,CAAA,QAAAE,CAAAA,YAqFIF,CArFJE,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAqFeC,CArFf,CAAA;QAsFIF,IAtFJ,CAAA,QAAAC,CAAAA,YAsFID,CAtFJC,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAsFeC,CAtFf,CAAA;QAuFIpC,QAvFJ,CAAA,QAAAmC,CAAAA,YAuFInC,KAvFJmC,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAuFezD,IAAIsB,OAAAA,CAAAA,CAvFnB,CAAA;QAwFII,SAxFJ,CAAA,QAAA+B,CAAAA,YAwFI/B,MAxFJ+B,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAwFezD,IAAI0B,QAAAA,CAAAA,CAxFnB,CAAA;QA0FI4B,OAAAK,UAAI1B,KAAAA,CAAKjC,IAAT,EAAeuD,CAAf,EAAkBC,CAAlB,EAAqBlC,KAArB,EAA4BI,MAAxBO;MANNqB,CAAAA,IAAAA;;AASAM,MAAAA,uBAAAA,mBAAYX,KAAD,EAAQY,IAAnBD;AAAAA,QAAAA;;;;QAAmB,yBAAO,QAAP;QACjBA,OAAEE,cAAOF,eAAiB5D,IAAAU,KAAAA,CAAIuC,KAAJvC,CAAUoB,MAAAA,CAAAA,CAAM8B;MAD5CA,CAAAA,IAAAA;;AAIAG,MAAAA,wBAAAA,oBAjGF,EAiGEA;AAAAA,QAAAA;;QAAAA;;;;QAjGF;;QAiGe;QACXA,OAAQ9B,MAAR+B,cAAQ/B,OAAAA,EAAR,CAAajC,IAAb,CAAA,QAAmB,MAACW,IAAD,CAAnB,CAAQsB,EAAmBgC,KAADC,SAAAA,CAAAA,CAAlBjC;MADV8B,CAAAA,IAAAA;;AAIAI,MAAAA,qBAAAA,iBAAUZ,CAAD,EAAUC,CAAV,EAAmBlC,KAAnB,EAAgCI,MAAzCyC;AAAAA,QAAAA;;;;QAAU,mBAAI,GAAJ;;QAAS,mBAAI,GAAJ;;QAAS,2BAAQ,GAAR;;QAAa,6BAAS,GAAT;QACvCZ,IAtGJ,CAAA,QAAAE,CAAAA,YAsGIF,CAtGJE,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAsGeC,CAtGf,CAAA;QAuGIF,IAvGJ,CAAA,QAAAC,CAAAA,YAuGID,CAvGJC,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAuGeC,CAvGf,CAAA;QAwGIpC,QAxGJ,CAAA,QAAAmC,CAAAA,YAwGInC,KAxGJmC,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAwGezD,IAAIsB,OAAAA,CAAAA,CAxGnB,CAAA;QAyGII,SAzGJ,CAAA,QAAA+B,CAAAA,YAyGI/B,MAzGJ+B,CAAA,CAAA,GAAA,CAAA,SAAA,IAAA,CAyGezD,IAAI0B,QAAAA,CAAAA,CAzGnB,CAAA;QA2GIyC,OAAEL,cAAOK;MANXA,CAAAA,IAAAA;;AASAC,MAAAA,qBAAAA,iBAAAA;AAAAA,QAAAA;;;QACIN,cAAOM;QAETA,OAAApE;MAHFoE,CAAAA,GAAAA;;AAMAC,MAAAA,qBAAAA,iBAAAA;AAAAA,QAAAA;;;QACIP,cAAOO;QAETA,OAAArE;MAHFqE,CAAAA,GAAAA;;AAMAC,MAAAA,oBAAAA,gBAAAA;AAAAA,QAAAA;;;QACIR,cAAOQ;QAETA,OAAAtE;MAHFsE,CAAAA,GAAAA;;AAMAC,MAAAA,uBAAAA,mBAAAA;AAAAA,QAAAA;;;QACIT,cAAOS;QAETA,OAAAvE;MAHFuE,CAAAA,GAAAA;;AAMAC,MAAAA,uBAAAA,mBAAYjB,CAAD,EAAIC,CAAfgB;AAAAA,QAAAA;;;QACIV,cAAOU;QAETA,OAAAxE;MAHFwE,CAAAA,GAAAA;MAMA,aAAM,MAAN,EAAW,SAAX;;AAEAC,MAAAA,uBAAAA,mBAAYlB,CAAD,EAAIC,CAAfiB;AAAAA,QAAAA;;;QACIX,cAAOW;QAETA,OAAAzE;MAHFyE,CAAAA,GAAAA;;AAMAC,MAAAA,oBAAAA,gBAASC,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAArBJ;AAAAA,QAAAA;;;QACE1E,IAAAwE,SAAAA,CAAQG,EAAR,EAAYC,EAAZJ;QACAE,OAAA1E,IAAAyE,SAAAA,CAAQI,EAAR,EAAYC,EAAZL;MAFFC,CAAAA,GAAAA;;AAKAK,MAAAA,oBAAAA,gBAASxB,CAAD,EAAIC,CAAJ,EAAOlC,KAAP,EAAcI,MAAtBqD;AAAAA,QAAAA;;;QACIjB,cAAOiB;QAETA,OAAA/E;MAHF+E,CAAAA,GAAAA;;AAMAC,MAAAA,mBAAAA,eAAQzB,CAAD,EAAIC,CAAJ,EAAOyB,MAAP,EAAeC,KAAf,EAAsBC,SAA7BH;AAAAA,QAAAA;;;;QAA6B,mCAAY,KAAZ;QACzBlB,cAAOkB,mBAAqBE,KAAK7C,OAAAA,CAAC,OAADA,CAAS2C,EAAIE,KAAK7C,OAAAA,CAAC,KAADA,CAAO2C;QAE5DA,OAAAhF;MAHFgF,CAAAA,IAAAA;;AAMAI,MAAAA,kCAAAA,8BAAuBC,IAAD,EAAOC,IAAP,EAAa/B,CAAb,EAAgBC,CAAtC4B;AAAAA,QAAAA;;;QACItB,cAAOsB;QAETA,OAAApF;MAHFoF,CAAAA,GAAAA;;AAMAG,MAAAA,+BAAAA,2BAAoBF,IAAD,EAAOC,IAAP,EAAaE,IAAb,EAAmBC,IAAnB,EAAyBlC,CAAzB,EAA4BC,CAA/C+B;AAAAA,QAAAA;;;QACIzB,cAAOyB;QAETA,OAAAvF;MAHFuF,CAAAA,GAAAA;;AAMAG,MAAAA,wBAAAA,oBAjLF,EAiLEA;AAAAA,QAAAA;;;;QAjLF;;QAiLe;QAEX,IAAA,QAAKC,CAAL,EADAlC,CAAAA,YAAK9C,IAAIiF,QAAAA,CAAAA,CAATnC,CACA,CAAA;UAAY2B,MAAApF,IAAAoF,sBAAAA,EAAmB,MAACzE,IAAD,CAAnByE;QAAZ,OACA,IAAA,QAAKS,CAAL,EApLJ,SAoLI,CAAA;UAAYN,MAAAvF,IAAAuF,mBAAAA,EAAgB,MAAC5E,IAAD,CAAhB4E;QAAZ;UAEKvF,IAAA4B,OAAAA,CAAMC,mBAAN,EAAqB6D,8BAArB9D;QAFL;QAKA8D,OAAA1F;MARF0F,CAAAA,IAAAA;;AAWAtD,MAAAA,0BAAAA,sBAAea,KAAD,EA5LhB,EA4LEb;AAAAA,QAAAA;;;;QA5LF;;QA4LwB;QACpB,IAAA,QAAGlB,YAAH,EAAc+B,KAAd,CAAA;UACEA,QAAQA,KAAKpC,SAAAA,CAAAA;QADf;UAGEoC,QAAQjD,IAAAU,KAAAA,CAAIuC,KAAJvC;QAHV;QAMA,IAAA,QAAGC,IAAIC,OAAAA,CAAAA,CAAMkF,UAAAA,CAAOC,UAAPD,CAAb,CAAA;;UACE,KAAsBnF,IAAtB,kBAAA,EAAAqF,CAAAA,SAAA,6BAAAA,CAAA,EAAQC,CAAAA,cAAR,6BAAQA,CAAR;UAEEnC,cAAO1B,WAAaa,KAAKnB,MAAAA,CAAAA,CAAMM,EAAI4D,MAAM3D,OAAAA,CAAC,GAADA,CAAKD,EAAI4D,MAAM3D,OAAAA,CAAC,GAADA,CAAKD,EAAI4D,MAAM3D,OAAAA,CAAC,OAADA,CAASD,EAAI4D,MAAM3D,OAAAA,CAAC,QAADA,CAAUD,EAAI6D,WAAW5D,OAAAA,CAAC,GAADA,CAAKD,EAAI6D,WAAW5D,OAAAA,CAAC,GAADA,CAAKD,EAAI6D,WAAW5D,OAAAA,CAAC,OAADA,CAASD,EAAI6D,WAAW5D,OAAAA,CAAC,QAADA,CAAUD;QAHjM,OAME,IAAA,QAAKsB,CAAL,EADAD,CAAAA,YAAK9C,IAAIiF,QAAAA,CAAAA,CAATnC,CACA,CAAA;UACIK,cAAO1B,WAAaa,KAAKnB,MAAAA,CAAAA,CAAMM;QADnC,OAGA,IAAA,QAAK8D,CAAL,EA5MN,SA4MM,CAAA;UACIpC,cAAO1B,WAAaa,KAAKnB,MAAAA,CAAAA,CAAMM,EAAIzB,IAAI0B,OAAAA,CAACqB,CAADrB,CAAID,EAAIzB,IAAI0B,OAAAA,CAACZ,CAADY,CAAID;QAD3D,OAGA,IAAA,QAAKuD,CAAL,EA/MN,SA+MM,CAAA;UACI7B,cAAO1B,WAAaa,KAAKnB,MAAAA,CAAAA,CAAMM,EAAIzB,IAAI0B,OAAAA,CAACqB,CAADrB,CAAID,EAAIzB,IAAI0B,OAAAA,CAACZ,CAADY,CAAID,EAAIzB,IAAI0B,OAAAA,CAAC6D,CAAD7D,CAAID,EAAIzB,IAAI0B,OAAAA,CAAC8D,CAAD9D,CAAID;QADnF;UAPA;QAOA;QAKFA,OAAApC;MAxBFoC,CAAAA,IAAAA;;AA2BAgE,MAAAA,yBAAAA,qBAAc7C,CAAD,EAAIC,CAAjB4C;AAAAA,QAAAA;;QAAAA;;;QACE,IAAA,QAAGnC,KAAH,CAAA;;UACEjE,IAAAsE,MAAAA,CAAAA;UAEER,cAAOsC;UAETC,MAAArG,IAAAqG,iBAAAA,EAAAA,EAAAA,EAAepC,KAADC,SAAAA,CAAAA,CAAdmC;UAEArG,IAAAuE,SAAAA,CAAAA;QAPF;UASIT,cAAOsC;QATX;QAYAA,OAAApG;MAbFoG,CAAAA,GAAAA;;AAgBAE,MAAAA,sBAAAA,kBAAWpB,KAAXoB;AAAAA,QAAAA;;QAAAA;;;QACE,IAAA,QAAGrC,KAAH,CAAA;;UACEjE,IAAAsE,MAAAA,CAAAA;UAEER,cAAOwC;UAETD,MAAArG,IAAAqG,iBAAAA,EAAAA,EAAAA,EAAepC,KAADC,SAAAA,CAAAA,CAAdmC;UAEArG,IAAAuE,SAAAA,CAAAA;QAPF;UASIT,cAAOwC;QATX;QAYAA,OAAAtG;MAbFsG,CAAAA,GAAAA;;AAgBAC,MAAAA,qBAAAA,iBAAUhD,CAAD,EAAIC,CAAb+C;AAAAA,QAAAA;;QAAAA;;;QACE,IAAA,QAAGtC,KAAH,CAAA;;UACEjE,IAAAsE,MAAAA,CAAAA;UAEER,cAAOyC;UAETF,MAAArG,IAAAqG,iBAAAA,EAAAA,EAAAA,EAAepC,KAADC,SAAAA,CAAAA,CAAdmC;UAEArG,IAAAuE,SAAAA,CAAAA;QAPF;UASIT,cAAOyC;QATX;QAYAA,OAAAvG;MAbFuG,CAAAA,GAAAA;;AAgBAC,MAAAA,yBAAAA,qBAAcC,GAAD,EAAMC,GAAN,EAAWC,GAAX,EAAgBC,GAAhB,EAAqBC,EAArB,EAAyBC,EAAtCN;AAAAA,QAAAA;;QAAAA;;;QACE,IAAA,QAAGvC,KAAH,CAAA;;UACEjE,IAAAsE,MAAAA,CAAAA;UAEER,cAAO0C;UAETH,MAAArG,IAAAqG,iBAAAA,EAAAA,EAAAA,EAAepC,KAADC,SAAAA,CAAAA,CAAdmC;UAEArG,IAAAuE,SAAAA,CAAAA;QAPF;UASIT,cAAO0C;QATX;QAYAA,OAAAxG;MAbFwG,CAAAA,GAAAA;;AAgBA1D,MAAAA,oBAAAA,gBAAAA;AAAAA,QAAAA;;QAAAA;;;QACIgB,cAAOhB;QAETuD,MAAArG,IAAAqG,iBAAAA,EAAAA,EAAAA,EAAepC,KAADC,SAAAA,CAAAA,CAAdmC;QAEEvC,cAAOhB;QAETA,OAAA9C;MAPF8C,CAAAA,GAAAA;;AAUAiE,MAAAA,oBAAAA,gBAAAA;AAAAA,QAAAA;;QAAAA;;;QACE,IAAA,QAAgB9C,KAAhB,CAAA;UAAAnB,MAAA9C,IAAA8C,QAAAA,EAAAA,EAAAA,EAAMmB,KAADC,SAAAA,CAAAA,CAALpB;QAAA;QAEEgB,cAAOiD;QAETA,OAAA/G;MALF+G,CAAAA,GAAAA;;AAQAC,MAAAA,sBAAAA,kBAAAA;AAAAA,QAAAA;;QAAAA;;;QACE,IAAA,QAAgB/C,KAAhB,CAAA;UAAAnB,MAAA9C,IAAA8C,QAAAA,EAAAA,EAAAA,EAAMmB,KAADC,SAAAA,CAAAA,CAALpB;QAAA;QAEEgB,cAAOkD;QAETA,OAAAhH;MALFgH,CAAAA,GAAAA;;AAQAC,MAAAA,oBAAAA,gBAAAA;AAAAA,QAAAA;;QAAAA;;;QACE,IAAA,QAAgBhD,KAAhB,CAAA;UAAAnB,MAAA9C,IAAA8C,QAAAA,EAAAA,EAAAA,EAAMmB,KAADC,SAAAA,CAAAA,CAALpB;QAAA;QAEEgB,cAAOmD;QAETA,OAAAjH;MALFiH,CAAAA,GAAAA;;AAQAC,MAAAA,8BAAAA,sCAAmB3D,CAAD,EAAIC,CAAtB0D;AAAAA,QAAAA;;QACEA,OAAEpD,cAAOoD;MADXA,CAAAA,GAAAA;;AAIAC,MAAAA,uBAAAA,mBAAYtD,IAAZsD;AAAAA,QAAAA;;;;QACEA,OAAGlG,YAAQa,MAAAA,CAAAA,CAAMqF;MADnBA,CAAAA,IAAAA;;AAIAC,MAAAA,sBAAAA,kBAjUF,EAiUEA;AAAAA,QAAAA;;;;QAjUF;;QAiUa;QACTA,OAAAnG;MADFmG,CAAAA,IAAAA;;AAIAlE,MAAAA,kBAAAA,cArUF,EAqUEA;AAAAA,QAAAA;;QAAAA;;;;QArUF;;QAqUS;QAAgBA,OAAQA,MAARjC,YAAQiC,MAAAA,EAAI,MAACvC,IAAD,CAAJuC,EAAYe,KAADC,SAAAA,CAAAA,CAAXhB;MAA/BA,CAAAA,IAAAA;;AACAmE,MAAAA,mBAAAA,eAtUF,EAsUEA;AAAAA,QAAAA;;QAAAA;;;;QAtUF;;QAsUU;QAAgBA,OAAQA,MAARpG,YAAQoG,OAAAA,EAAK,MAAC1G,IAAD,CAAL0G,EAAapD,KAADC,SAAAA,CAAAA,CAAZmD;MAAhCA,CAAAA,IAAAA;MACAlH,OAAAmH,mBAAAA,eAvUF,EAuUEA;AAAAA,QAAAA;;QAAAA;;;;QAvUF;;QAuUU;QAAgBA,OAAQA,MAARrG,YAAQqG,OAAAA,EAAK,MAAC3G,IAAD,CAAL2G,EAAarD,KAADC,SAAAA,CAAAA,CAAZoD;MAAhCA,CAAAA,IAAAA;IAhUFnH,GAAAA,WAAAA,EAAAA,IAAAA;IAmUAD,OAAqBqH,MAArBC,IAAAC,IAAAC,aAAAD,QAAAD,YAAqBD,OAAAA,EAAAA,CAAKrG,YAALqG,CAAAA,EAArBI,oBAAqCC,CAAD,EAAIC,IAAxCF;;;MAAqC;;MAAG;MACtCG,OAAAD,IAAIhH,SAAAA,CAAAA,EADN8G,CAAAA,GAAqBJ;EArUrBrH,GAAAA,WAAAA;AALAH;"}},{"offset":{"line":43952,"column":0},"map":{"version":3,"sourceRoot":"","sources":["browser/setup/full.rb"],"sourcesContent":["# browser/setup/full - a full set of requires to provide all features at once\n\nrequire 'paggio'\n\nrequire 'browser/setup/large'\n\nrequire 'browser/event/all'\n\nrequire 'browser/dom/builder'\nrequire 'browser/dom/mutation_observer'\nrequire 'browser/dom/element/custom'\n\nrequire 'browser/canvas'\n"],"names":["<top (required)>","self","require"],"mappings":"AAAAA,qDAAAA;EAAAA;;EAAAA;;EAEAC,IAAAC,SAAAA,CAAQF,QAARE;EAEAD,IAAAC,SAAAA,CAAQF,qBAARE;EAEAD,IAAAC,SAAAA,CAAQF,mBAARE;EAEAD,IAAAC,SAAAA,CAAQF,qBAARE;EACAD,IAAAC,SAAAA,CAAQF,+BAARE;EACAD,IAAAC,SAAAA,CAAQF,4BAARE;EAEAF,OAAAC,IAAAC,SAAAA,CAAQF,gBAARE;AAZAF;"}},{"offset":{"line":43966,"column":0},"map":{"version":3,"sourceRoot":"","sources":["./app/javascript/opal_lib.js.rb"],"sourcesContent":["require 'opal'\nrequire 'native'\nrequire 'promise'\nrequire 'browser/setup/full'\n"],"names":["<main>","self","require"],"mappings":"AAAAA,2BAAAA;EAAAA;;EAAAA;;EAAAC,IAAAC,SAAAA,CAAQF,MAARE;EACAD,IAAAC,SAAAA,CAAQF,QAARE;EACAD,IAAAC,SAAAA,CAAQF,SAARE;EACAF,OAAAC,IAAAC,SAAAA,CAAQF,oBAARE;AAHAF;"}}]}